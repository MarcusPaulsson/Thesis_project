{
    "4": "```python\ndef is_lucky(hh, mm):\n    return '7' in f\"{hh:02d}{mm:02d}\"\n\ndef minutes_to_time(hh, mm, minutes):\n    mm += minutes\n    hh += mm // 60\n    mm %= 60\n    hh %= 24\n    return hh, mm\n\nx = int(input())\nhh, mm = map(int, input().split())\n\ny = 0\nwhile not is_lucky(hh, mm):\n    y += 1\n    hh, mm = minutes_to_time(hh, mm, -x)\n\nprint(y)\n```",
    "7": "```python\ndef find_empty_day(n, m):\n    day = 0\n    total_eaten = 0\n    \n    while n > 0:\n        day += 1\n        total_eaten += day\n        \n        # Add grains to the barn\n        n += m\n        \n        # If the barn exceeds its capacity, it stays full\n        if n > m:\n            n = min(n, m)\n        \n        # Sparrows eat grains\n        n -= total_eaten\n        \n    return day\n\n# Read input\nn, m = map(int, input().split())\nprint(find_empty_day(n, m))\n```",
    "3": "```python\ndef max_painted_sections(n, q, painters):\n    def painted_count(excluded):\n        painted = [0] * (n + 1)\n        for i in range(q):\n            if i != excluded:\n                l, r = painters[i]\n                for j in range(l, r + 1):\n                    painted[j] = 1\n        return sum(painted)\n\n    max_sections = 0\n    for i in range(q):\n        max_sections = max(max_sections, painted_count(i))\n    \n    return max_sections\n\n# Input reading\nn, q = map(int, input().split())\npainters = [tuple(map(int, input().split())) for _ in range(q)]\n\n# Output the result\nprint(max_painted_sections(n, q, painters))\n```",
    "0": "```python\ndef max_acordion_length(s):\n    n = len(s)\n    left_bracket = -1\n    right_bracket = -1\n    colon_count = 0\n    pipe_count = 0\n\n    for i in range(n):\n        if s[i] == '[':\n            left_bracket = i\n        elif s[i] == ']':\n            right_bracket = i\n            if left_bracket != -1 and right_bracket > left_bracket:\n                # Count colons and pipes between the brackets\n                for j in range(left_bracket + 1, right_bracket):\n                    if s[j] == ':':\n                        colon_count += 1\n                    elif s[j] == '|':\n                        pipe_count += 1\n\n    if left_bracket == -1 or right_bracket == -1 or colon_count < 2:\n        return -1\n\n    # Maximum length of accordion\n    return 4 + pipe_count\n\ns = input().strip()\nprint(max_acordion_length(s))\n```",
    "2": "```python\nn = int(input())\n\ndef next_lucky_year(year):\n    while True:\n        year += 1\n        if str(year).count('0') == len(str(year)) - 1 and str(year).count('1') + str(year).count('2') + str(year).count('3') + str(year).count('4') + str(year).count('5') + str(year).count('6') + str(year).count('7') + str(year).count('8') + str(year).count('9') == 1:\n            return year\n\nnext_year = next_lucky_year(n)\nprint(next_year - n)\n```",
    "5": "```python\nn, pos, l, r = map(int, input().split())\n\nif l == 1 and r == n:\n    print(0)\nelse:\n    moves = 0\n    if pos < l:\n        moves += (l - pos) + 1  # Move to l and close left\n    elif pos > r:\n        moves += (pos - r) + 1  # Move to r and close right\n    else:\n        # Move to l and close left, then move to r and close right\n        moves += min(pos - l, r - pos) + (r - l + 1) + 2  # Move to l and r, close both sides\n\n    print(moves)\n```",
    "10": "```python\nn = int(input())\n\n# Calculate minimum days off\nmin_days_off = 0 if n < 5 else (n // 7) * 2 + min(2, n % 7)\n\n# Calculate maximum days off\nmax_days_off = min(2, n)\n\nprint(min_days_off, max_days_off)\n```",
    "1": "```python\ndef max_digit_sum(x):\n    str_x = str(x)\n    n = len(str_x)\n    \n    # Start with the maximum possible number which is x itself\n    max_num = x\n    max_sum = sum(int(d) for d in str_x)\n    \n    # Check numbers by reducing digits\n    for i in range(n):\n        if str_x[i] == '0':\n            continue\n        \n        # Create a new number by reducing the current digit and setting all following digits to 9\n        new_num = str_x[:i] + str(int(str_x[i]) - 1) + '9' * (n - i - 1)\n        new_num = int(new_num)\n        \n        if new_num > 0 and new_num <= x:\n            new_sum = sum(int(d) for d in str(new_num))\n            if new_sum > max_sum or (new_sum == max_sum and new_num > max_num):\n                max_num = new_num\n                max_sum = new_sum\n    \n    return max_num\n\nx = int(input())\nprint(max_digit_sum(x))\n```",
    "6": "```python\ndef min_blows_to_defeat(t, queries):\n    results = []\n    for query in queries:\n        n, x, blows = query\n        min_blows = float('inf')\n        \n        for d, h in blows:\n            if d >= x:\n                min_blows = min(min_blows, 1)\n            else:\n                # Calculate the effective heads after one blow\n                effective_heads = x - d + h\n                if effective_heads > 0:\n                    # Calculate the number of blows needed\n                    blows_needed = (effective_heads + (d - h) - 1) // (d - h) + 1\n                    min_blows = min(min_blows, blows_needed)\n        \n        results.append(min_blows if min_blows != float('inf') else -1)\n    \n    return results\n\n# Input reading and function calling\nt = int(input())\nqueries = []\nfor _ in range(t):\n    n, x = map(int, input().split())\n    blows = [tuple(map(int, input().split())) for _ in range(n)]\n    queries.append((n, x, blows))\n\nresults = min_blows_to_defeat(t, queries)\nfor result in results:\n    print(result)\n```",
    "15": "```python\na, b, c = map(int, input().split())\n\nif c == 0:\n    if a == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    if (b - a) % c == 0 and (b - a) // c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
    "16": "```python\ncnt1 = int(input())\ncnt2 = int(input())\ncnt3 = int(input())\ncnt4 = int(input())\n\n# Check if it's possible to form a regular bracket sequence\nif cnt1 + cnt2 >= cnt3 + cnt4 and cnt1 <= cnt3 + 1:\n    print(1)\nelse:\n    print(0)\n```",
    "11": "```python\ndef max_chocolates(n, a, b, p, q):\n    count_a = n // a\n    count_b = n // b\n    count_ab = n // (a * b)\n\n    # Calculate chocolates if we prioritize Red tiles\n    chocolates_red_first = (count_a - count_ab) * p + (count_b - count_ab) * q\n\n    # Calculate chocolates if we prioritize Blue tiles\n    chocolates_blue_first = (count_b - count_ab) * q + (count_a - count_ab) * p\n\n    # Return the maximum of both strategies\n    return max(chocolates_red_first, chocolates_blue_first)\n\n# Example usage:\n# n, a, b, p, q = map(int, input().split())\n# print(max_chocolates(n, a, b, p, q))\n```",
    "9": "```python\nd = int(input())\nn, m = map(int, input().split())\n\nsofas = []\nfor i in range(d):\n    x1, y1, x2, y2 = map(int, input().split())\n    sofas.append((x1, y1, x2, y2))\n\ncnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\ndef count_sofas(sofa, sofas):\n    x1, y1, x2, y2 = sofa\n    left = right = top = bottom = 0\n    \n    for other in sofas:\n        if other == sofa:\n            continue\n        ox1, oy1, ox2, oy2 = other\n        if (x1 < ox1 and x2 < ox1) or (x1 < ox2 and x2 < ox2):\n            left += 1\n        if (x1 > ox1 and x2 > ox1) or (x1 > ox2 and x2 > ox2):\n            right += 1\n        if (y1 < oy1 and y2 < oy1) or (y1 < oy2 and y2 < oy2):\n            top += 1\n        if (y1 > oy1 and y2 > oy1) or (y1 > oy2 and y2 > oy2):\n            bottom += 1\n            \n    return left, right, top, bottom\n\nfor i in range(d):\n    left, right, top, bottom = count_sofas(sofas[i], sofas)\n    if (left == cnt_l and right == cnt_r and top == cnt_t and bottom == cnt_b):\n        print(i + 1)\n        break\nelse:\n    print(-1)\n```",
    "17": "```python\nn, k, t = map(int, input().split())\n\nif t <= k:\n    print(t)\nelif t <= n:\n    print(k)\nelse:\n    print(n + k - t)\n```",
    "14": "```python\ndef restore_stack_sortable_permutation(n, k, p):\n    used = set(p)\n    remaining = [i for i in range(1, n + 1) if i not in used]\n    s = []\n    result = p[:]\n    \n    for i in range(k):\n        while s and (not remaining or s[-1] < remaining[-1]):\n            result.append(s.pop())\n        s.append(p[i])\n    \n    while s:\n        result.append(s.pop())\n    \n    while remaining:\n        if s and s[-1] < remaining[-1]:\n            print(-1)\n            return\n        result.append(remaining.pop())\n    \n    print(\" \".join(map(str, result)))\n\n# Example usage:\n# n, k = map(int, input().split())\n# p = list(map(int, input().split()))\n# restore_stack_sortable_permutation(n, k, p)\n```",
    "18": "```python\ndef minimal_lexicographic_string(s):\n    t = []\n    u = []\n    \n    for char in s:\n        t.append(char)\n        while t and (not u or t[-1] <= u[-1]):\n            u.append(t.pop())\n    \n    return ''.join(u)\n\ns = input().strip()\nprint(minimal_lexicographic_string(s))\n```",
    "12": "```python\ndef max_beauty_after_swap(n, trophies):\n    max_length = 0\n    current_length = 0\n    segments = []\n\n    # Count segments of golden trophies\n    for trophy in trophies:\n        if trophy == 'G':\n            current_length += 1\n        else:\n            if current_length > 0:\n                segments.append(current_length)\n                max_length = max(max_length, current_length)\n            current_length = 0\n    if current_length > 0:\n        segments.append(current_length)\n        max_length = max(max_length, current_length)\n\n    # If there are no golden trophies\n    if max_length == 0:\n        return 0\n\n    # Calculate the maximum length after one swap\n    if len(segments) == 1:\n        return max_length  # Only one segment of G's\n\n    max_possible_length = max_length\n    for i in range(len(segments) - 1):\n        # Check if we can connect two segments by swapping one S\n        max_possible_length = max(max_possible_length, segments[i] + segments[i + 1])\n\n    return max_possible_length\n\n# Input reading\nn = int(input())\ntrophies = input().strip()\nprint(max_beauty_after_swap(n, trophies))\n```",
    "21": "```python\nn = int(input())\na = list(map(int, input().split()))\n\nmin_index = a.index(1)\nmax_index = a.index(n)\n\n# Calculate the current distance\ncurrent_distance = abs(min_index - max_index)\n\n# Calculate the maximum possible distance after one swap\nmax_distance = max(min_index, max_index, n - 1 - min_index, n - 1 - max_index)\n\nprint(max_distance)\n```",
    "8": "```python\ndef min_tiles_to_draw(tiles):\n    from collections import defaultdict\n\n    # Parse the input tiles\n    hand = [tile for tile in tiles.split()]\n    \n    # Check for koutsu (triplet)\n    counts = defaultdict(int)\n    for tile in hand:\n        counts[tile] += 1\n    \n    # Check for koutsu\n    if any(count == 3 for count in counts.values()):\n        return 0\n    \n    # Check for shuntsu (sequence)\n    suits = defaultdict(list)\n    for tile in hand:\n        num = int(tile[0])\n        suit = tile[1]\n        suits[suit].append(num)\n    \n    # Check for existing shuntsu\n    for suit, numbers in suits.items():\n        numbers.sort()\n        for i in range(len(numbers) - 2):\n            if numbers[i] + 1 == numbers[i + 1] and numbers[i] + 2 == numbers[i + 2]:\n                return 0\n    \n    # If no mentsu, check how many tiles needed\n    needed = 2  # Start with the maximum needed\n    for suit, numbers in suits.items():\n        numbers.sort()\n        for i in range(len(numbers)):\n            # Check for possible shuntsu with one draw\n            if i > 0 and numbers[i] - 1 == numbers[i - 1]:\n                needed = min(needed, 1)  # Can complete with one draw\n            if i < len(numbers) - 1 and numbers[i] + 1 == numbers[i + 1]:\n                needed = min(needed, 1)  # Can complete with one draw\n            if i < len(numbers) - 1 and numbers[i] + 2 == numbers[i + 1]:\n                needed = min(needed, 1)  # Can complete with one draw\n            if i == 0 or (i > 0 and numbers[i] - 1 > numbers[i - 1] + 1):\n                needed = min(needed, 2)  # Need two draws to complete a new sequence\n    \n    return needed\n\n# Read input and output result\ntiles = input().strip()\nprint(min_tiles_to_draw(tiles))\n```",
    "20": "```python\ndef is_palindrome(time):\n    return time == time[::-1]\n\ndef next_palindrome_time(hh, mm):\n    minutes_passed = 0\n    while True:\n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        minutes_passed += 1\n        time_str = f\"{hh:02}:{mm:02}\"\n        if is_palindrome(time_str):\n            return minutes_passed\n\ntime_input = input().strip()\nhh, mm = map(int, time_input.split(':'))\nresult = next_palindrome_time(hh, mm)\nprint(result)\n```",
    "23": "```python\ndef max_permutation_not_exceeding(a, b):\n    from itertools import permutations\n    \n    a_str = str(a)\n    b_str = str(b)\n    \n    # Generate all unique permutations of the digits of a\n    permuted_numbers = set(int(''.join(p)) for p in permutations(a_str))\n    \n    # Filter out numbers that are greater than b and have the same length as a\n    valid_numbers = [num for num in permuted_numbers if num <= b and len(str(num)) == len(a_str)]\n    \n    # Return the maximum valid number\n    return max(valid_numbers)\n\n# Input reading\na = int(input().strip())\nb = int(input().strip())\n\n# Output the result\nprint(max_permutation_not_exceeding(a, b))\n```",
    "19": "```python\ndef check_records(test_cases):\n    results = []\n    for case in test_cases:\n        n = case[0]\n        records = case[1]\n        valid = True\n        \n        for i in range(n):\n            p_i, c_i = records[i]\n            if i > 0:\n                p_prev, c_prev = records[i - 1]\n                if p_i < p_prev or c_i < c_prev or c_i > p_i:\n                    valid = False\n                    break\n                if p_i - p_prev < c_i - c_prev:\n                    valid = False\n                    break\n        \n        results.append(\"YES\" if valid else \"NO\")\n    \n    return results\n\n# Read input\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    n = int(input())\n    records = [tuple(map(int, input().split())) for _ in range(n)]\n    test_cases.append((n, records))\n\n# Check records and print results\nresults = check_records(test_cases)\nfor result in results:\n    print(result)\n```",
    "13": "```python\nfrom collections import deque, defaultdict\n\ndef find_course_order(n, k, main_courses, dependencies):\n    indegree = [0] * (n + 1)\n    graph = defaultdict(list)\n    \n    # Build the graph and indegree array\n    for i in range(1, n + 1):\n        for dep in dependencies[i - 1]:\n            graph[dep].append(i)\n            indegree[i] += 1\n    \n    # Queue for courses that can be taken (indegree 0)\n    queue = deque()\n    for course in range(1, n + 1):\n        if indegree[course] == 0:\n            queue.append(course)\n    \n    order = []\n    taken_courses = set()\n    \n    while queue:\n        course = queue.popleft()\n        order.append(course)\n        taken_courses.add(course)\n        \n        for next_course in graph[course]:\n            indegree[next_course] -= 1\n            if indegree[next_course] == 0:\n                queue.append(next_course)\n    \n    # Check if all main courses can be taken\n    for main_course in main_courses:\n        if main_course not in taken_courses:\n            return -1\n    \n    # Collect the minimum courses needed to take\n    result = []\n    for course in order:\n        if course in main_courses or any(dep in taken_courses for dep in dependencies[course - 1]):\n            result.append(course)\n    \n    return len(result), result\n\n# Input reading\nn, k = map(int, input().split())\nmain_courses = list(map(int, input().split()))\ndependencies = [list(map(int, input().split()[1:])) for _ in range(n)]\n\n# Get the result\nresult = find_course_order(n, k, main_courses, dependencies)\n\n# Output the result\nif result == -1:\n    print(-1)\nelse:\n    print(result[0])\n    print(' '.join(map(str, result[1])))\n```",
    "27": "```python\nn = int(input())\ns = input()\n\nmin_operations = n  # Start with the assumption that we type all characters one by one\n\nfor i in range(1, n):\n    if s[:i] == s[i:i+i]:  # Check if the prefix can be copied\n        min_operations = min(min_operations, i + 1 + (n - 2 * i))\n\nprint(min_operations)\n```",
    "22": "```python\ndef is_s_palindrome(s):\n    mirror = {'A': 'A', 'B': ' ', 'C': ' ', 'D': ' ', 'E': ' ', 'F': ' ', 'G': ' ', 'H': 'H', \n              'I': 'I', 'J': ' ', 'K': ' ', 'L': ' ', 'M': 'M', 'N': ' ', 'O': 'O', 'P': ' ', \n              'Q': ' ', 'R': ' ', 'S': ' ', 'T': 'T', 'U': 'U', 'V': ' ', 'W': 'W', 'X': 'X', \n              'Y': ' ', 'Z': ' '}\n    \n    n = len(s)\n    for i in range(n // 2):\n        if mirror[s[i]] != s[n - 1 - i]:\n            print(\"NIE\")\n            return\n    print(\"TAK\")\n\ns = input().strip()\nis_s_palindrome(s)\n```",
    "30": "```python\ndef min_traps(m, x):\n    # Since GCD(x, m) = 1, the x-mouse will visit all rooms\n    # The number of unique rooms visited is equal to m\n    # The minimum number of traps needed is m - 1 (trapping all rooms except room 0)\n    return m\n\nm, x = map(int, input().split())\nprint(min_traps(m, x))\n```",
    "28": "```python\nn = int(input())\nfiles = [input().split() for _ in range(n)]\n\nexamples = []\nregulars = []\n\nfor name, type_ in files:\n    if type_ == '1':\n        examples.append(name)\n    else:\n        regulars.append(name)\n\nscript = []\ne = len(examples)\n\n# Rename example files to 1, 2, ..., e\nfor i in range(e):\n    script.append(f\"move {examples[i]} {i + 1}\")\n\n# Rename regular files to e + 1, e + 2, ..., n\nfor i in range(len(regulars)):\n    script.append(f\"move {regulars[i]} {e + i + 1}\")\n\nprint(len(script))\nprint(\"\\n\".join(script))\n```",
    "29": "```python\ndef min_replacements(ticket):\n    first_half = list(map(int, ticket[:3]))\n    second_half = list(map(int, ticket[3:]))\n    \n    sum_first = sum(first_half)\n    sum_second = sum(second_half)\n    \n    if sum_first == sum_second:\n        return 0\n    \n    diff = abs(sum_first - sum_second)\n    \n    # Create a list of possible changes\n    changes = []\n    if sum_first > sum_second:\n        changes = [9 - digit for digit in second_half] + [digit for digit in first_half]\n    else:\n        changes = [9 - digit for digit in first_half] + [digit for digit in second_half]\n    \n    changes.sort(reverse=True)\n    \n    count = 0\n    for change in changes:\n        diff -= change\n        count += 1\n        if diff <= 0:\n            break\n            \n    return count\n\nticket = input().strip()\nprint(min_replacements(ticket))\n```",
    "25": "```python\ndef create_symmetric_matrix(n, k):\n    if k > n * (n + 1) // 2:\n        return -1\n\n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k <= 0:\n            break\n        # Fill the diagonal first\n        if k > 0:\n            matrix[i][i] = 1\n            k -= 1\n        \n        # Fill the symmetric pairs (i, j) and (j, i)\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            if k <= 0:\n                break\n\n    return matrix if k == 0 else -1\n\nn, k = map(int, input().split())\nresult = create_symmetric_matrix(n, k)\n\nif result == -1:\n    print(-1)\nelse:\n    for row in result:\n        print(' '.join(map(str, row)))\n```",
    "24": "```python\ndef can_win(board):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]  # vertical, horizontal, diagonal, anti-diagonal\n    n = 10\n\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '.':\n                # Temporarily place 'X' in the empty cell\n                board[i][j] = 'X'\n                \n                for dx, dy in directions:\n                    count = 1\n                    \n                    # Check in the positive direction\n                    x, y = i + dx, j + dy\n                    while 0 <= x < n and 0 <= y < n and board[x][y] == 'X':\n                        count += 1\n                        x += dx\n                        y += dy\n                    \n                    # Check in the negative direction\n                    x, y = i - dx, j - dy\n                    while 0 <= x < n and 0 <= y < n and board[x][y] == 'X':\n                        count += 1\n                        x -= dx\n                        y -= dy\n                    \n                    if count >= 5:\n                        return 'YES'\n                \n                # Restore the empty cell\n                board[i][j] = '.'\n    \n    return 'NO'\n\n# Read the input\nboard = [input().strip() for _ in range(10)]\nprint(can_win(board))\n```",
    "32": "```python\nn = int(input())\nposition = 0  # Position on the meridian, starting at North Pole (0 km)\n\nfor _ in range(n):\n    t, direction = input().split()\n    t = int(t)\n\n    if position == 0 and direction != \"South\":\n        print(\"NO\")\n        exit()\n    elif position == 20000 and direction != \"North\":\n        print(\"NO\")\n        exit()\n\n    if direction == \"South\":\n        position += t\n    elif direction == \"North\":\n        position -= t\n    elif direction == \"West\" or direction == \"East\":\n        # Moving West or East does not change the position on the meridian\n        continue\n\n    if position < 0 or position > 20000:\n        print(\"NO\")\n        exit()\n\nif position != 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n```",
    "34": "```python\ndef max_min_pieces(n, a, b):\n    def can_distribute(x):\n        plates_for_a = (a + x - 1) // x  # Ceiling division\n        plates_for_b = (b + x - 1) // x  # Ceiling division\n        return plates_for_a + plates_for_b <= n\n\n    left, right = 1, max(a, b)\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_distribute(mid):\n            left = mid\n        else:\n            right = mid - 1\n    return left\n\nn, a, b = map(int, input().split())\nprint(max_min_pieces(n, a, b))\n```",
    "26": "```python\nimport math\n\n# Read input\nx, y, z = map(float, input().split())\n\n# Define the expressions\nexpressions = [\n    (x**(y**z), \"x^y^z\"),\n    (x**(z**y), \"x^z^y\"),\n    ((x**y)**z, \"(x^y)^z\"),\n    ((x**z)**y, \"(x^z)^y\"),\n    (y**(x**z), \"y^x^z\"),\n    (y**(z**x), \"y^z^x\"),\n    ((y**x)**z, \"(y^x)^z\"),\n    ((y**z)**x, \"(y^z)^x\"),\n    (z**(x**y), \"z^x^y\"),\n    (z**(y**x), \"z^y^x\"),\n    ((z**x)**y, \"(z^x)^y\"),\n    ((z**y)**x, \"(z^y)^x\")\n]\n\n# Find the maximum value and its corresponding expression\nmax_value = -math.inf\nmax_index = -1\n\nfor i, (value, expr) in enumerate(expressions):\n    if value > max_value:\n        max_value = value\n        max_index = i\n\n# Output the corresponding expression\nprint(expressions[max_index][1])\n```",
    "35": "```python\ndef is_valid_flag(n, m, field):\n    colors = {'R', 'G', 'B'}\n    \n    # Check for horizontal stripes\n    stripe_height = n // 3\n    if n % 3 != 0 or stripe_height == 0:\n        return \"NO\"\n    \n    seen_colors = set()\n    for i in range(3):\n        stripe = field[i * stripe_height:(i + 1) * stripe_height]\n        if len(set(stripe)) != 1 or stripe[0][0] not in colors:\n            return \"NO\"\n        seen_colors.add(stripe[0][0])\n    \n    if seen_colors != colors:\n        return \"NO\"\n    \n    return \"YES\"\n\nn, m = map(int, input().split())\nfield = [input().strip() for _ in range(n)]\nprint(is_valid_flag(n, m, field))\n```",
    "37": "```python\ndef can_deal_exact_damage(a, b, c):\n    for x in range(c // a + 1):\n        if (c - a * x) % b == 0:\n            return \"Yes\"\n    return \"No\"\n\na, b, c = map(int, input().split())\nprint(can_deal_exact_damage(a, b, c))\n```",
    "31": "```python\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef mod_inverse(a, m):\n    m0, x0, x1 = m, 0, 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        m, a = a % m, m\n        x0, x1 = x1 - q * x0, x0\n    if x1 < 0:\n        x1 += m0\n    return x1\n\ndef birthday_paradox(n, k):\n    MOD = 1000003\n    days = 1 << n  # 2^n\n    if k > days:\n        return 1, 1\n    \n    # Calculate the probability of no shared birthdays\n    numerator = 1\n    denominator = 1\n    for i in range(k):\n        numerator *= (days - i)\n        denominator *= days\n        numerator %= MOD\n        denominator %= MOD\n    \n    # Probability of at least two people sharing a birthday\n    A = (denominator - numerator) % MOD\n    B = denominator % MOD\n    \n    # Reduce A/B to irreducible form\n    common_gcd = gcd(A, B)\n    A //= common_gcd\n    B //= common_gcd\n    \n    return A % MOD, B % MOD\n\nn, k = map(int, input().split())\nA, B = birthday_paradox(n, k)\nprint(A, B)\n```",
    "39": "```python\ndef is_palindrome(s):\n    return s == s[::-1]\n\ns = input().strip()\n\nif not is_palindrome(s):\n    print(len(s))\nelse:\n    # Check for the longest non-palindrome substring\n    n = len(s)\n    for length in range(n - 1, 0, -1):\n        for start in range(n - length + 1):\n            substring = s[start:start + length]\n            if not is_palindrome(substring):\n                print(length)\n                exit()\n    print(0)\n```",
    "40": "```python\nn = int(input())\nratings = [tuple(map(int, input().split())) for _ in range(n)]\n\nrated = False\nunrated = False\n\nfor a, b in ratings:\n    if a != b:\n        rated = True\n        break\n\nif rated:\n    print(\"rated\")\nelse:\n    for i in range(n - 1):\n        if ratings[i][0] < ratings[i + 1][0]:\n            unrated = True\n            break\n\n    if unrated:\n        print(\"unrated\")\n    else:\n        print(\"maybe\")\n```",
    "42": "```python\ndef count_cyclic_strings(n, s):\n    from itertools import product\n\n    def is_valid(t):\n        # Check if s is a substring of any cyclic shift of t\n        double_t = t + t\n        return s in double_t\n\n    count = 0\n    for bits in product('01', repeat=n):\n        t = ''.join(bits)\n        if is_valid(t):\n            count += 1\n\n    return count\n\nn = int(input().strip())\ns = input().strip()\nprint(count_cyclic_strings(n, s))\n```",
    "36": "```python\ndef hexagonal_coordinates(n):\n    if n == 0:\n        return (0, 0)\n    \n    layer = 0\n    moves_in_layer = 6 * layer\n    \n    while n >= moves_in_layer:\n        n -= moves_in_layer\n        layer += 1\n        moves_in_layer = 6 * layer\n    \n    x, y = layer, 0\n    \n    if n == 0:\n        return (x, y)\n    \n    # Calculate the position in the current layer\n    direction = n // layer\n    steps = n % layer\n    \n    if direction == 0:  # Right\n        x += steps\n        y += 0\n    elif direction == 1:  # Top-right\n        x += steps\n        y += steps\n    elif direction == 2:  # Top-left\n        x += 0\n        y += steps\n    elif direction == 3:  # Left\n        x -= steps\n        y += 0\n    elif direction == 4:  # Bottom-left\n        x -= steps\n        y -= steps\n    elif direction == 5:  # Bottom-right\n        x += 0\n        y -= steps\n    \n    return (x, y)\n\nn = int(input())\nx, y = hexagonal_coordinates(n)\nprint(x, y)\n```",
    "41": "```python\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\nlast_zero = -float('inf')\n\n# Forward pass to find distances to the nearest zero\nfor i in range(n):\n    if a[i] == 0:\n        last_zero = i\n    d[i] = i - last_zero\n\nlast_zero = float('inf')\n\n# Backward pass to find distances to the nearest zero\nfor i in range(n - 1, -1, -1):\n    if a[i] == 0:\n        last_zero = i\n    d[i] = min(d[i], last_zero - i)\n\nprint(' '.join(map(str, d)))\n```",
    "49": "```python\ndef find_kth_digit(k):\n    length = 1\n    count = 9\n    start = 1\n    \n    while k > length * count:\n        k -= length * count\n        length += 1\n        count *= 10\n        start *= 10\n    \n    start += (k - 1) // length\n    num_str = str(start)\n    return int(num_str[(k - 1) % length])\n\nk = int(input())\nprint(find_kth_digit(k))\n```",
    "48": "```python\ndef kth_largest_in_multiplication_table(n, m, k):\n    left, right = 1, n * m\n    \n    while left < right:\n        mid = (left + right) // 2\n        count = sum(min(mid // i, m) for i in range(1, n + 1))\n        \n        if count < k:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left\n\nn, m, k = map(int, input().split())\nprint(kth_largest_in_multiplication_table(n, m, k))\n```",
    "44": "```python\ndef minimal_time(d, k, a, b, t):\n    # Calculate the time if Vasiliy walks the entire distance\n    walk_time = d * b\n    \n    # Calculate the number of full segments the car can drive\n    full_segments = d // k\n    remaining_distance = d % k\n    \n    # Calculate the time if Vasiliy drives the car for full segments and walks the remaining distance\n    drive_time = full_segments * (k * a + t) + remaining_distance * a\n    \n    # If there are full segments, we need to subtract the last repair time\n    if full_segments > 0:\n        drive_time -= t\n    \n    # Compare the two times and return the minimum\n    return min(walk_time, drive_time)\n\n# Input reading\nd, k, a, b, t = map(int, input().split())\nprint(minimal_time(d, k, a, b, t))\n```",
    "45": "```python\ndef find_sequence(n, k):\n    # Minimum sum of first k positive integers\n    min_sum = k * (k + 1) // 2\n    \n    if n < min_sum:\n        return -1\n    \n    # The maximum GCD we can use\n    max_gcd = (n - min_sum) // k + 1\n    \n    # Create the sequence\n    sequence = [i + max_gcd for i in range(1, k + 1)]\n    \n    # Adjust the last element to ensure the sum is exactly n\n    sequence[-1] += (n - sum(sequence))\n    \n    return sequence\n\n# Input reading\nn, k = map(int, input().split())\nresult = find_sequence(n, k)\n\nif result == -1:\n    print(-1)\nelse:\n    print(' '.join(map(str, result)))\n```",
    "46": "```python\ndef count_pairs(n, m):\n    count_x = [0] * 5\n    count_y = [0] * 5\n    \n    for i in range(1, n + 1):\n        count_x[i % 5] += 1\n        \n    for j in range(1, m + 1):\n        count_y[j % 5] += 1\n        \n    result = 0\n    for i in range(5):\n        result += count_x[i] * count_y[(5 - i) % 5]\n        \n    return result\n\nn, m = map(int, input().split())\nprint(count_pairs(n, m))\n```",
    "43": "```python\nimport sys\nimport math\n\ndef minimal_angle_pair(n, vectors):\n    angles = []\n    \n    for i in range(n):\n        x, y = vectors[i]\n        angle = math.atan2(y, x)\n        angles.append((angle, i + 1))  # Store angle and index (1-based)\n\n    angles.sort()  # Sort by angle\n\n    min_angle = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(n):\n        a1, idx1 = angles[i]\n        a2, idx2 = angles[(i + 1) % n]  # Wrap around to the first element\n        angle_diff = abs(a2 - a1)\n        if angle_diff > math.pi:\n            angle_diff = 2 * math.pi - angle_diff\n        \n        if angle_diff < min_angle:\n            min_angle = angle_diff\n            min_pair = (idx1, idx2)\n\n    return min_pair\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().splitlines()\n    n = int(data[0])\n    vectors = [tuple(map(int, line.split())) for line in data[1:n + 1]]\n    \n    result = minimal_angle_pair(n, vectors)\n    print(result[0], result[1])\n```",
    "38": "```python\ndef can_coincide(n, L, kefa_distances, sasha_distances):\n    # Calculate the distances between barriers for Kefa\n    kefa_diffs = [(kefa_distances[(i + 1) % n] - kefa_distances[i]) % L for i in range(n)]\n    # Calculate the distances between barriers for Sasha\n    sasha_diffs = [(sasha_distances[(i + 1) % n] - sasha_distances[i]) % L for i in range(n)]\n    \n    # Check if kefa_diffs can be rotated to match sasha_diffs\n    for i in range(n):\n        if kefa_diffs[i:] + kefa_diffs[:i] == sasha_diffs:\n            return \"YES\"\n    \n    return \"NO\"\n\n# Input reading\nn, L = map(int, input().split())\nkefa_distances = list(map(int, input().split()))\nsasha_distances = list(map(int, input().split()))\n\n# Output the result\nprint(can_coincide(n, L, kefa_distances, sasha_distances))\n```",
    "51": "```python\nfrom collections import Counter\nimport sys\n\ndef find_x_y(divisors):\n    count = Counter(divisors)\n    x, y = 1, 1\n    \n    for d in count:\n        if count[d] == 2:\n            x *= d\n            y *= d\n        elif count[d] == 1:\n            if x < y:\n                x *= d\n            else:\n                y *= d\n                \n    return x, y\n\nn = int(input().strip())\ndivisors = list(map(int, input().strip().split()))\n\nx, y = find_x_y(divisors)\nprint(x, y)\n```",
    "54": "```python\ndef min_D_to_equalize(n, a):\n    min_a = min(a)\n    max_a = max(a)\n    \n    if max_a == min_a:\n        return 0\n    \n    if (max_a - min_a) % 2 != 0:\n        return -1\n    \n    D = (max_a - min_a) // 2\n    return D\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_D_to_equalize(n, a))\n```",
    "47": "```python\ndef max_beauty_with_subarray(n, x, a):\n    # Function to calculate maximum subarray sum using Kadane's algorithm\n    def kadane(arr):\n        max_ending_here = max_so_far = 0\n        for value in arr:\n            max_ending_here = max(0, max_ending_here + value)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate the original beauty of the array\n    original_beauty = kadane(a)\n\n    # Calculate the maximum beauty after multiplying a subarray by x\n    max_increase = 0\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        max_increase = max(max_increase, current_sum * x)\n        if current_sum < 0:\n            current_sum = 0\n\n    # Calculate the maximum beauty after considering the multiplication\n    max_beauty = max(original_beauty, original_beauty + max_increase)\n\n    return max_beauty\n\n# Input reading\nn, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# Output the result\nprint(max_beauty_with_subarray(n, x, a))\n```",
    "56": "```python\ndef f(x):\n    x += 1\n    while x % 10 == 0:\n        x //= 10\n    return x\n\ndef reachable_count(n):\n    reachable = set()\n    current = n\n    while current not in reachable:\n        reachable.add(current)\n        current = f(current)\n    return len(reachable)\n\nn = int(input())\nprint(reachable_count(n))\n```",
    "53": "```python\ndef longest_increasing_sequence(n, a):\n    left, right = 0, n - 1\n    last_taken = -1\n    moves = []\n    \n    while left <= right:\n        if a[left] < last_taken and a[right] < last_taken:\n            break\n        \n        if a[left] > last_taken and (a[right] <= last_taken or a[left] < a[right]):\n            moves.append('L')\n            last_taken = a[left]\n            left += 1\n        elif a[right] > last_taken:\n            moves.append('R')\n            last_taken = a[right]\n            right -= 1\n        else:\n            break\n    \n    print(len(moves))\n    print(''.join(moves))\n\n# Example usage:\n# n = int(input())\n# a = list(map(int, input().split()))\n# longest_increasing_sequence(n, a)\n```",
    "33": "```python\ndef count_integers(a1, b1, a2, b2, L, R):\n    from math import gcd\n\n    # Calculate the difference and the starting point\n    d = a2 - a1\n    b_diff = b1 - b2\n\n    # If the difference is zero, we need to check if they are equal\n    if d == 0:\n        if b1 == b2:\n            return max(0, (R - L) // a1 + 1)\n        else:\n            return 0\n\n    # Calculate the GCD of a1 and a2\n    g = gcd(a1, a2)\n\n    # Check if the difference is divisible by the GCD\n    if b_diff % g != 0:\n        return 0\n\n    # Find the range of valid k' and l'\n    # We need to solve the equation a1 * k' + b1 = a2 * l' + b2\n    # Rearranging gives us: a1 * k' - a2 * l' = b2 - b1\n    # This is a linear Diophantine equation\n\n    # We can find a particular solution using the extended Euclidean algorithm\n    def extended_gcd(a, b):\n        if b == 0:\n            return a, 1, 0\n        g, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return g, x, y\n\n    g, x0, y0 = extended_gcd(a1, a2)\n    x0 *= b_diff // g\n    y0 *= b_diff // g\n\n    # Now we have a particular solution (x0, y0)\n    # General solution is:\n    # x = x0 + (a2/g) * t\n    # y = y0 + (a1/g) * t\n    # for integer t\n\n    # We need to find the range of t such that L ≤ a1 * (x0 + (a2/g) * t) + b1 ≤ R\n    # This simplifies to:\n    # (L - b1) ≤ a1 * (x0 + (a2/g) * t) ≤ (R - b1)\n\n    # Calculate bounds for t\n    t1 = (L - b1 - a1 * x0) // (a1 * (a2 // g))\n    t2 = (R - b1 - a1 * x0) // (a1 * (a2 // g))\n\n    # Adjust bounds to ensure they are integers\n    if (L - b1 - a1 * x0) % (a1 * (a2 // g)) > 0:\n        t1 += 1\n    if (R - b1 - a1 * x0) % (a1 * (a2 // g)) < 0:\n        t2 -= 1\n\n    return max(0, t2 - t1 + 1)\n\n# Read input\na1, b1, a2, b2, L, R = map(int, input().split())\n# Output the result\nprint(count_integers(a1, b1, a2, b2, L, R))\n```",
    "52": "```python\ndef max_sum_divisible_by_k(n, m, k, matrix):\n    max_choose = m // 2\n    dp = [[-1] * k for _ in range(max_choose + 1)]\n    dp[0][0] = 0\n\n    for row in matrix:\n        row.sort(reverse=True)\n        current_dp = [dp[i][:] for i in range(max_choose + 1)]\n\n        for i in range(1, max_choose + 1):\n            for j in range(min(i, len(row))):\n                if current_dp[i - 1][(j + 1) % k] != -1:\n                    new_sum = current_dp[i - 1][(j + 1) % k] + row[j]\n                    new_mod = new_sum % k\n                    current_dp[i][new_mod] = max(current_dp[i][new_mod], new_sum)\n\n        dp = current_dp\n\n    return max(dp[i][0] for i in range(max_choose + 1) if dp[i][0] != -1)\n\n# Input reading\nn, m, k = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\n\n# Output the result\nprint(max_sum_divisible_by_k(n, m, k, matrix))\n```",
    "58": "```python\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nfrom collections import defaultdict\n\ncoloring = [0] * n\nfrequency = defaultdict(list)\n\nfor index, value in enumerate(a):\n    frequency[value].append(index)\n\nif len(frequency) > k:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    color = 1\n    for indices in frequency.values():\n        for i in range(len(indices)):\n            coloring[indices[i]] = (i % k) + 1\n    print(\" \".join(map(str, coloring)))\n```",
    "50": "```python\nfrom collections import defaultdict, deque\n\ndef bfs(start, graph):\n    visited = {start: 0}\n    queue = deque([start])\n    farthest_node = start\n    max_distance = 0\n\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited[neighbor] = visited[node] + 1\n                queue.append(neighbor)\n                if visited[neighbor] > max_distance:\n                    max_distance = visited[neighbor]\n                    farthest_node = neighbor\n\n    return farthest_node, max_distance\n\ndef find_max_edges(n, edges):\n    graph = defaultdict(list)\n    \n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # Step 1: Find the farthest node from an arbitrary node (1)\n    farthest_from_start, _ = bfs(1, graph)\n\n    # Step 2: Find the farthest node from the farthest node found in step 1\n    farthest_from_a, _ = bfs(farthest_from_start, graph)\n\n    # Step 3: Find the farthest node from the second farthest node\n    farthest_from_b, _ = bfs(farthest_from_a, graph)\n\n    # The maximum number of edges is the distance between these two farthest nodes\n    max_edges = (len(graph) - 1)  # since it's a tree, max edges is n-1\n\n    # We can return the two endpoints of the longest path and any third node\n    return max_edges, farthest_from_start, farthest_from_b\n\nn = int(input())\nedges = [tuple(map(int, input().split())) for _ in range(n - 1)]\nresult = find_max_edges(n, edges)\nprint(result[0])\nprint(result[1], result[2], (set(range(1, n + 1)) - {result[1], result[2]}).pop())\n```",
    "59": "```python\nn, x, y = map(int, input().split())\nnumber = input().strip()\n\n# We need to check the last x digits of the number\ntarget = ['0'] * x\ntarget[y] = '1'  # Set the y-th position to '1'\n\n# Count the number of changes needed\nchanges = 0\nfor i in range(x):\n    if number[n - 1 - i] != target[x - 1 - i]:\n        changes += 1\n\nprint(changes)\n```",
    "63": "```python\ndef min_instability(n, a):\n    a.sort()\n    # Remove the first element or the last element\n    return min(a[-1] - a[1], a[-2] - a[0])\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_instability(n, a))\n```",
    "61": "```python\nn = int(input())\na = input().strip()\nf = list(map(int, input().strip().split()))\n\nmax_number = list(a)\nchanged = False\n\nfor i in range(n):\n    original_digit = int(a[i])\n    new_digit = f[original_digit - 1]\n    \n    if new_digit > original_digit:\n        if not changed:\n            changed = True\n            max_number[i] = str(new_digit)\n        else:\n            max_number[i] = str(new_digit)\n    elif new_digit < original_digit and changed:\n        break\n\nprint(''.join(max_number))\n```",
    "65": "```python\ndef min_moves(n, m):\n    if m % n != 0:\n        return -1\n    \n    ratio = m // n\n    moves = 0\n    \n    while ratio > 1:\n        if ratio % 2 == 0:\n            ratio //= 2\n            moves += 1\n        elif ratio % 3 == 0:\n            ratio //= 3\n            moves += 1\n        else:\n            return -1\n            \n    return moves\n\nn, m = map(int, input().split())\nprint(min_moves(n, m))\n```",
    "57": "```python\ndef fill_gifts(n, f):\n    # Create a list to store the final gift assignments\n    nf = f[:]\n    \n    # Find the friends who have not been assigned a gift\n    unassigned = [i + 1 for i in range(n) if nf[i] == 0]\n    \n    # Find the friends who are already assigned gifts\n    assigned = set(f) - {0}\n    \n    # Find the friends who can receive gifts (those not assigned)\n    can_receive = [i + 1 for i in range(1, n + 1) if i not in assigned]\n    \n    # Fill the unassigned gifts\n    for i in range(len(unassigned)):\n        # Assign the gift to the next available friend\n        nf[unassigned[i] - 1] = can_receive[i]\n    \n    # Ensure no one gives a gift to themselves\n    for i in range(n):\n        if nf[i] == i + 1:\n            # Swap with the last unassigned friend\n            nf[i], nf[unassigned[-1] - 1] = nf[unassigned[-1] - 1], nf[i]\n            break\n    \n    return nf\n\n# Input reading\nn = int(input())\nf = list(map(int, input().split()))\n\n# Get the result and print it\nresult = fill_gifts(n, f)\nprint(' '.join(map(str, result)))\n```",
    "67": "```python\nn = int(input())\na = list(map(int, input().split()))\n\ntotal_sum = sum(a)\nnice_indices = []\n\nfor i in range(n):\n    if (total_sum - a[i]) % 2 == 0:\n        target = (total_sum - a[i]) // 2\n        if target in a and (target != a[i] or a.count(target) > 1):\n            nice_indices.append(i + 1)\n\nprint(len(nice_indices))\nif nice_indices:\n    print(\" \".join(map(str, nice_indices)))\n```",
    "64": "```python\nn, m = map(int, input().split())\nexams = [tuple(map(int, input().split())) for _ in range(m)]\nschedule = [0] * n\n\n# Mark exam days\nfor i in range(m):\n    s, d, c = exams[i]\n    schedule[d - 1] = m + 1  # Mark the exam day\n\n# Prepare for exams\nfor i in range(m):\n    s, d, c = exams[i]\n    prepare_days = 0\n    for j in range(s - 1, d - 1):\n        if prepare_days < c and schedule[j] == 0:\n            schedule[j] = i + 1  # Mark preparation day\n            prepare_days += 1\n\n    if prepare_days < c:\n        print(-1)\n        exit()\n\nprint(\" \".join(map(str, schedule)))\n```",
    "55": "```python\ndef can_see_white_sheet(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    # Check if there is any part of the white sheet that is not covered by both black sheets\n    # Check the four corners of the white sheet\n    corners = [\n        (x1, y1),  # bottom left\n        (x1, y2),  # top left\n        (x2, y1),  # bottom right\n        (x2, y2)   # top right\n    ]\n    \n    for x, y in corners:\n        # Check if the point (x, y) is outside the white sheet\n        if not (x1 < x < x2 and y1 < y < y2):\n            # Check if the point (x, y) is outside both black sheets\n            if not (x3 < x < x4 and y3 < y < y4) and not (x5 < x < x6 and y5 < y < y6):\n                return \"YES\"\n    \n    return \"NO\"\n\n# Input reading\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\n\n# Output the result\nprint(can_see_white_sheet(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6))\n```",
    "66": "```python\ndef minimum_length_string(n, k, t):\n    # Find the longest prefix which is also a suffix\n    lps = [0] * n\n    j = 0\n    for i in range(1, n):\n        while j > 0 and t[i] != t[j]:\n            j = lps[j - 1]\n        if t[i] == t[j]:\n            j += 1\n            lps[i] = j\n        else:\n            lps[i] = 0\n\n    # The length of the overlap\n    overlap = lps[-1]\n    \n    # Construct the result\n    result = t + t[overlap:] * (k - 1)\n    return result\n\n# Read input\nn, k = map(int, input().split())\nt = input().strip()\n\n# Get the result and print it\nresult = minimum_length_string(n, k, t)\nprint(result)\n```",
    "60": "```python\ndef has_palindrome_subsequence(t, test_cases):\n    results = []\n    for case in test_cases:\n        n, a = case\n        found = False\n        # Use a dictionary to track the first and last occurrence of each number\n        positions = {}\n        for i in range(n):\n            if a[i] in positions:\n                positions[a[i]].append(i)\n            else:\n                positions[a[i]] = [i]\n        \n        # Check for a palindrome subsequence of length at least 3\n        for key, pos in positions.items():\n            if len(pos) >= 2 and pos[-1] - pos[0] >= 2:\n                found = True\n                break\n        \n        results.append(\"YES\" if found else \"NO\")\n    \n    return results\n\n# Input reading\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    test_cases.append((n, a))\n\n# Get results and print them\nresults = has_palindrome_subsequence(t, test_cases)\nfor result in results:\n    print(result)\n```",
    "62": "```python\ndef min_operations(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        min_ops = float('inf')\n        best_triplet = (0, 0, 0)\n\n        for A in range(1, a + 1):\n            for B in range(A, c + 1):\n                if B % A == 0:\n                    for C in range(B, c + 1):\n                        if C % B == 0:\n                            ops = abs(A - a) + abs(B - b) + abs(C - c)\n                            if ops < min_ops:\n                                min_ops = ops\n                                best_triplet = (A, B, C)\n\n        results.append((min_ops, best_triplet))\n    \n    return results\n\n# Read input\nt = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(t)]\n\n# Get results\nresults = min_operations(t, test_cases)\n\n# Print output\nfor ops, triplet in results:\n    print(ops)\n    print(*triplet)\n```",
    "71": "```python\nimport math\n\na = int(input())\noutput = math.ceil(math.log2(a))\nprint(output)\n```",
    "73": "```python\nn = int(input())\na = list(map(int, input().split()))\n\nmax_height = max(a)\ntotal_bricks_needed = sum(max_height - height for height in a)\n\nif total_bricks_needed % 2 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n```",
    "77": "```python\nn = int(input())\ntotal_sum = n * (n + 1) // 2\nprint(total_sum % 2)\n```",
    "68": "```python\ndef min_cost_to_obtain_set(n, k, s):\n    from collections import defaultdict\n    \n    # Count the frequency of each character\n    freq = defaultdict(int)\n    for char in s:\n        freq[char] += 1\n    \n    # Calculate the number of unique subsequences\n    unique_subsequences = 0\n    total_cost = 0\n    \n    # Generate all possible subsequences\n    for length in range(n + 1):\n        for char in freq:\n            if freq[char] >= length:\n                unique_subsequences += 1\n                total_cost += (n - length)\n                if unique_subsequences >= k:\n                    return total_cost\n    \n    # If we can't reach k unique subsequences\n    if unique_subsequences < k:\n        return -1\n    \n    return total_cost\n\n# Read input\nn, k = map(int, input().split())\ns = input().strip()\n\n# Get the result and print it\nresult = min_cost_to_obtain_set(n, k, s)\nprint(result)\n```",
    "70": "```python\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\n# Convert start and end time to total minutes\nstart_minutes = h1 * 60 + m1\nend_minutes = h2 * 60 + m2\n\n# Calculate the midpoint in total minutes\nmidpoint_minutes = (start_minutes + end_minutes) // 2\n\n# Convert back to hours and minutes\nh3 = midpoint_minutes // 60\nm3 = midpoint_minutes % 60\n\n# Print the result in hh:mm format\nprint(f\"{h3:02}:{m3:02}\")\n```",
    "74": "```python\ndef min_cost_to_obtain_set(n, k, s):\n    unique_subsequences = set()\n    \n    # Generate all possible subsequences\n    for i in range(1 << n):\n        subsequence = []\n        for j in range(n):\n            if i & (1 << j):\n                subsequence.append(s[j])\n        unique_subsequences.add(''.join(subsequence))\n    \n    # If we cannot obtain k unique subsequences\n    if len(unique_subsequences) < k:\n        return -1\n    \n    # Calculate the cost for the k unique subsequences\n    costs = []\n    for subseq in unique_subsequences:\n        costs.append(n - len(subseq))\n    \n    costs.sort()\n    \n    return sum(costs[:k])\n\n# Input reading\nn, k = map(int, input().split())\ns = input().strip()\n\n# Output the result\nprint(min_cost_to_obtain_set(n, k, s))\n```",
    "81": "```python\nn = int(input())\nstrings = [input().strip() for _ in range(n)]\n\n# Sort strings by length\nstrings.sort(key=len)\n\n# Check if the order is valid\nfor i in range(1, n):\n    if strings[i-1] not in strings[i]:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")\n    print(\"\\n\".join(strings))\n```",
    "75": "```python\ndef max_days(a, b, c):\n    # Calculate full weeks\n    full_weeks = min(a // 3, b // 2, c // 2)\n    a -= full_weeks * 3\n    b -= full_weeks * 2\n    c -= full_weeks * 2\n    days = full_weeks * 7\n\n    # Try starting from each day of the week\n    for start_day in range(7):\n        current_a, current_b, current_c = a, b, c\n        current_days = 0\n        \n        for day in range(7):\n            food_type = (start_day + day) % 7\n            if food_type in [0, 3, 6]:  # Fish food days\n                if current_a > 0:\n                    current_a -= 1\n                    current_days += 1\n                else:\n                    break\n            elif food_type in [1, 5]:  # Rabbit stew days\n                if current_b > 0:\n                    current_b -= 1\n                    current_days += 1\n                else:\n                    break\n            else:  # Chicken stake days\n                if current_c > 0:\n                    current_c -= 1\n                    current_days += 1\n                else:\n                    break\n\n        days = max(days, current_days + full_weeks * 7)\n\n    return days\n\n# Input reading\na, b, c = map(int, input().split())\nprint(max_days(a, b, c))\n```",
    "69": "```python\ndef find_spanning_tree(n, m, D, edges):\n    from collections import defaultdict, deque\n\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    if D > len(graph[1]) or D >= n:\n        print(\"NO\")\n        return\n\n    # Start building the spanning tree\n    spanning_tree_edges = []\n    visited = [False] * (n + 1)\n    visited[1] = True\n    degree_count = 0\n\n    # First, connect vertex 1 to D neighbors\n    for neighbor in graph[1]:\n        if degree_count < D:\n            spanning_tree_edges.append((1, neighbor))\n            visited[neighbor] = True\n            degree_count += 1\n        else:\n            break\n\n    # BFS to connect the rest of the vertices\n    queue = deque()\n    for neighbor in graph[1]:\n        if visited[neighbor]:\n            queue.append(neighbor)\n\n    while queue:\n        current = queue.popleft()\n        for neighbor in graph[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                spanning_tree_edges.append((current, neighbor))\n                queue.append(neighbor)\n                if len(spanning_tree_edges) == n - 1:\n                    break\n        if len(spanning_tree_edges) == n - 1:\n            break\n\n    if len(spanning_tree_edges) == n - 1:\n        print(\"YES\")\n        for u, v in spanning_tree_edges:\n            print(u, v)\n    else:\n        print(\"NO\")\n\n# Example usage\n# n, m, D = map(int, input().split())\n# edges = [tuple(map(int, input().split())) for _ in range(m)]\n# find_spanning_tree(n, m, D, edges)\n```",
    "82": "```python\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = 0\n\n# Solve from the left\nwhile count < n and a[count] <= k:\n    count += 1\n\n# Solve from the right\nwhile count < n and a[n - 1 - (count - (n - len(a)))] <= k:\n    count += 1\n\n# Adjust for double counting\nif count > n:\n    count = n\n\nprint(count)\n```",
    "72": "```python\ndef max_intersection_length(n, segments):\n    left = [0] * n\n    right = [0] * n\n    \n    for i in range(n):\n        left[i], right[i] = segments[i]\n    \n    max_left = [0] * n\n    min_right = [0] * n\n    \n    max_left[0] = left[0]\n    for i in range(1, n):\n        max_left[i] = max(max_left[i - 1], left[i])\n    \n    min_right[n - 1] = right[n - 1]\n    for i in range(n - 2, -1, -1):\n        min_right[i] = min(min_right[i + 1], right[i])\n    \n    max_length = 0\n    \n    for i in range(n):\n        if i == 0:\n            current_left = max_left[1]\n            current_right = min_right[1]\n        elif i == n - 1:\n            current_left = max_left[n - 2]\n            current_right = min_right[n - 2]\n        else:\n            current_left = max(max_left[i - 1], left[i + 1])\n            current_right = min(min_right[i + 1], right[i - 1])\n        \n        max_length = max(max_length, max(0, current_right - current_left))\n    \n    return max_length\n\n# Input reading\nn = int(input())\nsegments = [tuple(map(int, input().split())) for _ in range(n)]\nprint(max_intersection_length(n, segments))\n```",
    "78": "```python\nMOD = 10**9 + 7\n\ndef count_regular_sequences(n, s):\n    m = len(s)\n    \n    # Precompute Catalan numbers\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        catalan[i] = (catalan[i - 1] * (2 * (2 * i - 1)) % MOD * pow(i + 1, MOD - 2, MOD)) % MOD\n    \n    # Check the balance of the substring s\n    balance = 0\n    min_balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        min_balance = min(min_balance, balance)\n    \n    if balance < 0 or balance > 2 * n - m:\n        return 0\n    \n    # Calculate the number of valid sequences\n    total_count = 0\n    for prefix in range(n + 1):\n        if prefix + balance < 0 or prefix + balance > n:\n            continue\n        suffix = n - prefix - (balance + (n - m) // 2)\n        if suffix < 0 or suffix > n:\n            continue\n        total_count = (total_count + catalan[prefix] * catalan[suffix]) % MOD\n    \n    return total_count\n\nn = int(input())\ns = input().strip()\nprint(count_regular_sequences(n, s))\n```",
    "80": "```python\ndef min_colors_to_sort(n, s):\n    from collections import defaultdict\n    \n    # Create a mapping of character positions\n    char_positions = defaultdict(list)\n    for index, char in enumerate(s):\n        char_positions[char].append(index)\n    \n    # Create a list to store the color for each character\n    colors = [0] * n\n    current_color = 1\n    \n    # Iterate through the sorted unique characters\n    sorted_chars = sorted(char_positions.keys())\n    \n    # Assign colors based on the positions of characters\n    for char in sorted_chars:\n        positions = char_positions[char]\n        for i in range(len(positions)):\n            colors[positions[i]] = (i % current_color) + 1\n        current_color = max(current_color, len(positions))\n    \n    # The number of colors used\n    res = max(colors)\n    \n    print(res)\n    print(\" \".join(map(str, colors)))\n\n# Example usage\nn = int(input())\ns = input().strip()\nmin_colors_to_sort(n, s)\n```",
    "76": "```python\ndef can_construct_square(t, test_cases):\n    results = []\n    for case in test_cases:\n        n, m, tiles = case\n        if m % 2 != 0:\n            results.append(\"NO\")\n            continue\n        \n        half_tiles = {}\n        for tile in tiles:\n            top_left, top_right = tile[0]\n            bottom_left, bottom_right = tile[1]\n            if top_right != bottom_left:\n                half_tiles[(top_left, bottom_left)] = half_tiles.get((top_left, bottom_left), 0) + 1\n            if top_left != bottom_right:\n                half_tiles[(top_right, bottom_right)] = half_tiles.get((top_right, bottom_right), 0) + 1\n        \n        if len(half_tiles) == 0:\n            results.append(\"NO\")\n            continue\n        \n        can_form = False\n        for count in half_tiles.values():\n            if count >= 2:\n                can_form = True\n                break\n        \n        results.append(\"YES\" if can_form else \"NO\")\n    \n    return results\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        top = tuple(map(int, input().split()))\n        bottom = tuple(map(int, input().split()))\n        tiles.append((top, bottom))\n    test_cases.append((n, m, tiles))\n\n# Get results\nresults = can_construct_square(t, test_cases)\n\n# Print results\nfor result in results:\n    print(result)\n```",
    "79": "```python\ndef min_moves_to_divisible_by_25(n):\n    s = str(n)\n    length = len(s)\n    moves = float('inf')\n\n    # Check for pairs of digits that can form 25 or 00\n    for target in ['25', '50', '75']:\n        last_digit = target[1]\n        second_last_digit = target[0]\n        \n        # Find the last occurrence of last_digit\n        last_index = -1\n        for i in range(length - 1, -1, -1):\n            if s[i] == last_digit:\n                last_index = i\n                break\n        \n        if last_index == -1:\n            continue\n        \n        # Find the second last occurrence of second_last_digit before last_index\n        second_last_index = -1\n        for i in range(last_index - 1, -1, -1):\n            if s[i] == second_last_digit:\n                second_last_index = i\n                break\n        \n        if second_last_index == -1:\n            continue\n        \n        # Calculate moves needed to bring second_last_digit to second_last_index\n        # and last_digit to last_index\n        moves_needed = (last_index - second_last_index) + (last_index - 1 - second_last_index)\n        moves = min(moves, moves_needed)\n\n    return moves if moves != float('inf') else -1\n\n# Input reading\nn = int(input().strip())\nprint(min_moves_to_divisible_by_25(n))\n```",
    "84": "```python\ndef can_color_string(n, s):\n    last_seen = {}\n    for i, char in enumerate(s):\n        if char in last_seen:\n            if last_seen[char] != i - 1:\n                return \"NO\"\n        last_seen[char] = i\n\n    color = ['0'] * n\n    for i in range(n):\n        if s[i] in last_seen:\n            color[i] = '0' if color[i] == '0' else '1'\n            last_seen[s[i]] = -1  # Mark as processed\n\n    return \"YES\\n\" + ''.join(color)\n\nn = int(input())\ns = input().strip()\nresult = can_color_string(n, s)\nprint(result)\n```",
    "83": "```python\ndef minimal_perimeter(a, b):\n    total_tiles = a + b\n    min_perimeter = float('inf')\n\n    for width in range(1, int(total_tiles**0.5) + 1):\n        if total_tiles % width == 0:\n            height = total_tiles // width\n            \n            # Check both configurations (width, height) and (height, width)\n            for w, h in [(width, height), (height, width)]:\n                # Check if we can fit a red rectangle and a blue rectangle\n                for red_width in range(1, w + 1):\n                    if a % red_width == 0:\n                        red_height = a // red_width\n                        if red_height <= h:\n                            min_perimeter = min(min_perimeter, 2 * (w + h))\n                            break\n\n                for blue_width in range(1, w + 1):\n                    if b % blue_width == 0:\n                        blue_height = b // blue_width\n                        if blue_height <= h:\n                            min_perimeter = min(min_perimeter, 2 * (w + h))\n                            break\n\n    return min_perimeter\n\na, b = map(int, input().split())\nprint(minimal_perimeter(a, b))\n```",
    "89": "```python\ndef can_complete_projects(n, r, projects):\n    # Sort projects by their required rating\n    projects.sort(key=lambda x: x[0])\n    \n    for a, b in projects:\n        if r < a:\n            return \"NO\"\n        r += b\n        if r < 0:\n            return \"NO\"\n    \n    return \"YES\"\n\n# Input reading\nn, r = map(int, input().split())\nprojects = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output the result\nprint(can_complete_projects(n, r, projects))\n```",
    "85": "```python\nimport sys\nimport math\n\ndef find_price(A, B):\n    for price in range(1, 10000):  # Arbitrary upper limit for price search\n        tax_8 = math.floor(price * 0.08)\n        tax_10 = math.floor(price * 0.10)\n        if tax_8 == A and tax_10 == B:\n            return price\n    return -1\n\nif __name__ == \"__main__\":\n    A, B = map(int, sys.stdin.read().strip().split())\n    result = find_price(A, B)\n    print(result)\n```",
    "92": "```python\nx = float(input().strip())\n\n# Calculate integers a and b such that 1 <= a, b <= 10\n# We can use a simple approach to find a and b\nfor a in range(1, 11):\n    for b in range(1, 11):\n        if abs(a * b - x) < 1e-6:\n            print(a, b)\n            break\n```",
    "87": "```python\ndef max_projects(n, r, projects):\n    projects.sort(key=lambda x: (x[0], -x[1]))  # Sort by required rating, then by rating change\n    completed = 0\n\n    while True:\n        progress = False\n        for i in range(len(projects)):\n            a_i, b_i = projects[i]\n            if r >= a_i:  # Can complete this project\n                r += b_i  # Update rating\n                completed += 1\n                projects[i] = (float('inf'), 0)  # Mark as completed\n                progress = True\n                break  # Restart the loop after completing a project\n        if not progress:  # No progress means no more projects can be completed\n            break\n\n    return completed\n\n# Input reading\nn, r = map(int, input().split())\nprojects = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output the result\nprint(max_projects(n, r, projects))\n```",
    "90": "```python\nn, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\n# Calculate the minimum required length to place all platforms\ntotal_length = sum(c)\nif total_length + (m - 1) > n:\n    print(\"NO\")\n    exit()\n\n# Create the result array\nresult = [0] * n\ncurrent_position = 0\n\n# Place the platforms\nfor i in range(m):\n    # Place platform i (1-indexed)\n    for j in range(c[i]):\n        result[current_position] = i + 1\n        current_position += 1\n    # Move to the next position after the platform\n    if i < m - 1:\n        current_position += 1  # Leave at least one cell gap\n\nprint(\"YES\")\nprint(\" \".join(map(str, result)))\n```",
    "86": "```python\ndef solve_problems(n, k):\n    # Minimum sum of problems to satisfy the conditions\n    min_sum = k * (k + 1) // 2\n    if n < min_sum:\n        print(\"NO\")\n        return\n\n    # Start with the minimum valid sequence\n    a = list(range(1, k + 1))\n    current_sum = min_sum\n\n    # Distribute the remaining problems\n    remaining = n - current_sum\n    for i in range(k - 1, -1, -1):\n        # Maximum we can add to a[i] while respecting the conditions\n        max_add = min(remaining, (2 * a[i]) - a[i])\n        a[i] += max_add\n        remaining -= max_add\n        if remaining <= 0:\n            break\n\n    if remaining > 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(\" \".join(map(str, a)))\n\n# Read input\nn, k = map(int, input().split())\nsolve_problems(n, k)\n```",
    "97": "```python\nn = int(input())\nchips = list(map(int, input().split()))\n\neven_count = sum(1 for x in chips if x % 2 == 0)\nodd_count = n - even_count\n\n# The minimum coins required is the smaller of the two counts\nprint(min(even_count, odd_count))\n```",
    "91": "```python\ndef max_removable_length(s, t):\n    n, m = len(s), len(t)\n    \n    # Create a prefix array to find the first occurrence of t in s\n    prefix = [0] * m\n    j = 0\n    for i in range(n):\n        if j < m and s[i] == t[j]:\n            prefix[j] = i\n            j += 1\n    \n    # Create a suffix array to find the last occurrence of t in s\n    suffix = [0] * m\n    j = m - 1\n    for i in range(n - 1, -1, -1):\n        if j >= 0 and s[i] == t[j]:\n            suffix[j] = i\n            j -= 1\n    \n    # Calculate the maximum removable length\n    max_length = 0\n    for i in range(m - 1):\n        max_length = max(max_length, suffix[i + 1] - prefix[i] - 1)\n    \n    # Consider removing from the start or the end\n    max_length = max(max_length, suffix[0])  # Remove from the start\n    max_length = max(max_length, n - 1 - prefix[m - 1])  # Remove from the end\n    \n    return max_length\n\ns = input().strip()\nt = input().strip()\nprint(max_removable_length(s, t))\n```",
    "98": "```python\ndef min_moves_to_reach_n(N):\n    moves = float('inf')\n    \n    for i in range(1, int(N**0.5) + 1):\n        if N % i == 0:\n            j = N // i\n            moves = min(moves, (i - 1) + (j - 1))\n    \n    return moves\n\nN = int(input())\nprint(min_moves_to_reach_n(N))\n```",
    "96": "```python\ndef restore_permutation(n, q):\n    p = [0] * n\n    p[0] = 0  # We can start from any arbitrary number, we'll adjust later\n\n    for i in range(1, n):\n        p[i] = p[i - 1] + q[i - 1]\n\n    min_p = min(p)\n    # Adjust the permutation to start from 1\n    offset = 1 - min_p\n\n    for i in range(n):\n        p[i] += offset\n\n    if len(set(p)) == n and all(1 <= x <= n for x in p):\n        print(' '.join(map(str, p)))\n    else:\n        print(-1)\n\n# Read input\nn = int(input())\nq = list(map(int, input().split()))\n\nrestore_permutation(n, q)\n```",
    "93": "```python\ndef construct_tree(n, d, k):\n    if d > 2 * (k - 1) + 1 or (d == 1 and n > 2) or (d == 0 and n > 1):\n        print(\"NO\")\n        return\n    \n    print(\"YES\")\n    edges = []\n    \n    # Create the main path for the diameter\n    for i in range(1, d + 1):\n        edges.append((i, i + 1))\n    \n    # Now we have a path of length d, which uses d edges and has d + 1 vertices\n    current_vertex = d + 2\n    \n    # We can attach additional vertices to the vertices in the path\n    for i in range(1, d + 2):\n        if current_vertex > n:\n            break\n        # Attach vertices to the current vertex if it has not reached the degree limit\n        for _ in range(k - 1):\n            if current_vertex > n:\n                break\n            edges.append((i, current_vertex))\n            current_vertex += 1\n    \n    # If we have used up all vertices, print the edges\n    if current_vertex - 1 == n:\n        for u, v in edges:\n            print(u, v)\n    else:\n        print(\"NO\")\n\n# Read input\nn, d, k = map(int, input().split())\nconstruct_tree(n, d, k)\n```",
    "99": "```python\nn = int(input())\na1, a2, a3 = map(int, input().split())\nb1, b2, b3 = map(int, input().split())\n\n# Maximum wins for Alice\nmax_wins = min(a1, b3) + min(a2, b1) + min(a3, b2)\n\n# Minimum wins for Alice\n# Calculate Bob's wins\nbob_wins = min(b1, a2) + min(b2, a3) + min(b3, a1)\n\n# Total rounds - Bob's wins gives Alice's minimum wins\nmin_wins = n - bob_wins\n\nprint(min_wins, max_wins)\n```",
    "94": "```python\ndef construct_binary_string(a, b, x):\n    # Start with the base pattern\n    if x % 2 == 1:\n        # If x is odd, start with '1' if we have more '1's, otherwise start with '0'\n        start_with_one = b > a\n    else:\n        # If x is even, start with '0' if we have more '0's, otherwise start with '1'\n        start_with_one = a > b\n\n    result = []\n    if start_with_one:\n        result.append('1')\n        b -= 1\n    else:\n        result.append('0')\n        a -= 1\n\n    # Alternate between 0 and 1 to create the required number of transitions\n    for _ in range(x // 2):\n        if start_with_one:\n            result.append('0')\n            a -= 1\n            result.append('1')\n            b -= 1\n        else:\n            result.append('1')\n            b -= 1\n            result.append('0')\n            a -= 1\n\n    # Add the remaining characters\n    result.append('1' * b)\n    result.append('0' * a)\n\n    # Join the list into a string and print\n    print(''.join(result))\n\n# Read input\na, b, x = map(int, input().split())\nconstruct_binary_string(a, b, x)\n```",
    "95": "```python\ndef generate_string(n, s, t):\n    # Create a list to hold the result\n    res = []\n    \n    # Count of each character\n    count_a = n\n    count_b = n\n    count_c = n\n    \n    # Function to check if the last two characters form a forbidden substring\n    def is_forbidden():\n        if len(res) < 2:\n            return False\n        return ''.join(res[-2:]) in (s, t)\n    \n    # Build the result string\n    while count_a > 0 or count_b > 0 or count_c > 0:\n        for char in 'abc':\n            if char == 'a' and count_a > 0:\n                res.append('a')\n                count_a -= 1\n            elif char == 'b' and count_b > 0:\n                res.append('b')\n                count_b -= 1\n            elif char == 'c' and count_c > 0:\n                res.append('c')\n                count_c -= 1\n            \n            # Check if the last two characters form a forbidden substring\n            if is_forbidden():\n                # If forbidden, remove the last character and try the next one\n                res.pop()\n                if char == 'a':\n                    count_a += 1\n                elif char == 'b':\n                    count_b += 1\n                elif char == 'c':\n                    count_c += 1\n                break\n        else:\n            # If we went through all characters and didn't break, we are done\n            break\n    \n    # Check if we have used all characters\n    if count_a == 0 and count_b == 0 and count_c == 0:\n        print(\"YES\")\n        print(''.join(res))\n    else:\n        print(\"NO\")\n\n# Input reading\nn = int(input())\ns = input().strip()\nt = input().strip()\n\ngenerate_string(n, s, t)\n```",
    "88": "```python\nn = int(input())\na = list(map(int, input().split()))\n\nfrom collections import Counter\n\ncount = Counter(a)\nmatrix = [[0] * n for _ in range(n)]\n\n# Check for the number of odd occurrences\nodd_count = sum(1 for v in count.values() if v % 2 != 0)\n\n# For odd n, we can have at most one odd count, for even n, we can't have any\nif (n % 2 == 0 and odd_count > 0) or (n % 2 == 1 and odd_count > 1):\n    print(\"NO\")\nelse:\n    # Fill the matrix\n    half = []\n    center = None\n\n    for num, freq in count.items():\n        if freq % 2 == 1:\n            center = num  # For the center of the matrix if n is odd\n        half.extend([num] * (freq // 2))\n\n    # Fill the matrix\n    idx = 0\n    for i in range((n + 1) // 2):\n        for j in range((n + 1) // 2):\n            if i == j and n % 2 == 1 and i == n // 2:\n                matrix[i][j] = center\n            else:\n                matrix[i][j] = half[idx]\n                matrix[i][n - j - 1] = half[idx]\n                matrix[n - i - 1][j] = half[idx]\n                matrix[n - i - 1][n - j - 1] = half[idx]\n                idx += 1\n\n    print(\"YES\")\n    for row in matrix:\n        print(\" \".join(map(str, row)))\n```"
}