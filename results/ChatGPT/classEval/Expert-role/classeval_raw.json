{
    "5": "```python\nclass AutomaticGuitarSimulator:\n    def __init__(self, text) -> None:\n        self.play_text = text\n\n    def interpret(self, display=False):\n        if not self.play_text.strip():\n            return []\n        \n        result = []\n        parts = self.play_text.split()\n        \n        for part in parts:\n            chord = ''.join(filter(str.isalpha, part))\n            tune = ''.join(filter(str.isdigit, part))\n            result.append({'Chord': chord, 'Tune': tune})\n        \n        if display:\n            for item in result:\n                print(self.display(item['Chord'], item['Tune']))\n        \n        return result\n\n    def display(self, key, value):\n        return f\"Normal Guitar Playing -- Chord: {key}, Play Tune: {value}\"\n```",
    "9": "```python\nclass BigNumCalculator:\n    \"\"\"\n    This is a class that implements big number calculations, including adding, subtracting and multiplying.\n    \"\"\"\n\n    @staticmethod\n    def add(num1, num2):\n        \"\"\"\n        Adds two big numbers.\n        :param num1: The first number to add,str.\n        :param num2: The second number to add,str.\n        :return: The sum of the two numbers,str.\n        \"\"\"\n        return str(int(num1) + int(num2))\n\n    @staticmethod\n    def subtract(num1, num2):\n        \"\"\"\n        Subtracts two big numbers.\n        :param num1: The first number to subtract,str.\n        :param num2: The second number to subtract,str.\n        :return: The difference of the two numbers,str.\n        \"\"\"\n        return str(int(num1) - int(num2))\n\n    @staticmethod\n    def multiply(num1, num2):\n        \"\"\"\n        Multiplies two big numbers.\n        :param num1: The first number to multiply,str.\n        :param num2: The second number to multiply,str.\n        :return: The product of the two numbers,str.\n        \"\"\"\n        return str(int(num1) * int(num2))\n```",
    "6": "```python\nclass AvgPartition:\n    \"\"\"\n    This is a class that partitions the given list into different blocks by specifying the number of partitions, with each block having a uniformly distributed length.\n    \"\"\"\n\n    def __init__(self, lst, limit):\n        \"\"\"\n        Initialize the class with the given list and the number of partitions, and check if the number of partitions is greater than 0.\n        \"\"\"\n        self.lst = lst\n        self.limit = limit\n        if limit <= 0:\n            raise ValueError(\"Number of partitions must be greater than 0.\")\n\n    def setNum(self):\n        \"\"\"\n        Calculate the size of each block and the remainder of the division.\n        :return: the size of each block and the remainder of the division, tuple.\n        >>> a = AvgPartition([1, 2, 3, 4], 2)\n        >>> a.setNum()\n        (2, 0)\n        \"\"\"\n        size = len(self.lst) // self.limit\n        remainder = len(self.lst) % self.limit\n        return size, remainder\n\n    def get(self, index):\n        \"\"\"\n        Calculate the size of each block and the remainder of the division, \n        and calculate the corresponding start and end positions based on the index of the partition.\n        :param index: the index of the partition,int.\n        :return: the corresponding block, list.\n        >>> a = AvgPartition([1, 2, 3, 4], 2)\n        >>> a.get(0)\n        [1, 2]\n        \"\"\"\n        block_size, remainder = self.setNum()\n        start = index * block_size + min(index, remainder)\n        end = start + block_size + (1 if index < remainder else 0)\n        return self.lst[start:end]\n```",
    "10": "```python\nclass BinaryDataProcessor:\n    \"\"\"\n    This is a class used to process binary data, which includes functions such as clearing non 0 or 1 characters, \n    counting binary string information, and converting to corresponding strings based on different encoding methods.\n    \"\"\"\n\n    def __init__(self, binary_string):\n        \"\"\"\n        Initialize the class with a binary string and clean it by removing all non 0 or 1 characters.\n        \"\"\"\n        self.binary_string = binary_string\n        self.clean_non_binary_chars()\n\n    def clean_non_binary_chars(self):\n        \"\"\"\n        Clean the binary string by removing all non 0 or 1 characters.\n        \"\"\"\n        self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))\n\n    def calculate_binary_info(self):\n        \"\"\"\n        Calculate the binary string information, including the percentage of 0 and 1, and the total length of the binary string.\n        \"\"\"\n        total_length = len(self.binary_string)\n        if total_length == 0:\n            return {'Zeroes': 0, 'Ones': 0, 'Bit length': 0}\n        \n        zeroes = self.binary_string.count('0')\n        ones = self.binary_string.count('1')\n        return {\n            'Zeroes': zeroes / total_length,\n            'Ones': ones / total_length,\n            'Bit length': total_length\n        }\n\n    def convert_to_ascii(self):\n        \"\"\"\n        Convert the binary string to ascii string.\n        \"\"\"\n        ascii_chars = []\n        for i in range(0, len(self.binary_string), 8):\n            byte = self.binary_string[i:i+8]\n            if len(byte) == 8:\n                ascii_chars.append(chr(int(byte, 2)))\n        return ''.join(ascii_chars)\n\n    def convert_to_utf8(self):\n        \"\"\"\n        Convert the binary string to utf-8 string.\n        \"\"\"\n        return self.convert_to_ascii()  # UTF-8 is identical to ASCII for standard characters\n```",
    "7": "```python\nclass BalancedBrackets:\n    \"\"\"\n    This is a class that checks for bracket matching\n    \"\"\"\n\n    def __init__(self, expr):\n        \"\"\"\n        Initializes the class with an expression.\n        :param expr: The expression to check for balanced brackets, str.\n        \"\"\"\n        self.stack = []\n        self.left_brackets = [\"(\", \"{\", \"[\"]\n        self.right_brackets = [\")\", \"}\", \"]\"]\n        self.expr = expr\n\n    def clear_expr(self):\n        \"\"\"\n        Clears the expression of all characters that are not brackets.\n        >>> b = BalancedBrackets(\"a(b)c\")\n        >>> b.clear_expr()\n        >>> b.expr\n        '()'\n        \"\"\"\n        self.expr = ''.join(char for char in self.expr if char in self.left_brackets + self.right_brackets)\n\n    def check_balanced_brackets(self):\n        \"\"\"\n        Checks if the expression has balanced brackets.\n        :return: True if the expression has balanced brackets, False otherwise.\n        >>> b = BalancedBrackets(\"a(b)c\")\n        >>> b.check_balanced_brackets()\n        True\n        \"\"\"\n        stack = []\n        bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n        for char in self.expr:\n            if char in self.left_brackets:\n                stack.append(char)\n            elif char in self.right_brackets:\n                if not stack or stack[-1] != bracket_map[char]:\n                    return False\n                stack.pop()\n\n        return len(stack) == 0\n```",
    "0": "```python\nimport logging\nimport datetime\n\nclass AccessGatewayFilter:\n    \"\"\"\n    This class is a filter used for accessing gateway filtering, primarily for authentication and access log recording.\n    \"\"\"\n\n    def __init__(self):\n        self.logger = logging.getLogger(__name__)\n\n    def filter(self, request):\n        \"\"\"\n        Filter the incoming request based on certain rules and conditions.\n        :param request: dict, the incoming request details\n        :return: bool, True if the request is allowed, False otherwise\n        \"\"\"\n        if self.is_start_with(request['path']):\n            return True\n        \n        if 'headers' in request and 'Authorization' in request['headers']:\n            user_info = self.get_jwt_user(request)\n            if user_info:\n                level = user_info.get('level', 0)\n                if level >= 3:\n                    self.set_current_user_info_and_log(user_info)\n                    return True\n                elif level == 1:\n                    return None\n                else:\n                    return False\n        return False\n\n    def is_start_with(self, request_uri):\n        \"\"\"\n        Check if the request URI starts with certain prefixes.\n        Currently, the prefixes being checked are \"/api\" and \"/login\".\n        :param request_uri: str, the URI of the request\n        :return: bool, True if the URI starts with certain prefixes, False otherwise\n        \"\"\"\n        return request_uri.startswith(('/api', '/login'))\n\n    def get_jwt_user(self, request):\n        \"\"\"\n        Get the user information from the JWT token in the request.\n        :param request: dict, the incoming request details\n        :return: dict or None, the user information if the token is valid, None otherwise\n        \"\"\"\n        auth = request.get('headers', {}).get('Authorization', {})\n        user = auth.get('user')\n        jwt = auth.get('jwt')\n        \n        if user and jwt == user['name'] + str(datetime.date.today()):\n            return user\n        return None\n\n    def set_current_user_info_and_log(self, user):\n        \"\"\"\n        Set the current user information and log the access.\n        :param user: dict, the user information\n        :return: None\n        \"\"\"\n        self.logger.info(f\"User logged in: {user['name']} from {user.get('address', 'unknown')}\")\n```",
    "8": "```python\nclass BankAccount:\n    \"\"\"\n    This is a class as a bank account system, which supports deposit money, withdraw money, view balance, and transfer money.\n    \"\"\"\n\n    def __init__(self, balance=0):\n        \"\"\"\n        Initializes a bank account object with an attribute balance, default value is 0.\n        \"\"\"\n        self.balance = balance\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposits a certain amount into the account, increasing the account balance, return the current account balance.\n        If amount is negative, raise a ValueError(\"Invalid amount\").\n        :param amount: int\n        \"\"\"\n        if amount < 0:\n            raise ValueError(\"Invalid amount\")\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        \"\"\"\n        Withdraws a certain amount from the account, decreasing the account balance, return the current account balance.\n        If amount is negative, raise a ValueError(\"Invalid amount\").\n        If the withdrawal amount is greater than the account balance, raise a ValueError(\"Insufficient balance.\").\n        :param amount: int\n        \"\"\"\n        if amount < 0:\n            raise ValueError(\"Invalid amount\")\n        if amount > self.balance:\n            raise ValueError(\"Insufficient balance.\")\n        self.balance -= amount\n        return self.balance\n\n    def view_balance(self):\n        \"\"\"\n        Return the account balance.\n        \"\"\"\n        return self.balance\n\n    def transfer(self, other_account, amount):\n        \"\"\"\n        Transfers a certain amount from the current account to another account.\n        :param other_account: BankAccount\n        :param amount: int\n        \"\"\"\n        if amount < 0:\n            raise ValueError(\"Invalid amount\")\n        if amount > self.balance:\n            raise ValueError(\"Insufficient balance.\")\n        self.withdraw(amount)\n        other_account.deposit(amount)\n```",
    "4": "```python\nclass AssessmentSystem:\n    \"\"\"\n    This is a class as an student assessment system, which supports add student, add course score, calculate GPA, and other functions for students and courses.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the students dict in assessment system.\n        \"\"\"\n        self.students = {}\n\n    def add_student(self, name, grade, major):\n        \"\"\"\n        Add a new student into self.students dict\n        :param name: str, student name\n        :param grade: int, student grade\n        :param major: str, student major\n        \"\"\"\n        self.students[name] = {'name': name, 'grade': grade, 'major': major, 'courses': {}}\n\n    def add_course_score(self, name, course, score):\n        \"\"\"\n        Add score of specific course for student in self.students\n        :param name: str, student name\n        :param course: str, course name\n        :param score: int, course score\n        \"\"\"\n        if name in self.students:\n            self.students[name]['courses'][course] = score\n\n    def get_gpa(self, name):\n        \"\"\"\n        Get average grade of one student.\n        :param name: str, student name\n        :return: if name is in students and this students have courses grade, return average grade(float)\n                    or None otherwise\n        \"\"\"\n        if name in self.students:\n            courses = self.students[name]['courses']\n            if courses:\n                return sum(courses.values()) / len(courses)\n        return None\n\n    def get_all_students_with_fail_course(self):\n        \"\"\"\n        Get all students who have any score below 60\n        :return: list of str, student name\n        \"\"\"\n        return [name for name, info in self.students.items() if any(score < 60 for score in info['courses'].values())]\n\n    def get_course_average(self, course):\n        \"\"\"\n        Get the average score of a specific course.\n        :param course: str, course name\n        :return: float, average scores of this course if anyone have score of this course, or None if nobody have records.\n        \"\"\"\n        scores = [info['courses'][course] for info in self.students.values() if course in info['courses']]\n        if scores:\n            return sum(scores) / len(scores)\n        return None\n\n    def get_top_student(self):\n        \"\"\"\n        Calculate every student's gpa with get_gpa method, and find the student with highest gpa\n        :return: str, name of student whose gpa is highest\n        \"\"\"\n        top_student = None\n        highest_gpa = -1\n        \n        for name in self.students:\n            gpa = self.get_gpa(name)\n            if gpa is not None and gpa > highest_gpa:\n                highest_gpa = gpa\n                top_student = name\n                \n        return top_student\n```",
    "1": "```python\nimport math\n\nclass AreaCalculator:\n    \"\"\"\n    This is a class for calculating the area of different shapes, including circle, sphere, cylinder, sector and annulus.\n    \"\"\"\n\n    def __init__(self, radius):\n        \"\"\"\n        Initialize the radius for shapes.\n        :param radius: float\n        \"\"\"\n        self.radius = radius\n\n    def calculate_circle_area(self):\n        \"\"\"\n        calculate the area of circle based on self.radius\n        :return: area of circle, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_circle_area()\n        12.566370614359172\n        \"\"\"\n        return math.pi * (self.radius ** 2)\n\n    def calculate_sphere_area(self):\n        \"\"\"\n        calculate the area of sphere based on self.radius\n        :return: area of sphere, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_sphere_area()\n        50.26548245743669\n        \"\"\"\n        return 4 * math.pi * (self.radius ** 2)\n\n    def calculate_cylinder_area(self, height):\n        \"\"\"\n        calculate the area of cylinder based on self.radius and height\n        :param height: height of cylinder, float\n        :return: area of cylinder, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_cylinder_area(3)\n        62.83185307179586\n        \"\"\"\n        base_area = self.calculate_circle_area()\n        lateral_area = 2 * math.pi * self.radius * height\n        return 2 * base_area + lateral_area\n\n    def calculate_sector_area(self, angle):\n        \"\"\"\n        calculate the area of sector based on self.radius and angle\n        :param angle: angle of sector, float\n        :return: area of sector, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_sector_area(math.pi)\n        6.283185307179586\n        \"\"\"\n        return 0.5 * self.radius ** 2 * angle\n\n    def calculate_annulus_area(self, inner_radius, outer_radius):\n        \"\"\"\n        calculate the area of annulus based on inner_radius and outer_radius\n        :param inner_radius: inner radius of sector, float\n        :param outer_radius: outer radius of sector, float\n        :return: area of annulus, float\n        >>> areaCalculator.calculate_annulus_area(2, 3)\n        15.707963267948966\n        \"\"\"\n        return math.pi * (outer_radius ** 2 - inner_radius ** 2)\n```",
    "2": "```python\nclass ArgumentParser:\n    \"\"\"\n    This is a class for parsing command line arguments to a dictionary.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the fields.\n        self.arguments is a dict that stores the args in a command line\n        self.requried is a set that stores the required arguments\n        self.types is a dict that stores type of every arguments.\n        \"\"\"\n        self.arguments = {}\n        self.required = set()\n        self.types = {}\n\n    def parse_arguments(self, command_string):\n        \"\"\"\n        Parses the given command line argument string and invoke _convert_type to stores the parsed result in specific type in the arguments dictionary.\n        Checks for missing required arguments, if any, and returns False with the missing argument names, otherwise returns True.\n        :param command_string: str, command line argument string, formatted like \"python script.py --arg1=value1 -arg2 value2 --option1 -option2\"\n        :return tuple: (True, None) if parsing is successful, (False, missing_args) if parsing fails,\n            where missing_args is a set of the missing argument names which are str.\n        \"\"\"\n        import re\n\n        # Split the command_string into arguments\n        args = re.findall(r'--\\w+=\\w+|--\\w+|-{1}\\w+|-{1}\\w+ \\w+', command_string)\n\n        # Reset arguments\n        self.arguments.clear()\n        missing_args = set()\n\n        for arg in args:\n            if '=' in arg:\n                key, value = arg.split('=')\n                key = key.lstrip('-')\n            else:\n                parts = arg.split()\n                key = parts[0].lstrip('-')\n                value = True\n\n            # Check if the key is defined\n            self.arguments[key] = self._convert_type(key, value)\n\n        # Check for missing required arguments\n        missing_args = self.required - set(self.arguments.keys())\n        return (len(missing_args) == 0, missing_args if missing_args else None)\n\n    def get_argument(self, key):\n        \"\"\"\n        Retrieves the value of the specified argument from the arguments dictionary and returns it.\n        :param key: str, argument name\n        :return: The value of the argument, or None if the argument does not exist.\n        \"\"\"\n        return self.arguments.get(key, None)\n\n    def add_argument(self, arg, required=False, arg_type=str):\n        \"\"\"\n        Adds an argument to self.types and self.required.\n        Check if it is a required argument and store the argument type.\n        If the argument is set as required, it wull be added to the required set.\n        The argument type and name are stored in the types dictionary as key-value pairs.\n        :param arg: str, argument name\n        :param required: bool, whether the argument is required, default is False\n        :param arg_type: str, Argument type, default is str\n        \"\"\"\n        self.types[arg] = arg_type\n        if required:\n            self.required.add(arg)\n\n    def _convert_type(self, arg, value):\n        \"\"\"\n        Try to convert the type of input value by searching in self.types.\n        :param value: str, the input value in command line\n        :return: return corresponding value in self.types if convert successfully, or the input value otherwise\n        \"\"\"\n        if arg in self.types:\n            try:\n                return self.types[arg](value)\n            except ValueError:\n                return value\n        return value\n```",
    "11": "```python\nclass BitStatusUtil:\n    \"\"\"\n    This is a utility class that provides methods for manipulating and checking status using bitwise operations.\n    \"\"\"\n\n    @staticmethod\n    def add(states, stat):\n        \"\"\"\n        Add a status to the current status, and check the parameters whether they are legal.\n        :param states: Current status, int.\n        :param stat: Status to be added, int.\n        :return: The status after adding the status, int.\n        >>> bit_status_util = BitStatusUtil()\n        >>> bit_status_util.add(2,4)\n        6\n        \"\"\"\n        return states | stat\n\n    @staticmethod\n    def has(states, stat):\n        \"\"\"\n        Check if the current status contains the specified status, and check the parameters whether they are legal.\n        :param states: Current status, int.\n        :param stat: Specified status, int.\n        :return: True if the current status contains the specified status, otherwise False, bool.\n        >>> bit_status_util = BitStatusUtil()\n        >>> bit_status_util.has(6,2)\n        True\n        \"\"\"\n        return (states & stat) == stat\n\n    @staticmethod\n    def remove(states, stat):\n        \"\"\"\n        Remove the specified status from the current status, and check the parameters whether they are legal.\n        :param states: Current status, int.\n        :param stat: Specified status, int.\n        :return: The status after removing the specified status, int.\n        >>> bit_status_util = BitStatusUtil()\n        >>> bit_status_util.remove(6,2)\n        4\n        \"\"\"\n        return states & ~stat\n\n    @staticmethod\n    def check(args):\n        \"\"\"\n        Check if the parameters are legal, args must be greater than or equal to 0 and must be even, if not, raise ValueError.\n        :param args: Parameters to be checked, list.\n        :return: None.\n        >>> bit_status_util = BitStatusUtil()\n        >>> bit_status_util.check([2,3,4])\n        Traceback (most recent call last):\n        ...\n        ValueError: 3 not even\n        \"\"\"\n        for arg in args:\n            if arg < 0:\n                raise ValueError(f\"{arg} is negative\")\n            if arg % 2 != 0:\n                raise ValueError(f\"{arg} not even\")\n```",
    "3": "```python\nimport itertools\n\nclass ArrangementCalculator:\n    \"\"\"\n    The Arrangement class provides permutation calculations and selection operations for a given set of data elements.\n    \"\"\"\n\n    def __init__(self, datas):\n        \"\"\"\n        Initializes the ArrangementCalculator object with a list of datas.\n        :param datas: List, the data elements to be used for arrangements.\n        \"\"\"\n        self.datas = datas\n\n    @staticmethod\n    def count(n, m=None):\n        \"\"\"\n        Counts the number of arrangements by choosing m items from n items (permutations).\n        If m is not provided or n equals m, returns factorial(n).\n        :param n: int, the total number of items.\n        :param m: int, the number of items to be chosen (default=None).\n        :return: int, the count of arrangements.\n        \"\"\"\n        if m is None or n == m:\n            return ArrangementCalculator.factorial(n)\n        return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)\n\n    @staticmethod\n    def count_all(n):\n        \"\"\"\n        Counts the total number of all possible arrangements by choosing at least 1 item and at most n items from n items.\n        :param n: int, the total number of items.\n        :return: int, the count of all arrangements.\n        \"\"\"\n        total = 0\n        for m in range(1, n + 1):\n            total += ArrangementCalculator.count(n, m)\n        return total\n\n    def select(self, m=None):\n        \"\"\"\n        Generates a list of arrangements by selecting m items from the internal datas.\n        If m is not provided, selects all items.\n        :param m: int, the number of items to be chosen (default=None).\n        :return: List, a list of arrangements.\n        \"\"\"\n        if m is None:\n            m = len(self.datas)\n        return [list(p) for p in itertools.permutations(self.datas, m)]\n\n    def select_all(self):\n        \"\"\"\n        Generates a list of all arrangements by selecting at least 1 item and at most the number of internal datas.\n        :return: List, a list of all arrangements.\n        \"\"\"\n        all_arrangements = []\n        for m in range(1, len(self.datas) + 1):\n            all_arrangements.extend(self.select(m))\n        return all_arrangements\n\n    @staticmethod\n    def factorial(n):\n        \"\"\"\n        Calculates the factorial of a given number.\n        :param n: int, the number to calculate the factorial.\n        :return: int, the factorial of the given number.\n        \"\"\"\n        if n == 0 or n == 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n```",
    "15": "```python\nclass BoyerMooreSearch:\n    \"\"\"\n    This is a class that implements the Boyer-Moore algorithm for string searching,\n    which is used to find occurrences of a pattern within a given text.\n    \"\"\"\n\n    def __init__(self, text, pattern):\n        \"\"\"\n        Initializes the BoyerMooreSearch class with the given text and pattern.\n        :param text: The text to be searched, str.\n        :param pattern: The pattern to be searched for, str.\n        \"\"\"\n        self.text = text\n        self.pattern = pattern\n        self.textLen = len(text)\n        self.patLen = len(pattern)\n\n    def match_in_pattern(self, char):\n        \"\"\"\n        Finds the rightmost occurrence of a character in the pattern.\n        :param char: The character to be searched for, str.\n        :return: The index of the rightmost occurrence of the character in the pattern, int.\n        \"\"\"\n        index = -1\n        for i in range(self.patLen):\n            if self.pattern[i] == char:\n                index = i\n        return index\n\n    def mismatch_in_text(self, currentPos):\n        \"\"\"\n        Determines the position of the first mismatch between the pattern and the text.\n        :param currentPos: The current position in the text, int.\n        :return: The position of the first mismatch between the pattern and the text, int, otherwise -1.\n        \"\"\"\n        for i in range(self.patLen):\n            if currentPos + i >= self.textLen or self.pattern[i] != self.text[currentPos + i]:\n                return i\n        return -1\n\n    def bad_character_heuristic(self):\n        \"\"\"\n        Finds all occurrences of the pattern in the text.\n        :return: A list of all positions of the pattern in the text, list.\n        \"\"\"\n        positions = []\n        currentPos = 0\n\n        while currentPos <= self.textLen - self.patLen:\n            mismatch_index = self.mismatch_in_text(currentPos)\n            if mismatch_index == -1:\n                positions.append(currentPos)\n                currentPos += 1  # Move to the next character\n            else:\n                bad_char_index = self.match_in_pattern(self.text[currentPos + mismatch_index])\n                shift = mismatch_index - bad_char_index if bad_char_index != -1 else mismatch_index + 1\n                currentPos += max(1, shift)\n\n        return positions\n```",
    "14": "```python\nimport sqlite3\n\nclass BookManagementDB:\n    \"\"\"\n    This is a database class as a book management system, used to handle the operations of adding, removing, updating, and searching books.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the class by creating a database connection and cursor, \n        and creates the book table if it does not already exist\n        :param db_name: str, the name of db file\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"\n        Creates the book table in the database if it does not already exist.\n        \"\"\"\n        self.cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS books (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            title TEXT NOT NULL,\n            author TEXT NOT NULL,\n            available INTEGER NOT NULL DEFAULT 1\n        )\n        \"\"\")\n        self.connection.commit()\n\n    def add_book(self, title, author):\n        \"\"\"\n        Adds a book to the database with the specified title and author, \n        setting its availability to 1 as free to borrow.\n        :param title: str, book title\n        :param author: str, author name\n        \"\"\"\n        self.cursor.execute(\"INSERT INTO books (title, author) VALUES (?, ?)\", (title, author))\n        self.connection.commit()\n\n    def remove_book(self, book_id):\n        \"\"\"\n        Removes a book from the database based on the given book ID.\n        :param book_id: int\n        \"\"\"\n        self.cursor.execute(\"DELETE FROM books WHERE id = ?\", (book_id,))\n        self.connection.commit()\n\n    def borrow_book(self, book_id):\n        \"\"\"\n        Marks a book as borrowed in the database based on the given book ID.\n        :param book_id: int\n        \"\"\"\n        self.cursor.execute(\"UPDATE books SET available = 0 WHERE id = ?\", (book_id,))\n        self.connection.commit()\n\n    def return_book(self, book_id):\n        \"\"\"\n        Marks a book as returned in the database based on the given book ID.\n        :param book_id: int\n        \"\"\"\n        self.cursor.execute(\"UPDATE books SET available = 1 WHERE id = ?\", (book_id,))\n        self.connection.commit()\n\n    def search_books(self):\n        \"\"\"\n        Retrieves all books from the database and returns their information.\n        :return books: list[tuple], the information of all books in database\n        \"\"\"\n        self.cursor.execute(\"SELECT * FROM books\")\n        books = self.cursor.fetchall()\n        return books\n```",
    "18": "```python\nclass CamelCaseMap:\n    \"\"\"\n    This is a custom class that allows keys to be in camel case style by converting them from underscore style, which provides dictionary-like functionality.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize data to an empty dictionary\n        \"\"\"\n        self._data = {}\n\n    def __getitem__(self, key):\n        \"\"\"\n        Return the value corresponding to the key\n        :param key:str\n        :return:str,the value corresponding to the key\n        \"\"\"\n        return self._data[self._convert_key(key)]\n\n    def __setitem__(self, key, value):\n        \"\"\"\n        Set the value corresponding to the key to the specified value\n        :param key:str\n        :param value:str, the specified value\n        :return:None\n        \"\"\"\n        self._data[self._convert_key(key)] = value\n\n    def __delitem__(self, key):\n        \"\"\"\n        Delete the value corresponding to the key\n        :param key:str\n        :return:None\n        \"\"\"\n        del self._data[self._convert_key(key)]\n\n    def __iter__(self):\n        \"\"\"\n        Returning Iterable Objects with Own Data\n        :return:Iterator\n        \"\"\"\n        return iter(self._data)\n\n    def __len__(self):\n        \"\"\"\n        Returns the length of the own data\n        :return:int, length of data\n        \"\"\"\n        return len(self._data)\n\n    def _convert_key(self, key):\n        \"\"\"\n        convert key string into camel case\n        :param key:str\n        :return:str, converted key string\n        \"\"\"\n        if isinstance(key, str):\n            return self._to_camel_case(key)\n        return key\n\n    @staticmethod\n    def _to_camel_case(key):\n        \"\"\"\n        convert key string into camel case\n        :param key:str\n        :return:str, converted key string\n        \"\"\"\n        parts = key.split('_')\n        return parts[0] + ''.join(part.capitalize() for part in parts[1:])\n```",
    "13": "```python\nclass BookManagement:\n    \"\"\"\n    This is a class as managing books system, which supports to add and remove books from the inventory dict,\n    view the inventory, and check the quantity of a specific book.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the inventory of Book Manager.\n        \"\"\"\n        self.inventory = {}\n\n    def add_book(self, title, quantity=1):\n        \"\"\"\n        Add one or several books to inventory which is sorted by book title.\n        :param title: str, the book title\n        :param quantity: int, default value is 1.\n        \"\"\"\n        if title in self.inventory:\n            self.inventory[title] += quantity\n        else:\n            self.inventory[title] = quantity\n        self.inventory = dict(sorted(self.inventory.items()))\n\n    def remove_book(self, title, quantity):\n        \"\"\"\n        Remove one or several books from inventory which is sorted by book title.\n        Raise an exception for invalid input.\n        :param title: str, the book title\n        :param quantity: int\n        \"\"\"\n        if title not in self.inventory:\n            raise Exception(\"Book not found in inventory.\")\n        if quantity <= 0 or quantity > self.inventory[title]:\n            raise Exception(\"Invalid quantity.\")\n        \n        self.inventory[title] -= quantity\n        if self.inventory[title] == 0:\n            del self.inventory[title]\n\n    def view_inventory(self):\n        \"\"\"\n        Get the inventory of the Book Management.\n        :return self.inventory: dictionary, {title(str): quantity(int), ...}\n        \"\"\"\n        return self.inventory\n\n    def view_book_quantity(self, title):\n        \"\"\"\n        Get the quantity of a book.\n        :param title: str, the title of the book.\n        :return: quantity, the quantity of this book title. return 0 when the title does not exist in self.inventory\n        \"\"\"\n        return self.inventory.get(title, 0)\n```",
    "19": "```python\nclass ChandrasekharSieve:\n    \"\"\"\n    This is a class that uses the Chandrasekhar's Sieve method to find all prime numbers within the range\n    \"\"\"\n\n    def __init__(self, n):\n        \"\"\"\n        Initialize the ChandrasekharSieve class with the given limit.\n        :param n: int, the upper limit for generating prime numbers\n        \"\"\"\n        self.n = n\n        self.primes = self.generate_primes()\n\n    def generate_primes(self):\n        \"\"\"\n        Generate prime numbers up to the specified limit using the Chandrasekhar sieve algorithm.\n        :return: list, a list of prime numbers\n        >>> cs = ChandrasekharSieve(20)\n        >>> cs.generate_primes()\n        [2, 3, 5, 7, 11, 13, 17, 19]\n        \"\"\"\n        if self.n < 2:\n            return []\n        \n        is_prime = [True] * (self.n + 1)\n        is_prime[0] = is_prime[1] = False\n        \n        for i in range(2, int(self.n**0.5) + 1):\n            if is_prime[i]:\n                for j in range(i * i, self.n + 1, i):\n                    is_prime[j] = False\n        \n        self.primes = [i for i in range(self.n + 1) if is_prime[i]]\n        return self.primes\n\n    def get_primes(self):\n        \"\"\"\n        Get the list of generated prime numbers.\n        :return: list, a list of prime numbers\n        >>> cs = ChandrasekharSieve(20)\n        >>> cs.get_primes()\n        [2, 3, 5, 7, 11, 13, 17, 19]\n        \"\"\"\n        return self.primes\n```",
    "17": "```python\nfrom datetime import datetime, timedelta\n\nclass CalendarUtil:\n    \"\"\"\n    This is a class as CalendarUtil that provides functionalities to manage calendar events, schedule appointments, and perform conflict checks.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the calendar with an empty list of events.\n        \"\"\"\n        self.events = []\n\n    def add_event(self, event):\n        \"\"\"\n        Add an event to the calendar.\n        :param event: The event to be added to the calendar, dict.\n        \"\"\"\n        self.events.append(event)\n\n    def remove_event(self, event):\n        \"\"\"\n        Remove an event from the calendar.\n        :param event: The event to be removed from the calendar, dict.\n        \"\"\"\n        self.events.remove(event)\n\n    def get_events(self, date):\n        \"\"\"\n        Get all events on a given date.\n        :param date: The date to get events for, datetime.\n        :return: A list of events on the given date, list.\n        \"\"\"\n        return [event for event in self.events if event['date'] == date]\n\n    def is_available(self, start_time, end_time):\n        \"\"\"\n        Check if the calendar is available for a given time slot.\n        :param start_time: The start time of the time slot, datetime.\n        :param end_time: The end time of the time slot, datetime.\n        :return: True if the calendar is available for the given time slot, False otherwise, bool.\n        \"\"\"\n        for event in self.events:\n            if (event['start_time'] < end_time and event['end_time'] > start_time):\n                return False\n        return True\n\n    def get_available_slots(self, date):\n        \"\"\"\n        Get all available time slots on a given date.\n        :param date: The date to get available time slots for, datetime.\n        :return: A list of available time slots on the given date, list.\n        \"\"\"\n        slots = []\n        start_of_day = datetime.combine(date, datetime.min.time())\n        end_of_day = datetime.combine(date, datetime.max.time())\n\n        busy_times = [(event['start_time'], event['end_time']) for event in self.events if event['date'] == date]\n\n        if not busy_times:\n            return [(start_of_day, end_of_day)]\n\n        busy_times.sort()\n        last_end_time = start_of_day\n\n        for start, end in busy_times:\n            if last_end_time < start:\n                slots.append((last_end_time, start))\n            last_end_time = max(last_end_time, end)\n\n        if last_end_time < end_of_day:\n            slots.append((last_end_time, end_of_day))\n\n        return slots\n\n    def get_upcoming_events(self, num_events):\n        \"\"\"\n        Get the next n upcoming events from the current date.\n        :param num_events: The number of upcoming events to get, int.\n        :return: A list of the next n upcoming events from the current date, list.\n        \"\"\"\n        now = datetime.now()\n        upcoming_events = sorted(event for event in self.events if event['start_time'] > now)\n        return upcoming_events[:num_events]\n```",
    "20": "```python\nfrom datetime import datetime\n\nclass Chat:\n    \"\"\"\n    This is a chat class with the functions of adding users, removing users, sending messages, and obtaining messages.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the Chat with an attribute users, which is an empty dictionary.\n        \"\"\"\n        self.users = {}\n\n    def add_user(self, username):\n        \"\"\"\n        Add a new user to the Chat.\n        :param username: The user's name, str.\n        :return: If the user is already in the Chat, returns False, otherwise, returns True.\n        \"\"\"\n        if username in self.users:\n            return False\n        self.users[username] = []\n        return True\n\n    def remove_user(self, username):\n        \"\"\"\n        Remove a user from the Chat.\n        :param username: The user's name, str.\n        :return: If the user is already in the Chat, returns True, otherwise, returns False.\n        \"\"\"\n        if username not in self.users:\n            return False\n        del self.users[username]\n        return True\n\n    def send_message(self, sender, receiver, message):\n        \"\"\"\n        Send a message from a user to another user.\n        :param sender: The sender's name, str.\n        :param receiver: The receiver's name, str.\n        :param message: The message, str.\n        :return: If the sender or the receiver is not in the Chat, returns False, otherwise, returns True.\n        \"\"\"\n        if sender not in self.users or receiver not in self.users:\n            return False\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        msg = {'sender': sender, 'receiver': receiver, 'message': message, 'timestamp': timestamp}\n        self.users[sender].append(msg)\n        self.users[receiver].append(msg)\n        return True\n\n    def get_messages(self, username):\n        \"\"\"\n        Get all the messages of a user from the Chat.\n        :param username: The user's name, str.\n        :return: A list of messages, each message is a dictionary with keys 'sender', 'receiver', 'message', 'timestamp'.\n        \"\"\"\n        return self.users.get(username, [])\n```",
    "16": "```python\nclass Calculator:\n    \"\"\"\n    This is a class for a calculator, capable of performing basic arithmetic calculations on numerical expressions using the operators +, -, *, /, and ^ (exponentiation).\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the operations performed by the five operators'+','-','*','/','^'\n        \"\"\"\n        self.operators = {\n            '+': lambda x, y: x + y,\n            '-': lambda x, y: x - y,\n            '*': lambda x, y: x * y,\n            '/': lambda x, y: x / y,\n            '^': lambda x, y: x ** y\n        }\n\n    def calculate(self, expression):\n        \"\"\"\n        Calculate the value of a given expression\n        :param expression: string, given expression\n        :return: If successful, returns the value of the expression; otherwise, returns None\n        \"\"\"\n        if not expression:\n            return None\n\n        def precedence(operator):\n            if operator in ('+', '-'):\n                return 1\n            elif operator in ('*', '/'):\n                return 2\n            elif operator == '^':\n                return 3\n            return 0\n\n        def apply_operator(operand_stack, operator_stack):\n            right = operand_stack.pop()\n            left = operand_stack.pop()\n            operator = operator_stack.pop()\n            result = self.operators[operator](left, right)\n            operand_stack.append(result)\n\n        operand_stack = []\n        operator_stack = []\n        i = 0\n        n = len(expression)\n\n        while i < n:\n            if expression[i].isdigit():\n                num = 0\n                while i < n and expression[i].isdigit():\n                    num = num * 10 + int(expression[i])\n                    i += 1\n                operand_stack.append(num)\n            elif expression[i] in self.operators:\n                while (operator_stack and\n                       precedence(operator_stack[-1]) >= precedence(expression[i])):\n                    apply_operator(operand_stack, operator_stack)\n                operator_stack.append(expression[i])\n                i += 1\n            elif expression[i] == '(':\n                operator_stack.append(expression[i])\n                i += 1\n            elif expression[i] == ')':\n                while operator_stack and operator_stack[-1] != '(':\n                    apply_operator(operand_stack, operator_stack)\n                operator_stack.pop()  # pop the '('\n                i += 1\n            else:\n                return None  # invalid character\n\n        while operator_stack:\n            apply_operator(operand_stack, operator_stack)\n\n        return operand_stack[0]\n\n    def precedence(self, operator):\n        \"\"\"\n        Returns the priority of the specified operator, where the higher the priority, the greater the assignment. The priority of '^' is greater than '/' and '*', and the priority of '/' and '*' is greater than '+' and '-'\n        :param operator: string, given operator\n        :return: int, the priority of the given operator, otherwise return 0\n        \"\"\"\n        if operator in ('+', '-'):\n            return 1\n        elif operator in ('*', '/'):\n            return 2\n        elif operator == '^':\n            return 3\n        return 0\n\n    def apply_operator(self, operand_stack, operator_stack):\n        \"\"\"\n        Use the operator at the top of the operator stack to perform the operation on the two numbers at the top of the operator stack, and store the results at the top of the operator stack\n        :param operand_stack:list\n        :param operator_stack:list\n        :return: the updated operand_stack and operator_stack\n        \"\"\"\n        right = operand_stack.pop()\n        left = operand_stack.pop()\n        operator = operator_stack.pop()\n        result = self.operators[operator](left, right)\n        operand_stack.append(result)\n        return operand_stack, operator_stack\n```",
    "12": "```python\nimport random\n\nclass BlackjackGame:\n    \"\"\"\n    This is a class representing a game of blackjack, which includes creating a deck, calculating the value of a hand, and determine the winner based on the hand values of the player and dealer.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the Blackjack Game with the attribute deck, player_hand and dealer_hand.\n        While initializing deck attribute, call the create_deck method to generate.\n        The deck stores 52 random order poker with the Jokers removed, format is ['AS', '2S', ...].\n        player_hand is a list which stores player's hand cards.\n        dealer_hand is a list which stores dealer's hand cards.\n        \"\"\"\n        self.deck = self.create_deck()\n        self.player_hand = []\n        self.dealer_hand = []\n\n    def create_deck(self):\n        \"\"\"\n        Create a deck of 52 cards, which stores 52 random order poker with the Jokers removed.\n        :return: a list of 52 random order poker with the Jokers removed, format is ['AS', '2S', ...].\n        \"\"\"\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        deck = [rank + suit for suit in suits for rank in ranks]\n        random.shuffle(deck)\n        return deck\n\n    def calculate_hand_value(self, hand):\n        \"\"\"\n        Calculate the value of the poker cards stored in hand list according to the rules of the Blackjack Game.\n        If the card is a digit, its value is added to the total hand value.\n        Value of J, Q, or K is 10, while Aces are worth 11.\n        If the total hand value exceeds 21 and there are Aces present, one Ace is treated as having a value of 1 instead of 11,\n        until the hand value is less than or equal to 21, or all Aces have been counted as value of 1.\n        :param hand: list\n        :return: the value of the poker cards stored in hand list, a number.\n        \"\"\"\n        value = 0\n        aces_count = 0\n        \n        for card in hand:\n            rank = card[:-1]  # Get the rank part of the card\n            if rank in ['J', 'Q', 'K']:\n                value += 10\n            elif rank == 'A':\n                value += 11\n                aces_count += 1\n            else:\n                value += int(rank)\n        \n        while value > 21 and aces_count > 0:\n            value -= 10  # Treat one Ace as 1 instead of 11\n            aces_count -= 1\n\n        return value\n\n    def check_winner(self, player_hand, dealer_hand):\n        \"\"\"\n        Determines the winner of a game by comparing the hand values of the player and dealer.\n        rule:\n        If both players have hand values that are equal to or less than 21, the winner is the one whose hand value is closer to 21.\n        Otherwise, the winner is the one with the lower hand value.\n        :param player_hand: list\n        :param dealer_hand: list\n        :return: the result of the game, only two certain str: 'Dealer wins' or 'Player wins'\n        \"\"\"\n        player_value = self.calculate_hand_value(player_hand)\n        dealer_value = self.calculate_hand_value(dealer_hand)\n\n        if player_value > 21:\n            return 'Dealer wins'\n        if dealer_value > 21:\n            return 'Player wins'\n        \n        if player_value > dealer_value:\n            return 'Player wins'\n        else:\n            return 'Dealer wins'\n```",
    "24": "```python\nclass ComplexCalculator:\n    \"\"\"\n    This is a class that implements addition, subtraction, multiplication, and division operations for complex numbers.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def add(c1, c2):\n        \"\"\"\n        Adds two complex numbers.\n        :param c1: The first complex number, complex.\n        :param c2: The second complex number, complex.\n        :return: The sum of the two complex numbers, complex.\n        >>> complexCalculator = ComplexCalculator()\n        >>> complexCalculator.add(1+2j, 3+4j)\n        (4+6j)\n        \"\"\"\n        return c1 + c2\n\n    @staticmethod\n    def subtract(c1, c2):\n        \"\"\"\n        Subtracts two complex numbers.\n        :param c1: The first complex number, complex.\n        :param c2: The second complex number, complex.\n        :return: The difference of the two complex numbers, complex.\n        >>> complexCalculator = ComplexCalculator()\n        >>> complexCalculator.subtract(1+2j, 3+4j)\n        (-2-2j)\n        \"\"\"\n        return c1 - c2\n\n    @staticmethod\n    def multiply(c1, c2):\n        \"\"\"\n        Multiplies two complex numbers.\n        :param c1: The first complex number, complex.\n        :param c2: The second complex number, complex.\n        :return: The product of the two complex numbers, complex.\n        >>> complexCalculator = ComplexCalculator()\n        >>> complexCalculator.multiply(1+2j, 3+4j)\n        (-5+10j)\n        \"\"\"\n        return c1 * c2\n\n    @staticmethod\n    def divide(c1, c2):\n        \"\"\"\n        Divides two complex numbers.\n        :param c1: The first complex number, complex.\n        :param c2: The second complex number, complex.\n        :return: The quotient of the two complex numbers, complex.\n        >>> complexCalculator = ComplexCalculator()\n        >>> complexCalculator.divide(1+2j, 3+4j)\n        (0.44+0.08j)\n        \"\"\"\n        return c1 / c2\n```",
    "21": "```python\nfrom datetime import datetime\n\nclass Classroom:\n    \"\"\"\n    This is a class representing a classroom, capable of adding and removing courses, checking availability at a given time, and detecting conflicts when scheduling new courses.\n    \"\"\"\n\n    def __init__(self, id):\n        \"\"\"\n        Initialize the classroom management system.\n        :param id: int, the id of classroom\n        \"\"\"\n        self.id = id\n        self.courses = []\n\n    def add_course(self, course):\n        \"\"\"\n        Add course to self.courses list if the course wasn't in it.\n        :param course: dict, information of the course, including 'start_time', 'end_time' and 'name'\n        \"\"\"\n        if course not in self.courses:\n            self.courses.append(course)\n\n    def remove_course(self, course):\n        \"\"\"\n        Remove course from self.courses list if the course was in it.\n        :param course: dict, information of the course, including 'start_time', 'end_time' and 'name'\n        \"\"\"\n        if course in self.courses:\n            self.courses.remove(course)\n\n    def is_free_at(self, check_time):\n        \"\"\"\n        change the time format as '%H:%M' and check the time is free or not in the classroom.\n        :param check_time: str, the time need to be checked\n        :return: True if the check_time does not conflict with every course time, or False otherwise.\n        \"\"\"\n        check_time = datetime.strptime(check_time, '%H:%M')\n        for course in self.courses:\n            start_time = datetime.strptime(course['start_time'], '%H:%M')\n            end_time = datetime.strptime(course['end_time'], '%H:%M')\n            if start_time <= check_time < end_time:\n                return False\n        return True\n\n    def check_course_conflict(self, new_course):\n        \"\"\"\n        Before adding a new course, check if the new course time conflicts with any other course.\n        :param new_course: dict, information of the course, including 'start_time', 'end_time' and 'name'\n        :return: False if the new course time conflicts(including two courses have the same boundary time) with other courses, or True otherwise.\n        \"\"\"\n        new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')\n        new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')\n        for course in self.courses:\n            start_time = datetime.strptime(course['start_time'], '%H:%M')\n            end_time = datetime.strptime(course['end_time'], '%H:%M')\n            if not (new_end_time <= start_time or new_start_time >= end_time):\n                return False\n        return True\n```",
    "25": "```python\nimport json\nimport os\n\nclass CookiesUtil:\n    \"\"\"\n    This is a class as utility for managing and manipulating Cookies, including methods for retrieving, saving, and setting Cookies data.\n    \"\"\"\n\n    def __init__(self, cookies_file):\n        \"\"\"\n        Initializes the CookiesUtil with the specified cookies file.\n        :param cookies_file: The cookies file to use, str.\n        \"\"\"\n        self.cookies_file = cookies_file\n        self.cookies = None\n\n    def get_cookies(self, response):\n        \"\"\"\n        Gets the cookies from the specified response, and save it to cookies_file.\n        :param response: The response to get cookies from, dict.\n        \"\"\"\n        if 'cookies' in response:\n            self.cookies = response['cookies']\n            self._save_cookies()\n\n    def load_cookies(self):\n        \"\"\"\n        Loads the cookies from the cookies_file to the cookies data.\n        :return: The cookies data, dict.\n        \"\"\"\n        if os.path.exists(self.cookies_file):\n            with open(self.cookies_file, 'r') as file:\n                self.cookies = json.load(file)\n        else:\n            self.cookies = {}\n        return self.cookies.get('cookies', {})\n\n    def _save_cookies(self):\n        \"\"\"\n        Saves the cookies to the cookies_file, and returns True if successful, False otherwise.\n        :return: True if successful, False otherwise.\n        \"\"\"\n        try:\n            with open(self.cookies_file, 'w') as file:\n                json.dump({'cookies': self.cookies}, file)\n            return True\n        except Exception:\n            return False\n\n    def set_cookies(self, request):\n        \"\"\"\n        Sets the cookies in the request.\n        :param request: The request to set cookies in, dict.\n        \"\"\"\n        request['cookies'] = f\"cookies={self.cookies}\"\n```",
    "23": "```python\nimport math\nfrom typing import List\n\nclass CombinationCalculator:\n    \"\"\"\n    This is a class that provides methods to calculate the number of combinations for a specific count, calculate all possible combinations, and generate combinations with a specified number of elements.\n    \"\"\"\n\n    def __init__(self, datas: List[str]):\n        \"\"\"\n        Initialize the calculator with a list of data.\n        \"\"\"\n        self.datas = datas\n\n    @staticmethod\n    def count(n: int, m: int) -> int:\n        \"\"\"\n        Calculate the number of combinations for a specific count.\n        :param n: The total number of elements,int.\n        :param m: The number of elements in each combination,int.\n        :return: The number of combinations,int.\n        \"\"\"\n        if m < 0 or m > n:\n            return 0\n        return math.comb(n, m)\n\n    @staticmethod\n    def count_all(n: int) -> int:\n        \"\"\"\n        Calculate the number of all possible combinations.\n        :param n: The total number of elements,int.\n        :return: The number of all possible combinations,int,if the number of combinations is greater than 2^63-1,return float(\"inf\").\n        \"\"\"\n        if n < 0:\n            return False\n        if n > 63:\n            return False\n        return (1 << n) - 1\n\n    def select(self, m: int) -> List[List[str]]:\n        \"\"\"\n        Generate combinations with a specified number of elements.\n        :param m: The number of elements in each combination,int.\n        :return: A list of combinations,List[List[str]].\n        \"\"\"\n        result = []\n        self._select(0, [None] * m, 0, result)\n        return result\n\n    def select_all(self) -> List[List[str]]:\n        \"\"\"\n        Generate all possible combinations of selecting elements from the given data list,and it uses the select method.\n        :return: A list of combinations,List[List[str]].\n        \"\"\"\n        result = []\n        for i in range(1, len(self.datas) + 1):\n            result.extend(self.select(i))\n        return result\n\n    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):\n        \"\"\"\n        Generate combinations with a specified number of elements by recursion.\n        :param dataIndex: The index of the data to be selected,int.\n        :param resultList: The list of elements in the combination,List[str].\n        :param resultIndex: The index of the element in the combination,int.\n        :param result: The list of combinations,List[List[str]].\n        :return: None.\n        \"\"\"\n        if resultIndex == len(resultList):\n            result.append(resultList.copy())\n            return\n        \n        for i in range(dataIndex, len(self.datas)):\n            resultList[resultIndex] = self.datas[i]\n            self._select(i + 1, resultList, resultIndex + 1, result)\n```",
    "22": "```python\nclass ClassRegistrationSystem:\n    \"\"\"\n    This is a class as a class registration system, allowing to register students, register them for classes, \n    retrieve students by major, get a list of all majors, and determine the most popular class within a specific major.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the registration system with the attribute students and students_registration_classes.\n        students is a list of student dictionaries, each student dictionary has the key of name and major.\n        students_registration_classes is a dictionary, key is the student name, value is a list of class names\n        \"\"\"\n        self.students = []\n        self.students_registration_classes = {}\n\n    def register_student(self, student):\n        \"\"\"\n        Register a student to the system. Add the student to the students list. \n        If the student is already registered, return 0; else return 1.\n        \"\"\"\n        if any(s['name'] == student['name'] for s in self.students):\n            return 0\n        self.students.append(student)\n        return 1\n\n    def register_class(self, student_name, class_name):\n        \"\"\"\n        Register a class to the student.\n        :param student_name: str\n        :param class_name: str\n        :return a list of class names that the student has registered\n        \"\"\"\n        if student_name not in self.students_registration_classes:\n            self.students_registration_classes[student_name] = []\n        self.students_registration_classes[student_name].append(class_name)\n        return self.students_registration_classes[student_name]\n\n    def get_students_by_major(self, major):\n        \"\"\"\n        Get all students in the major.\n        :param major: str\n        :return a list of student names\n        \"\"\"\n        return [student['name'] for student in self.students if student['major'] == major]\n\n    def get_all_major(self):\n        \"\"\"\n        Get all majors in the system.\n        :return a list of majors\n        \"\"\"\n        return list(set(student['major'] for student in self.students))\n\n    def get_most_popular_class_in_major(self, major):\n        \"\"\"\n        Get the class with the highest enrollment in the major.\n        :return a string of the most popular class in this major\n        \"\"\"\n        class_count = {}\n        for student in self.students:\n            if student['major'] == major:\n                for class_name in self.students_registration_classes.get(student['name'], []):\n                    if class_name in class_count:\n                        class_count[class_name] += 1\n                    else:\n                        class_count[class_name] = 1\n        return max(class_count, key=class_count.get) if class_count else None\n```",
    "26": "```python\nimport csv\n\nclass CSVProcessor:\n    \"\"\"\n    This is a class for processing CSV files, including reading and writing CSV data, as well as processing specific operations and saving as a new CSV file.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def read_csv(self, file_name):\n        \"\"\"\n        Read the csv file by file_name, get the title and data from it\n        :param file_name: str, name of the csv file\n        :return title, data: (list, list), first row is title, the rest is data\n        \"\"\"\n        with open(file_name, mode='r', newline='', encoding='utf-8') as f:\n            reader = csv.reader(f)\n            title = next(reader)\n            data = [row for row in reader]\n        return title, data\n\n    def write_csv(self, data, file_name):\n        \"\"\"\n        Write data into a csv file.\n        :param file_name: str, name of the csv file\n        :return:int, if success return 1, or 0 otherwise\n        \"\"\"\n        try:\n            with open(file_name, mode='w', newline='', encoding='utf-8') as f:\n                writer = csv.writer(f)\n                for row in data:\n                    writer.writerow(row)\n            return 1\n        except:\n            return 0\n\n    def process_csv_data(self, N, save_file_name):\n        \"\"\"\n        Read a csv file into variable title and data.\n        Only remain the N th (from 0) column data and Capitalize them, store the title and new data into a new csv file.\n        Add '_process' suffix after old file name, as a new file name.\n        :param N: int, the N th column(from 0)\n        :param save_file_name, the name of file that needs to be processed.\n        :return:int, if success return 1, or 0 otherwise\n        \"\"\"\n        try:\n            title, data = self.read_csv(save_file_name)\n            processed_data = [[row[N].upper()] for row in data if len(row) > N]\n            new_file_name = save_file_name.replace('.csv', '_process.csv')\n            self.write_csv([title], new_file_name)\n            self.write_csv(processed_data, new_file_name)\n            return 1\n        except:\n            return 0\n```",
    "27": "```python\nclass CurrencyConverter:\n    \"\"\"\n    This is a class for currency conversion, which supports to convert amounts between different currencies, retrieve supported currencies, add new currency rates, and update existing currency rates.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the exchange rate of the US dollar against various currencies\n        \"\"\"\n        self.rates = {\n            'USD': 1.0,\n            'EUR': 0.85,\n            'GBP': 0.72,\n            'JPY': 110.15,\n            'CAD': 1.23,\n            'AUD': 1.34,\n            'CNY': 6.40,\n        }\n\n    def convert(self, amount, from_currency, to_currency):\n        \"\"\"\n        Convert the value of a given currency to another currency type\n        :param amount: float, The value of a given currency\n        :param from_currency: string, source currency type\n        :param to_currency: string, target currency type\n        :return: float, value converted to another currency type\n        \"\"\"\n        if from_currency not in self.rates or to_currency not in self.rates:\n            return False\n        \n        # Convert the amount to USD first\n        amount_in_usd = amount / self.rates[from_currency]\n        # Then convert from USD to the target currency\n        return amount_in_usd * self.rates[to_currency]\n\n    def get_supported_currencies(self):\n        \"\"\"\n        Returns a list of supported currency types\n        :return:list, All supported currency types\n        \"\"\"\n        return list(self.rates.keys())\n\n    def add_currency_rate(self, currency, rate):\n        \"\"\"\n        Add a new supported currency type, return False if the currency type is already in the support list\n        :param currency:string, currency type to be added\n        :param rate:float, exchange rate for this type of currency\n        :return:If successful, returns None; if unsuccessful, returns False\n        \"\"\"\n        if currency in self.rates:\n            return False\n        self.rates[currency] = rate\n\n    def update_currency_rate(self, currency, new_rate):\n        \"\"\"\n        Update the exchange rate for a certain currency\n        :param currency:string\n        :param new_rate:float\n        :return:If successful, returns None; if unsuccessful, returns False\n        \"\"\"\n        if currency not in self.rates:\n            return False\n        self.rates[currency] = new_rate\n```",
    "29": "```python\nfrom collections import Counter\n\nclass DataStatistics:\n    \"\"\"\n    This is a class for performing data statistics, supporting to calculate the mean, median, and mode of a given data set.\n    \"\"\"\n\n    def mean(self, data):\n        \"\"\"\n        Calculate the average value of a group of data, accurate to two digits after the Decimal separator\n        :param data:list, data list\n        :return:float, the mean value\n        >>> ds = DataStatistics()\n        >>> ds.mean([1, 2, 3, 4, 5])\n        3.00\n        \"\"\"\n        return round(sum(data) / len(data), 2)\n\n    def median(self, data):\n        \"\"\"\n        Calculate the median of a group of data, accurate to two digits after the Decimal separator\n        :param data:list, data list\n        :return:float, the median value\n        >>> ds = DataStatistics()\n        >>> ds.median([2, 5, 1, 3, 4])\n        3.00\n        \"\"\"\n        data.sort()\n        n = len(data)\n        mid = n // 2\n        if n % 2 == 0:\n            return round((data[mid - 1] + data[mid]) / 2, 2)\n        else:\n            return round(data[mid], 2)\n\n    def mode(self, data):\n        \"\"\"\n        Calculate the mode of a set of data\n        :param data:list, data list\n        :return:float, the mode\n        >>> ds = DataStatistics()\n        >>> ds.mode([2, 2, 3, 3, 4])\n        [2, 3]\n        \"\"\"\n        count = Counter(data)\n        max_freq = max(count.values())\n        return sorted([num for num, freq in count.items() if freq == max_freq])\n```",
    "30": "```python\nimport numpy as np\n\nclass DataStatistics2:\n    \"\"\"\n    This is a class for performing data statistics, supporting to get the sum, minimum, maximum, variance, standard deviation, and correlation of a given dataset.\n    \"\"\"\n\n    def __init__(self, data):\n        \"\"\"\n        Initialize Data List\n        :param data:list\n        \"\"\"\n        self.data = np.array(data)\n\n    def get_sum(self):\n        \"\"\"\n        Calculate the sum of data\n        :return:float\n        >>> ds2 = DataStatistics2([1, 2, 3, 4])\n        >>> ds2.get_sum()\n        10\n        \"\"\"\n        return float(np.sum(self.data))\n\n    def get_min(self):\n        \"\"\"\n        Calculate the minimum value in the data\n        :return:float\n        >>> ds2 = DataStatistics2([1, 2, 3, 4])\n        >>> ds2.get_min()\n        1\n        \"\"\"\n        return float(np.min(self.data))\n\n    def get_max(self):\n        \"\"\"\n        Calculate the maximum value in the data\n        :return:float\n        >>> ds2 = DataStatistics2([1, 2, 3, 4])\n        >>> ds2.get_max()\n        4\n        \"\"\"\n        return float(np.max(self.data))\n\n    def get_variance(self):\n        \"\"\"\n        Calculate variance, accurate to two digits after the Decimal separator\n        :return:float\n        >>> ds2 = DataStatistics2([1, 2, 3, 4])\n        >>> ds2.get_variance()\n        1.25\n        \"\"\"\n        return round(float(np.var(self.data, ddof=1)), 2)\n\n    def get_std_deviation(self):\n        \"\"\"\n        Calculate standard deviation, accurate to two digits after the Decimal separator\n        :return:float\n        >>> ds2 = DataStatistics2([1, 2, 3, 4])\n        >>> ds2.get_std_deviation()\n        1.12\n        \"\"\"\n        return round(float(np.std(self.data, ddof=1)), 2)\n\n    def get_correlation(self):\n        \"\"\"\n        Calculate correlation\n        :return:float\n        >>> ds2 = DataStatistics2([1, 2, 3, 4])\n        >>> ds2.get_correlation()\n        1.0\n        \"\"\"\n        if len(self.data) < 2:\n            return float('nan')\n        return float(np.corrcoef(self.data, self.data)[0, 1])\n```",
    "31": "```python\nimport math\nimport numpy as np\n\nclass DataStatistics4:\n    \"\"\"\n    This is a class that performs advanced mathematical calculations and statistics, including correlation coefficient, skewness, kurtosis, and probability density function (PDF) for a normal distribution.\n    \"\"\"\n\n    @staticmethod\n    def correlation_coefficient(data1, data2):\n        \"\"\"\n        Calculate the correlation coefficient of two sets of data.\n        :param data1: The first set of data, list.\n        :param data2: The second set of data, list.\n        :return: The correlation coefficient, float.\n        \"\"\"\n        return np.corrcoef(data1, data2)[0, 1]\n\n    @staticmethod\n    def skewness(data):\n        \"\"\"\n        Calculate the skewness of a set of data.\n        :param data: The input data list, list.\n        :return: The skewness, float.\n        \"\"\"\n        return np.nan if len(data) == 0 else (3 * (np.mean(data) - np.median(data))) / np.std(data, ddof=1)\n\n    @staticmethod\n    def kurtosis(data):\n        \"\"\"\n        Calculate the kurtosis of a set of data.\n        :param data: The input data list, list.\n        :return: The kurtosis, float.\n        \"\"\"\n        return np.nan if len(data) == 0 else (np.sum((data - np.mean(data))**4) / (len(data) * np.std(data, ddof=1)**4)) - 3\n\n    @staticmethod\n    def pdf(data, mu, sigma):\n        \"\"\"\n        Calculate the probability density function (PDF) of a set of data under a normal distribution.\n        :param data: The input data list, list.\n        :param mu: The mean of the normal distribution, float.\n        :param sigma: The standard deviation of the normal distribution, float.\n        :return: The probability density function (PDF), list.\n        \"\"\"\n        return [(1 / (sigma * math.sqrt(2 * math.pi))) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]\n```",
    "28": "```python\nimport sqlite3\nimport pandas as pd\n\nclass DatabaseProcessor:\n    \"\"\"\n    This is a class for processing a database, supporting to create tables, insert data into the database, search for data based on name, and delete data from the database.\n    \"\"\"\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initialize database name of database processor\n        \"\"\"\n        self.database_name = database_name\n\n    def create_table(self, table_name, key1, key2):\n        \"\"\"\n        Create a new table in the database if it doesn't exist.\n        And make id (INTEGER) as PRIMARY KEY, make key1 as TEXT, key2 as INTEGER\n        :param table_name: str, the name of the table to create.\n        :param key1: str, the name of the first column in the table.\n        :param key2: str, the name of the second column in the table.\n        >>> db.create_table('user', 'name', 'age')\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f'''\n            CREATE TABLE IF NOT EXISTS {table_name} (\n                id INTEGER PRIMARY KEY,\n                {key1} TEXT,\n                {key2} INTEGER\n            )\n        ''')\n        conn.commit()\n        conn.close()\n\n    def insert_into_database(self, table_name, data):\n        \"\"\"\n        Insert data into the specified table in the database.\n        :param table_name: str, the name of the table to insert data into.\n        :param data: list, a list of dictionaries where each dictionary represents a row of data.\n        >>> db.insert_into_database('user', [\n                {'name': 'John', 'age': 25},\n                {'name': 'Alice', 'age': 30}\n            ])\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        for entry in data:\n            cursor.execute(f'''\n                INSERT INTO {table_name} ({', '.join(entry.keys())})\n                VALUES ({', '.join(['?' for _ in entry.values()])})\n            ''', tuple(entry.values()))\n        conn.commit()\n        conn.close()\n\n    def search_database(self, table_name, name):\n        \"\"\"\n        Search the specified table in the database for rows with a matching name.\n        :param table_name: str, the name of the table to search.\n        :param name: str, the name to search for.\n        :return: list, a list of tuples representing the rows with matching name, if any;\n                    otherwise, returns None.\n        >>> db.search_database('user', 'John')\n        [(1, 'John', 25)]\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f'''\n            SELECT * FROM {table_name} WHERE name=?\n        ''', (name,))\n        result = cursor.fetchall()\n        conn.close()\n        return result if result else None\n\n    def delete_from_database(self, table_name, name):\n        \"\"\"\n        Delete rows from the specified table in the database with a matching name.\n        :param table_name: str, the name of the table to delete rows from.\n        :param name: str, the name to match for deletion.\n        >>> db.delete_from_database('user', 'John')\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f'''\n            DELETE FROM {table_name} WHERE name=?\n        ''', (name,))\n        conn.commit()\n        conn.close()\n```",
    "33": "```python\nclass DiscountStrategy:\n    \"\"\"\n    This is a class that allows to use different discount strategy based on shopping credit or shopping cart in supermarket.\n    \"\"\"\n\n    def __init__(self, customer, cart, promotion=None):\n        \"\"\"\n        Initialize the DiscountStrategy with customer information, a cart of items, and an optional promotion.\n        :param customer: dict, customer information\n        :param cart: list of dicts, a cart of items with details\n        :param promotion: function, optional promotion applied to the order\n        \"\"\"\n        self.customer = customer\n        self.cart = cart\n        self.promotion = promotion\n\n    def total(self):\n        \"\"\"\n        Calculate the total cost of items in the cart.\n        :return: float, total cost of items\n        \"\"\"\n        return sum(item['quantity'] * item['price'] for item in self.cart)\n\n    def due(self):\n        \"\"\"\n        Calculate the final amount to be paid after applying the discount.\n        :return: float, final amount to be paid\n        \"\"\"\n        total_cost = self.total()\n        discount = self.promotion(self) if self.promotion else 0\n        return total_cost - discount\n\n    @staticmethod\n    def FidelityPromo(order):\n        \"\"\"\n        Calculate the discount based on the fidelity points of the customer. Customers with over 1000 points can enjoy a 5% discount on the entire order.\n        :param order: object, the order to apply the discount to\n        :return: float, discount amount\n        \"\"\"\n        if order.customer['fidelity'] >= 1000:\n            return order.total() * 0.05\n        return 0\n\n    @staticmethod\n    def BulkItemPromo(order):\n        \"\"\"\n        Calculate the discount based on bulk item quantity in the order. If the quantity of a single item reaches 20 or more, each item will enjoy a 10% discount.\n        :param order: object, the order to apply the discount to\n        :return: float, discount amount\n        \"\"\"\n        discount = 0\n        for item in order.cart:\n            if item['quantity'] >= 20:\n                discount += item['quantity'] * item['price'] * 0.10\n        return discount\n\n    @staticmethod\n    def LargeOrderPromo(order):\n        \"\"\"\n        Calculate the discount based on the number of different products in the order. If the quantity of different products in the order reaches 10 or more, the entire order will enjoy a 7% discount.\n        :param order: object, the order to apply the discount to\n        :return: float, discount amount\n        \"\"\"\n        if len(order.cart) >= 10:\n            return order.total() * 0.07\n        return 0\n```",
    "36": "```python\nfrom datetime import datetime\n\nclass EmailClient:\n    \"\"\"\n    This is a class that serves as an email client, implementing functions such as checking emails, determining whether there is sufficient space, and cleaning up space.\n    \"\"\"\n\n    def __init__(self, addr, capacity) -> None:\n        \"\"\"\n        Initializes the EmailClient class with the email address and the capacity of the email box.\n        :param addr: The email address, str.\n        :param capacity: The capacity of the email box, float.\n        \"\"\"\n        self.addr = addr\n        self.capacity = capacity\n        self.inbox = []\n\n    def send_to(self, recv, content, size):\n        \"\"\"\n        Sends an email to the given email address.\n        :param recv: The email address of the receiver, str.\n        :param content: The content of the email, str.\n        :param size: The size of the email, float.\n        :return: True if the email is sent successfully, False if the receiver's email box is full.\n        \"\"\"\n        if recv.is_full_with_one_more_email(size):\n            return False\n        \n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        email = {\n            'sender': self.addr,\n            'receiver': recv.addr,\n            'content': content,\n            'size': size,\n            'time': timestamp,\n            'state': 'unread'\n        }\n        recv.inbox.append(email)\n        return True\n\n    def fetch(self):\n        \"\"\"\n        Retrieves the first unread email in the email box and marks it as read.\n        :return: The first unread email in the email box, dict.\n        \"\"\"\n        for email in self.inbox:\n            if email['state'] == 'unread':\n                email['state'] = 'read'\n                return email\n        return None\n\n    def is_full_with_one_more_email(self, size):\n        \"\"\"\n        Determines whether the email box is full after adding an email of the given size.\n        :param size: The size of the email, float.\n        :return: True if the email box is full, False otherwise.\n        \"\"\"\n        return self.get_occupied_size() + size > self.capacity\n\n    def get_occupied_size(self):\n        \"\"\"\n        Gets the total size of the emails in the email box.\n        :return: The total size of the emails in the email box, float.\n        \"\"\"\n        return sum(email['size'] for email in self.inbox)\n\n    def clear_inbox(self, size):\n        \"\"\"\n        Clears the email box by deleting the oldest emails until the email box has enough space to accommodate the given size.\n        :param size: The size of the email, float.\n        \"\"\"\n        while self.get_occupied_size() + size > self.capacity and self.inbox:\n            self.inbox.pop(0)\n```",
    "32": "```python\nclass DecryptionUtils:\n    \"\"\"\n    This is a class that provides methods for decryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.\n    \"\"\"\n\n    def __init__(self, key):\n        \"\"\"\n        Initializes the decryption utility with a key.\n        :param key: The key to use for decryption,str.\n        \"\"\"\n        self.key = key\n\n    def caesar_decipher(self, ciphertext, shift):\n        \"\"\"\n        Deciphers the given ciphertext using the Caesar cipher\n        :param ciphertext: The ciphertext to decipher,str.\n        :param shift: The shift to use for decryption,int.\n        :return: The deciphered plaintext,str.\n        >>> d = DecryptionUtils('key')\n        >>> d.caesar_decipher('ifmmp', 1)\n        'hello'\n        \"\"\"\n        deciphered = []\n        for char in ciphertext:\n            if char.isalpha():\n                shift_amount = shift % 26\n                new_char = chr((ord(char) - shift_amount - 65) % 26 + 65) if char.isupper() else chr((ord(char) - shift_amount - 97) % 26 + 97)\n                deciphered.append(new_char)\n            else:\n                deciphered.append(char)\n        return ''.join(deciphered)\n\n    def vigenere_decipher(self, ciphertext):\n        \"\"\"\n        Deciphers the given ciphertext using the Vigenere cipher\n        :param ciphertext: The ciphertext to decipher,str.\n        :return: The deciphered plaintext,str.\n        >>> d = DecryptionUtils('key')\n        >>> d.vigenere_decipher('ifmmp')\n        'ybocl'\n        \"\"\"\n        plaintext = []\n        key_length = len(self.key)\n        key_int = [ord(i) - 97 for i in self.key.lower()]\n        ciphertext_int = [ord(i) - 97 for i in ciphertext.lower()]\n        \n        for i in range(len(ciphertext_int)):\n            value = (ciphertext_int[i] - key_int[i % key_length]) % 26\n            plaintext.append(chr(value + 97))\n        \n        return ''.join(plaintext)\n\n    def rail_fence_decipher(self, encrypted_text, rails):\n        \"\"\"\n        Deciphers the given ciphertext using the Rail Fence cipher\n        :param encrypted_text: The ciphertext to decipher,str.\n        :param rails: The number of rails to use for decryption,int.\n        :return: The deciphered plaintext,str.\n        >>> d = DecryptionUtils('key')\n        >>> d.rail_fence_decipher('Hoo!el,Wrdl l', 3)\n        'Hello, World!'\n        \"\"\"\n        rail = [['\\n' for _ in range(len(encrypted_text))] for _ in range(rails)]\n        dir_down = None\n        row, col = 0, 0\n\n        for char in encrypted_text:\n            if row == 0:\n                dir_down = True\n            if row == rails - 1:\n                dir_down = False\n            \n            rail[row][col] = '*'\n            col += 1\n            \n            if dir_down:\n                row += 1\n            else:\n                row -= 1\n\n        index = 0\n        for i in range(rails):\n            for j in range(len(encrypted_text)):\n                if (rail[i][j] == '*' and index < len(encrypted_text)):\n                    rail[i][j] = encrypted_text[index]\n                    index += 1\n\n        result = []\n        row, col = 0, 0\n        for i in range(len(encrypted_text)):\n            if row == 0:\n                dir_down = True\n            if row == rails - 1:\n                dir_down = False\n            \n            if rail[row][col] != '\\n':\n                result.append(rail[row][col])\n                col += 1\n            \n            if dir_down:\n                row += 1\n            else:\n                row -= 1\n        \n        return ''.join(result)\n```",
    "42": "```python\nclass Hotel:\n    def __init__(self, name, rooms):\n        self.name = name\n        self.available_rooms = rooms\n        self.booked_rooms = {}\n\n    def book_room(self, room_type, room_number, name):\n        if room_type not in self.available_rooms:\n            return False\n        if self.available_rooms[room_type] >= room_number:\n            if room_type not in self.booked_rooms:\n                self.booked_rooms[room_type] = {}\n            if name in self.booked_rooms[room_type]:\n                self.booked_rooms[room_type][name] += room_number\n            else:\n                self.booked_rooms[room_type][name] = room_number\n            \n            self.available_rooms[room_type] -= room_number\n            return 'Success!'\n        else:\n            remaining = self.available_rooms[room_type]\n            return remaining if remaining > 0 else False\n\n    def check_in(self, room_type, room_number, name):\n        if room_type not in self.booked_rooms or name not in self.booked_rooms[room_type] or self.booked_rooms[room_type][name] < room_number:\n            return False\n        \n        self.booked_rooms[room_type][name] -= room_number\n        if self.booked_rooms[room_type][name] == 0:\n            del self.booked_rooms[room_type][name]\n\n        return True\n\n    def check_out(self, room_type, room_number):\n        if room_type not in self.available_rooms:\n            self.available_rooms[room_type] = 0\n        self.available_rooms[room_type] += room_number\n\n    def get_available_rooms(self, room_type):\n        return self.available_rooms.get(room_type, 0)\n```",
    "37": "```python\nclass EncryptionUtils:\n    \"\"\"\n    This is a class that provides methods for encryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.\n    \"\"\"\n\n    def __init__(self, key):\n        \"\"\"\n        Initializes the class with a key.\n        :param key: The key to use for encryption, str.\n        \"\"\"\n        self.key = key\n\n    def caesar_cipher(self, plaintext, shift):\n        \"\"\"\n        Encrypts the plaintext using the Caesar cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :param shift: The number of characters to shift each character in the plaintext, int.\n        :return: The ciphertext, str.\n        \"\"\"\n        result = []\n        for char in plaintext:\n            if char.isalpha():\n                shift_base = ord('A') if char.isupper() else ord('a')\n                shifted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base)\n                result.append(shifted_char)\n            else:\n                result.append(char)\n        return ''.join(result)\n\n    def vigenere_cipher(self, plaintext):\n        \"\"\"\n        Encrypts the plaintext using the Vigenere cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :return: The ciphertext, str.\n        \"\"\"\n        ciphertext = []\n        key_length = len(self.key)\n        key_index = 0\n\n        for char in plaintext:\n            if char.isalpha():\n                shift_base = ord('A') if char.isupper() else ord('a')\n                key_char = self.key[key_index % key_length].lower()\n                key_shift = ord(key_char) - ord('a')\n                shifted_char = chr((ord(char) - shift_base + key_shift) % 26 + shift_base)\n                ciphertext.append(shifted_char)\n                key_index += 1\n            else:\n                ciphertext.append(char)\n        \n        return ''.join(ciphertext)\n\n    def rail_fence_cipher(self, plain_text, rails):\n        \"\"\"\n        Encrypts the plaintext using the Rail Fence cipher.\n        :param plain_text: The plaintext to encrypt, str.\n        :param rails: The number of rails, int.\n        :return: The ciphertext, str.\n        \"\"\"\n        rail = [['\\n' for _ in range(len(plain_text))] for _ in range(rails)]\n        direction_down = False\n        row, col = 0, 0\n\n        for char in plain_text:\n            if row == 0 or row == rails - 1:\n                direction_down = not direction_down\n\n            rail[row][col] = char\n            col += 1\n\n            if direction_down:\n                row += 1\n            else:\n                row -= 1\n\n        ciphertext = ''.join([''.join(row) for row in rail]).replace('\\n', '')\n        return ciphertext\n```",
    "35": "```python\nclass EightPuzzle:\n    \"\"\"\n    This class is an implementation of the classic 8-puzzle game, including methods for finding the blank tile, making moves, getting possible moves, and solving the puzzle using a breadth-first search algorithm.\n    \"\"\"\n\n    def __init__(self, initial_state):\n        self.initial_state = initial_state\n        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]\n\n    def find_blank(self, state):\n        for i in range(3):\n            for j in range(3):\n                if state[i][j] == 0:\n                    return (i, j)\n        return None\n\n    def move(self, state, direction):\n        blank_i, blank_j = self.find_blank(state)\n        new_state = [row[:] for row in state]\n\n        if direction == 'up' and blank_i > 0:\n            new_state[blank_i][blank_j], new_state[blank_i - 1][blank_j] = new_state[blank_i - 1][blank_j], new_state[blank_i][blank_j]\n        elif direction == 'down' and blank_i < 2:\n            new_state[blank_i][blank_j], new_state[blank_i + 1][blank_j] = new_state[blank_i + 1][blank_j], new_state[blank_i][blank_j]\n        elif direction == 'left' and blank_j > 0:\n            new_state[blank_i][blank_j], new_state[blank_i][blank_j - 1] = new_state[blank_i][blank_j - 1], new_state[blank_i][blank_j]\n        elif direction == 'right' and blank_j < 2:\n            new_state[blank_i][blank_j], new_state[blank_i][blank_j + 1] = new_state[blank_i][blank_j + 1], new_state[blank_i][blank_j]\n        else:\n            return state  # Invalid move\n\n        return new_state\n\n    def get_possible_moves(self, state):\n        blank_i, blank_j = self.find_blank(state)\n        moves = []\n\n        if blank_i > 0:\n            moves.append('up')\n        if blank_i < 2:\n            moves.append('down')\n        if blank_j > 0:\n            moves.append('left')\n        if blank_j < 2:\n            moves.append('right')\n\n        return moves\n\n    def solve(self):\n        from collections import deque\n\n        open_list = deque([(self.initial_state, [])])\n        visited = set()\n        visited.add(tuple(map(tuple, self.initial_state)))\n\n        while open_list:\n            current_state, path = open_list.popleft()\n\n            if current_state == self.goal_state:\n                return path\n\n            for move_direction in self.get_possible_moves(current_state):\n                new_state = self.move(current_state, move_direction)\n                if tuple(map(tuple, new_state)) not in visited:\n                    visited.add(tuple(map(tuple, new_state)))\n                    open_list.append((new_state, path + [move_direction]))\n\n        return None\n```",
    "40": "```python\nclass FitnessTracker:\n    \"\"\"\n    This is a class as fitness tracker that implements to calculate BMI (Body Mass Index) and calorie intake based on the user's height, weight, age, and sex.\n    \"\"\"\n\n    def __init__(self, height, weight, age, sex) -> None:\n        \"\"\"\n        Initialize the class with height, weight, age, and sex, and calculate the BMI standard based on sex, and male is 20-25, female is 19-24.\n        \"\"\"\n        self.height = height\n        self.weight = weight\n        self.age = age\n        self.sex = sex\n        self.BMI_std = [\n            {\"male\": [20, 25]},\n            {\"female\": [19, 24]}\n        ]\n\n    def get_BMI(self):\n        \"\"\"\n        Calculate the BMI based on the height and weight.\n        :return: BMI, which is the weight divide by the square of height, float.\n        \"\"\"\n        return self.weight / (self.height ** 2)\n\n    def condition_judge(self):\n        \"\"\"\n        Judge the condition of the user based on the BMI standard.\n        :return: 1 if the user is too fat, -1 if the user is too thin, 0 if the user is normal, int.\n        \"\"\"\n        bmi = self.get_BMI()\n        if self.sex == \"male\":\n            if bmi < 20:\n                return -1\n            elif bmi > 25:\n                return 1\n            else:\n                return 0\n        else:  # female\n            if bmi < 19:\n                return -1\n            elif bmi > 24:\n                return 1\n            else:\n                return 0\n\n    def calculate_calorie_intake(self):\n        \"\"\"\n        Calculate the calorie intake based on the user's condition and BMR (Basal Metabolic Rate).\n        :return: calorie intake, float.\n        \"\"\"\n        if self.sex == \"male\":\n            BMR = 10 * self.weight + 6.25 * self.height * 100 - 5 * self.age + 5\n        else:  # female\n            BMR = 10 * self.weight + 6.25 * self.height * 100 - 5 * self.age - 161\n\n        condition = self.condition_judge()\n        if condition == 1:  # too fat\n            return BMR * 1.2\n        elif condition == -1:  # too thin\n            return BMR * 1.6\n        else:  # normal\n            return BMR * 1.4\n```",
    "38": "```python\nimport openpyxl\n\n\nclass ExcelProcessor:\n    \"\"\"\n    This is a class for processing excel files, including reading and writing excel data, as well as processing specific operations and saving as a new excel file.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def read_excel(self, file_name):\n        \"\"\"\n        Reading data from Excel files\n        :param file_name:str, Excel file name to read\n        :return:list of data, Data in Excel\n        \"\"\"\n        if not file_name:\n            return None\n        \n        workbook = openpyxl.load_workbook(file_name)\n        sheet = workbook.active\n        data = []\n        for row in sheet.iter_rows(values_only=True):\n            data.append(row)\n        return data\n\n    def write_excel(self, data, file_name):\n        \"\"\"\n        Write data to the specified Excel file\n        :param data: list, Data to be written\n        :param file_name: str, Excel file name to write to\n        :return: 0 or 1, 1 represents successful writing, 0 represents failed writing\n        \"\"\"\n        if not file_name:\n            return 0\n        \n        workbook = openpyxl.Workbook()\n        sheet = workbook.active\n        for row in data:\n            sheet.append(row)\n        workbook.save(file_name)\n        return 1\n\n    def process_excel_data(self, N, save_file_name):\n        \"\"\"\n        Change the specified column in the Excel file to uppercase\n        :param N: int, The serial number of the column that want to change\n        :param save_file_name: str, source file name\n        :return:(int, str), The former is the return value of write_excel, while the latter is the saved file name of the processed data\n        \"\"\"\n        data = self.read_excel(save_file_name)\n        if N < 0 or N >= len(data[0]):\n            return 0, \"\"\n\n        processed_data = []\n        for i, row in enumerate(data):\n            if i == 0:\n                new_row = row + (row[N].upper(),)\n            else:\n                new_row = row + (row[N].upper(),)\n            processed_data.append(new_row)\n\n        output_file_name = f\"processed_{save_file_name}\"\n        success = self.write_excel(processed_data, output_file_name)\n        return success, output_file_name\n```",
    "34": "```python\nfrom docx import Document\nfrom docx.shared import Pt\nfrom docx.enum.text import WD_PARAGRAPH_ALIGNMENT\n\n\nclass DocFileHandler:\n    \"\"\"\n    This is a class that handles Word documents and provides functionalities for reading, writing, and modifying the content of Word documents.\n    \"\"\"\n\n    def __init__(self, file_path):\n        \"\"\"\n        Initializes the DocFileHandler object with the specified file path.\n        :param file_path: str, the path to the Word document file.\n        \"\"\"\n        self.file_path = file_path\n\n    def read_text(self):\n        \"\"\"\n        Reads the content of a Word document and returns it as a string.\n        :return: str, the content of the Word document.\n        \"\"\"\n        doc = Document(self.file_path)\n        return '\\n'.join([para.text for para in doc.paragraphs])\n\n    def write_text(self, content, font_size=12, alignment='left'):\n        \"\"\"\n        Writes the specified content to a Word document.\n        :param content: str, the text content to write.\n        :param font_size: int, optional, the font size of the text (default is 12).\n        :param alignment: str, optional, the alignment of the text ('left', 'center', or 'right'; default is 'left').\n        :return: bool, True if the write operation is successful, False otherwise.\n        \"\"\"\n        doc = Document()\n        para = doc.add_paragraph(content)\n        run = para.runs[0]\n        run.font.size = Pt(font_size)\n        para.alignment = self._get_alignment_value(alignment)\n        doc.save(self.file_path)\n        return True\n\n    def add_heading(self, heading, level=1):\n        \"\"\"\n        Adds a heading to the Word document.\n        :param heading: str, the text of the heading.\n        :param level: int, optional, the level of the heading (1, 2, 3, etc.; default is 1).\n        :return: bool, True if the heading is successfully added, False otherwise.\n        \"\"\"\n        doc = Document(self.file_path)\n        doc.add_heading(heading, level)\n        doc.save(self.file_path)\n        return True\n\n    def add_table(self, data):\n        \"\"\"\n        Adds a table to the Word document with the specified data.\n        :param data: list of lists, the data to populate the table.\n        :return: bool, True if the table is successfully added, False otherwise.\n        \"\"\"\n        doc = Document(self.file_path)\n        table = doc.add_table(rows=len(data), cols=len(data[0]))\n        for i, row in enumerate(data):\n            for j, cell in enumerate(row):\n                table.cell(i, j).text = cell\n        doc.save(self.file_path)\n        return True\n\n    def _get_alignment_value(self, alignment):\n        \"\"\"\n        Returns the alignment value corresponding to the given alignment string.\n        :param alignment: str, the alignment string ('left', 'center', or 'right').\n        :return: int, the alignment value.\n        \"\"\"\n        if alignment == 'center':\n            return WD_PARAGRAPH_ALIGNMENT.CENTER\n        elif alignment == 'right':\n            return WD_PARAGRAPH_ALIGNMENT.RIGHT\n        else:\n            return WD_PARAGRAPH_ALIGNMENT.LEFT\n```",
    "44": "```python\nimport re\nimport string\nfrom bs4 import BeautifulSoup\n\nclass HtmlUtil:\n    \"\"\"\n    This is a class as util for html, supporting for formatting and extracting code from HTML text, including cleaning up the text and converting certain elements into specific marks.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize a series of labels\n        \"\"\"\n        self.SPACE_MARK = '-SPACE-'\n        self.JSON_MARK = '-JSON-'\n        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'\n        self.URL_MARK = '-URL-'\n        self.NUMBER_MARK = '-NUMBER-'\n        self.TRACE_MARK = '-TRACE-'\n        self.COMMAND_MARK = '-COMMAND-'\n        self.COMMENT_MARK = '-COMMENT-'\n        self.CODE_MARK = '-CODE-'\n\n    @staticmethod\n    def __format_line_feed(text):\n        \"\"\"\n        Replace consecutive line breaks with a single line break\n        :param text: string with consecutive line breaks\n        :return: string, replaced text with single line break\n        \"\"\"\n        return re.sub(r'\\n{2,}', '\\n', text).rstrip('\\n')\n\n    def format_line_html_text(self, html_text):\n        \"\"\"\n        get the html text without the code, and add the code tag -CODE- where the code is\n        :param html_text: string\n        :return: string\n        \"\"\"\n        soup = BeautifulSoup(html_text, 'html.parser')\n        text_parts = []\n        \n        for element in soup.find_all(['h1', 'p', 'ul', 'li', 'div']):\n            if element.name == 'li':\n                text_parts.append(f'[-]{element.get_text(strip=True)}')\n            else:\n                text_parts.append(element.get_text(strip=True))\n        \n        # Add -CODE- for <pre> and <code>\n        for code_block in soup.find_all(['pre', 'code']):\n            text_parts.append(self.CODE_MARK)\n\n        return self.__format_line_feed('\\n'.join(text_parts))\n\n    def extract_code_from_html_text(self, html_text):\n        \"\"\"\n        extract codes from the html body\n        :param html_text: string, html text\n        :return: the list of code\n        \"\"\"\n        soup = BeautifulSoup(html_text, 'html.parser')\n        code_blocks = []\n\n        for code in soup.find_all(['pre', 'code']):\n            code_blocks.append(code.get_text(strip=True))\n\n        return code_blocks\n```",
    "45": "```python\nfrom PIL import Image, ImageEnhance, ImageChops\n\nclass ImageProcessor:\n    \"\"\"\n    This is a class to process image, including loading, saving, resizing, rotating, and adjusting the brightness of images.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize self.image\n        \"\"\"\n        self.image = None\n\n    def load_image(self, image_path):\n        \"\"\"\n        Use Image util in PIL to open a image\n        :param image_path: str, path of image that is to be\n        \"\"\"\n        self.image = Image.open(image_path)\n\n    def save_image(self, save_path):\n        \"\"\"\n        Save image to a path if image has opened\n        :param save_path: str, the path that the image will be saved\n        \"\"\"\n        if self.image is not None:\n            self.image.save(save_path)\n\n    def resize_image(self, width, height):\n        \"\"\"\n        Resize the image if image has opened.\n        :param width: int, the target width of image\n        :param height: int, the target height of image\n        \"\"\"\n        if self.image is not None:\n            self.image = self.image.resize((width, height))\n\n    def rotate_image(self, degrees):\n        \"\"\"\n        Rotate image if image has opened\n        :param degrees: float, the degrees that the image will be rotated\n        \"\"\"\n        if self.image is not None:\n            self.image = self.image.rotate(degrees)\n\n    def adjust_brightness(self, factor):\n        \"\"\"\n        Adjust the brightness of image if image has opened.\n        :param factor: float, brightness of an image. A factor of 0.0 gives a black image. A factor of 1.0 gives the original image.\n        \"\"\"\n        if self.image is not None:\n            enhancer = ImageEnhance.Brightness(self.image)\n            self.image = enhancer.enhance(factor)\n```",
    "47": "```python\nclass IPAddress:\n    \"\"\"\n    This is a class to process IP Address, including validating, getting the octets and obtaining the binary representation of a valid IP address.\n    \"\"\"\n\n    def __init__(self, ip_address):\n        \"\"\"\n        Initialize the IP address to the specified address\n        :param ip_address:string\n        \"\"\"\n        self.ip_address = ip_address\n\n    def is_valid(self):\n        \"\"\"\n        Judge whether the IP address is valid, that is, whether the IP address is composed of four Decimal digits separated by '.'. Each digit is greater than or equal to 0 and less than or equal to 255\n        :return: bool\n        \"\"\"\n        octets = self.ip_address.split('.')\n        if len(octets) != 4:\n            return False\n        for octet in octets:\n            if not octet.isdigit() or not (0 <= int(octet) <= 255):\n                return False\n        return True\n\n    def get_octets(self):\n        \"\"\"\n        If the IP address is valid, the list of four decimal numbers separated by \".\" constituting the IP address is returned; otherwise, an empty list is returned\n        :return: list\n        \"\"\"\n        if self.is_valid():\n            return self.ip_address.split('.')\n        return []\n\n    def get_binary(self):\n        \"\"\"\n        If the IP address is valid, return the binary form of the IP address; otherwise, return ''\n        :return: string\n        \"\"\"\n        if self.is_valid():\n            return '.'.join(format(int(octet), '08b') for octet in self.ip_address.split('.'))\n        return ''\n```",
    "43": "```python\nclass HRManagementSystem:\n    \"\"\"\n    This is a class as personnel management system that implements functions such as adding, deleting, querying, and updating employees\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the HRManagementSystem with an attribute employees, which is an empty dictionary.\n        \"\"\"\n        self.employees = {}\n\n    def add_employee(self, employee_id, name, position, department, salary):\n        \"\"\"\n        Add a new employee to the HRManagementSystem.\n        :param employee_id: The employee's id, int.\n        :param name: The employee's name, str.\n        :param position: The employee's position, str.\n        :param department: The employee's department, str.\n        :param salary: The employee's salary, int.\n        :return: If the employee is already in the HRManagementSystem, returns False, otherwise, returns True.\n        \"\"\"\n        if employee_id in self.employees:\n            return False\n        self.employees[employee_id] = {\n            'name': name,\n            'position': position,\n            'department': department,\n            'salary': salary\n        }\n        return True\n\n    def remove_employee(self, employee_id):\n        \"\"\"\n        Remove an employee from the HRManagementSystem.\n        :param employee_id: The employee's id, int.\n        :return: If the employee is already in the HRManagementSystem, returns True, otherwise, returns False.\n        \"\"\"\n        if employee_id in self.employees:\n            del self.employees[employee_id]\n            return True\n        return False\n\n    def update_employee(self, employee_id: int, employee_info: dict):\n        \"\"\"\n        Update an employee's information in the HRManagementSystem.\n        :param employee_id: The employee's id, int.\n        :param employee_info: The employee's information, dict.\n        :return: If the employee is already in the HRManagementSystem, returns True, otherwise, returns False.\n        \"\"\"\n        if employee_id not in self.employees:\n            return False\n        self.employees[employee_id].update(employee_info)\n        return True\n\n    def get_employee(self, employee_id):\n        \"\"\"\n        Get an employee's information from the HRManagementSystem.\n        :param employee_id: The employee's id, int.\n        :return: If the employee is already in the HRManagementSystem, returns the employee's information, otherwise, returns False.\n        \"\"\"\n        return self.employees.get(employee_id, False)\n\n    def list_employees(self):\n        \"\"\"\n        List all employees' information in the HRManagementSystem.\n        :return: A list of all employees' information, dict.\n        \"\"\"\n        return {emp_id: {**{'employee_ID': emp_id}, **info} for emp_id, info in self.employees.items()}\n```",
    "41": "```python\nclass GomokuGame:\n    \"\"\"\n    This class is an implementation of a Gomoku game, supporting for making moves, checking for a winner, and checking if there are five consecutive symbols on the game board.\n    \"\"\"\n\n    def __init__(self, board_size):\n        \"\"\"\n        Initializes the game with a given board size.\n        It initializes the board with empty spaces and sets the current player symbol as 'X'.\n        \"\"\"\n        self.board_size = board_size\n        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        \"\"\"\n        Makes a move at the given row and column.\n        If the move is valid, it places the current player's symbol on the board\n        and changes the current player to the other player (if the current player is 'X', then it becomes 'O' and vice versa).\n        :param row: int, the row index of this move\n        :param col: int, the column index\n        return: True if the move is valid, or False otherwise.\n        \"\"\"\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        return False\n\n    def check_winner(self):\n        \"\"\"\n        Checks if there is a winner by looking for five in a row in all directions (horizontal, vertical, diagonal).\n        return: the symbol of the winning player (either 'X' or 'O') if there is a winner, or None otherwise.\n        \"\"\"\n        for row in range(self.board_size):\n            for col in range(self.board_size):\n                if self.board[row][col] != ' ':\n                    if self._check_five_in_a_row(row, col, (1, 0)) or \\\n                       self._check_five_in_a_row(row, col, (0, 1)) or \\\n                       self._check_five_in_a_row(row, col, (1, 1)) or \\\n                       self._check_five_in_a_row(row, col, (1, -1)):\n                        return self.board[row][col]\n        return None\n\n    def _check_five_in_a_row(self, row, col, direction):\n        \"\"\"\n        checks if there are five consecutive symbols of the same player in a row starting from a given cell in a given direction (horizontal, vertical, diagonal).\n        Counts the number of consecutive symbols in that direction starting from the given cell,\n        :param row: int, row of the given cell\n        :param col: int, column of the given cell\n        :param direction: tuple, (int, int), named as (dx, dy). Row and col will plus several dx and dy respectively.\n        :return: True if there are five consecutive symbols of the same player, and False otherwise.\n        \"\"\"\n        dx, dy = direction\n        count = 0\n        player = self.board[row][col]\n\n        for i in range(5):\n            r = row + i * dx\n            c = col + i * dy\n            if 0 <= r < self.board_size and 0 <= c < self.board_size and self.board[r][c] == player:\n                count += 1\n            else:\n                break\n\n        return count == 5\n```",
    "39": "```python\nfrom collections import deque\nfrom decimal import Decimal\n\nclass ExpressionCalculator:\n    \"\"\"\n    This is a class in Python that can perform calculations with basic arithmetic operations, including addition, subtraction, multiplication, division, and modulo.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the expression calculator\n        \"\"\"\n        self.postfix_stack = deque()\n        self.operat_priority = {'+': 1, '-': 1, '*': 2, '/': 2, '%': 2}\n\n    def calculate(self, expression):\n        \"\"\"\n        Calculate the result of the given expression\n        :param expression: string, the infix expression to be calculated\n        :return: float, the calculated result\n        \"\"\"\n        self.prepare(expression)\n        stack = []\n        for token in self.postfix_stack:\n            if not self.is_operator(token):\n                stack.append(Decimal(token))\n            else:\n                second_value = stack.pop()\n                first_value = stack.pop()\n                result = self._calculate(first_value, second_value, token)\n                stack.append(result)\n        return float(stack[0])\n\n    def prepare(self, expression):\n        \"\"\"\n        Prepare the infix expression for conversion to postfix notation\n        :param expression: string, the infix expression to be prepared\n        \"\"\"\n        output = []\n        operators = []\n        expression = self.transform(expression)\n        tokens = expression.split()\n\n        for token in tokens:\n            if token.isnumeric():\n                output.append(token)\n            elif self.is_operator(token):\n                while (operators and operators[-1] in self.operat_priority and\n                       self.operat_priority[operators[-1]] >= self.operat_priority[token]):\n                    output.append(operators.pop())\n                operators.append(token)\n            elif token == '(':\n                operators.append(token)\n            elif token == ')':\n                while operators and operators[-1] != '(':\n                    output.append(operators.pop())\n                operators.pop()  # Remove the '('\n\n        while operators:\n            output.append(operators.pop())\n\n        self.postfix_stack = deque(output)\n\n    @staticmethod\n    def is_operator(c):\n        \"\"\"\n        Check if a character is an operator\n        :param c: string, the character to be checked\n        :return: bool, True if the character is an operator, False otherwise\n        \"\"\"\n        return c in {'+', '-', '*', '/', '%', '(', ')'}\n\n    def compare(self, cur, peek):\n        \"\"\"\n        Compare the precedence of two operators\n        :param cur: string, the current operator\n        :param peek: string, the operator at the top of the operator stack\n        :return: bool, True if the current operator has higher or equal precedence, False otherwise\n        \"\"\"\n        return self.operat_priority.get(cur, 0) >= self.operat_priority.get(peek, 0)\n\n    @staticmethod\n    def _calculate(first_value, second_value, current_op):\n        \"\"\"\n        Perform the mathematical calculation based on the given operands and operator\n        :param first_value: decimal.Decimal, the first operand\n        :param second_value: decimal.Decimal, the second operand\n        :param current_op: string, the operator\n        :return: decimal.Decimal, the calculated result\n        \"\"\"\n        if current_op == \"+\":\n            return first_value + second_value\n        elif current_op == \"-\":\n            return first_value - second_value\n        elif current_op == \"*\":\n            return first_value * second_value\n        elif current_op == \"/\":\n            return first_value / second_value\n        elif current_op == \"%\":\n            return first_value % second_value\n        else:\n            raise ValueError(\"Invalid operator\")\n\n    @staticmethod\n    def transform(expression):\n        \"\"\"\n        Transform the infix expression to a format suitable for conversion\n        :param expression: string, the infix expression to be transformed\n        :return: string, the transformed expression\n        \"\"\"\n        return ''.join(expression.split())\n```",
    "48": "```python\nimport socket\nimport netifaces\nimport re\n\n\nclass IpUtil:\n    \"\"\"\n    This is a class as a tool for IP that can be used to obtain the local IP address, validate its validity, and also provides the functionality to retrieve the corresponding hostname.\n    \"\"\"\n\n    @staticmethod\n    def is_valid_ipv4(ip_address):\n        \"\"\"\n        Check if the given IP address is a valid IPv4 address.\n        :param ip_address: string, the IP address to check\n        :return: bool, True if the IP address is valid, False otherwise\n        >>> IpUtil.is_valid_ipv4('192.168.0.123')\n        True\n        >>> IpUtil.is_valid_ipv4('256.0.0.0')\n        False\n        \"\"\"\n        pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.' \\\n                  r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.' \\\n                  r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.' \\\n                  r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n        return re.match(pattern, ip_address) is not None\n\n    @staticmethod\n    def is_valid_ipv6(ip_address):\n        \"\"\"\n        Check if the given IP address is a valid IPv6 address.\n        :param ip_address: string, the IP address to check\n        :return: bool, True if the IP address is valid, False otherwise\n        >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334')\n        True\n        >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:::8a2e:0370:7334')\n        False\n        \"\"\"\n        try:\n            socket.inet_pton(socket.AF_INET6, ip_address)\n            return True\n        except socket.error:\n            return False\n\n    @staticmethod\n    def get_hostname(ip_address):\n        \"\"\"\n        Get the hostname associated with the given IP address.\n        :param ip_address: string, the IP address to get the hostname for\n        :return: string, the hostname associated with the IP address\n        >>> IpUtil.get_hostname('110.242.68.3')\n        'www.baidu.com'\n        >>> IpUtil.get_hostname('10.0.0.1')\n        \"\"\"\n        try:\n            return socket.gethostbyaddr(ip_address)[0]\n        except socket.herror:\n            return None\n```",
    "49": "```python\nclass JobMarketplace:\n    \"\"\"\n    This is a class that provides functionalities to publish positions, remove positions, submit resumes, withdraw resumes, search for positions, and obtain candidate information.\n    \"\"\"\n\n    def __init__(self):\n        self.job_listings = []\n        self.resumes = []\n\n    def post_job(self, job_title, company, requirements):\n        \"\"\"\n        This function is used to publish positions,and add the position information to the job_listings list.\n        :param job_title: The title of the position,str.\n        :param company: The company of the position,str.\n        :param requirements: The requirements of the position,list.\n        :return: None\n        \"\"\"\n        self.job_listings.append({\n            'job_title': job_title,\n            'company': company,\n            'requirements': requirements\n        })\n\n    def remove_job(self, job):\n        \"\"\"\n        This function is used to remove positions,and remove the position information from the job_listings list.\n        :param job: The position information to be removed,dict.\n        :return: None\n        \"\"\"\n        if job in self.job_listings:\n            self.job_listings.remove(job)\n\n    def submit_resume(self, name, skills, experience):\n        \"\"\"\n        This function is used to submit resumes,and add the resume information to the resumes list.\n        :param name: The name of the resume,str.\n        :param skills: The skills of the resume,list.\n        :param experience: The experience of the resume,str.\n        :return: None\n        \"\"\"\n        self.resumes.append({\n            'name': name,\n            'skills': skills,\n            'experience': experience\n        })\n\n    def withdraw_resume(self, resume):\n        \"\"\"\n        This function is used to withdraw resumes,and remove the resume information from the resumes list.\n        :param resume: The resume information to be removed,dict.\n        :return: None\n        \"\"\"\n        if resume in self.resumes:\n            self.resumes.remove(resume)\n\n    def search_jobs(self, criteria):\n        \"\"\"\n        This function is used to search for positions,and return the position information that meets the requirements.\n        :param criteria: The requirements of the position,str.\n        :return: The position information that meets the requirements,list.\n        \"\"\"\n        return [job for job in self.job_listings if criteria in job['requirements']]\n\n    def get_job_applicants(self, job):\n        \"\"\"\n        This function is used to obtain candidate information,and return the candidate information that meets the requirements by calling the matches_requirements function.\n        :param job: The position information,dict.\n        :return: The candidate information that meets the requirements,list.\n        \"\"\"\n        return [resume for resume in self.resumes if self.matches_requirements(resume, job['requirements'])]\n\n    def matches_requirements(self, resume, requirements):\n        \"\"\"\n        This function checks if the resume matches the job requirements.\n        :param resume: The resume information,dict.\n        :param requirements: The requirements of the position,list.\n        :return: True if the resume matches the requirements, False otherwise.\n        \"\"\"\n        return all(skill in resume['skills'] for skill in requirements)\n```",
    "53": "```python\nimport re\n\nclass LongestWord:\n    \"\"\"\n    This is a class allows to add words to a list and find the longest word in a given sentence by comparing the words with the ones in the word list.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize a list of word.\n        \"\"\"\n        self.word_list = []\n\n    def add_word(self, word):\n        \"\"\"\n        append the input word into self.word_list\n        :param word: str, input word\n        \"\"\"\n        self.word_list.append(word)\n\n    def find_longest_word(self, sentence):\n        \"\"\"\n        Remove punctuation marks and split a sentence into a list of word. Find the longest splited word that is in the self.word_list.\n        Words are strictly case sensitive.\n        :param sentence: a sentence str\n        :return str: longest splited word that is in the self.word_list. return '' if self.word_list is empty.\n        \"\"\"\n        if not self.word_list:\n            return ''\n        \n        # Remove punctuation and split the sentence into words\n        words = re.findall(r'\\b\\w+\\b', sentence)\n        \n        longest = ''\n        for word in words:\n            if word in self.word_list and len(word) > len(longest):\n                longest = word\n        \n        return longest\n```",
    "51": "```python\nimport numpy as np\n\nclass KappaCalculator:\n    \"\"\"\n    This is a class as KappaCalculator, supporting to calculate Cohen's and Fleiss' kappa coefficient.\n    \"\"\"\n\n    @staticmethod\n    def kappa(testData, k):\n        \"\"\"\n        Calculate the Cohen's kappa value of a k-dimensional matrix\n        :param testData: The k-dimensional matrix that needs to calculate the Cohen's kappa value\n        :param k: int, Matrix dimension\n        :return: float, the Cohen's kappa value of the matrix\n        \"\"\"\n        # Convert testData to a numpy array for easier calculations\n        matrix = np.array(testData)\n        n = np.sum(matrix)  # Total number of observations\n        \n        # Calculate observed agreement\n        p_o = np.sum(np.diagonal(matrix)) / n\n        \n        # Calculate expected agreement\n        p_e = 0\n        for col in range(k):\n            p_e += (np.sum(matrix[:, col]) / n) ** 2\n        \n        # Calculate Cohen's kappa\n        kappa_value = (p_o - p_e) / (1 - p_e) if (1 - p_e) != 0 else 0\n        return kappa_value\n\n    @staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        \"\"\"\n        Calculate the Fleiss' kappa value of an N * k matrix\n        :param testData: Input data matrix, N * k\n        :param N: int, Number of samples\n        :param k: int, Number of categories\n        :param n: int, Number of raters\n        :return: float, Fleiss kappa value\n        \"\"\"\n        # Convert testData to a numpy array for easier calculations\n        matrix = np.array(testData)\n        \n        # Calculate the proportion of ratings for each category\n        p = np.sum(matrix, axis=0) / (n * N)\n        \n        # Calculate the observed agreement\n        P = np.sum((np.sum(matrix, axis=1) / n) ** 2)\n        P /= N\n        \n        # Calculate the expected agreement\n        P_e = np.sum(p ** 2)\n        \n        # Calculate Fleiss' kappa\n        fleiss_kappa_value = (P - P_e) / (1 - P_e) if (1 - P_e) != 0 else 0\n        return fleiss_kappa_value\n```",
    "46": "```python\nclass Interpolation:\n    \"\"\"\n    This is a class that implements the Linear interpolation operation of one-dimensional and two-dimensional data\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def interpolate_1d(x, y, x_interp):\n        \"\"\"\n        Linear interpolation of one-dimensional data\n        :param x: The x-coordinate of the data point, list.\n        :param y: The y-coordinate of the data point, list.\n        :param x_interp: The x-coordinate of the interpolation point, list.\n        :return: The y-coordinate of the interpolation point, list.\n        >>> interpolation = Interpolation()\n        >>> interpolation.interpolate_1d([1, 2, 3], [1, 2, 3], [1.5, 2.5])\n        [1.5, 2.5]\n        \"\"\"\n        if not x_interp:\n            return []\n        y_interp = []\n        for xi in x_interp:\n            if xi < x[0]:\n                # Extrapolate to the left\n                y_interp.append(y[0] + (y[1] - y[0]) * (xi - x[0]) / (x[1] - x[0]))\n            elif xi > x[-1]:\n                # Extrapolate to the right\n                y_interp.append(y[-1] + (y[-1] - y[-2]) * (xi - x[-1]) / (x[-1] - x[-2]))\n            else:\n                # Perform interpolation\n                for i in range(len(x) - 1):\n                    if x[i] <= xi <= x[i + 1]:\n                        y_interp.append(y[i] + (y[i + 1] - y[i]) * (xi - x[i]) / (x[i + 1] - x[i]))\n                        break\n        return y_interp\n\n    @staticmethod\n    def interpolate_2d(x, y, z, x_interp, y_interp):\n        \"\"\"\n        Linear interpolation of two-dimensional data\n        :param x: The x-coordinate of the data point, list.\n        :param y: The y-coordinate of the data point, list.\n        :param z: The z-coordinate of the data point, list.\n        :param x_interp: The x-coordinate of the interpolation point, list.\n        :param y_interp: The y-coordinate of the interpolation point, list.\n        :return: The z-coordinate of the interpolation point, list.\n        >>> interpolation = Interpolation()\n        >>> interpolation.interpolate_2d([1, 2, 3], [1, 2, 3], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1.5, 2.5], [1.5, 2.5])\n        [3.0, 7.0]\n        \"\"\"\n        if not x_interp or not y_interp:\n            return []\n        z_interp = []\n        for xi, yi in zip(x_interp, y_interp):\n            x1_idx = next(i for i in range(len(x) - 1) if x[i] <= xi <= x[i + 1])\n            y1_idx = next(i for i in range(len(y) - 1) if y[i] <= yi <= y[i + 1])\n            \n            x1, x2 = x[x1_idx], x[x1_idx + 1]\n            y1, y2 = y[y1_idx], y[y1_idx + 1]\n\n            z11, z12 = z[y1_idx][x1_idx], z[y1_idx][x1_idx + 1]\n            z21, z22 = z[y1_idx + 1][x1_idx], z[y1_idx + 1][x1_idx + 1]\n\n            z_interp_value = (z11 * (x2 - xi) * (y2 - yi) +\n                              z12 * (xi - x1) * (y2 - yi) +\n                              z21 * (x2 - xi) * (yi - y1) +\n                              z22 * (xi - x1) * (yi - y1)) / ((x2 - x1) * (y2 - y1))\n            z_interp.append(z_interp_value)\n        return z_interp\n```",
    "50": "```python\nimport json\nimport os\n\nclass JSONProcessor:\n    \"\"\"\n    This is a class to process JSON file, including reading and writing JSON files, as well as processing JSON data by removing a specified key from the JSON object.\n    \"\"\"\n\n    def read_json(self, file_path):\n        \"\"\"\n        Read a JSON file and return the data.\n        :param file_path: str, the path of the JSON file.\n        :return: dict, the data from the JSON file if read successfully, or return -1 if an error occurs during the reading process.\n                    return 0 if the file does not exist.\n        \"\"\"\n        if not os.path.exists(file_path):\n            return 0\n        try:\n            with open(file_path, 'r') as file:\n                return json.load(file)\n        except json.JSONDecodeError:\n            return -1\n\n    def write_json(self, data, file_path):\n        \"\"\"\n        Write data to a JSON file and save it to the given path.\n\n        :param data: dict, the data to be written to the JSON file.\n        :param file_path: str, the path of the JSON file.\n        :return: 1 if the writing process is successful, or -1, if an error occurs during the writing process.\n        \"\"\"\n        try:\n            with open(file_path, 'w') as file:\n                json.dump(data, file)\n            return 1\n        except Exception:\n            return -1\n\n    def process_json(self, file_path, remove_key):\n        \"\"\"\n        read a JSON file and process the data by removing a specified key and rewrite the modified data back to the file.\n\n        :param file_path: str, the path of the JSON file.\n        :param remove_key: str, the key to be removed.\n        :return: 1, if the specified key is successfully removed and the data is written back.\n                    0, if the file does not exist or the specified key does not exist in the data.\n        \"\"\"\n        data = self.read_json(file_path)\n        if data == 0 or data == -1:\n            return 0\n\n        if remove_key in data:\n            del data[remove_key]\n            self.write_json(data, file_path)\n            return 1\n        return 0\n```",
    "54": "```python\nimport random\n\nclass MahjongConnect:\n    def __init__(self, BOARD_SIZE, ICONS):\n        self.BOARD_SIZE = BOARD_SIZE\n        self.ICONS = ICONS\n        self.board = self.create_board()\n\n    def create_board(self):\n        icons_count = self.BOARD_SIZE[0] * self.BOARD_SIZE[1] // 2\n        icons = (self.ICONS * (icons_count // len(self.ICONS))) + random.sample(self.ICONS, icons_count % len(self.ICONS))\n        random.shuffle(icons)\n        board = [icons[i:i + self.BOARD_SIZE[1]] for i in range(0, len(icons), self.BOARD_SIZE[1])]\n        return board\n\n    def is_valid_move(self, pos1, pos2):\n        if pos1 == pos2:\n            return False\n        if not (0 <= pos1[0] < self.BOARD_SIZE[0] and 0 <= pos1[1] < self.BOARD_SIZE[1]) or not (0 <= pos2[0] < self.BOARD_SIZE[0] and 0 <= pos2[1] < self.BOARD_SIZE[1]):\n            return False\n        if self.board[pos1[0]][pos1[1]] != self.board[pos2[0]][pos2[1]]:\n            return False\n        return self.has_path(pos1, pos2)\n\n    def has_path(self, pos1, pos2):\n        if pos1 == pos2:\n            return True\n        return self._has_path(pos1, pos2, set())\n\n    def _has_path(self, pos1, pos2, visited):\n        if pos1 == pos2:\n            return True\n        if pos1 in visited:\n            return False\n        visited.add(pos1)\n\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for dx, dy in directions:\n            for step in range(1, max(self.BOARD_SIZE)):\n                x, y = pos1[0] + dx * step, pos1[1] + dy * step\n                if 0 <= x < self.BOARD_SIZE[0] and 0 <= y < self.BOARD_SIZE[1]:\n                    if self.board[x][y] == ' ':\n                        if self._has_path((x, y), pos2, visited):\n                            return True\n                    elif (x, y) == pos2:\n                        return True\n                else:\n                    break\n        return False\n\n    def remove_icons(self, pos1, pos2):\n        if self.is_valid_move(pos1, pos2):\n            self.board[pos1[0]][pos1[1]] = ' '\n            self.board[pos2[0]][pos2[1]] = ' '\n\n    def is_game_over(self):\n        for row in self.board:\n            for icon in row:\n                if icon != ' ':\n                    return False\n        return True\n```",
    "59": "```python\nfrom datetime import datetime\nimport numpy as np\n\nclass MovieBookingSystem:\n    def __init__(self):\n        self.movies = []\n\n    def add_movie(self, name, price, start_time, end_time, n):\n        start_time_dt = datetime.strptime(start_time, '%H:%M')\n        end_time_dt = datetime.strptime(end_time, '%H:%M')\n        seats = np.zeros((n, n))\n        self.movies.append({\n            'name': name,\n            'price': price,\n            'start_time': start_time_dt,\n            'end_time': end_time_dt,\n            'seats': seats\n        })\n\n    def book_ticket(self, name, seats_to_book):\n        movie = next((m for m in self.movies if m['name'].lower() == name.lower()), None)\n        if not movie:\n            return 'Movie not found.'\n\n        for row, col in seats_to_book:\n            if movie['seats'][row][col] == 1:\n                return 'Booking failed.'\n\n        for row, col in seats_to_book:\n            movie['seats'][row][col] = 1\n\n        return 'Booking success.'\n\n    def available_movies(self, start_time, end_time):\n        start_time_dt = datetime.strptime(start_time, '%H:%M')\n        end_time_dt = datetime.strptime(end_time, '%H:%M')\n        available = [\n            movie['name'] for movie in self.movies \n            if movie['start_time'] >= start_time_dt and movie['end_time'] <= end_time_dt\n        ]\n        return available\n```",
    "63": "```python\nimport re\nfrom collections import Counter\n\nclass NLPDataProcessor2:\n    \"\"\"\n    The class processes NLP data by extracting words from a list of strings, calculating the frequency of each word, and returning the top 5 most frequent words.\n    \"\"\"\n\n    def process_data(self, string_list):\n        words_list = []\n        for string in string_list:\n            # Keep only English letters and spaces, convert to lower case, and split into words\n            cleaned_string = re.sub(r'[^a-zA-Z\\s]', '', string).lower()\n            words = cleaned_string.split()\n            words_list.append(words)\n        return words_list\n\n    def calculate_word_frequency(self, words_list):\n        word_counter = Counter()\n        for words in words_list:\n            word_counter.update(words)\n        # Get the top 5 most common words\n        return dict(word_counter.most_common(5))\n\n    def process(self, string_list):\n        words_list = self.process_data(string_list)\n        return self.calculate_word_frequency(words_list)\n```",
    "57": "```python\nimport numpy as np\n\n\nclass MetricsCalculator2:\n    \"\"\"\n    The class provides to calculate Mean Reciprocal Rank (MRR) and Mean Average Precision (MAP) based on input data, \n    where MRR measures the ranking quality and MAP measures the average precision.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def mrr(data):\n        if not isinstance(data, (tuple, list)):\n            raise ValueError(\"Input must be a tuple or list.\")\n        \n        if isinstance(data, tuple):\n            data = [data]\n\n        reciprocal_ranks = []\n        for actual, ground_truth_num in data:\n            if ground_truth_num <= 0:\n                reciprocal_ranks.append(0.0)\n                continue\n            \n            rank = next((i + 1 for i, value in enumerate(actual) if value == 1), None)\n            if rank is not None:\n                reciprocal_ranks.append(1 / rank)\n            else:\n                reciprocal_ranks.append(0.0)\n        \n        mrr_value = np.mean(reciprocal_ranks)\n        return mrr_value, reciprocal_ranks\n\n    @staticmethod\n    def map(data):\n        if not isinstance(data, (tuple, list)):\n            raise ValueError(\"Input must be a tuple or list.\")\n        \n        if isinstance(data, tuple):\n            data = [data]\n\n        average_precisions = []\n        for actual, ground_truth_num in data:\n            if ground_truth_num <= 0:\n                average_precisions.append(0.0)\n                continue\n            \n            precision_sum = 0.0\n            correct_count = 0\n            for i, value in enumerate(actual):\n                if value == 1:\n                    correct_count += 1\n                    precision_sum += correct_count / (i + 1)\n\n            average_precision = precision_sum / ground_truth_num\n            average_precisions.append(average_precision)\n        \n        map_value = np.mean(average_precisions)\n        return map_value, average_precisions\n```",
    "58": "```python\nimport random\n\nclass MinesweeperGame:\n    \"\"\"\n    This is a class that implements mine sweeping games including minesweeping and winning judgment.\n    \"\"\"\n\n    def __init__(self, n, k) -> None:\n        \"\"\"\n        Initializes the MinesweeperGame class with the size of the board and the number of mines.\n        :param n: The size of the board, int.\n        :param k: The number of mines, int.\n        \"\"\"\n        self.n = n\n        self.k = k\n        self.minesweeper_map = self.generate_mine_sweeper_map()\n        self.player_map = self.generate_playerMap()\n        self.score = 0\n\n    def generate_mine_sweeper_map(self):\n        \"\"\"\n        Generates a minesweeper map with the given size of the board and the number of mines.\n        :return: The minesweeper map, list.\n        \"\"\"\n        board = [[0 for _ in range(self.n)] for _ in range(self.n)]\n        mines = set()\n        while len(mines) < self.k:\n            x = random.randint(0, self.n - 1)\n            y = random.randint(0, self.n - 1)\n            mines.add((x, y))\n            board[x][y] = 'X'\n\n        for x, y in mines:\n            for i in range(max(0, x - 1), min(self.n, x + 2)):\n                for j in range(max(0, y - 1), min(self.n, y + 2)):\n                    if board[i][j] != 'X':\n                        board[i][j] += 1\n\n        return board\n\n    def generate_playerMap(self):\n        \"\"\"\n        Generates a player map with the given size of the board.\n        :return: The player map, list.\n        \"\"\"\n        return [['-' for _ in range(self.n)] for _ in range(self.n)]\n\n    def check_won(self, map):\n        \"\"\"\n        Checks whether the player has won the game.\n        :return: True if the player has won the game, False otherwise.\n        \"\"\"\n        for i in range(self.n):\n            for j in range(self.n):\n                if map[i][j] == '-' and (i, j) not in [(x, y) for x, y in self.get_mine_positions()]:\n                    return False\n        return True\n\n    def sweep(self, x, y):\n        \"\"\"\n        Sweeps the given position.\n        :param x: The x coordinate of the position, int.\n        :param y: The y coordinate of the position, int.\n        :return: True if the player has won the game, False otherwise, if the game still continues, return the player map, list.\n        \"\"\"\n        if self.minesweeper_map[x][y] == 'X':\n            return False\n\n        self.player_map[x][y] = self.minesweeper_map[x][y]\n        self.score += 1\n\n        if self.check_won(self.player_map):\n            return True\n\n        return self.player_map\n\n    def get_mine_positions(self):\n        \"\"\"\n        Returns the positions of all mines on the board.\n        :return: A list of mine positions.\n        \"\"\"\n        return [(i, j) for i in range(self.n) for j in range(self.n) if self.minesweeper_map[i][j] == 'X']\n```",
    "62": "```python\nclass NLPDataProcessor:\n    \"\"\"\n    The class processes NLP data by removing stop words from a list of strings using a pre-defined stop word list.\n    \"\"\"\n\n    @staticmethod\n    def construct_stop_word_list():\n        \"\"\"\n        Construct a stop word list including 'a', 'an', 'the'.\n        :return: a list of stop words\n        >>> NLPDataProcessor.construct_stop_word_list()\n        ['a', 'an', 'the']\n        \"\"\"\n        return ['a', 'an', 'the']\n\n    def remove_stop_words(self, string_list, stop_word_list):\n        \"\"\"\n        Remove all the stop words from the list of strings.\n        :param string_list: a list of strings\n        :param stop_word_list: a list of stop words\n        :return: a list of words without stop words\n        >>> NLPDataProcessor().remove_stop_words(['This is a test.'], ['a', 'an', 'the'])\n        [['This', 'is', 'test.']]\n        \"\"\"\n        result = []\n        for string in string_list:\n            words = string.split()\n            filtered_words = [word for word in words if word.lower() not in stop_word_list]\n            result.append(filtered_words)\n        return result\n\n    def process(self, string_list):\n        \"\"\"\n        Construct a stop word list including 'a', 'an', 'the', and remove all the stop words from the list of strings.\n        :param string_list: a list of strings\n        :return: a list of words without stop words\n        >>> NLPDataProcessor().process(['This is a test.'])\n        [['This', 'is', 'test.']]\n        \"\"\"\n        stop_word_list = self.construct_stop_word_list()\n        return self.remove_stop_words(string_list, stop_word_list)\n```",
    "60": "```python\nimport sqlite3\n\nclass MovieTicketDB:\n    \"\"\"\n    This is a class for movie database operations, which allows for inserting movie information, searching for movie information by name, and deleting movie information by name.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the MovieTicketDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"\n        Creates a \"tickets\" table in the database if it does not exist already. Fields include ID of type int, movie name of type str,\n        theater name of type str, seat number of type str, and customer name of type str.\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS tickets (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                movie_name TEXT NOT NULL,\n                theater_name TEXT NOT NULL,\n                seat_number TEXT NOT NULL,\n                customer_name TEXT NOT NULL\n            )\n        ''')\n        self.connection.commit()\n\n    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        \"\"\"\n        Inserts a new ticket into the \"tickets\" table.\n        :param movie_name: str, the name of the movie.\n        :param theater_name: str, the name of the theater.\n        :param seat_number: str, the seat number.\n        :param customer_name: str, the name of the customer.\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)\n            VALUES (?, ?, ?, ?)\n        ''', (movie_name, theater_name, seat_number, customer_name))\n        self.connection.commit()\n\n    def search_tickets_by_customer(self, customer_name):\n        \"\"\"\n        Searches for tickets in the \"tickets\" table by customer name.\n        :param customer_name: str, the name of the customer to search for.\n        :return: list of tuples, the rows from the \"tickets\" table that match the search criteria.\n        \"\"\"\n        self.cursor.execute('''\n            SELECT * FROM tickets WHERE customer_name = ?\n        ''', (customer_name,))\n        return self.cursor.fetchall()\n\n    def delete_ticket(self, ticket_id):\n        \"\"\"\n        Deletes a ticket from the \"tickets\" table by ticket ID.\n        :param ticket_id: int, the ID of the ticket to delete.\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            DELETE FROM tickets WHERE id = ?\n        ''', (ticket_id,))\n        self.connection.commit()\n\n    def __del__(self):\n        \"\"\"\n        Ensures the connection is closed when the object is deleted.\n        \"\"\"\n        self.connection.close()\n```",
    "61": "```python\nimport random\n\nclass MusicPlayer:\n    \"\"\"\n    This is a class as a music player that provides to play, stop, add songs, remove songs, set volume, shuffle, and switch to the next or previous song.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the music player with an empty playlist, no current song, and a default volume of 50.\n        \"\"\"\n        self.playlist = []\n        self.current_song_index = -1\n        self.volume = 50\n\n    def add_song(self, song):\n        \"\"\"\n        Adds a song to the playlist.\n        :param song: The song to add to the playlist, str.\n        \"\"\"\n        self.playlist.append(song)\n\n    def remove_song(self, song):\n        \"\"\"\n        Removes a song from the playlist.\n        :param song: The song to remove from the playlist, str.\n        \"\"\"\n        if song in self.playlist:\n            self.playlist.remove(song)\n            if self.current_song_index >= len(self.playlist):\n                self.current_song_index = len(self.playlist) - 1\n\n    def play(self):\n        \"\"\"\n        Plays the current song in the playlist.\n        :return: The current song in the playlist, or False if there is no current song.\n        \"\"\"\n        if self.playlist:\n            if self.current_song_index == -1:\n                self.current_song_index = 0\n            return self.playlist[self.current_song_index]\n        return False\n\n    def stop(self):\n        \"\"\"\n        Stops the current song in the playlist.\n        :return: True if the current song was stopped, False if there was no current song.\n        \"\"\"\n        if self.current_song_index != -1:\n            self.current_song_index = -1\n            return True\n        return False\n\n    def switch_song(self):\n        \"\"\"\n        Switches to the next song in the playlist.\n        :return: True if the next song was switched to, False if there was no next song.\n        \"\"\"\n        if self.playlist:\n            if self.current_song_index < len(self.playlist) - 1:\n                self.current_song_index += 1\n                return True\n            return False\n        return False\n\n    def previous_song(self):\n        \"\"\"\n        Switches to the previous song in the playlist.\n        :return: True if the previous song was switched to, False if there was no previous song.\n        \"\"\"\n        if self.playlist:\n            if self.current_song_index > 0:\n                self.current_song_index -= 1\n                return True\n            return False\n        return False\n\n    def set_volume(self, volume):\n        \"\"\"\n        Sets the volume of the music player, if the volume is between 0 and 100 is valid.\n        :param volume: The volume to set the music player to, int.\n        :return: True if the volume was set, False if the volume was invalid.\n        \"\"\"\n        if 0 <= volume <= 100:\n            self.volume = volume\n            return True\n        return False\n\n    def shuffle(self):\n        \"\"\"\n        Shuffles the playlist.\n        :return: True if the playlist was shuffled, False if the playlist was empty.\n        \"\"\"\n        if self.playlist:\n            random.shuffle(self.playlist)\n            return True\n        return False\n```",
    "56": "```python\nclass MetricsCalculator:\n    \"\"\"\n    The class calculates precision, recall, F1 score, and accuracy based on predicted and true labels.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the number of all four samples to 0\n        \"\"\"\n        self.true_positives = 0\n        self.false_positives = 0\n        self.false_negatives = 0\n        self.true_negatives = 0\n\n    def update(self, predicted_labels, true_labels):\n        \"\"\"\n        Update the number of all four samples(true_positives, false_positives, false_negatives, true_negatives)\n        :param predicted_labels: list, predicted results\n        :param true_labels: list, true labels\n        :return: None, change the number of corresponding samples\n        \"\"\"\n        for pred, true in zip(predicted_labels, true_labels):\n            if pred == 1 and true == 1:\n                self.true_positives += 1\n            elif pred == 1 and true == 0:\n                self.false_positives += 1\n            elif pred == 0 and true == 1:\n                self.false_negatives += 1\n            elif pred == 0 and true == 0:\n                self.true_negatives += 1\n\n    def precision(self, predicted_labels, true_labels):\n        \"\"\"\n        Calculate precision\n        :param predicted_labels: list, predicted results\n        :param true_labels: list, true labels\n        :return: float\n        \"\"\"\n        self.update(predicted_labels, true_labels)\n        if self.true_positives + self.false_positives == 0:\n            return 0.0\n        return self.true_positives / (self.true_positives + self.false_positives)\n\n    def recall(self, predicted_labels, true_labels):\n        \"\"\"\n        Calculate recall\n        :param predicted_labels: list, predicted results\n        :param true_labels: list, true labels\n        :return: float\n        \"\"\"\n        self.update(predicted_labels, true_labels)\n        if self.true_positives + self.false_negatives == 0:\n            return 0.0\n        return self.true_positives / (self.true_positives + self.false_negatives)\n\n    def f1_score(self, predicted_labels, true_labels):\n        \"\"\"\n        Calculate f1 score, which is the harmonic mean of precision and recall\n        :param predicted_labels: list, predicted results\n        :param true_labels: list, true labels\n        :return: float\n        \"\"\"\n        precision_value = self.precision(predicted_labels, true_labels)\n        recall_value = self.recall(predicted_labels, true_labels)\n        if precision_value + recall_value == 0:\n            return 0.0\n        return 2 * (precision_value * recall_value) / (precision_value + recall_value)\n\n    def accuracy(self, predicted_labels, true_labels):\n        \"\"\"\n        Calculate accuracy\n        :param predicted_labels: list, predicted results\n        :param true_labels: list, true labels\n        :return: float\n        \"\"\"\n        total = len(predicted_labels)\n        if total == 0:\n            return 0.0\n        correct = sum(1 for pred, true in zip(predicted_labels, true_labels) if pred == true)\n        return correct / total\n```",
    "64": "```python\nclass NumberConverter:\n    \"\"\"\n    The class allows to convert decimal to binary, octal and hexadecimal respectively and contrarily\n    \"\"\"\n\n    @staticmethod\n    def decimal_to_binary(decimal_num):\n        \"\"\"\n        Convert a number from decimal format to binary format.\n        :param decimal_num: int, decimal number\n        :return: str, the binary representation of an integer.\n        >>> NumberConverter.decimal_to_binary(42423)\n        '1010010110110111'\n        \"\"\"\n        return bin(decimal_num)[2:]\n\n    @staticmethod\n    def binary_to_decimal(binary_num):\n        \"\"\"\n        Convert a number from binary format to decimal format.\n        :param binary_num: str, binary number\n        :return: int, the decimal representation of binary number str.\n        >>> NumberConverter.binary_to_decimal('1010010110110111')\n        42423\n        \"\"\"\n        return int(binary_num, 2)\n\n    @staticmethod\n    def decimal_to_octal(decimal_num):\n        \"\"\"\n        Convert a number from decimal format to octal format.\n        :param decimal_num: int, decimal number\n        :return: str, the octal representation of an integer.\n        >>> NumberConverter.decimal_to_octal(42423)\n        '122667'\n        \"\"\"\n        return oct(decimal_num)[2:]\n\n    @staticmethod\n    def octal_to_decimal(octal_num):\n        \"\"\"\n        Convert a number from octal format to decimal format.\n        :param octal_num: str, octal num\n        :return: int, the decimal representation of octal number str.\n        >>> NumberConverter.octal_to_decimal('122667')\n        42423\n        \"\"\"\n        return int(octal_num, 8)\n\n    @staticmethod\n    def decimal_to_hex(decimal_num):\n        \"\"\"\n        Convert a number from decimal format to hex format.\n        :param decimal_num: int, decimal number\n        :return hex_num: str, the hex representation of an integer.\n        >>> NumberConverter.decimal_to_hex(42423)\n        'a5b7'\n        \"\"\"\n        return hex(decimal_num)[2:]\n\n    @staticmethod\n    def hex_to_decimal(hex_num):\n        \"\"\"\n        Convert a number from hex format to decimal format.\n        :param hex_num: str, hex num\n        :return: int, the decimal representation of hex number str.\n        >>> NumberConverter.hex_to_decimal('a5b7')\n        42423\n        \"\"\"\n        return int(hex_num, 16)\n```",
    "55": "```python\nclass Manacher:\n    \"\"\"\n    This is a class that implements a manacher algorithm to find the Longest palindromic substring in a given string.\n    \"\"\"\n\n    def __init__(self, input_string) -> None:\n        \"\"\"\n        Initializes the Manacher class with the given input_string.\n        :param input_string: The input_string to be searched, str.\n        \"\"\"\n        self.input_string = input_string\n\n    def palindromic_length(self, center, diff, string):\n        \"\"\"\n        Recursively calculates the length of the palindromic substring based on a given center, difference value, and input string.\n        :param center: The center of the palindromic substring, int.\n        :param diff: The difference between the center and the current position, int.\n        :param string: The string to be searched, str.\n        :return: The length of the palindromic substring, int.\n        \"\"\"\n        left = center - diff\n        right = center + diff\n        if left < 0 or right >= len(string):\n            return 0\n        while left >= 0 and right < len(string) and string[left] == string[right]:\n            left -= 1\n            right += 1\n        return (right - left - 1) // 2\n\n    def palindromic_string(self):\n        \"\"\"\n        Finds the longest palindromic substring in the given string.\n        :return: The longest palindromic substring, str.\n        \"\"\"\n        # Transform the string to avoid even/odd length issues\n        transformed = '|' + '|'.join(self.input_string) + '|'\n        n = len(transformed)\n        max_length = 0\n        max_center = 0\n        \n        for center in range(n):\n            length = self.palindromic_length(center, 0, transformed)\n            if length > max_length:\n                max_length = length\n                max_center = center\n        \n        start = (max_center - max_length) // 2\n        return self.input_string[start:start + max_length]\n\nimport unittest\n\nclass ManacherTestPalindromicLength(unittest.TestCase):\n    def test_palindromic_length(self):\n        manacher = Manacher('ababa')\n        self.assertEqual(manacher.palindromic_length(2, 1, 'a|b|a|b|a'), 2)\n    \n    def test_palindromic_length_2(self):\n        manacher = Manacher('ababaxse')\n        self.assertEqual(manacher.palindromic_length(2, 1, 'a|b|a|b|a|x|s|e'), 2)\n\n    def test_palindromic_length_3(self):\n        manacher = Manacher('ababax')\n        self.assertEqual(manacher.palindromic_length(2, 3, 'a|b|a|b|a|x'), 0)\n\n    def test_palindromic_length_4(self):\n        manacher = Manacher('ababax')\n        self.assertEqual(manacher.palindromic_length(9, 2, 'a|b|a|b|a|x'), 0)\n\n    def test_palindromic_length_5(self):\n        manacher = Manacher('ababax')\n        self.assertEqual(manacher.palindromic_length(4, 1, 'a|b|a|b|a|x'), 4)\n\n\nclass ManacherTestPalindromicString(unittest.TestCase):\n    def test_palindromic_string(self):\n        manacher = Manacher('ababaxse')\n        self.assertEqual(manacher.palindromic_string(), 'ababa')\n\n    def test_palindromic_string_2(self):\n        manacher = Manacher('ababax')\n        self.assertEqual(manacher.palindromic_string(), 'ababa')\n\n    def test_palindromic_string_3(self):\n        manacher = Manacher('ababax')\n        self.assertEqual(manacher.palindromic_string(), 'ababa')\n\n    def test_palindromic_string_4(self):\n        manacher = Manacher('ababaxssss')\n        self.assertEqual(manacher.palindromic_string(), 'ababa')\n\n    def test_palindromic_string_5(self):\n        manacher = Manacher('abab')\n        self.assertEqual(manacher.palindromic_string(), 'aba')\n\n\nclass ManacherTestMain(unittest.TestCase):\n    def test_main(self):\n        manacher = Manacher('ababa')\n        self.assertEqual(manacher.palindromic_length(2, 1, 'a|b|a|b|a'), 2)\n        self.assertEqual(manacher.palindromic_string(), 'ababa')\n```",
    "67": "```python\nclass Order:\n    \"\"\"\n    The class manages restaurant orders by allowing the addition of dishes, calculation of the total cost, and checkout.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the order management system\n        self.menu stores the dishes of restaurant inventory\n        menu = [{\"dish\": dish name, \"price\": price, \"count\": count}, ...]\n        self.selected_dishes stores the dishes selected by customer\n        selected_dish = {\"dish\": dish name, \"count\": count, price: price}\n        self.sales stores the sales of each dish\n        sales = {dish name: sales}\n        \"\"\"\n        self.menu = []\n        self.selected_dishes = []\n        self.sales = {}\n\n    def add_dish(self, dish):\n        \"\"\"\n        Check the self.menu and add into self.selected_dish if the dish count is valid.\n        And if the dish has successfully been added, change the count in self.menu.\n        :param dish: dict, the information of dish. dish = {\"dish\": dish name, \"count\": count, price: price}\n        :return: True if successfully added, or False otherwise.\n        \"\"\"\n        for menu_item in self.menu:\n            if menu_item[\"dish\"] == dish[\"dish\"]:\n                if menu_item[\"count\"] >= dish[\"count\"]:\n                    menu_item[\"count\"] -= dish[\"count\"]\n                    self.selected_dishes.append(dish)\n                    return True\n                else:\n                    return False\n        return False\n\n    def calculate_total(self):\n        \"\"\"\n        Calculate the total price of dishes that have been ordered. Multiply the count, price and sales.\n        :return total: float, the final total price.\n        \"\"\"\n        total = 0.0\n        for selected in self.selected_dishes:\n            dish_price = selected[\"price\"] * self.sales[selected[\"dish\"]]\n            total += dish_price * selected[\"count\"]\n        return total\n\n    def checkout(self):\n        \"\"\"\n        Check out the dishes ordered. IF the self.selected_dishes is not empty, invoke the calculate_total\n        method to check out.\n        :return False if the self.selected_dishes is empty, or total(return value of calculate_total) otherwise.\n        \"\"\"\n        if not self.selected_dishes:\n            return False\n        total = self.calculate_total()\n        self.selected_dishes = []\n        return total\n```",
    "70": "```python\nclass PersonRequest:\n    \"\"\"\n    This class validates input personal information data and sets invalid fields to None based on specific rules.\n    \"\"\"\n\n    def __init__(self, name: str, sex: str, phoneNumber: str):\n        \"\"\"\n        Initialize PersonRequest object with the provided information.\n        :param name: str, the name of the person\n        :param sex: str, the sex of the person\n        :param phoneNumber: str, the phone number of the person\n        \"\"\"\n        self.name = self._validate_name(name)\n        self.sex = self._validate_sex(sex)\n        self.phoneNumber = self._validate_phoneNumber(phoneNumber)\n\n    def _validate_name(self, name: str) -> str:\n        \"\"\"\n        Validate the name and return it. If name is empty or exceeds 33 characters in length, set to None.\n        :param name: str, the name to validate\n        :return: str, the validated name or None if invalid\n        \"\"\"\n        if len(name) == 0 or len(name) > 33:\n            return None\n        return name\n\n    def _validate_sex(self, sex: str) -> str:\n        \"\"\"\n        Validate the sex and return it. If sex is not Man, Woman, or UGM, set to None.\n        :param sex: str, the sex to validate\n        :return: str, the validated sex or None if invalid\n        \"\"\"\n        if sex not in [\"Man\", \"Woman\", \"UGM\"]:\n            return None\n        return sex\n\n    def _validate_phoneNumber(self, phoneNumber: str) -> str:\n        \"\"\"\n        Validate the phone number and return it. If phoneNumber is empty or not an 11 digit number, set to None.\n        :param phoneNumber: str, the phone number to validate\n        :return: str, the validated phone number or None if invalid\n        \"\"\"\n        if len(phoneNumber) != 11 or not phoneNumber.isdigit():\n            return None\n        return phoneNumber\n```",
    "68": "```python\nclass PageUtil:\n    \"\"\"\n    PageUtil class is a versatile utility for handling pagination and search functionalities in an efficient and convenient manner.\n    \"\"\"\n\n    def __init__(self, data, page_size):\n        \"\"\"\n        Initialize the PageUtil object with the given data and page size.\n        :param data: list, the data to be paginated\n        :param page_size: int, the number of items per page\n        \"\"\"\n        self.data = data\n        self.page_size = page_size\n        self.total_items = len(data)\n        self.total_pages = (self.total_items + page_size - 1) // page_size\n\n    def get_page(self, page_number):\n        \"\"\"\n        Retrieve a specific page of data.\n        :param page_number: int, the page number to fetch\n        :return: list, the data on the specified page\n        \"\"\"\n        if page_number < 1 or page_number > self.total_pages:\n            return []\n        start_index = (page_number - 1) * self.page_size\n        end_index = start_index + self.page_size\n        return self.data[start_index:end_index]\n\n    def get_page_info(self, page_number):\n        \"\"\"\n        Retrieve information about a specific page.\n        :param page_number: int, the page number to fetch information about\n        :return: dict, containing page information such as current page number, total pages, etc.\n        \"\"\"\n        if page_number < 1 or page_number > self.total_pages:\n            return {}\n        \n        page_data = self.get_page(page_number)\n        return {\n            \"current_page\": page_number,\n            \"per_page\": self.page_size,\n            \"total_pages\": self.total_pages,\n            \"total_items\": self.total_items,\n            \"has_previous\": page_number > 1,\n            \"has_next\": page_number < self.total_pages,\n            \"data\": page_data\n        }\n\n    def search(self, keyword):\n        \"\"\"\n        Search for items in the data that contain the given keyword.\n        :param keyword: str, the keyword to search for\n        :return: dict, containing search information such as total results and matching items\n        \"\"\"\n        keyword = str(keyword)\n        results = [item for item in self.data if keyword in str(item)]\n        total_results = len(results)\n        total_pages = (total_results + self.page_size - 1) // self.page_size\n        \n        return {\n            \"keyword\": keyword,\n            \"total_results\": total_results,\n            \"total_pages\": total_pages,\n            \"results\": results\n        }\n```",
    "72": "```python\nimport re\n\nclass RegexUtils:\n    \"\"\"\n    The class provides to match, find all occurrences, split, and substitute text using regular expressions. It also includes predefined patterns, validating phone numbers and extracting email addresses.\n    \"\"\"\n\n    def match(self, pattern, text):\n        return re.fullmatch(pattern, text) is not None\n\n    def findall(self, pattern, text):\n        return re.findall(pattern, text)\n\n    def split(self, pattern, text):\n        return re.split(pattern, text)\n\n    def sub(self, pattern, replacement, text):\n        return re.sub(pattern, replacement, text)\n\n    def generate_email_pattern(self):\n        return r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n\n    def generate_phone_number_pattern(self):\n        return r'\\b\\d{3}-\\d{3}-\\d{4}\\b'\n\n    def generate_split_sentences_pattern(self):\n        return r'[.!?][\\s]{1,2}(?=[A-Z])'\n\n    def split_sentences(self, text):\n        sentences = re.split(self.generate_split_sentences_pattern(), text)\n        return [sentence.strip() for sentence in sentences if sentence]\n\n    def validate_phone_number(self, phone_number):\n        pattern = self.generate_phone_number_pattern()\n        return self.match(pattern, phone_number)\n\n    def extract_email(self, text):\n        pattern = self.generate_email_pattern()\n        return self.findall(pattern, text)\n```",
    "69": "```python\nimport PyPDF2\nimport os\n\nclass PDFHandler:\n    \"\"\"\n    The class allows merging multiple PDF files into one and extracting text from PDFs using PyPDF2 library.\n    \"\"\"\n\n    def __init__(self, filepaths):\n        \"\"\"\n        Takes a list of file paths filepaths as a parameter.\n        It creates a list named readers using PyPDF2, where each reader opens a file from the given paths.\n        \"\"\"\n        self.filepaths = filepaths\n        self.readers = [PyPDF2.PdfFileReader(open(fp, 'rb')) for fp in filepaths]\n\n    def merge_pdfs(self, output_filepath):\n        \"\"\"\n        Read files in self.readers which stores handles to multiple PDF files.\n        Merge them to one pdf and update the page number, then save in disk.\n        :param output_filepath: str, output file path to save to\n        :return: str, \"Merged PDFs saved at {output_filepath}\" if successfully merged\n        \"\"\"\n        pdf_writer = PyPDF2.PdfFileWriter()\n        \n        for reader in self.readers:\n            for page_num in range(reader.getNumPages()):\n                pdf_writer.addPage(reader.getPage(page_num))\n\n        with open(output_filepath, 'wb') as out_file:\n            pdf_writer.write(out_file)\n\n        return f\"Merged PDFs saved at {output_filepath}\"\n\n    def extract_text_from_pdfs(self):\n        \"\"\"\n        Extract text from pdf files in self.readers\n        :return pdf_texts: list of str, each element is the text of one pdf file\n        \"\"\"\n        pdf_texts = []\n        for reader in self.readers:\n            text = ''\n            for page_num in range(reader.getNumPages()):\n                text += reader.getPage(page_num).extract_text()\n            pdf_texts.append(text)\n        return pdf_texts\n```",
    "73": "```python\nclass RPGCharacter:\n    \"\"\"\n    The class represents a role-playing game character, which allows to attack other characters, heal, gain experience, level up, and check if the character is alive.\n    \"\"\"\n\n    def __init__(self, name, hp, attack_power, defense, level=1):\n        \"\"\"\n        Initialize an RPG character object.\n        :param name: str, the name of the character.\n        :param hp: int, The health points of the character.\n        :param attack_power: int, the attack power of the character.\n        :param defense: int, the defense points of the character.\n        :param level: int, the level of the character. Default is 1.\n        \"\"\"\n        self.name = name\n        self.hp = hp\n        self.attack_power = attack_power\n        self.defense = defense\n        self.level = level\n        self.exp = 0\n\n    def attack(self, other_character):\n        \"\"\"\n        Attack another character. The damage caused needs to offset the defense value.\n        :param other_character: RPGCharacter, The character being attacked.\n        \"\"\"\n        damage = max(self.attack_power - other_character.defense, 0)\n        other_character.hp = max(other_character.hp - damage, 0)\n\n    def heal(self):\n        \"\"\"\n        Heal the character with 10 hp and the max hp is 100.\n        :return: int, the current health points after healing.\n        \"\"\"\n        self.hp = min(self.hp + 10, 100)\n        return self.hp\n\n    def gain_exp(self, amount):\n        \"\"\"\n        Gain experience points for the character and level up when the exp has reached the values that is 100 times the current level.\n        The experience that overflows should be used to calculate the next level up until exhausted.\n        :param amount: int, the amount of experience points to gain.\n        \"\"\"\n        self.exp += amount\n        while self.exp >= 100 * self.level and self.level < 100:\n            self.exp -= 100 * self.level\n            self.level_up()\n\n    def level_up(self):\n        \"\"\"\n        Level up the character and return to zero experience points, increase hp by 20 points, attack power and defense points by 5 points.\n        max level is 100\n        :return: tuple[int, int, int, int], the new level, health points, attack power, and defense points after leveling up.\n        \"\"\"\n        if self.level < 100:\n            self.level += 1\n            self.hp = min(self.hp + 20, 100)\n            self.attack_power += 5\n            self.defense += 5\n        return self.level, self.hp, self.attack_power, self.defense\n\n    def is_alive(self):\n        \"\"\"\n        Check if player is alive.\n        :return: True if the hp is larger than 0, or False otherwise.\n        \"\"\"\n        return self.hp > 0\n```",
    "75": "```python\nclass ShoppingCart:\n    \"\"\"\n    The class manages items, their prices, quantities, and allows to for add, remove, view items, and calculate the total price.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the items representing the shopping list as an empty dictionary\n        \"\"\"\n        self.items = {}\n\n    def add_item(self, item, price, quantity=1):\n        \"\"\"\n        Add item information to the shopping list items, including price and quantity. The default quantity is 1\n        :param item: string, Item to be added\n        :param price: float, The price of the item\n        :param quantity: int, The number of items, defaults to 1\n        :return: None\n        \"\"\"\n        if item in self.items:\n            self.items[item]['quantity'] += quantity\n        else:\n            self.items[item] = {'price': price, 'quantity': quantity}\n\n    def remove_item(self, item, quantity=1):\n        \"\"\"\n        Subtract the specified quantity of item from the shopping list items\n        :param item: string, Item to be subtracted in quantity\n        :param quantity: int, Quantity to be subtracted\n        :return: None\n        \"\"\"\n        if item in self.items:\n            self.items[item]['quantity'] -= quantity\n            if self.items[item]['quantity'] <= 0:\n                del self.items[item]\n\n    def view_items(self) -> dict:\n        \"\"\"\n        Return the current shopping list items\n        :return: dict, the current shopping list items\n        \"\"\"\n        return self.items\n\n    def total_price(self) -> float:\n        \"\"\"\n        Calculate the total price of all items in the shopping list, which is the quantity of each item multiplied by the price\n        :return: float, the total price of all items in the shopping list\n        \"\"\"\n        total = 0.0\n        for item in self.items.values():\n            total += item['price'] * item['quantity']\n        return total\n```",
    "76": "```python\nclass SignInSystem:\n    \"\"\"\n    This is a class as sign-in system, including adding users, signing in/out, checking sign-in status, and retrieving signed-in/not signed-in users.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the sign-in system.\n        \"\"\"\n        self.users = {}\n\n    def add_user(self, username):\n        \"\"\"\n        Add a user to the sign-in system if the user wasn't in the self.users.\n        And the initial state is False.\n        :param username: str, the username to be added.\n        :return: bool, True if the user is added successfully, False if the user already exists.\n        \"\"\"\n        if username not in self.users:\n            self.users[username] = False\n            return True\n        return False\n\n    def sign_in(self, username):\n        \"\"\"\n        Sign in a user if the user was in the self.users and change the state to True.\n        :param username: str, the username to be signed in.\n        :return: bool, True if the user is signed in successfully, False if the user does not exist.\n        \"\"\"\n        if username in self.users and not self.users[username]:\n            self.users[username] = True\n            return True\n        return False\n\n    def check_sign_in(self, username):\n        \"\"\"\n        Check if a user is signed in.\n        :param username: str, the username to be checked.\n        :return: bool, True if the user is signed in, False if the user does not exist or is not signed in.\n        \"\"\"\n        return self.users.get(username, False)\n\n    def all_signed_in(self):\n        \"\"\"\n        Check if all users are signed in.\n        :return: bool, True if all users are signed in, False otherwise.\n        \"\"\"\n        return all(self.users.values())\n\n    def all_not_signed_in(self):\n        \"\"\"\n        Get a list of usernames that are not signed in.\n        :return: list[str], a list of usernames that are not signed in.\n        \"\"\"\n        return [username for username, signed_in in self.users.items() if not signed_in]\n```",
    "78": "```python\nimport re\n\nclass SplitSentence:\n    \"\"\"\n    The class allows to split sentences, count words in a sentence, and process a text file to find the maximum word count.\n    \"\"\"\n\n    def split_sentences(self, sentences_string):\n        \"\"\"\n        Split a string into a list of sentences. Sentences end with . or ? and with a space after that. Please note that Mr. also end with . but are not sentences.\n        :param sentences_string: string, string to split\n        :return:list, split sentence list\n        \"\"\"\n        # Regex to split sentences while ignoring abbreviations like Mr.\n        sentences = re.split(r'(?<!\\bMr\\.)[.?\\s]+', sentences_string.strip())\n        return [s.strip() for s in sentences if s.strip()]\n\n    def count_words(self, sentence):\n        \"\"\"\n        Count the number of words in a sentence. Note that words are separated by spaces and that punctuation marks and numbers are not counted as words.\n        :param sentence:string, sentence to be counted, where words are separated by spaces\n        :return:int, number of words in the sentence\n        \"\"\"\n        # Split the sentence into words and count them, ignoring numbers and punctuation\n        words = re.findall(r'\\b[a-zA-Z]+\\b', sentence)\n        return len(words)\n\n    def process_text_file(self, sentences_string):\n        \"\"\"\n        Given a text, return the number of words in the longest sentence\n        :param sentences_string: string, undivided long sentence\n        :return:int, the number of words in the longest sentence\n        \"\"\"\n        sentences = self.split_sentences(sentences_string)\n        max_word_count = 0\n        \n        for sentence in sentences:\n            word_count = self.count_words(sentence)\n            if word_count > max_word_count:\n                max_word_count = word_count\n                \n        return max_word_count\n```",
    "74": "```python\nclass Server:\n    \"\"\"\n    This is a class as a server, which handles a white list, message sending and receiving, and information display.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the whitelist as an empty list, and initialize the sending and receiving information as an empty dictionary\n        \"\"\"\n        self.white_list = []\n        self.send_struct = {}\n        self.receive_struct = {}\n\n    def add_white_list(self, addr):\n        \"\"\"\n        Add an address to the whitelist and do nothing if it already exists\n        :param addr: int, address to be added\n        :return: new whitelist, return False if the address already exists\n        \"\"\"\n        if addr not in self.white_list:\n            self.white_list.append(addr)\n            return self.white_list\n        return False\n\n    def del_white_list(self, addr):\n        \"\"\"\n        Remove an address from the whitelist and do nothing if it does not exist\n        :param addr: int, address to be deleted\n        :return: new whitelist, return False if the address does not exist\n        \"\"\"\n        if addr in self.white_list:\n            self.white_list.remove(addr)\n            return self.white_list\n        return False\n\n    def recv(self, info):\n        \"\"\"\n        Receive information containing address and content. If the address is on the whitelist, receive the content; otherwise, do not receive it\n        :param info: dict, information dictionary containing address and content\n        :return: if successfully received, return the content of the information; otherwise, return False\n        \"\"\"\n        if isinstance(info, dict) and \"addr\" in info and \"content\" in info:\n            addr = info[\"addr\"]\n            if addr in self.white_list:\n                self.receive_struct = info\n                return info[\"content\"]\n            return False\n        return -1\n\n    def send(self, info):\n        \"\"\"\n        Send information containing address and content\n        :param info: dict, information dictionary containing address and content\n        :return: if successfully sent, return nothing; otherwise, return a string indicating an error message\n        \"\"\"\n        if isinstance(info, dict) and \"addr\" in info and \"content\" in info:\n            self.send_struct = info\n        else:\n            return \"info structure is not correct\"\n\n    def show(self, type):\n        \"\"\"\n        Returns struct of the specified type\n        :param type: string, the type of struct to be returned, which can be 'send' or 'receive'\n        :return: if type is equal to 'send' or 'receive', return the corresponding struct; otherwise, return False\n        \"\"\"\n        if type == \"send\":\n            return self.send_struct\n        elif type == \"receive\":\n            return self.receive_struct\n        return False\n```",
    "52": "```python\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk import pos_tag, word_tokenize\nimport string\n\n\nnltk.download('averaged_perceptron_tagger')\nnltk.download('punkt')\nnltk.download('wordnet')\n\nclass Lemmatization:\n    \"\"\"\n    This is a class about Lemmatization, which utilizes the nltk library to perform lemmatization and part-of-speech tagging on sentences, as well as remove punctuation.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        creates a WordNetLemmatizer object and stores it in the self.lemmatizer member variable.\n        \"\"\"\n        self.lemmatizer = WordNetLemmatizer()\n\n    def lemmatize_sentence(self, sentence):\n        \"\"\"\n        Remove punctuations of the sentence and tokenizes the input sentence, mark the part of speech tag of each word,\n        lemmatizes the words with different parameters based on their parts of speech, and stores in a list.\n        :param sentence: a sentence str\n        :return: a list of words which have been lemmatized.\n        >>> lemmatization = Lemmatization()\n        >>> lemmatization.lemmatize_sentence(\"I am running in a race.\")\n        ['I', 'be', 'run', 'in', 'a', 'race']\n        \"\"\"\n        sentence = self.remove_punctuation(sentence)\n        tokens = word_tokenize(sentence)\n        pos_tags = self.get_pos_tag(sentence)\n        lemmatized_words = []\n\n        for token, pos in zip(tokens, pos_tags):\n            if pos.startswith('VB'):\n                lemmatized_words.append(self.lemmatizer.lemmatize(token, pos='v'))\n            elif pos.startswith('NN'):\n                lemmatized_words.append(self.lemmatizer.lemmatize(token, pos='n'))\n            elif pos.startswith('JJ'):\n                lemmatized_words.append(self.lemmatizer.lemmatize(token, pos='a'))\n            else:\n                lemmatized_words.append(token)\n\n        return lemmatized_words\n\n    def get_pos_tag(self, sentence):\n        \"\"\"\n        Remove punctuations of the sentence and tokenizes the input sentence, mark the part of speech tag of each word.\n        :param sentence: a sentence str\n        :return: list, part of speech tag of each word in the sentence.\n        >>> lemmatization = Lemmatization()\n        >>> lemmatization.get_pos_tag(\"I am running in a race.\")\n        ['PRP', 'VBP', 'VBG', 'IN', 'DT', 'NN']\n        \"\"\"\n        sentence = self.remove_punctuation(sentence)\n        tokens = word_tokenize(sentence)\n        pos_tags = pos_tag(tokens)\n        return [tag for _, tag in pos_tags]\n\n    def remove_punctuation(self, sentence):\n        \"\"\"\n        Removes punctuation from the input text.\n        :param sentence: a sentence str\n        :return: str, sentence without any punctuation\n        >>> lemmatization = Lemmatization()\n        >>> lemmatization.remove_punctuation(\"I am running in a race.\")\n        'I am running in a race'\n        \"\"\"\n        return sentence.translate(str.maketrans('', '', string.punctuation))\n\n\n# Test cases\nimport unittest\n\nclass LemmatizationTestLemmatizeSentence(unittest.TestCase):\n    def test_lemmatize_sentence_1(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.lemmatize_sentence(\"I am running in a race.\")\n        expected = ['I', 'be', 'run', 'in', 'a', 'race']\n        self.assertEqual(result, expected)\n\n    def test_lemmatize_sentence_2(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.lemmatize_sentence(\"Until the beating, Cantanco's eyesight had been weak, but adequate.\")\n        expected = ['Until', 'the', 'beating', 'Cantancos', 'eyesight', 'have', 'be', 'weak', 'but', 'adequate']\n        self.assertEqual(result, expected)\n\n    def test_lemmatize_sentence_3(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.lemmatize_sentence(\"The dog's barked at the mailman.\")\n        expected = ['The', 'dog', 'bark', 'at', 'the', 'mailman']\n        self.assertEqual(result, expected)\n\n    def test_lemmatize_sentence_4(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.lemmatize_sentence(\"He was running and eating at same time. \")\n        expected = ['He', 'be', 'run', 'and', 'eat', 'at', 'same', 'time']\n        self.assertEqual(result, expected)\n\n    def test_lemmatize_sentence_5(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.lemmatize_sentence(\"I was taking a ride in the car.\")\n        expected = ['I', 'be', 'take', 'a', 'ride', 'in', 'the', 'car']\n        self.assertEqual(result, expected)\n\nclass LemmatizationTestGetPosTag(unittest.TestCase):\n    def test_get_pos_tag_1(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.get_pos_tag(\"I am running in a race.\")\n        expected = ['PRP', 'VBP', 'VBG', 'IN', 'DT', 'NN']\n        self.assertEqual(result, expected)\n\n    def test_get_pos_tag_2(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.get_pos_tag(\"Cantanco's eyesight had been weak, but adequate.\")\n        expected = ['NNP', 'NN', 'VBD', 'VBN', 'JJ', 'CC', 'JJ']\n        self.assertEqual(result, expected)\n\n    def test_get_pos_tag_3(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.get_pos_tag(\"The dog's barked at the mailman.\")\n        expected = ['DT', 'NNS', 'VBD', 'IN', 'DT', 'NN']\n        self.assertEqual(result, expected)\n\n    def test_get_pos_tag_4(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.get_pos_tag(\"He was running and eating at same time. \")\n        expected = ['PRP', 'VBD', 'VBG', 'CC', 'VBG', 'IN', 'JJ', 'NN']\n        self.assertEqual(result, expected)\n\n    def test_get_pos_tag_5(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.get_pos_tag(\"I was taking a ride in the car.\")\n        expected = ['PRP', 'VBD', 'VBG', 'DT', 'NN', 'IN', 'DT', 'NN']\n        self.assertEqual(result, expected)\n\n\nclass LemmatizationTestRemovePunctuation(unittest.TestCase):\n    def test_remove_punctuation_1(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.remove_punctuation(\"I am running in a race.\")\n        expected = \"I am running in a race\"\n        self.assertEqual(result, expected)\n\n    def test_remove_punctuation_2(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.remove_punctuation(\"Until the beating, Cantanco's eyesight had been weak, but adequate.\")\n        expected = 'Until the beating Cantancos eyesight had been weak but adequate'\n        self.assertEqual(result, expected)\n\n    def test_remove_punctuation_3(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.remove_punctuation(\"The dog's barked at the mailman!!!\")\n        expected = 'The dogs barked at the mailman'\n        self.assertEqual(result, expected)\n\n    def test_remove_punctuation_4(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.remove_punctuation(\"He was running and eating at same time... \")\n        expected = 'He was running and eating at same time '\n        self.assertEqual(result, expected)\n\n    def test_remove_punctuation_5(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.remove_punctuation(\"Is this a test? I hope it is...\")\n        expected = 'Is this a test I hope it is'\n        self.assertEqual(result, expected)\n\nclass LemmatizationTestMain(unittest.TestCase):\n    def test_main(self):\n        lemmatization = Lemmatization()\n        result = lemmatization.lemmatize_sentence(\"Until the beating, Cantanco's eyesight had been weak, but adequate.\")\n        expected = ['Until', 'the', 'beating', 'Cantancos', 'eyesight', 'have', 'be', 'weak', 'but', 'adequate']\n        self.assertEqual(result, expected)\n\n        result = lemmatization.get_pos_tag(\"Cantanco's eyesight had been weak, but adequate.\")\n        expected = ['NNP', 'NN', 'VBD', 'VBN', 'JJ', 'CC', 'JJ']\n        self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n```",
    "65": "```python\nclass NumberWordFormatter:\n    \"\"\"\n    This is a class that provides to convert numbers into their corresponding English word representation, including handling the conversion of both the integer and decimal parts, and incorporating appropriate connectors and units.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize NumberWordFormatter object.\n        \"\"\"\n        self.NUMBER = [\"\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\"]\n        self.NUMBER_TEEN = [\"TEN\", \"ELEVEN\", \"TWELVE\", \"THIRTEEN\", \"FOURTEEN\", \"FIFTEEN\", \"SIXTEEN\", \"SEVENTEEN\",\n                            \"EIGHTEEN\", \"NINETEEN\"]\n        self.NUMBER_TEN = [\"TEN\", \"TWENTY\", \"THIRTY\", \"FORTY\", \"FIFTY\", \"SIXTY\", \"SEVENTY\", \"EIGHTY\", \"NINETY\"]\n        self.NUMBER_MORE = [\"\", \"THOUSAND\", \"MILLION\", \"BILLION\"]\n\n    def format(self, x):\n        \"\"\"\n        Converts a number into words format\n        :param x: int or float, the number to be converted into words format\n        :return: str, the number in words format\n        \"\"\"\n        if x is None:\n            return \"\"\n        if x == 0:\n            return \"ZERO ONLY\"\n        if isinstance(x, float):\n            integer_part = int(x)\n            decimal_part = int(round((x - integer_part) * 100))\n            return f\"{self.number_to_words(integer_part)} AND CENTS {self.trans_two(str(decimal_part))} ONLY\"\n        return f\"{self.number_to_words(int(x))} ONLY\"\n\n    def format_string(self, x):\n        \"\"\"\n        Converts a string representation of a number into words format\n        :param x: str, the string representation of a number\n        :return: str, the number in words format\n        \"\"\"\n        return self.format(float(x))\n\n    def number_to_words(self, num):\n        if num == 0:\n            return \"\"\n        elif num < 10:\n            return self.NUMBER[num]\n        elif num < 20:\n            return self.NUMBER_TEEN[num - 10]\n        elif num < 100:\n            return self.trans_two(str(num))\n        elif num < 1000:\n            return self.trans_three(str(num))\n        else:\n            words = []\n            for idx, scale in enumerate(self.NUMBER_MORE):\n                if num % 1000 != 0:\n                    words.append(self.number_to_words(num % 1000) + (\" \" + scale if scale else \"\"))\n                num //= 1000\n                if num == 0:\n                    break\n            return ' '.join(reversed(words)).strip()\n\n    def trans_two(self, s):\n        \"\"\"\n        Converts a two-digit number into words format\n        :param s: str, the two-digit number\n        :return: str, the number in words format\n        \"\"\"\n        n = int(s)\n        if n < 10:\n            return self.NUMBER[n]\n        elif n < 20:\n            return self.NUMBER_TEEN[n - 10]\n        else:\n            ten = self.NUMBER_TEN[n // 10 - 1]\n            one = self.NUMBER[n % 10]\n            return f\"{ten} {one}\".strip()\n\n    def trans_three(self, s):\n        \"\"\"\n        Converts a three-digit number into words format\n        :param s: str, the three-digit number\n        :return: str, the number in words format\n        \"\"\"\n        n = int(s)\n        if n < 100:\n            return self.trans_two(s)\n        else:\n            hundred = self.NUMBER[n // 100] + \" HUNDRED\"\n            rest = self.trans_two(str(n % 100))\n            return f\"{hundred} AND {rest}\".strip()\n\n    def parse_more(self, i):\n        \"\"\"\n        Parses the thousand/million/billion suffix based on the index\n        :param i: int, the index representing the magnitude (thousand, million, billion)\n        :return: str, the corresponding suffix for the magnitude\n        \"\"\"\n        return self.NUMBER_MORE[i]\n```",
    "71": "```python\nclass PushBoxGame:\n    \"\"\"\n    This class implements a functionality of a sokoban game, where the player needs to move boxes to designated targets in order to win.\n    \"\"\"\n\n    def __init__(self, map):\n        \"\"\"\n        Initialize the push box game with the map and various attributes.\n        :param map: list[str], the map of the push box game, represented as a list of strings. \n            Each character on the map represents a different element, including the following:\n            - '#' represents a wall that neither the player nor the box can pass through;\n            - 'O' represents the initial position of the player;\n            - 'G' represents the target position;\n            - 'X' represents the initial position of the box.\n        >>> map = [\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]   \n        >>> game = PushBoxGame(map)                \n        \"\"\"\n        self.map = map\n        self.player_row = 0\n        self.player_col = 0\n        self.targets = []\n        self.boxes = []\n        self.target_count = 0\n        self.is_game_over = False\n        self.init_game()\n\n    def init_game(self):\n        \"\"\"\n        Initialize the game by setting the positions of the player, targets, and boxes based on the map.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]) \n        >>> game.targets\n        [(3, 3)]\n        >>> game.boxes\n        [(2, 2)]\n        >>> game.player_row\n        1\n        >>> game.player_col\n        1\n        \"\"\"\n        for r in range(len(self.map)):\n            for c in range(len(self.map[r])):\n                if self.map[r][c] == 'O':\n                    self.player_row, self.player_col = r, c\n                elif self.map[r][c] == 'G':\n                    self.targets.append((r, c))\n                elif self.map[r][c] == 'X':\n                    self.boxes.append((r, c))\n        self.target_count = len(self.targets)\n\n    def check_win(self):\n        \"\"\"\n        Check if the game is won. The game is won when all the boxes are placed on target positions.\n        And update the value of self.is_game_over.\n        :return self.is_game_over: True if all the boxes are placed on target positions, or False otherwise.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]) \n        >>> game.check_win()\n        \"\"\"\n        self.is_game_over = all(box in self.targets for box in self.boxes)\n        return self.is_game_over\n\n    def move(self, direction):\n        \"\"\"\n        Move the player based on the specified direction and check if the game is won.\n        :param direction: str, the direction of the player's movement. \n            It can be 'w', 's', 'a', or 'd' representing up, down, left, or right respectively.\n\n        :return: True if the game is won, False otherwise.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"])       \n        >>> game.print_map()\n        # # # # # \n        # O     #\n        #   X   #\n        #     G #\n        # # # # #\n        >>> game.move('d')\n        False\n        >>> game.move('s')   \n        False\n        >>> game.move('a')   \n        False\n        >>> game.move('s') \n        False\n        >>> game.move('d') \n        True\n        \"\"\"\n        direction_map = {\n            'w': (-1, 0),\n            's': (1, 0),\n            'a': (0, -1),\n            'd': (0, 1)\n        }\n\n        if direction not in direction_map:\n            return False\n\n        delta_row, delta_col = direction_map[direction]\n        new_player_row = self.player_row + delta_row\n        new_player_col = self.player_col + delta_col\n\n        if self.map[new_player_row][new_player_col] == '#':\n            return False  # Hit a wall\n\n        if (new_player_row, new_player_col) in self.boxes:\n            new_box_row = new_player_row + delta_row\n            new_box_col = new_player_col + delta_col\n\n            if self.map[new_box_row][new_box_col] == '#' or (new_box_row, new_box_col) in self.boxes:\n                return False  # Hit a wall or another box\n\n            # Move the box\n            box_index = self.boxes.index((new_player_row, new_player_col))\n            self.boxes[box_index] = (new_box_row, new_box_col)\n\n        # Move the player\n        self.player_row = new_player_row\n        self.player_col = new_player_col\n\n        return self.check_win()\n```",
    "77": "```python\nimport random\n\nclass Snake:\n    \"\"\"\n    The class is a snake game, with allows snake to move and eat food, and also enables to reset, and generate a random food position.\n    \"\"\"\n\n    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):\n        \"\"\"\n        Initialize the length of the snake, screen width, screen height, block size, snake head position, score, and food position.\n        :param SCREEN_WIDTH: int\n        :param SCREEN_HEIGHT: int\n        :param BLOCK_SIZE: int, Size of moving units\n        :param food_position: tuple, representing the position(x, y) of food.\n        \"\"\"\n        self.length = 1\n        self.SCREEN_WIDTH = SCREEN_WIDTH\n        self.SCREEN_HEIGHT = SCREEN_HEIGHT\n        self.BLOCK_SIZE = BLOCK_SIZE\n        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]\n        self.score = 0\n        self.food_position = food_position\n\n    def move(self, direction):\n        \"\"\"\n        Move the snake in the specified direction. If the new position of the snake's head is equal to the position of the food, then eat the food; If the position of the snake's head is equal to the position of its body, then start over, otherwise its own length plus one.\n        :param direction: tuple, representing the direction of movement (x, y).\n        :return: None\n        \"\"\"\n        new_head = (self.positions[0][0] + direction[0] * self.BLOCK_SIZE, \n                     self.positions[0][1] + direction[1] * self.BLOCK_SIZE)\n        \n        if new_head == self.food_position:\n            self.eat_food()\n        elif new_head in self.positions:\n            self.reset()\n        else:\n            self.positions.insert(0, new_head)\n            if len(self.positions) > self.length:\n                self.positions.pop()\n            self.length = min(self.length + 1, len(self.positions))\n\n    def random_food_position(self):\n        \"\"\"\n        Randomly generate a new food position, but don't place it on the snake.\n        :return: None, Change the food position\n        \"\"\"\n        while True:\n            new_food_position = (random.randint(0, (self.SCREEN_WIDTH // self.BLOCK_SIZE) - 1) * self.BLOCK_SIZE,\n                                 random.randint(0, (self.SCREEN_HEIGHT // self.BLOCK_SIZE) - 1) * self.BLOCK_SIZE)\n            if new_food_position not in self.positions:\n                self.food_position = new_food_position\n                break\n\n    def reset(self):\n        \"\"\"\n        Reset the snake to its initial state. Set the length to 1, the snake head position to ((SCREEN_WIDTH/2), (SCREEN_HEIGHT/2)), the score to 0, and randomly generate new food position.\n        :return: None\n        \"\"\"\n        self.length = 1\n        self.positions = [(self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2)]\n        self.score = 0\n        self.random_food_position()\n\n    def eat_food(self):\n        \"\"\"\n        Increase the length of the snake by 1 and increase the score by 100. Randomly generate a new food position, but don't place it on the snake.\n        :return: None\n        \"\"\"\n        self.length += 1\n        self.score += 100\n        self.random_food_position()\n```",
    "84": "```python\nimport json\nimport re\n\nclass TextFileProcessor:\n    \"\"\"\n    The class handles reading, writing, and processing text files. It can read the file as JSON, read the raw text, write content to the file, and process the file by removing non-alphabetic characters.\n    \"\"\"\n\n    def __init__(self, file_path):\n        \"\"\"\n        Initialize the file path.\n        :param file_path: str\n        \"\"\"\n        self.file_path = file_path\n\n    def read_file_as_json(self):\n        \"\"\"\n        Read the self.file_path file as json format.\n        if the file content doesn't obey json format, the code will raise error.\n        :return data: dict if the file is stored as json format, or str/int/float.. according to the file content otherwise.\n        \"\"\"\n        with open(self.file_path, 'r') as file:\n            content = file.read()\n            return json.loads(content)\n\n    def read_file(self):\n        \"\"\"\n        Read the return the content of self.file_path file.\n        :return: the same return as the read() method\n        \"\"\"\n        with open(self.file_path, 'r') as file:\n            return file.read()\n\n    def write_file(self, content):\n        \"\"\"\n        Write content into the self.file_path file, and overwrite if the file has already existed.\n        :param content: any content\n        \"\"\"\n        with open(self.file_path, 'w') as file:\n            file.write(content)\n\n    def process_file(self):\n        \"\"\"\n        Read the self.file_path file and filter out non-alphabetic characters from the content string.\n        Overwrite the after-processed data into the same self.file_path file.\n        \"\"\"\n        content = self.read_file()\n        processed_content = re.sub(r'[^a-zA-Z]', '', content)\n        self.write_file(processed_content)\n        return processed_content\n```",
    "80": "```python\nclass SQLQueryBuilder:\n    \"\"\"\n    This class provides to build SQL queries, including SELECT, INSERT, UPDATE, and DELETE statements. \n    \"\"\"\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        \"\"\"\n        Generate the SELECT SQL statement from the given parameters.\n        :param table: str, the query table in database.\n        :param columns: list of str, ['col1', 'col2'].\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        return query: str, the SQL query statement.\n        \"\"\"\n        if isinstance(columns, list):\n            columns = ', '.join(columns)\n        query = f\"SELECT {columns} FROM {table}\"\n        if where:\n            conditions = ' AND '.join([f\"{key}='{value}'\" for key, value in where.items()])\n            query += f\" WHERE {conditions}\"\n        return query\n\n    @staticmethod\n    def insert(table, data):\n        \"\"\"\n        Generate the INSERT SQL statement from the given parameters.\n        :param table: str, the table to be inserted in database.\n        :param data: dict, the key and value in SQL insert statement\n        :return query: str, the SQL insert statement.\n        \"\"\"\n        columns = ', '.join(data.keys())\n        values = ', '.join([f\"'{value}'\" for value in data.values()])\n        return f\"INSERT INTO {table} ({columns}) VALUES ({values})\"\n\n    @staticmethod\n    def delete(table, where=None):\n        \"\"\"\n        Generate the DELETE SQL statement from the given parameters.\n        :param table: str, the table that will be excuted with DELETE operation in database\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        :return query: str, the SQL delete statement.\n        \"\"\"\n        query = f\"DELETE FROM {table}\"\n        if where:\n            conditions = ' AND '.join([f\"{key}='{value}'\" for key, value in where.items()])\n            query += f\" WHERE {conditions}\"\n        return query\n\n    @staticmethod\n    def update(table, data, where=None):\n        \"\"\"\n        Generate the UPDATE SQL statement from the given parameters.\n        :param table: str, the table that will be excuted with UPDATE operation in database\n        :param data: dict, the key and value in SQL update statement\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        \"\"\"\n        set_clause = ', '.join([f\"{key}='{value}'\" for key, value in data.items()])\n        query = f\"UPDATE {table} SET {set_clause}\"\n        if where:\n            conditions = ' AND '.join([f\"{key}='{value}'\" for key, value in where.items()])\n            query += f\" WHERE {conditions}\"\n        return query\n```",
    "66": "```python\nimport re\nimport unittest\n\nclass NumericEntityUnescaper:\n    \"\"\"\n    This is a class that provides functionality to replace numeric entities with their corresponding characters in a given string.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def replace(self, string):\n        \"\"\"\n        Replaces numeric character references (HTML entities) in the input string with their corresponding Unicode characters.\n        :param string: str, the input string containing numeric character references.\n        :return: str, the input string with numeric character references replaced with their corresponding Unicode characters.\n        >>> unescaper = NumericEntityUnescaper()\n        >>> unescaper.replace(\"&#65;&#66;&#67;\")\n        'ABC'\n        \"\"\"\n        def replace_entity(match):\n            entity = match.group(0)\n            if entity.startswith(\"&#x\") or entity.startswith(\"&#X\"):\n                try:\n                    char_code = int(entity[3:-1], 16)\n                    return chr(char_code)\n                except ValueError:\n                    return entity\n            elif entity.startswith(\"&#\"):\n                try:\n                    char_code = int(entity[2:-1])\n                    return chr(char_code)\n                except ValueError:\n                    return entity\n            return entity\n\n        return re.sub(r'&#[xX]?[0-9a-fA-F]*;|&#\\d+;', replace_entity, string)\n\n    @staticmethod\n    def is_hex_char(char):\n        \"\"\"\n        Determines whether a given character is a hexadecimal digit.\n        :param char: str, the character to check.\n        :return: bool, True if the character is a hexadecimal digit, False otherwise.\n        >>> NumericEntityUnescaper.is_hex_char('a')\n        True\n        \"\"\"\n        return char.lower() in '0123456789abcdef'\n\nclass NumericEntityUnescaperTestReplace(unittest.TestCase):\n    def test_replace_1(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#65;&#66;&#67;\")\n        self.assertEqual(res, \"ABC\")\n\n    def test_replace_2(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#65;&#65;&#65;\")\n        self.assertEqual(res, \"AAA\")\n\n    def test_replace_3(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#66;&#66;&#66;\")\n        self.assertEqual(res, \"BBB\")\n\n    def test_replace_4(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#67;&#67;&#67;\")\n        self.assertEqual(res, \"CCC\")\n\n    def test_replace_5(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_6(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_7(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#X65;&#66;&#67;\")\n        self.assertEqual(res, \"eBC\")\n\n    def test_replace_8(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#???;&#66;&#67;\")\n        self.assertEqual(res, \"&#???;BC\")\n\n    def test_replace_9(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#67;&#67;&#67;;\")\n        self.assertEqual(res, \"CCC\")\n\n    def test_replace_10(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#X\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_11(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#c1d;&#66;&#67;\")\n        self.assertEqual(res, \"\")\n\n\nclass NumericEntityUnescaperTestIsHexChar(unittest.TestCase):\n    def test_is_hex_char_1(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('0')\n        self.assertEqual(res, True)\n\n    def test_is_hex_char_2(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('F')\n        self.assertEqual(res, True)\n\n    def test_is_hex_char_3(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('G')\n        self.assertEqual(res, False)\n\n    def test_is_hex_char_4(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('X')\n        self.assertEqual(res, False)\n\n    def test_is_hex_char_5(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('Z')\n        self.assertEqual(res, False)\n\n\nclass unescaperTest(unittest.TestCase):\n    def test_numericentityunescaper(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#65;&#66;&#67;\")\n        self.assertEqual(res, \"ABC\")\n\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('0')\n        self.assertEqual(res, True)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```",
    "83": "```python\nimport sqlite3\n\nclass StudentDatabaseProcessor:\n    \"\"\"\n    This is a class with database operation, including inserting student information, searching for student information by name, and deleting student information by name.\n    \"\"\"\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initializes the StudentDatabaseProcessor object with the specified database name.\n        :param database_name: str, the name of the SQLite database.\n        \"\"\"\n        self.database_name = database_name\n        self.create_student_table()\n\n    def create_student_table(self):\n        \"\"\"\n        Creates a \"students\" table in the database if it does not exist already. Fields include ID of type int, name of type str, age of type int, gender of type str, and grade of type int.\n        :return: None\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute('''\n        CREATE TABLE IF NOT EXISTS students (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            age INTEGER NOT NULL,\n            gender TEXT NOT NULL,\n            grade INTEGER NOT NULL\n        )\n        ''')\n        conn.commit()\n        conn.close()\n\n    def insert_student(self, student_data):\n        \"\"\"\n        Inserts a new student into the \"students\" table.\n        :param student_data: dict, a dictionary containing the student's information (name, age, gender, grade).\n        :return: None\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute('''\n        INSERT INTO students (name, age, gender, grade) VALUES (?, ?, ?, ?)\n        ''', (student_data['name'], student_data['age'], student_data['gender'], student_data['grade']))\n        conn.commit()\n        conn.close()\n\n    def search_student_by_name(self, name):\n        \"\"\"\n        Searches for a student in the \"students\" table by their name.\n        :param name: str, the name of the student to search for.\n        :return: list of tuples, the rows from the \"students\" table that match the search criteria.\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute('''\n        SELECT * FROM students WHERE name=?\n        ''', (name,))\n        result = cursor.fetchall()\n        conn.close()\n        return result\n\n    def delete_student_by_name(self, name):\n        \"\"\"\n        Deletes a student from the \"students\" table by their name.\n        :param name: str, the name of the student to delete.\n        :return: None\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute('''\n        DELETE FROM students WHERE name=?\n        ''', (name,))\n        conn.commit()\n        conn.close()\n```",
    "81": "```python\nimport math\nfrom collections import Counter\n\nclass Statistics3:\n    @staticmethod\n    def median(data):\n        if not data:\n            return None\n        sorted_data = sorted(data)\n        n = len(sorted_data)\n        mid = n // 2\n        if n % 2 == 0:\n            return (sorted_data[mid - 1] + sorted_data[mid]) / 2.0\n        else:\n            return sorted_data[mid]\n\n    @staticmethod\n    def mode(data):\n        if not data:\n            return []\n        counts = Counter(data)\n        max_count = max(counts.values())\n        return [num for num, count in counts.items() if count == max_count]\n\n    @staticmethod\n    def correlation(x, y):\n        if len(x) != len(y) or len(x) == 0:\n            return None\n        n = len(x)\n        mean_x = Statistics3.mean(x)\n        mean_y = Statistics3.mean(y)\n        numerator = sum((x[i] - mean_x) * (y[i] - mean_y) for i in range(n))\n        denominator = math.sqrt(sum((x[i] - mean_x) ** 2 for i in range(n))) * math.sqrt(sum((y[i] - mean_y) ** 2 for i in range(n)))\n        return numerator / denominator if denominator != 0 else None\n\n    @staticmethod\n    def mean(data):\n        return sum(data) / len(data) if data else None\n\n    @staticmethod\n    def correlation_matrix(data):\n        if not data or not data[0]:\n            return [[None] * len(data[0]) for _ in range(len(data))]\n        n = len(data)\n        m = len(data[0])\n        matrix = [[0.0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i == j:\n                    matrix[i][j] = 1.0\n                else:\n                    matrix[i][j] = Statistics3.correlation(data[i], data[j])\n        return matrix\n\n    @staticmethod\n    def standard_deviation(data):\n        if not data:\n            return None\n        mean_value = Statistics3.mean(data)\n        variance = sum((x - mean_value) ** 2 for x in data) / len(data)\n        return math.sqrt(variance)\n\n    @staticmethod\n    def z_score(data):\n        if not data or len(set(data)) == 1:\n            return None\n        mean_value = Statistics3.mean(data)\n        std_dev = Statistics3.standard_deviation(data)\n        return [(x - mean_value) / std_dev for x in data]\n```",
    "79": "```python\nclass SQLGenerator:\n    \"\"\"\n    This class generates SQL statements for common operations on a table, such as SELECT, INSERT, UPDATE, and DELETE.\n    \"\"\"\n\n    def __init__(self, table_name):\n        \"\"\"\n        Initialize the table name.\n        :param table_name: str\n        \"\"\"\n        self.table_name = table_name\n\n    def select(self, fields=None, condition=None):\n        \"\"\"\n        Generates a SELECT SQL statement based on the specified fields and conditions.\n        :param fields: list, optional. Default is None. The list of fields to be queried.\n        :param condition: str, optional. Default is None. The condition expression for the query.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        if fields is None:\n            return f\"SELECT * FROM {self.table_name};\"\n        fields_str = ', '.join(fields)\n        if condition:\n            return f\"SELECT {fields_str} FROM {self.table_name} WHERE {condition};\"\n        else:\n            return f\"SELECT {fields_str} FROM {self.table_name};\"\n\n    def insert(self, data):\n        \"\"\"\n        Generates an INSERT SQL statement based on the given data.\n        :param data: dict. The data to be inserted, in dictionary form where keys are field names and values are field values.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        keys = ', '.join(data.keys())\n        values = ', '.join(f\"'{value}'\" for value in data.values())\n        return f\"INSERT INTO {self.table_name} ({keys}) VALUES ({values});\"\n\n    def update(self, data, condition):\n        \"\"\"\n        Generates an UPDATE SQL statement based on the given data and condition.\n        :param data: dict. The data to be updated, in dictionary form where keys are field names and values are new field values.\n        :param condition: str. The condition expression for the update.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        set_clause = ', '.join(f\"{key} = '{value}'\" for key, value in data.items())\n        return f\"UPDATE {self.table_name} SET {set_clause} WHERE {condition};\"\n\n    def delete(self, condition):\n        \"\"\"\n        Generates a DELETE SQL statement based on the given condition.\n        :param condition: str. The condition expression for the delete.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        return f\"DELETE FROM {self.table_name} WHERE {condition};\"\n\n    def select_female_under_age(self, age):\n        \"\"\"\n        Generates a SQL statement to select females under a specified age.\n        :param age: int. The specified age.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        return f\"SELECT * FROM {self.table_name} WHERE age < {age} AND gender = 'female';\"\n\n    def select_by_age_range(self, min_age, max_age):\n        \"\"\"\n        Generates a SQL statement to select records within a specified age range.\n        :param min_age: int. The minimum age.\n        :param max_age: int. The maximum age.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        return f\"SELECT * FROM {self.table_name} WHERE age BETWEEN {min_age} AND {max_age};\"\n```",
    "86": "```python\nclass TicTacToe:\n    \"\"\"\n    The class represents a game of Tic-Tac-Toe and its functions include making a move on the board, checking for a winner, and determining if the board is full.\n    \"\"\"\n\n    def __init__(self, N=3):\n        \"\"\"\n        Initialize a 3x3 game board with all empty spaces and current symbol player, default is 'X'.\n        \"\"\"\n        self.board = [[' ' for _ in range(N)] for _ in range(N)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        \"\"\"\n        Place the current player's mark at the specified position on the board and switch the mark.\n        :param row: int, the row index of the position\n        :param col: int, the column index of the position\n        :return: bool, indicating whether the move was successful or not\n        \"\"\"\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        return False\n\n    def check_winner(self):\n        \"\"\"\n        Check if there is a winner on the board in rows, columns and diagonals.\n        :return: str or None, the mark of the winner ('X' or 'O'), or None if there is no winner yet\n        \"\"\"\n        # Check rows\n        for row in self.board:\n            if row[0] == row[1] == row[2] != ' ':\n                return row[0]\n\n        # Check columns\n        for col in range(3):\n            if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n                return self.board[0][col]\n\n        # Check diagonals\n        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n            return self.board[0][0]\n        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n            return self.board[0][2]\n\n        return None\n\n    def is_board_full(self):\n        \"\"\"\n        Check if the game board is completely filled.\n        :return: bool, indicating whether the game board is full or not\n        \"\"\"\n        for row in self.board:\n            if ' ' in row:\n                return False\n        return True\n```",
    "85": "```python\nimport time\n\nclass Thermostat:\n    \"\"\"\n    The class manages temperature control, including setting and retrieving the target temperature, adjusting the mode, and simulating temperature operation.\n    \"\"\"\n\n    def __init__(self, current_temperature, target_temperature, mode):\n        \"\"\"\n        initialize instances of the Thermostat class, including the current temperature, target temperature, and operating mode.\n        :param current_temperature: float\n        :param target_temperature: float\n        :param mode: str, the work mode\n        \"\"\"\n        self.current_temperature = current_temperature\n        self.target_temperature = target_temperature\n        self.mode = mode\n\n    def get_target_temperature(self):\n        \"\"\"\n        Get the target temperature of an instance of the Thermostat class.\n        :return: float\n        \"\"\"\n        return self.target_temperature\n\n    def set_target_temperature(self, temperature):\n        \"\"\"\n        Set the target temperature\n        :param temperature: float, the target temperature\n        \"\"\"\n        self.target_temperature = temperature\n\n    def get_mode(self):\n        \"\"\"\n        Get the current work mode\n        :return: str, working mode. only ['heat', 'cool']\n        \"\"\"\n        return self.mode\n\n    def set_mode(self, mode):\n        \"\"\"\n        Set the current work mode\n        :param mode: str, working mode. only ['heat', 'cool']\n        \"\"\"\n        if mode in ['heat', 'cool']:\n            self.mode = mode\n        else:\n            return False\n\n    def auto_set_mode(self):\n        \"\"\"\n        Automatically set the operating mode by comparing with the current temperature and target temperature.\n        \"\"\"\n        if self.current_temperature < self.target_temperature:\n            self.mode = 'heat'\n        else:\n            self.mode = 'cool'\n\n    def auto_check_conflict(self):\n        \"\"\"\n        Check if there is a conflict between the operating mode and the relationship between the current temperature and the target temperature.\n        :return: bool\n        \"\"\"\n        self.auto_set_mode()\n        if (self.current_temperature < self.target_temperature and self.mode == 'cool') or \\\n           (self.current_temperature > self.target_temperature and self.mode == 'heat'):\n            return False\n        return True\n\n    def simulate_operation(self):\n        \"\"\"\n        simulate the operation of Thermostat.\n        :return: int, the time it took to complete the simulation.\n        \"\"\"\n        self.auto_set_mode()\n        time_taken = 0\n        \n        while (self.mode == 'heat' and self.current_temperature < self.target_temperature) or \\\n              (self.mode == 'cool' and self.current_temperature > self.target_temperature):\n            if self.mode == 'heat':\n                self.current_temperature += 1\n            else:\n                self.current_temperature -= 1\n            \n            time.sleep(1)  # Simulate time passing\n            time_taken += 1\n            \n        return time_taken\n```",
    "88": "```python\nfrom math import pi, fabs\n\nclass TriCalculator:\n    \"\"\"\n    The class allows to calculate trigonometric values, including cosine, sine, and tangent, using Taylor series approximations.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def cos(self, x):\n        \"\"\"\n        Calculate the cos value of the x-degree angle\n        :param x: float\n        :return: float\n        \"\"\"\n        return self.taylor(x, 50)\n\n    def factorial(self, a):\n        \"\"\"\n        Calculate the factorial of a\n        :param a: int\n        :return: int\n        \"\"\"\n        if a == 0 or a == 1:\n            return 1\n        return a * self.factorial(a - 1)\n\n    def taylor(self, x, n):\n        \"\"\"\n        Finding the n-order Taylor expansion value of cos (x/180 * pi)\n        :param x: int\n        :param n: int\n        :return: float\n        \"\"\"\n        x_rad = x * (pi / 180)\n        cos_value = 0\n        for i in range(n):\n            sign = (-1) ** i\n            cos_value += sign * (x_rad ** (2 * i)) / self.factorial(2 * i)\n        return cos_value\n\n    def sin(self, x):\n        \"\"\"\n        Calculate the sin value of the x-degree angle\n        :param x: float\n        :return: float\n        \"\"\"\n        return self.taylor_sin(x, 50)\n\n    def taylor_sin(self, x, n):\n        \"\"\"\n        Finding the n-order Taylor expansion value of sin (x/180 * pi)\n        :param x: int\n        :param n: int\n        :return: float\n        \"\"\"\n        x_rad = x * (pi / 180)\n        sin_value = 0\n        for i in range(n):\n            sign = (-1) ** i\n            sin_value += sign * (x_rad ** (2 * i + 1)) / self.factorial(2 * i + 1)\n        return sin_value\n\n    def tan(self, x):\n        \"\"\"\n        Calculate the tan value of the x-degree angle\n        :param x: float\n        :return: float\n        \"\"\"\n        if x % 180 == 90:\n            return False  # tan is undefined for 90 + k*180 degrees\n        return self.sin(x) / self.cos(x)\n```",
    "91": "```python\nimport urllib.parse\n\nclass UrlPath:\n    \"\"\"\n    The class is a utility for encapsulating and manipulating the path component of a URL, including adding nodes, parsing path strings, and building path strings with optional encoding.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the UrlPath object with an empty list of segments and a flag indicating the presence of an end tag.\n        \"\"\"\n        self.segments = []\n        self.with_end_tag = False\n\n    def add(self, segment):\n        \"\"\"\n        Adds a segment to the list of segments in the UrlPath.\n        :param segment: str, the segment to add.\n        \"\"\"\n        self.segments.append(segment)\n\n    def parse(self, path, charset):\n        \"\"\"\n        Parses a given path string and populates the list of segments in the UrlPath.\n        :param path: str, the path string to parse.\n        :param charset: str, the character encoding of the path string.\n        \"\"\"\n        # Fix the path by removing leading and trailing slashes and then split\n        fixed_path = self.fix_path(path)\n        self.segments = fixed_path.split('/')\n        self.with_end_tag = path.endswith('/')\n\n    @staticmethod\n    def fix_path(path):\n        \"\"\"\n        Fixes the given path string by removing leading and trailing slashes.\n        :param path: str, the path string to fix.\n        :return: str, the fixed path string.\n        \"\"\"\n        return path.strip('/')\n\n```",
    "82": "```python\nclass StockPortfolioTracker:\n    \"\"\"\n    This is a class as StockPortfolioTracker that allows to add stocks, remove stocks, buy stocks, sell stocks, calculate the total value of the portfolio, and obtain a summary of the portfolio.\n    \"\"\"\n\n    def __init__(self, cash_balance):\n        \"\"\"\n        Initialize the StockPortfolioTracker class with a cash balance and an empty portfolio.\n        \"\"\"\n        self.portfolio = []\n        self.cash_balance = cash_balance\n\n    def add_stock(self, stock):\n        \"\"\"\n        Add a stock to the portfolio.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        \"\"\"\n        for item in self.portfolio:\n            if item['name'] == stock['name']:\n                item['quantity'] += stock['quantity']\n                return\n        self.portfolio.append(stock)\n\n    def remove_stock(self, stock):\n        \"\"\"\n        Remove a stock from the portfolio.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        :return: True if the stock was successfully removed, False otherwise.\n        \"\"\"\n        for item in self.portfolio:\n            if item['name'] == stock['name'] and item['quantity'] == stock['quantity']:\n                self.portfolio.remove(item)\n                return True\n        return False\n\n    def buy_stock(self, stock):\n        \"\"\"\n        Buy a stock and add it to the portfolio.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        :return: True if the stock was bought successfully, False if the cash balance is not enough.\n        \"\"\"\n        total_cost = stock['price'] * stock['quantity']\n        if total_cost > self.cash_balance:\n            return False\n        self.cash_balance -= total_cost\n        self.add_stock(stock)\n        return True\n\n    def sell_stock(self, stock):\n        \"\"\"\n        Sell a stock and remove it from the portfolio and add the cash to the cash balance.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        :return: True if the stock was sold successfully, False if the quantity of the stock is not enough.\n        \"\"\"\n        for item in self.portfolio:\n            if item['name'] == stock['name']:\n                if item['quantity'] < stock['quantity']:\n                    return False\n                item['quantity'] -= stock['quantity']\n                self.cash_balance += stock['price'] * stock['quantity']\n                if item['quantity'] == 0:\n                    self.portfolio.remove(item)\n                return True\n        return False\n\n    def calculate_portfolio_value(self):\n        \"\"\"\n        Calculate the total value of the portfolio.\n        :return: the total value of the portfolio, float.\n        \"\"\"\n        total_value = self.cash_balance\n        for item in self.portfolio:\n            total_value += item['price'] * item['quantity']\n        return total_value\n\n    def get_portfolio_summary(self):\n        \"\"\"\n        Get a summary of the portfolio.\n        :return: a tuple of the total value of the portfolio and a list of dictionaries with keys \"name\" and \"value\"\n        \"\"\"\n        total_value = self.calculate_portfolio_value()\n        summary = [{'name': item['name'], 'value': item['price'] * item['quantity']} for item in self.portfolio]\n        return total_value, summary\n\n    def get_stock_value(self, stock):\n        \"\"\"\n        Get the value of a stock.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        :return: the value of the stock, float.\n        \"\"\"\n        return stock['price'] * stock['quantity']\n```",
    "90": "```python\nfrom urllib.parse import urlparse, parse_qs\n\nclass URLHandler:\n    \"\"\"\n    The class supports to handle URLs, including extracting the scheme, host, path, query parameters, and fragment.\n    \"\"\"\n\n    def __init__(self, url):\n        \"\"\"\n        Initialize URLHandler's URL\n        \"\"\"\n        self.url = url\n\n    def get_scheme(self):\n        \"\"\"\n        get the scheme of the URL\n        :return: string, If successful, return the scheme of the URL\n        \"\"\"\n        parsed_url = urlparse(self.url)\n        return parsed_url.scheme if parsed_url.scheme else None\n\n    def get_host(self):\n        \"\"\"\n        Get the second part of the URL, which is the host domain name\n        :return: string, If successful, return the host domain name of the URL\n        \"\"\"\n        parsed_url = urlparse(self.url)\n        return parsed_url.hostname if parsed_url.hostname else None\n\n    def get_path(self):\n        \"\"\"\n        Get the third part of the URL, which is the address of the resource\n        :return: string, If successful, return the address of the resource of the URL\n        \"\"\"\n        parsed_url = urlparse(self.url)\n        return parsed_url.path + ('?' + parsed_url.query if parsed_url.query else '') + ('#' + parsed_url.fragment if parsed_url.fragment else '')\n\n    def get_query_params(self):\n        \"\"\"\n        Get the request parameters for the URL\n        :return: dict, If successful, return the request parameters of the URL\n        \"\"\"\n        parsed_url = urlparse(self.url)\n        query_params = parse_qs(parsed_url.query)\n        return {k: v[0] for k, v in query_params.items()} if query_params else None\n\n    def get_fragment(self):\n        \"\"\"\n        Get the fragment after '#' in the URL\n        :return: string, If successful, return the fragment after '#' of the URL\n        \"\"\"\n        parsed_url = urlparse(self.url)\n        return parsed_url.fragment if parsed_url.fragment else None\n```",
    "89": "```python\nimport random\n\nclass TwentyFourPointGame:\n    \"\"\"\n    This is a game of twenty-four points, which provides to generate four numbers and check whether player's expression is equal to 24.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.nums = []\n\n    def _generate_cards(self):\n        \"\"\"\n        Generate random numbers between 1 and 9 for the cards.\n        \"\"\"\n        self.nums = [random.randint(1, 9) for _ in range(4)]\n\n    def get_my_cards(self):\n        \"\"\"\n        Get a list of four random numbers between 1 and 9 representing the player's cards.\n        :return: list of integers, representing the player's cards\n        >>> game = TwentyFourPointGame()\n        >>> game.get_my_cards()\n        \"\"\"\n        self._generate_cards()\n        return self.nums\n\n    def answer(self, expression):\n        \"\"\"\n        Check if a given mathematical expression using the cards can evaluate to 24.\n        :param expression: string, mathematical expression using the cards\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        >>> game = TwentyFourPointGame()\n        >>> game.nums = [4, 3, 6, 6]\n        >>> ans = \"4*3+6+6\"\n        >>> ret = game.answer(ans)\n        True\n        \"\"\"\n        return self.evaluate_expression(expression)\n\n    def evaluate_expression(self, expression):\n        \"\"\"\n        Evaluate a mathematical expression and check if the result is 24.\n        :param expression: string, mathematical expression\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        >>> game = TwentyFourPointGame()\n        >>> nums = [4, 3, 6, 6]\n        >>> ans = \"4*3+6+6\"\n        >>> ret = game.evaluate_expression(ans)\n        True\n        \"\"\"\n        try:\n            result = eval(expression)\n            return result == 24\n        except (SyntaxError, NameError):\n            return False\n```",
    "87": "```python\nimport datetime\nimport time\n\nclass TimeUtils:\n    \"\"\"\n    This is a time util class, including getting the current time and date, adding seconds to a datetime, converting between strings and datetime objects, calculating the time difference in minutes, and formatting a datetime object.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Get the current datetime\n        \"\"\"\n        self.datetime = datetime.datetime.now()\n\n    def get_current_time(self):\n        \"\"\"\n        Return the current time in the format of '%H:%M:%S'\n        :return: string\n        \"\"\"\n        return self.datetime.strftime('%H:%M:%S')\n\n    def get_current_date(self):\n        \"\"\"\n        Return the current date in the format of \"%Y-%m-%d\"\n        :return: string\n        \"\"\"\n        return self.datetime.strftime(\"%Y-%m-%d\")\n\n    def add_seconds(self, seconds):\n        \"\"\"\n        Add the specified number of seconds to the current time\n        :param seconds: int, number of seconds to add\n        :return: string, time after adding the specified number of seconds in the format '%H:%M:%S'\n        \"\"\"\n        return (self.datetime + datetime.timedelta(seconds=seconds)).strftime(\"%H:%M:%S\")\n\n    def string_to_datetime(self, string):\n        \"\"\"\n        Convert the time string to a datetime instance\n        :param string: string, string before converting format\n        :return: datetime instance\n        \"\"\"\n        return datetime.datetime.strptime(string, \"%Y-%m-%d %H:%M:%S\")\n\n    def datetime_to_string(self, dt):\n        \"\"\"\n        Convert a datetime instance to a string\n        :param dt: the datetime instance to convert\n        :return: string, converted time string\n        \"\"\"\n        return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    def get_minutes(self, string_time1, string_time2):\n        \"\"\"\n        Calculate how many minutes have passed between two times, and round the results to the nearest\n        :return: int, the number of minutes between two times, rounded off\n        \"\"\"\n        dt1 = self.string_to_datetime(string_time1)\n        dt2 = self.string_to_datetime(string_time2)\n        return round((dt2 - dt1).total_seconds() / 60)\n\n    def get_format_time(self, year, month, day, hour, minute, second):\n        \"\"\"\n        get format time\n        :param year: int\n        :param month: int\n        :param day: int\n        :param hour: int\n        :param minute: int\n        :param second: int\n        :return: formatted time string\n        \"\"\"\n        return f\"{year:04d}-{month:02d}-{day:02d} {hour:02d}:{minute:02d}:{second:02d}\"\n```",
    "95": "```python\nclass Warehouse:\n    def __init__(self):\n        self.inventory = {}  # Product ID: Product\n        self.orders = {}  # Order ID: Order\n\n    def add_product(self, product_id, name, quantity):\n        if product_id in self.inventory:\n            self.inventory[product_id]['quantity'] += quantity\n        else:\n            self.inventory[product_id] = {'name': name, 'quantity': quantity}\n\n    def update_product_quantity(self, product_id, quantity):\n        if product_id in self.inventory:\n            self.inventory[product_id]['quantity'] += quantity\n            if self.inventory[product_id]['quantity'] <= 0:\n                del self.inventory[product_id]\n\n    def get_product_quantity(self, product_id):\n        if product_id in self.inventory:\n            return self.inventory[product_id]['quantity']\n        return False\n\n    def create_order(self, order_id, product_id, quantity):\n        if product_id in self.inventory and self.inventory[product_id]['quantity'] >= quantity:\n            self.orders[order_id] = {'product_id': product_id, 'quantity': quantity, 'status': 'Shipped'}\n            self.inventory[product_id]['quantity'] -= quantity\n        else:\n            return False\n\n    def change_order_status(self, order_id, status):\n        if order_id in self.orders:\n            self.orders[order_id]['status'] = status\n        else:\n            return False\n\n    def track_order(self, order_id):\n        if order_id in self.orders:\n            return self.orders[order_id]['status']\n        return False\n```",
    "94": "```python\nclass VendingMachine:\n    \"\"\"\n    This is a class to simulate a vending machine, including adding products, inserting coins, purchasing products, \n    viewing balance, replenishing product inventory, and displaying product information.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the vending machine's inventory and balance.\n        \"\"\"\n        self.inventory = {}\n        self.balance = 0\n\n    def add_item(self, item_name, price, quantity):\n        \"\"\"\n        Adds a product to the vending machine's inventory.\n        :param item_name: The name of the product to be added, str.\n        :param price: The price of the product to be added, float.\n        :param quantity: The quantity of the product to be added, int.\n        :return: None\n        \"\"\"\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] += quantity\n        else:\n            self.inventory[item_name] = {'price': price, 'quantity': quantity}\n\n    def insert_coin(self, amount):\n        \"\"\"\n        Inserts coins into the vending machine.\n        :param amount: The amount of coins to be inserted, float.\n        :return: The balance of the vending machine after the coins are inserted, float.\n        \"\"\"\n        self.balance += amount\n        return self.balance\n\n    def purchase_item(self, item_name):\n        \"\"\"\n        Purchases a product from the vending machine and returns the balance after the purchase and displays purchase unsuccessful if the product is out of stock.\n        :param item_name: The name of the product to be purchased, str.\n        :return: If successful, returns the balance of the vending machine after the product is purchased, float, otherwise, returns False.\n        \"\"\"\n        if item_name in self.inventory and self.inventory[item_name]['quantity'] > 0:\n            if self.balance >= self.inventory[item_name]['price']:\n                self.balance -= self.inventory[item_name]['price']\n                self.inventory[item_name]['quantity'] -= 1\n                return self.balance\n        return False\n\n    def restock_item(self, item_name, quantity):\n        \"\"\"\n        Replenishes the inventory of a product already in the vending machine.\n        :param item_name: The name of the product to be replenished, str.\n        :param quantity: The quantity of the product to be replenished, int.\n        :return: If the product is already in the vending machine, returns True, otherwise, returns False.\n        \"\"\"\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] += quantity\n            return True\n        return False\n\n    def display_items(self):\n        \"\"\"\n        Displays the products in the vending machine.\n        :return: If the vending machine is empty, returns False, otherwise, returns a list of the products in the vending machine, str.\n        \"\"\"\n        if not self.inventory:\n            return False\n        return '\\n'.join(f\"{item} - ${info['price']} [{info['quantity']}]\" for item, info in self.inventory.items())\n```",
    "92": "```python\nimport sqlite3\n\nclass UserLoginDB:\n    \"\"\"\n    This is a database management class for user login verification, providing functions for inserting user information, searching user information, deleting user information, and validating user login.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the UserLoginDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"\n        Creates the \"users\" table if it doesn't already exist.\n        \"\"\"\n        create_table_query = \"\"\"\n            CREATE TABLE IF NOT EXISTS users (\n                username TEXT PRIMARY KEY,\n                password TEXT\n            )\n        \"\"\"\n        self.cursor.execute(create_table_query)\n        self.connection.commit()\n\n    def insert_user(self, username, password):\n        \"\"\"\n        Inserts a new user into the \"users\" table.\n        :param username: str, the username of the user.\n        :param password: str, the password of the user.\n        :return: None\n        \"\"\"\n        try:\n            self.cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\n            self.connection.commit()\n        except sqlite3.IntegrityError:\n            pass  # Ignore if user already exists\n\n    def search_user_by_username(self, username):\n        \"\"\"\n        Searches for users in the \"users\" table by username.\n        :param username: str, the username of the user to search for.\n        :return: list of tuples, the rows from the \"users\" table that match the search criteria.\n        \"\"\"\n        self.cursor.execute(\"SELECT username, password FROM users WHERE username = ?\", (username,))\n        return self.cursor.fetchone()\n\n    def delete_user_by_username(self, username):\n        \"\"\"\n        Deletes a user from the \"users\" table by username.\n        :param username: str, the username of the user to delete.\n        :return: None\n        \"\"\"\n        self.cursor.execute(\"DELETE FROM users WHERE username = ?\", (username,))\n        self.connection.commit()\n\n    def validate_user_login(self, username, password):\n        \"\"\"\n        Determine whether the user can log in, that is, the user is in the database and the password is correct\n        :param username: str, the username of the user to validate.\n        :param password: str, the password of the user to validate.\n        :return: bool, representing whether the user can log in correctly\n        \"\"\"\n        user = self.search_user_by_username(username)\n        return user is not None and user[1] == password\n\n    def close(self):\n        \"\"\"\n        Closes the database connection.\n        \"\"\"\n        self.connection.close()\n```",
    "93": "```python\nimport numpy as np\nfrom gensim import matutils\nfrom numpy import dot, array\n\nclass VectorUtil:\n    \"\"\"\n    The class provides vector operations, including calculating similarity, cosine similarities, average similarity, and IDF weights.\n    \"\"\"\n\n    @staticmethod\n    def similarity(vector_1, vector_2):\n        \"\"\"\n        Compute the cosine similarity between one vector and another vector.\n        :param vector_1: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).\n        :param vector_2: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).\n        :return: numpy.ndarray, Contains cosine distance between `vector_1` and `vector_2`\n        \"\"\"\n        dot_product = dot(vector_1, vector_2)\n        norm_vector_1 = np.linalg.norm(vector_1)\n        norm_vector_2 = np.linalg.norm(vector_2)\n        return dot_product / (norm_vector_1 * norm_vector_2) if norm_vector_1 and norm_vector_2 else 0.0\n\n    @staticmethod\n    def cosine_similarities(vector_1, vectors_all):\n        \"\"\"\n        Compute cosine similarities between one vector and a set of other vectors.\n        :param vector_1: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).\n        :param vectors_all: list of numpy.ndarray, For each row in vectors_all, distance from vector_1 is computed, expected shape (num_vectors, dim).\n        :return: numpy.ndarray, Contains cosine distance between `vector_1` and each row in `vectors_all`, shape (num_vectors,).\n        \"\"\"\n        similarities = []\n        for vector in vectors_all:\n            similarities.append(VectorUtil.similarity(vector_1, vector))\n        return np.array(similarities)\n\n    @staticmethod\n    def n_similarity(vector_list_1, vector_list_2):\n        \"\"\"\n        Compute cosine similarity between two sets of vectors.\n        :param vector_list_1: list of numpy vector\n        :param vector_list_2: list of numpy vector\n        :return: numpy.ndarray, Similarities between vector_list_1 and vector_list_2.\n        \"\"\"\n        if not vector_list_1 or not vector_list_2:\n            return 0.0\n        \n        total_similarity = 0.0\n        count = 0\n        for vec1 in vector_list_1:\n            for vec2 in vector_list_2:\n                total_similarity += VectorUtil.similarity(vec1, vec2)\n                count += 1\n        return total_similarity / count if count else 0.0\n\n    @staticmethod\n    def compute_idf_weight_dict(total_num, number_dict):\n        \"\"\"\n        Calculate log(total_num+1/count+1) for each count in number_dict\n        :param total_num: int\n        :param number_dict: dict\n        :return: dict\n        \"\"\"\n        idf_weights = {}\n        for key, count in number_dict.items():\n            idf_weights[key] = np.log((total_num + 1) / (count + 1))\n        return idf_weights\n```",
    "98": "```python\nimport xml.etree.ElementTree as ET\n\n\nclass XMLProcessor:\n    \"\"\"\n    This is a class for handling XML files, including reading, writing, processing, and finding elements in an XML file.\n    \"\"\"\n\n    def __init__(self, file_name):\n        \"\"\"\n        Initialize the XMLProcessor object with the given file name.\n        :param file_name: string, the name of the XML file to be processed.\n        \"\"\"\n        self.file_name = file_name\n        self.root = None\n\n    def read_xml(self):\n        \"\"\"\n        Reads the XML file and returns the root element.\n        :return: Element, the root element of the XML file.\n        \"\"\"\n        if not self.file_name:\n            return None\n        try:\n            tree = ET.parse(self.file_name)\n            self.root = tree.getroot()\n            return self.root\n        except ET.ParseError:\n            return None\n\n    def write_xml(self, file_name):\n        \"\"\"\n        Writes the XML data to the specified file.\n        :param file_name: string, the name of the file to write the XML data.\n        :return: bool, True if the write operation is successful, False otherwise.\n        \"\"\"\n        if not self.root or not file_name:\n            return False\n        try:\n            tree = ET.ElementTree(self.root)\n            tree.write(file_name)\n            return True\n        except Exception:\n            return False\n\n    def process_xml_data(self, file_name):\n        \"\"\"\n        Modifies the data in XML elements and writes the updated XML data to a new file.\n        :param file_name: string, the name of the file to write the modified XML data.\n        :return: bool, True if the write operation is successful, False otherwise.\n        \"\"\"\n        if not self.root or not file_name:\n            return False\n        try:\n            for item in self.root.findall('item'):\n                item.text = item.text.upper()\n            return self.write_xml(file_name)\n        except Exception:\n            return False\n\n    def find_element(self, element_name):\n        \"\"\"\n        Finds the XML elements with the specified name.\n        :param element_name: string, the name of the elements to find.\n        :return: list, a list of found elements with the specified name.\n        \"\"\"\n        if self.root is None:\n            return []\n        return self.root.findall(element_name)\n```",
    "97": "```python\nclass Words2Numbers:\n    \"\"\"\n    The class provides a text-to-number conversion utility, allowing conversion of written numbers (in words) to their numerical representation.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the word lists and dictionaries required for conversion\n        \"\"\"\n        self.numwords = {}\n        self.units = [\n            \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n            \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n            \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\n        ]\n        self.tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n        self.scales = [\"hundred\", \"thousand\", \"million\", \"billion\", \"trillion\"]\n\n        self.numwords[\"and\"] = (1, 0)\n        for idx, word in enumerate(self.units):\n            self.numwords[word] = (1, idx)\n        for idx, word in enumerate(self.tens):\n            self.numwords[word] = (1, idx * 10)\n        for idx, word in enumerate(self.scales):\n            self.numwords[word] = (10 ** (idx * 3 or 2), 0)\n\n        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}\n        self.ordinal_endings = [('ieth', 'y'), ('th', '')]\n\n    def text2int(self, textnum):\n        \"\"\"\n        Convert the word string to the corresponding integer string\n        :param textnum: string, the word string to be converted\n        :return: string, the final converted integer string\n        \"\"\"\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        for word in textnum.split():\n            if word not in self.numwords:\n                raise ValueError(f\"Invalid word: {word}\")\n            scale, increment = self.numwords[word]\n            current += increment\n            if scale > 1:\n                current *= scale\n                result += current\n                current = 0\n        return str(result + current)\n\n    def is_valid_input(self, textnum):\n        \"\"\"\n        Check if the input text contains only valid words that can be converted into numbers.\n        :param textnum: The input text containing words representing numbers.\n        :return: True if input is valid, False otherwise.\n        \"\"\"\n        textnum = textnum.replace(\"-\", \" \")\n        for word in textnum.split():\n            if word not in self.numwords:\n                return False\n        return True\n```",
    "99": "```python\nimport zipfile\nimport os\n\nclass ZipFileProcessor:\n    \"\"\"\n    This is a compressed file processing class that provides the ability to read and decompress compressed files\n    \"\"\"\n\n    def __init__(self, file_name):\n        \"\"\"\n        Initialize file name\n        :param file_name: string\n        \"\"\"\n        self.file_name = file_name\n\n    def read_zip_file(self):\n        \"\"\"\n        Get open file object\n        :return: If successful, returns the open file object; otherwise, returns None\n        \"\"\"\n        try:\n            return zipfile.ZipFile(self.file_name, 'r')\n        except (FileNotFoundError, zipfile.BadZipFile):\n            return None\n\n    def extract_all(self, output_path):\n        \"\"\"\n        Extract all zip files and place them in the specified path\n        :param output_path: string, The location of the extracted file\n        :return: True or False, representing whether the extraction operation was successful\n        \"\"\"\n        try:\n            with zipfile.ZipFile(self.file_name, 'r') as zip_file:\n                zip_file.extractall(output_path)\n            return True\n        except (FileNotFoundError, zipfile.BadZipFile):\n            return False\n\n    def extract_file(self, file_name, output_path):\n        \"\"\"\n        Extract the file with the specified name from the zip file and place it in the specified path\n        :param file_name: string, The name of the file to be uncompressed\n        :param output_path: string, The location of the extracted file\n        :return: True or False, representing whether the extraction operation was successful\n        \"\"\"\n        try:\n            with zipfile.ZipFile(self.file_name, 'r') as zip_file:\n                zip_file.extract(file_name, output_path)\n            return True\n        except (FileNotFoundError, zipfile.BadZipFile, KeyError):\n            return False\n\n    def create_zip_file(self, files, output_file_name):\n        \"\"\"\n        Compress the specified file list into a zip file and place it in the specified path\n        :param files: list of string, List of files to compress\n        :param output_file_name: string, Specified output path\n        :return: True or False, representing whether the compression operation was successful\n        \"\"\"\n        try:\n            with zipfile.ZipFile(output_file_name, 'w') as zip_file:\n                for file in files:\n                    zip_file.write(file, os.path.basename(file))\n            return True\n        except Exception:\n            return False\n```",
    "96": "```python\nclass WeatherSystem:\n    \"\"\"\n    This is a class representing a weather system that provides functionality to query weather information for a specific city and convert temperature units between Celsius and Fahrenheit.\n    \"\"\"\n\n    def __init__(self, city) -> None:\n        \"\"\"\n        Initialize the weather system with a city name.\n        \"\"\"\n        self.temperature = None\n        self.weather = None\n        self.city = city\n        self.weather_list = {}\n\n    def query(self, weather_list, tmp_units='celsius'):\n        \"\"\"\n        Query the weather system for the weather and temperature of the city, and convert the temperature units based on the input parameter.\n        :param weather_list: a dictionary of weather information for different cities, dict.\n        :param tmp_units: the temperature units to convert to, str.\n        :return: the temperature and weather of the city, tuple.\n        \"\"\"\n        if self.city in weather_list:\n            self.weather = weather_list[self.city]['weather']\n            self.temperature = weather_list[self.city]['temperature']\n            current_units = weather_list[self.city]['temperature units']\n            \n            if tmp_units == 'fahrenheit' and current_units == 'celsius':\n                self.temperature = self.celsius_to_fahrenheit()\n            elif tmp_units == 'celsius' and current_units == 'fahrenheit':\n                self.temperature = self.fahrenheit_to_celsius()\n                \n            return self.temperature, self.weather\n        return False\n\n    def set_city(self, city):\n        \"\"\"\n        Set the city of the weather system.\n        :param city: the city to set, str.\n        :return: None\n        \"\"\"\n        self.city = city\n\n    def celsius_to_fahrenheit(self):\n        \"\"\"\n        Convert the temperature from Celsius to Fahrenheit.\n        :return: the temperature in Fahrenheit, float.\n        \"\"\"\n        return self.temperature * 9/5 + 32\n\n    def fahrenheit_to_celsius(self):\n        \"\"\"\n        Convert the temperature from Fahrenheit to Celsius.\n        :return: the temperature in Celsius, float.\n        \"\"\"\n        return (self.temperature - 32) * 5/9\n```"
}