{
    "6": "```python\nclass AvgPartition:\n    \"\"\"\n    This is a class that partitions the given list into different blocks by specifying the number of partitions, with each block having a uniformly distributed length.\n    \"\"\"\n\n    def __init__(self, lst, limit):\n        \"\"\"\n        Initialize the class with the given list and the number of partitions, and check if the number of partitions is greater than 0.\n        \"\"\"\n        if limit <= 0:\n            raise ValueError(\"Number of partitions must be greater than 0.\")\n        self.lst = lst\n        self.limit = limit\n\n    def setNum(self):\n        \"\"\"\n        Calculate the size of each block and the remainder of the division.\n        :return: the size of each block and the remainder of the division, tuple.\n        >>> a = AvgPartition([1, 2, 3, 4], 2)\n        >>> a.setNum()\n        (2, 0)\n        \"\"\"\n        block_size = len(self.lst) // self.limit\n        remainder = len(self.lst) % self.limit\n        return block_size, remainder\n\n    def get(self, index):\n        \"\"\"\n        Calculate the corresponding start and end positions based on the index of the partition.\n        :param index: the index of the partition, int.\n        :return: the corresponding block, list.\n        >>> a = AvgPartition([1, 2, 3, 4], 2)\n        >>> a.get(0)\n        [1, 2]\n        \"\"\"\n        block_size, remainder = self.setNum()\n        start = index * block_size + min(index, remainder)\n        end = start + block_size + (1 if index < remainder else 0)\n        return self.lst[start:end]\n```",
    "9": "```python\nclass BigNumCalculator:\n    \"\"\"\n    This is a class that implements big number calculations, including adding, subtracting, and multiplying.\n    \"\"\"\n\n    @staticmethod\n    def add(num1: str, num2: str) -> str:\n        \"\"\"\n        Adds two big numbers.\n        :param num1: The first number to add, str.\n        :param num2: The second number to add, str.\n        :return: The sum of the two numbers, str.\n        >>> bigNum = BigNumCalculator()\n        >>> bigNum.add(\"12345678901234567890\", \"98765432109876543210\")\n        '111111111011111111100'\n        \"\"\"\n        return str(int(num1) + int(num2))\n\n    @staticmethod\n    def subtract(num1: str, num2: str) -> str:\n        \"\"\"\n        Subtracts two big numbers.\n        :param num1: The first number to subtract, str.\n        :param num2: The second number to subtract, str.\n        :return: The difference of the two numbers, str.\n        >>> bigNum = BigNumCalculator()\n        >>> bigNum.subtract(\"12345678901234567890\", \"98765432109876543210\")\n        '-86419753208641975320'\n        \"\"\"\n        return str(int(num1) - int(num2))\n\n    @staticmethod\n    def multiply(num1: str, num2: str) -> str:\n        \"\"\"\n        Multiplies two big numbers.\n        :param num1: The first number to multiply, str.\n        :param num2: The second number to multiply, str.\n        :return: The product of the two numbers, str.\n        >>> bigNum = BigNumCalculator()\n        >>> bigNum.multiply(\"12345678901234567890\", \"98765432109876543210\")\n        '1219326311370217952237463801111263526900'\n        \"\"\"\n        return str(int(num1) * int(num2))\n```",
    "5": "```python\nclass AutomaticGuitarSimulator:\n    def __init__(self, text: str) -> None:\n        \"\"\"\n        Initialize the score to be played\n        :param text: str, score to be played\n        \"\"\"\n        self.play_text = text.strip()\n\n    def interpret(self, display=False):\n        \"\"\"\n        Interpret the music score to be played\n        :param display: bool, representing whether to print the interpreted score\n        :return: list of dict, The dict includes two fields, Chord and Tune, which are letters and numbers, respectively.\n        If the input is empty or contains only whitespace, an empty list is returned.\n        >>> context = AutomaticGuitarSimulator(\"C53231323 Em43231323 F43231323 G63231323\")\n        >>> play_list = context.interpret(display=False)\n        [{'Chord': 'C', 'Tune': '53231323'}, {'Chord': 'Em', 'Tune': '43231323'}, {'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]\n        \"\"\"\n        if not self.play_text:\n            return []\n\n        chords = self.play_text.split()\n        interpreted_score = []\n\n        for chord in chords:\n            if len(chord) < 2:\n                continue\n            interpreted_score.append({\n                'Chord': chord[:-8],  # Assuming the last 8 characters are the tune\n                'Tune': chord[-8:]\n            })\n            if display:\n                self.display(interpreted_score[-1]['Chord'], interpreted_score[-1]['Tune'])\n\n        return interpreted_score\n\n    def display(self, key: str, value: str):\n        \"\"\"\n        Print out chord and play tune with following format: Normal Guitar Playing -- Chord: %s, Play Tune: %s\n        :param key: str, chord\n        :param value: str, play tune\n        :return: None\n        >>> context = AutomaticGuitarSimulator(\"C53231323 Em43231323 F43231323 G63231323\")\n        >>> context.display(\"C\", \"53231323\")\n        Normal Guitar Playing -- Chord: C, Play Tune: 53231323\n        \"\"\"\n        print(f\"Normal Guitar Playing -- Chord: {key}, Play Tune: {value}\")\n```",
    "0": "```python\nimport logging\nimport datetime\n\nclass AccessGatewayFilter:\n    \"\"\"\n    This class is a filter used for accessing gateway filtering, primarily for authentication and access log recording.\n    \"\"\"\n\n    def __init__(self):\n        self.allowed_paths = ['/api', '/login']\n        logging.basicConfig(level=logging.INFO)\n\n    def filter(self, request):\n        \"\"\"\n        Filter the incoming request based on certain rules and conditions.\n        :param request: dict, the incoming request details\n        :return: bool, True if the request is allowed, False otherwise\n        \"\"\"\n        if not isinstance(request, dict):\n            logging.error(\"Invalid request format.\")\n            return False\n        \n        if self.is_start_with(request.get('path', '')):\n            user = self.get_jwt_user(request)\n            if user:\n                self.set_current_user_info_and_log(user)\n                return True\n        \n        logging.warning(\"Request denied for path: %s\", request.get('path'))\n        return False\n\n    def is_start_with(self, request_uri):\n        \"\"\"\n        Check if the request URI starts with certain prefixes.\n        :param request_uri: str, the URI of the request\n        :return: bool, True if the URI starts with certain prefixes, False otherwise\n        \"\"\"\n        return any(request_uri.startswith(prefix) for prefix in self.allowed_paths)\n\n    def get_jwt_user(self, request):\n        \"\"\"\n        Get the user information from the JWT token in the request.\n        :param request: dict, the incoming request details\n        :return: dict or None, the user information if the token is valid, None otherwise\n        \"\"\"\n        try:\n            auth_header = request.get('headers', {}).get('Authorization', {})\n            user_info = auth_header.get('user')\n            # Here we would normally validate JWT, omitted for simplicity\n            return user_info if user_info else None\n        except Exception as e:\n            logging.error(\"Error retrieving JWT user: %s\", e)\n            return None\n\n    def set_current_user_info_and_log(self, user):\n        \"\"\"\n        Set the current user information and log the access.\n        :param user: dict, the user information\n        \"\"\"\n        logging.info(\"User accessed: %s from address: %s\", user.get('name'), user.get('address', 'unknown'))\n```",
    "8": "```python\nclass BankAccount:\n    \"\"\"\n    This is a class as a bank account system, which supports deposit money, withdraw money, view balance, and transfer money.\n    \"\"\"\n\n    def __init__(self, balance=0):\n        \"\"\"\n        Initializes a bank account object with an attribute balance, default value is 0.\n        \"\"\"\n        self.balance = balance\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposits a certain amount into the account, increasing the account balance, return the current account balance.\n        If amount is negative, raise a ValueError(\"Invalid amount\").\n        :param amount: int\n        \"\"\"\n        if amount < 0:\n            raise ValueError(\"Invalid amount\")\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        \"\"\"\n        Withdraws a certain amount from the account, decreasing the account balance, return the current account balance.\n        If amount is negative, raise a ValueError(\"Invalid amount\").\n        If the withdrawal amount is greater than the account balance, raise a ValueError(\"Insufficient balance.\").\n        :param amount: int\n        \"\"\"\n        if amount < 0:\n            raise ValueError(\"Invalid amount\")\n        if amount > self.balance:\n            raise ValueError(\"Insufficient balance.\")\n        self.balance -= amount\n        return self.balance\n\n    def view_balance(self):\n        \"\"\"\n        Return the account balance.\n        \"\"\"\n        return self.balance\n\n    def transfer(self, other_account, amount):\n        \"\"\"\n        Transfers a certain amount from the current account to another account.\n        :param other_account: BankAccount\n        :param amount: int\n        \"\"\"\n        self.withdraw(amount)\n        other_account.deposit(amount)\n```",
    "7": "```python\nclass BalancedBrackets:\n    \"\"\"\n    This is a class that checks for bracket matching.\n    \"\"\"\n\n    def __init__(self, expr):\n        \"\"\"\n        Initializes the class with an expression.\n        :param expr: The expression to check for balanced brackets, str.\n        \"\"\"\n        self.stack = []\n        self.left_brackets = [\"(\", \"{\", \"[\"]\n        self.right_brackets = [\")\", \"}\", \"]\"]\n        self.expr = expr\n\n    def clear_expr(self):\n        \"\"\"\n        Clears the expression of all characters that are not brackets.\n        >>> b = BalancedBrackets(\"a(b)c\")\n        >>> b.clear_expr()\n        >>> b.expr\n        '()'\n        \"\"\"\n        self.expr = ''.join([char for char in self.expr if char in self.left_brackets + self.right_brackets])\n\n    def check_balanced_brackets(self):\n        \"\"\"\n        Checks if the expression has balanced brackets.\n        :return: True if the expression has balanced brackets, False otherwise.\n        >>> b = BalancedBrackets(\"a(b)c\")\n        >>> b.check_balanced_brackets()\n        True\n        >>> b = BalancedBrackets(\"a[b{c}d]e\")\n        >>> b.check_balanced_brackets()\n        True\n        >>> b = BalancedBrackets(\"a(b{c)d}\")\n        >>> b.check_balanced_brackets()\n        False\n        \"\"\"\n        self.clear_expr()\n        for char in self.expr:\n            if char in self.left_brackets:\n                self.stack.append(char)\n            elif char in self.right_brackets:\n                if not self.stack or self.left_brackets[self.right_brackets.index(char)] != self.stack.pop():\n                    return False\n        return len(self.stack) == 0\n```",
    "4": "```python\nclass AssessmentSystem:\n    \"\"\"\n    This is a class for a student assessment system, which supports adding students,\n    adding course scores, calculating GPA, and other functions for students and courses.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the students dictionary in the assessment system.\n        \"\"\"\n        self.students = {}\n\n    def add_student(self, name, grade, major):\n        \"\"\"\n        Add a new student to the self.students dictionary.\n        :param name: str, student name\n        :param grade: int, student grade\n        :param major: str, student major\n        \"\"\"\n        self.students[name] = {\n            'name': name,\n            'grade': grade,\n            'major': major,\n            'courses': {}\n        }\n\n    def add_course_score(self, name, course, score):\n        \"\"\"\n        Add score of a specific course for a student in self.students.\n        :param name: str, student name\n        :param course: str, course name\n        :param score: int, course score\n        \"\"\"\n        if name in self.students:\n            self.students[name]['courses'][course] = score\n\n    def get_gpa(self, name):\n        \"\"\"\n        Get the average grade of one student.\n        :param name: str, student name\n        :return: float or None, average grade if the student has courses, otherwise None\n        \"\"\"\n        if name in self.students:\n            courses = self.students[name]['courses']\n            if courses:\n                return sum(courses.values()) / len(courses)\n        return None\n\n    def get_all_students_with_fail_course(self):\n        \"\"\"\n        Get all students who have any score below 60.\n        :return: list of str, student names\n        \"\"\"\n        return [name for name, details in self.students.items() \n                if any(score < 60 for score in details['courses'].values())]\n\n    def get_course_average(self, course):\n        \"\"\"\n        Get the average score of a specific course.\n        :param course: str, course name\n        :return: float or None, average score if anyone has scores for this course, otherwise None\n        \"\"\"\n        total_score = 0\n        count = 0\n        for details in self.students.values():\n            if course in details['courses']:\n                total_score += details['courses'][course]\n                count += 1\n        return total_score / count if count > 0 else None\n\n    def get_top_student(self):\n        \"\"\"\n        Calculate every student's GPA with get_gpa method and find the student with the highest GPA.\n        :return: str, name of the student whose GPA is highest\n        \"\"\"\n        top_student = None\n        highest_gpa = float('-inf')\n        for name in self.students:\n            gpa = self.get_gpa(name)\n            if gpa is not None and gpa > highest_gpa:\n                highest_gpa = gpa\n                top_student = name\n        return top_student\n```",
    "1": "```python\nimport math\n\nclass AreaCalculator:\n    \"\"\"\n    A class for calculating the area of different shapes including circle, sphere, cylinder, sector, and annulus.\n    \"\"\"\n\n    def __init__(self, radius):\n        \"\"\"\n        Initialize the radius for shapes.\n        :param radius: float\n        \"\"\"\n        self.radius = radius\n\n    def calculate_circle_area(self):\n        \"\"\"\n        Calculate the area of a circle based on self.radius.\n        :return: area of circle, float\n        \"\"\"\n        return math.pi * self.radius ** 2\n\n    def calculate_sphere_area(self):\n        \"\"\"\n        Calculate the surface area of a sphere based on self.radius.\n        :return: area of sphere, float\n        \"\"\"\n        return 4 * math.pi * self.radius ** 2\n\n    def calculate_cylinder_area(self, height):\n        \"\"\"\n        Calculate the surface area of a cylinder based on self.radius and height.\n        :param height: height of the cylinder, float\n        :return: area of cylinder, float\n        \"\"\"\n        base_area = self.calculate_circle_area()\n        lateral_area = 2 * math.pi * self.radius * height\n        return 2 * base_area + lateral_area\n\n    def calculate_sector_area(self, angle):\n        \"\"\"\n        Calculate the area of a sector based on self.radius and angle.\n        :param angle: angle of the sector in radians, float\n        :return: area of sector, float\n        \"\"\"\n        return 0.5 * self.radius ** 2 * angle\n\n    def calculate_annulus_area(self, inner_radius, outer_radius):\n        \"\"\"\n        Calculate the area of an annulus based on inner_radius and outer_radius.\n        :param inner_radius: inner radius of the annulus, float\n        :param outer_radius: outer radius of the annulus, float\n        :return: area of annulus, float\n        \"\"\"\n        if inner_radius >= outer_radius:\n            raise ValueError(\"Inner radius must be smaller than outer radius.\")\n        return self.calculate_circle_area() - AreaCalculator(inner_radius).calculate_circle_area()\n```",
    "13": "```python\nclass BookManagement:\n    \"\"\"\n    This is a class for managing a book system, which supports adding and removing books from the inventory,\n    viewing the inventory, and checking the quantity of a specific book.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the inventory of the Book Manager.\n        \"\"\"\n        self.inventory = {}\n\n    def add_book(self, title, quantity=1):\n        \"\"\"\n        Add one or several books to the inventory sorted by book title.\n        :param title: str, the book title\n        :param quantity: int, default value is 1\n        \"\"\"\n        if quantity < 1:\n            raise ValueError(\"Quantity must be at least 1.\")\n        \n        if title in self.inventory:\n            self.inventory[title] += quantity\n        else:\n            self.inventory[title] = quantity\n        \n        self.inventory = dict(sorted(self.inventory.items()))\n\n    def remove_book(self, title, quantity):\n        \"\"\"\n        Remove one or several books from inventory sorted by book title.\n        Raise ValueError for invalid input.\n        :param title: str, the book title\n        :param quantity: int\n        \"\"\"\n        if quantity < 1:\n            raise ValueError(\"Quantity must be at least 1.\")\n        \n        if title not in self.inventory:\n            raise ValueError(\"Book not found in inventory.\")\n        \n        if quantity > self.inventory[title]:\n            raise ValueError(\"Insufficient quantity to remove.\")\n        \n        self.inventory[title] -= quantity\n        \n        if self.inventory[title] == 0:\n            del self.inventory[title]\n\n    def view_inventory(self):\n        \"\"\"\n        Get the inventory of the Book Management.\n        :return: dictionary, {title(str): quantity(int), ...}\n        \"\"\"\n        return self.inventory\n\n    def view_book_quantity(self, title):\n        \"\"\"\n        Get the quantity of a book.\n        :param title: str, the title of the book\n        :return: int, the quantity of this book title, returns 0 when the title does not exist in inventory\n        \"\"\"\n        return self.inventory.get(title, 0)\n```",
    "2": "```python\nclass ArgumentParser:\n    \"\"\"\n    This is a class for parsing command line arguments to a dictionary.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the fields.\n        self.arguments is a dict that stores the args in a command line\n        self.required is a set that stores the required arguments\n        self.types is a dict that stores type of every arguments.\n        \"\"\"\n        self.arguments = {}\n        self.required = set()\n        self.types = {}\n\n    def parse_arguments(self, command_string):\n        \"\"\"\n        Parses the given command line argument string and invokes _convert_type to store the parsed result in specific type in the arguments dictionary.\n        Checks for missing required arguments, if any, and returns False with the missing argument names, otherwise returns True.\n        :param command_string: str, command line argument string, formatted like \"python script.py --arg1=value1 -arg2 value2 --option1 -option2\"\n        :return tuple: (True, None) if parsing is successful, (False, missing_args) if parsing fails,\n            where missing_args is a set of the missing argument names which are str.\n        \"\"\"\n        args = command_string.split()[1:]  # Skip the script name\n        missing_args = set()\n\n        for arg in args:\n            if '=' in arg:\n                key, value = arg.split('=')\n            else:\n                key = arg\n                value = True  # Flag for options without a value\n\n            key = key.lstrip('-')  # Remove leading dashes\n            self.arguments[key] = self._convert_type(key, value)\n\n        for req in self.required:\n            if req not in self.arguments:\n                missing_args.add(req)\n\n        return (len(missing_args) == 0, missing_args if missing_args else None)\n\n    def get_argument(self, key):\n        \"\"\"\n        Retrieves the value of the specified argument from the arguments dictionary and returns it.\n        :param key: str, argument name\n        :return: The value of the argument, or None if the argument does not exist.\n        \"\"\"\n        return self.arguments.get(key)\n\n    def add_argument(self, arg, required=False, arg_type=str):\n        \"\"\"\n        Adds an argument to self.types and self.required.\n        Check if it is a required argument and store the argument type.\n        If the argument is set as required, it will be added to the required set.\n        The argument type and name are stored in the types dictionary as key-value pairs.\n        :param arg: str, argument name\n        :param required: bool, whether the argument is required, default is False\n        :param arg_type: type, Argument type, default is str\n        \"\"\"\n        self.types[arg] = arg_type\n        if required:\n            self.required.add(arg)\n\n    def _convert_type(self, arg, value):\n        \"\"\"\n        Try to convert the type of input value by searching in self.types.\n        :param arg: str, the argument name\n        :param value: str, the input value in command line\n        :return: return corresponding value in self.types if converted successfully, or the input value otherwise\n        \"\"\"\n        if arg in self.types:\n            try:\n                return self.types[arg](value)\n            except (ValueError, TypeError):\n                return value\n        return value\n```",
    "12": "```python\nimport random\n\nclass BlackjackGame:\n    \"\"\"\n    This is a class representing a game of blackjack, which includes creating a deck, calculating the value of a hand,\n    and determining the winner based on the hand values of the player and dealer.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the Blackjack Game with the attribute deck, player_hand, and dealer_hand.\n        \"\"\"\n        self.deck = self.create_deck()\n        self.player_hand = []\n        self.dealer_hand = []\n\n    def create_deck(self):\n        \"\"\"\n        Create a deck of 52 cards, which stores cards in random order with the Jokers removed.\n        :return: a list of 52 cards in random order.\n        \"\"\"\n        suits = ['S', 'H', 'D', 'C']\n        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\n        deck = [f\"{rank}{suit}\" for suit in suits for rank in ranks]\n        random.shuffle(deck)\n        return deck\n\n    def calculate_hand_value(self, hand):\n        \"\"\"\n        Calculate the value of the poker cards stored in hand list according to the rules of the Blackjack Game.\n        :param hand: list\n        :return: the value of the poker cards stored in hand list\n        \"\"\"\n        value = 0\n        ace_count = 0\n        \n        for card in hand:\n            rank = card[:-1]\n            if rank in ['J', 'Q', 'K']:\n                value += 10\n            elif rank == 'A':\n                value += 11\n                ace_count += 1\n            else:\n                value += int(rank)\n        \n        while value > 21 and ace_count:\n            value -= 10\n            ace_count -= 1\n            \n        return value\n\n    def check_winner(self, player_hand, dealer_hand):\n        \"\"\"\n        Determines the winner of a game by comparing the hand values of the player and dealer.\n        :param player_hand: list\n        :param dealer_hand: list\n        :return: the result of the game, either 'Dealer wins' or 'Player wins'\n        \"\"\"\n        player_value = self.calculate_hand_value(player_hand)\n        dealer_value = self.calculate_hand_value(dealer_hand)\n\n        if player_value > 21:\n            return 'Dealer wins'\n        if dealer_value > 21:\n            return 'Player wins'\n\n        if player_value > dealer_value:\n            return 'Player wins'\n        else:\n            return 'Dealer wins'\n```",
    "11": "```python\nclass BitStatusUtil:\n    \"\"\"\n    This is a utility class that provides methods for manipulating and checking status using bitwise operations.\n    \"\"\"\n\n    @staticmethod\n    def add(states: int, stat: int) -> int:\n        \"\"\"\n        Add a status to the current status and check the parameters whether they are legal.\n        \n        :param states: Current status, int.\n        :param stat: Status to be added, int.\n        :return: The status after adding the status, int.\n        >>> bit_status_util = BitStatusUtil()\n        >>> bit_status_util.add(2, 4)\n        6\n        \"\"\"\n        BitStatusUtil.check([states, stat])\n        return states | stat\n\n    @staticmethod\n    def has(states: int, stat: int) -> bool:\n        \"\"\"\n        Check if the current status contains the specified status and check the parameters whether they are legal.\n        \n        :param states: Current status, int.\n        :param stat: Specified status, int.\n        :return: True if the current status contains the specified status, otherwise False, bool.\n        >>> bit_status_util = BitStatusUtil()\n        >>> bit_status_util.has(6, 2)\n        True\n        \"\"\"\n        BitStatusUtil.check([states, stat])\n        return (states & stat) == stat\n\n    @staticmethod\n    def remove(states: int, stat: int) -> int:\n        \"\"\"\n        Remove the specified status from the current status and check the parameters whether they are legal.\n        \n        :param states: Current status, int.\n        :param stat: Specified status, int.\n        :return: The status after removing the specified status, int.\n        >>> bit_status_util = BitStatusUtil()\n        >>> bit_status_util.remove(6, 2)\n        4\n        \"\"\"\n        BitStatusUtil.check([states, stat])\n        return states & ~stat\n\n    @staticmethod\n    def check(args: list) -> None:\n        \"\"\"\n        Check if the parameters are legal, args must be greater than or equal to 0 and must be even, if not, raise ValueError.\n        \n        :param args: Parameters to be checked, list.\n        :return: None.\n        >>> bit_status_util = BitStatusUtil()\n        >>> bit_status_util.check([2, 3, 4])\n        Traceback (most recent call last):\n        ...\n        ValueError: 3 not even\n        \"\"\"\n        for arg in args:\n            if arg < 0 or arg % 2 != 0:\n                raise ValueError(f\"{arg} not even\")\n```",
    "10": "```python\nclass BinaryDataProcessor:\n    \"\"\"\n    This is a class used to process binary data, which includes functions such as clearing non 0 or 1 characters, counting binary string information, and converting to corresponding strings based on different encoding methods.\n    \"\"\"\n\n    def __init__(self, binary_string):\n        \"\"\"\n        Initialize the class with a binary string and clean it by removing all non 0 or 1 characters.\n        \"\"\"\n        self.binary_string = binary_string\n        self.clean_non_binary_chars()\n\n    def clean_non_binary_chars(self):\n        \"\"\"\n        Clean the binary string by removing all non 0 or 1 characters.\n        >>> bdp = BinaryDataProcessor(\"01101000daf3e4r01100101011011000110110001101111\")\n        >>> bdp.clean_non_binary_chars()\n        >>> bdp.binary_string\n        '0110100001100101011011000110110001101111'\n        \"\"\"\n        self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))\n\n    def calculate_binary_info(self):\n        \"\"\"\n        Calculate the binary string information, including the percentage of 0 and 1, and the total length of the binary string.\n        >>> bdp = BinaryDataProcessor(\"0110100001100101011011000110110001101111\")\n        >>> bdp.calculate_binary_info()\n        {'Zeroes': 0.475, 'Ones': 0.525, 'Bit length': 40}\n        \"\"\"\n        total_bits = len(self.binary_string)\n        if total_bits == 0:\n            return {'Zeroes': 0.0, 'Ones': 0.0, 'Bit length': 0}\n\n        count_0 = self.binary_string.count('0')\n        count_1 = total_bits - count_0  # total_bits = count_0 + count_1\n        return {\n            'Zeroes': count_0 / total_bits,\n            'Ones': count_1 / total_bits,\n            'Bit length': total_bits\n        }\n\n    def convert_to_ascii(self):\n        \"\"\"\n        Convert the binary string to ascii string.\n        >>> bdp = BinaryDataProcessor(\"0110100001100101011011000110110001101111\")\n        >>> bdp.convert_to_ascii()\n        'hello'\n        \"\"\"\n        return ''.join(chr(int(self.binary_string[i:i + 8], 2)) for i in range(0, len(self.binary_string), 8))\n\n    def convert_to_utf8(self):\n        \"\"\"\n        Convert the binary string to utf-8 string.\n        >>> bdp = BinaryDataProcessor(\"0110100001100101011011000110110001101111\")\n        >>> bdp.convert_to_utf8()\n        'hello'\n        \"\"\"\n        return self.convert_to_ascii()\n```",
    "15": "```python\nclass BoyerMooreSearch:\n    \"\"\"\n    This is a class that implements the Boyer-Moore algorithm for string searching, which is used to find occurrences of a pattern within a given text.\n    \"\"\"\n\n    def __init__(self, text, pattern):\n        \"\"\"\n        Initializes the BoyerMooreSearch class with the given text and pattern.\n        :param text: The text to be searched, str.\n        :param pattern: The pattern to be searched for, str.\n        \"\"\"\n        self.text = text\n        self.pattern = pattern\n        self.textLen = len(text)\n        self.patLen = len(pattern)\n        self.bad_char_shift = self.bad_character_heuristic()\n\n    def match_in_pattern(self, char):\n        \"\"\"\n        Finds the rightmost occurrence of a character in the pattern.\n        :param char: The character to be searched for, str.\n        :return: The index of the rightmost occurrence of the character in the pattern, int.\n        \"\"\"\n        return self.pattern.rfind(char)\n\n    def mismatch_in_text(self, currentPos):\n        \"\"\"\n        Determines the position of the first mismatch between the pattern and the text.\n        :param currentPos: The current position in the text, int.\n        :return: The position of the first mismatch between the pattern and the text, int, otherwise -1.\n        \"\"\"\n        for i in range(self.patLen - 1, -1, -1):\n            if self.pattern[i] != self.text[currentPos + i]:\n                return i\n        return -1\n\n    def bad_character_heuristic(self):\n        \"\"\"\n        Creates a bad character shift table.\n        :return: A dictionary containing the shift values for each character in the pattern.\n        \"\"\"\n        bad_char_shift = {}\n        for i in range(self.patLen):\n            bad_char_shift[self.pattern[i]] = i\n        return bad_char_shift\n\n    def search(self):\n        \"\"\"\n        Finds all occurrences of the pattern in the text.\n        :return: A list of all positions of the pattern in the text, list.\n        \"\"\"\n        positions = []\n        s = 0  # s is the shift of the pattern with respect to text\n        while s <= self.textLen - self.patLen:\n            j = self.mismatch_in_text(s)\n            if j == -1:  # A match is found\n                positions.append(s)\n                s += (self.patLen - self.bad_char_shift.get(self.text[s + self.patLen], -1)) if s + self.patLen < self.textLen else 1\n            else:\n                s += max(1, j - self.bad_char_shift.get(self.text[s + j], -1))\n        return positions\n```",
    "14": "```python\nimport sqlite3\n\nclass BookManagementDB:\n    \"\"\"\n    This is a database class for a book management system, used to handle the operations of adding, removing, updating, and searching books.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the class by creating a database connection and cursor, \n        and creates the book table if it does not already exist.\n        :param db_name: str, the name of the database file\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"\n        Creates the book table in the database if it does not already exist.\n        \"\"\"\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS books (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                title TEXT NOT NULL,\n                author TEXT NOT NULL,\n                available INTEGER NOT NULL DEFAULT 1\n            )\n        ''')\n        self.connection.commit()\n\n    def add_book(self, title, author):\n        \"\"\"\n        Adds a book to the database with the specified title and author, \n        setting its availability to 1 (free to borrow).\n        :param title: str, book title\n        :param author: str, author name\n        \"\"\"\n        self.cursor.execute('''\n            INSERT INTO books (title, author) VALUES (?, ?)\n        ''', (title, author))\n        self.connection.commit()\n\n    def remove_book(self, book_id):\n        \"\"\"\n        Removes a book from the database based on the given book ID.\n        :param book_id: int\n        \"\"\"\n        self.cursor.execute('''\n            DELETE FROM books WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()\n\n    def borrow_book(self, book_id):\n        \"\"\"\n        Marks a book as borrowed in the database based on the given book ID.\n        :param book_id: int\n        \"\"\"\n        self.cursor.execute('''\n            UPDATE books SET available = 0 WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()\n\n    def return_book(self, book_id):\n        \"\"\"\n        Marks a book as returned in the database based on the given book ID.\n        :param book_id: int\n        \"\"\"\n        self.cursor.execute('''\n            UPDATE books SET available = 1 WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()\n\n    def search_books(self):\n        \"\"\"\n        Retrieves all books from the database and returns their information.\n        :return: list[tuple], the information of all books in the database\n        \"\"\"\n        self.cursor.execute('''\n            SELECT * FROM books\n        ''')\n        return self.cursor.fetchall()\n\n    def close(self):\n        \"\"\"\n        Closes the database connection.\n        \"\"\"\n        self.connection.close()\n```",
    "3": "```python\nimport itertools\n\nclass ArrangementCalculator:\n    \"\"\"\n    The ArrangementCalculator class provides permutation calculations and selection operations for a given set of data elements.\n    \"\"\"\n\n    def __init__(self, datas):\n        \"\"\"\n        Initializes the ArrangementCalculator object with a list of datas.\n        :param datas: List, the data elements to be used for arrangements.\n        \"\"\"\n        self.datas = datas\n\n    @staticmethod\n    def count(n, m=None):\n        \"\"\"\n        Counts the number of arrangements by choosing m items from n items (permutations).\n        If m is not provided or n equals m, returns factorial(n).\n        :param n: int, the total number of items.\n        :param m: int, the number of items to be chosen (default=None).\n        :return: int, the count of arrangements.\n        >>> ArrangementCalculator.count(5, 3)\n        60\n        \"\"\"\n        if m is None or n == m:\n            return ArrangementCalculator.factorial(n)\n        return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)\n\n    @staticmethod\n    def count_all(n):\n        \"\"\"\n        Counts the total number of all possible arrangements by choosing at least 1 item and at most n items from n items.\n        :param n: int, the total number of items.\n        :return: int, the count of all arrangements.\n        >>> ArrangementCalculator.count_all(4)\n        64\n        \"\"\"\n        total = 0\n        for m in range(1, n + 1):\n            total += ArrangementCalculator.count(n, m)\n        return total\n\n    def select(self, m=None):\n        \"\"\"\n        Generates a list of arrangements by selecting m items from the internal datas.\n        If m is not provided, selects all items.\n        :param m: int, the number of items to be chosen (default=None).\n        :return: List, a list of arrangements.\n        >>> ac = ArrangementCalculator([1, 2, 3, 4])\n        >>> ac.select(2)\n        [[1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]]\n        \"\"\"\n        if m is None:\n            m = len(self.datas)\n        return [list(arr) for arr in itertools.permutations(self.datas, m)]\n\n    def select_all(self):\n        \"\"\"\n        Generates a list of all arrangements by selecting at least 1 item and at most the number of internal datas.\n        :return: List, a list of all arrangements.\n        >>> ac = ArrangementCalculator([1, 2, 3])\n        >>> ac.select_all()\n        [[1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n        \"\"\"\n        all_arrangements = []\n        for m in range(1, len(self.datas) + 1):\n            all_arrangements.extend(self.select(m))\n        return all_arrangements\n\n    @staticmethod\n    def factorial(n):\n        \"\"\"\n        Calculates the factorial of a given number.\n        :param n: int, the number to calculate the factorial.\n        :return: int, the factorial of the given number.\n        >>> ArrangementCalculator.factorial(4)\n        24\n        \"\"\"\n        if n == 0 or n == 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n```",
    "16": "```python\nclass Calculator:\n    \"\"\"\n    This is a class for a calculator, capable of performing basic arithmetic calculations on numerical expressions using the operators +, -, *, /, and ^ (exponentiation).\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the operations performed by the five operators '+', '-', '*', '/', '^'.\n        \"\"\"\n        self.operators = {\n            '+': lambda x, y: x + y,\n            '-': lambda x, y: x - y,\n            '*': lambda x, y: x * y,\n            '/': lambda x, y: x / y,\n            '^': lambda x, y: x ** y\n        }\n\n    def calculate(self, expression):\n        \"\"\"\n        Calculate the value of a given expression.\n        \n        :param expression: string, given expression\n        :return: If successful, returns the value of the expression; otherwise, returns None.\n        \n        >>> calculator = Calculator()\n        >>> calculator.calculate('1+2-3')\n        0.0\n        \"\"\"\n        operand_stack = []\n        operator_stack = []\n        num = ''\n        \n        for char in expression:\n            if char.isdigit() or char == '.':\n                num += char\n            else:\n                if num:\n                    operand_stack.append(float(num))\n                    num = ''\n                while (operator_stack and \n                       self.precedence(char) <= self.precedence(operator_stack[-1])):\n                    self.apply_operator(operand_stack, operator_stack)\n                operator_stack.append(char)\n\n        if num:\n            operand_stack.append(float(num))\n\n        while operator_stack:\n            self.apply_operator(operand_stack, operator_stack)\n\n        return operand_stack[0] if operand_stack else None\n\n    def precedence(self, operator):\n        \"\"\"\n        Returns the priority of the specified operator.\n        \n        :param operator: string, given operator\n        :return: int, the priority of the given operator, otherwise return 0\n        \n        >>> calculator = Calculator()\n        >>> calculator.precedence('+')\n        1\n        >>> calculator.precedence('^')\n        3\n        \"\"\"\n        precedence_order = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n        return precedence_order.get(operator, 0)\n\n    def apply_operator(self, operand_stack, operator_stack):\n        \"\"\"\n        Use the operator at the top of the operator stack to perform the operation on the two numbers \n        at the top of the operand stack, and store the result at the top of the operand stack.\n        \n        :param operand_stack: list\n        :param operator_stack: list\n        :return: the updated operand_stack\n        \n        >>> calculator = Calculator()\n        >>> calculator.apply_operator([1, 2, 3], ['+', '-'])\n        ([1, -1], ['-'])\n        \"\"\"\n        right_operand = operand_stack.pop()\n        left_operand = operand_stack.pop()\n        operator = operator_stack.pop()\n        result = self.operators[operator](left_operand, right_operand)\n        operand_stack.append(result)\n        return operand_stack, operator_stack\n```",
    "18": "```python\nclass CamelCaseMap:\n    \"\"\"\n    This is a custom class that allows keys to be in camel case style by converting them from underscore style, which provides dictionary-like functionality.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize data to an empty dictionary.\"\"\"\n        self._data = {}\n\n    def __getitem__(self, key):\n        \"\"\"Return the value corresponding to the key.\"\"\"\n        return self._data[self._convert_key(key)]\n\n    def __setitem__(self, key, value):\n        \"\"\"Set the value corresponding to the key to the specified value.\"\"\"\n        self._data[self._convert_key(key)] = value\n\n    def __delitem__(self, key):\n        \"\"\"Delete the value corresponding to the key.\"\"\"\n        del self._data[self._convert_key(key)]\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the keys.\"\"\"\n        return iter(self._data)\n\n    def __len__(self):\n        \"\"\"Return the length of the data.\"\"\"\n        return len(self._data)\n\n    def _convert_key(self, key):\n        \"\"\"Convert key string into camel case.\"\"\"\n        return self._to_camel_case(key)\n\n    @staticmethod\n    def _to_camel_case(key):\n        \"\"\"Convert key string into camel case.\"\"\"\n        components = key.split('_')\n        return components[0] + ''.join(word.capitalize() for word in components[1:])\n```",
    "17": "```python\nfrom datetime import datetime, timedelta\n\nclass CalendarUtil:\n    \"\"\"\n    A class that provides functionalities to manage calendar events,\n    schedule appointments, and perform conflict checks.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the calendar with an empty list of events.\"\"\"\n        self.events = []\n\n    def add_event(self, event):\n        \"\"\"\n        Add an event to the calendar.\n        :param event: The event to be added to the calendar, dict.\n        \"\"\"\n        self.events.append(event)\n\n    def remove_event(self, event):\n        \"\"\"\n        Remove an event from the calendar.\n        :param event: The event to be removed from the calendar, dict.\n        \"\"\"\n        if event in self.events:\n            self.events.remove(event)\n\n    def get_events(self, date):\n        \"\"\"\n        Get all events on a given date.\n        :param date: The date to get events for, datetime.\n        :return: A list of events on the given date, list.\n        \"\"\"\n        return [event for event in self.events if event['date'].date() == date.date()]\n\n    def is_available(self, start_time, end_time):\n        \"\"\"\n        Check if the calendar is available for a given time slot.\n        :param start_time: The start time of the time slot, datetime.\n        :param end_time: The end time of the time slot, datetime.\n        :return: True if the calendar is available for the given time slot, False otherwise, bool.\n        \"\"\"\n        for event in self.events:\n            if (event['start_time'] < end_time and event['end_time'] > start_time):\n                return False\n        return True\n\n    def get_available_slots(self, date):\n        \"\"\"\n        Get all available time slots on a given date.\n        :param date: The date to get available time slots for, datetime.\n        :return: A list of available time slots on the given date, list.\n        \"\"\"\n        day_start = datetime.combine(date.date(), datetime.min.time())\n        day_end = datetime.combine(date.date(), datetime.max.time())\n        busy_slots = [(event['start_time'], event['end_time']) for event in self.get_events(date)]\n        \n        if not busy_slots:\n            return [(day_start, day_end)]\n\n        available_slots = []\n        current_start = day_start\n\n        for start, end in sorted(busy_slots):\n            if current_start < start:\n                available_slots.append((current_start, start))\n            current_start = max(current_start, end)\n\n        if current_start < day_end:\n            available_slots.append((current_start, day_end))\n\n        return available_slots\n\n    def get_upcoming_events(self, num_events):\n        \"\"\"\n        Get the next n upcoming events from the current date.\n        :param num_events: The number of upcoming events to get, int.\n        :return: A list of the next n upcoming events from the current date, list.\n        \"\"\"\n        now = datetime.now()\n        upcoming_events = [event for event in self.events if event['start_time'] > now]\n        return sorted(upcoming_events, key=lambda x: x['start_time'])[:num_events]\n```",
    "20": "```python\nfrom datetime import datetime\n\nclass Chat:\n    \"\"\"\n    This is a chat class with the functions of adding users, removing users, sending messages, and obtaining messages.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the Chat with an attribute users, which is an empty dictionary.\n        \"\"\"\n        self.users = {}\n\n    def add_user(self, username):\n        \"\"\"\n        Add a new user to the Chat.\n        :param username: The user's name, str.\n        :return: If the user is already in the Chat, returns False, otherwise, returns True.\n        \"\"\"\n        if username in self.users:\n            return False\n        self.users[username] = []\n        return True\n\n    def remove_user(self, username):\n        \"\"\"\n        Remove a user from the Chat.\n        :param username: The user's name, str.\n        :return: If the user is already in the Chat, returns True, otherwise, returns False.\n        \"\"\"\n        if username not in self.users:\n            return False\n        del self.users[username]\n        return True\n\n    def send_message(self, sender, receiver, message):\n        \"\"\"\n        Send a message from a user to another user.\n        :param sender: The sender's name, str.\n        :param receiver: The receiver's name, str.\n        :param message: The message, str.\n        :return: If the sender or the receiver is not in the Chat, returns False, otherwise, returns True.\n        \"\"\"\n        if sender not in self.users or receiver not in self.users:\n            return False\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        self.users[receiver].append({\n            'sender': sender,\n            'receiver': receiver,\n            'message': message,\n            'timestamp': timestamp\n        })\n        return True\n\n    def get_messages(self, username):\n        \"\"\"\n        Get all the messages of a user from the Chat.\n        :param username: The user's name, str.\n        :return: A list of messages, each message is a dictionary with keys 'sender', 'receiver', 'message', 'timestamp'.\n        \"\"\"\n        if username not in self.users:\n            return []\n        return self.users[username]\n```",
    "19": "```python\nclass ChandrasekharSieve:\n    \"\"\"\n    This class uses the Chandrasekhar's Sieve method to find all prime numbers within a specified range.\n    \"\"\"\n\n    def __init__(self, n):\n        \"\"\"\n        Initialize the ChandrasekharSieve class with the given limit.\n        :param n: int, the upper limit for generating prime numbers\n        \"\"\"\n        self.n = n\n        self.primes = self.generate_primes()\n\n    def generate_primes(self):\n        \"\"\"\n        Generate prime numbers up to the specified limit using the Chandrasekhar sieve algorithm.\n        :return: list, a list of prime numbers\n        >>> cs = ChandrasekharSieve(20)\n        >>> cs.generate_primes()\n        [2, 3, 5, 7, 11, 13, 17, 19]\n        \"\"\"\n        if self.n < 2:\n            return []\n\n        is_prime = [True] * (self.n + 1)\n        is_prime[0], is_prime[1] = False, False  # 0 and 1 are not prime numbers\n        \n        for i in range(2, int(self.n**0.5) + 1):\n            if is_prime[i]:\n                for multiple in range(i * i, self.n + 1, i):\n                    is_prime[multiple] = False\n\n        return [num for num, prime in enumerate(is_prime) if prime]\n\n    def get_primes(self):\n        \"\"\"\n        Get the list of generated prime numbers.\n        :return: list, a list of prime numbers\n        >>> cs = ChandrasekharSieve(20)\n        >>> cs.get_primes()\n        [2, 3, 5, 7, 11, 13, 17, 19]\n        \"\"\"\n        return self.primes\n```",
    "22": "```python\nclass ClassRegistrationSystem:\n    \"\"\"\n    A class representing a class registration system, allowing registration of students, \n    enrollment in classes, retrieval of students by major, listing all majors, \n    and determining the most popular class within a specific major.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the registration system with students and their class registrations.\n        \"\"\"\n        self.students = []\n        self.students_registration_classes = {}\n\n    def register_student(self, student):\n        \"\"\"\n        Register a student in the system. \n        If the student is already registered, return 0; otherwise, return 1.\n        \n        :param student: dict containing 'name' and 'major'.\n        :return: int\n        \"\"\"\n        if any(s['name'] == student['name'] for s in self.students):\n            return 0\n        self.students.append(student)\n        self.students_registration_classes[student['name']] = []\n        return 1\n\n    def register_class(self, student_name, class_name):\n        \"\"\"\n        Register a class for a student and return the list of classes the student is enrolled in.\n        \n        :param student_name: str\n        :param class_name: str\n        :return: list of class names\n        \"\"\"\n        if student_name in self.students_registration_classes:\n            self.students_registration_classes[student_name].append(class_name)\n            return self.students_registration_classes[student_name]\n        return []\n\n    def get_students_by_major(self, major):\n        \"\"\"\n        Retrieve all students enrolled in a specified major.\n        \n        :param major: str\n        :return: list of student names\n        \"\"\"\n        return [student['name'] for student in self.students if student['major'] == major]\n\n    def get_all_major(self):\n        \"\"\"\n        Retrieve a list of all unique majors in the system.\n        \n        :return: list of majors\n        \"\"\"\n        return list(set(student['major'] for student in self.students))\n\n    def get_most_popular_class_in_major(self, major):\n        \"\"\"\n        Determine the most popular class within a specific major based on enrollment.\n        \n        :param major: str\n        :return: str of the most popular class\n        \"\"\"\n        class_count = {}\n        for student in self.students:\n            if student['major'] == major:\n                for class_name in self.students_registration_classes[student['name']]:\n                    class_count[class_name] = class_count.get(class_name, 0) + 1\n                    \n        return max(class_count, key=class_count.get) if class_count else None\n```",
    "21": "```python\nfrom datetime import datetime\n\nclass Classroom:\n    \"\"\"\n    This is a class representing a classroom, capable of adding and removing courses,\n    checking availability at a given time, and detecting conflicts when scheduling new courses.\n    \"\"\"\n\n    def __init__(self, id):\n        \"\"\"\n        Initialize the classroom management system.\n        :param id: int, the id of classroom\n        \"\"\"\n        self.id = id\n        self.courses = []\n\n    def add_course(self, course):\n        \"\"\"\n        Add course to self.courses list if the course wasn't in it.\n        :param course: dict, information of the course, including 'start_time', 'end_time' and 'name'\n        \"\"\"\n        if course not in self.courses:\n            self.courses.append(course)\n\n    def remove_course(self, course):\n        \"\"\"\n        Remove course from self.courses list if the course was in it.\n        :param course: dict, information of the course, including 'start_time', 'end_time' and 'name'\n        \"\"\"\n        if course in self.courses:\n            self.courses.remove(course)\n\n    def is_free_at(self, check_time):\n        \"\"\"\n        Check if the classroom is free at a given time.\n        :param check_time: str, the time need to be checked in '%H:%M' format\n        :return: True if the check_time does not conflict with any course time, else False.\n        \"\"\"\n        check_time = datetime.strptime(check_time, '%H:%M').time()\n        for course in self.courses:\n            start_time = datetime.strptime(course['start_time'], '%H:%M').time()\n            end_time = datetime.strptime(course['end_time'], '%H:%M').time()\n            if start_time <= check_time < end_time:\n                return False\n        return True\n\n    def check_course_conflict(self, new_course):\n        \"\"\"\n        Check if the new course time conflicts with any other course.\n        :param new_course: dict, information of the course, including 'start_time', 'end_time' and 'name'\n        :return: False if there is a conflict, True otherwise.\n        \"\"\"\n        new_start = datetime.strptime(new_course['start_time'], '%H:%M').time()\n        new_end = datetime.strptime(new_course['end_time'], '%H:%M').time()\n        \n        for course in self.courses:\n            start_time = datetime.strptime(course['start_time'], '%H:%M').time()\n            end_time = datetime.strptime(course['end_time'], '%H:%M').time()\n            if not (new_end <= start_time or new_start >= end_time):\n                return False\n        return True\n```",
    "24": "```python\nclass ComplexCalculator:\n    \"\"\"\n    This is a class that implements addition, subtraction, multiplication, and division operations for complex numbers.\n    \"\"\"\n\n    @staticmethod\n    def add(c1, c2):\n        \"\"\"\n        Adds two complex numbers.\n        :param c1: The first complex number, complex.\n        :param c2: The second complex number, complex.\n        :return: The sum of the two complex numbers, complex.\n        >>> complexCalculator = ComplexCalculator()\n        >>> complexCalculator.add(1+2j, 3+4j)\n        (4+6j)\n        \"\"\"\n        return c1 + c2\n\n    @staticmethod\n    def subtract(c1, c2):\n        \"\"\"\n        Subtracts two complex numbers.\n        :param c1: The first complex number, complex.\n        :param c2: The second complex number, complex.\n        :return: The difference of the two complex numbers, complex.\n        >>> complexCalculator = ComplexCalculator()\n        >>> complexCalculator.subtract(1+2j, 3+4j)\n        (-2-2j)\n        \"\"\"\n        return c1 - c2\n\n    @staticmethod\n    def multiply(c1, c2):\n        \"\"\"\n        Multiplies two complex numbers.\n        :param c1: The first complex number, complex.\n        :param c2: The second complex number, complex.\n        :return: The product of the two complex numbers, complex.\n        >>> complexCalculator = ComplexCalculator()\n        >>> complexCalculator.multiply(1+2j, 3+4j)\n        (-5+10j)\n        \"\"\"\n        return c1 * c2\n\n    @staticmethod\n    def divide(c1, c2):\n        \"\"\"\n        Divides two complex numbers.\n        :param c1: The first complex number, complex.\n        :param c2: The second complex number, complex.\n        :return: The quotient of the two complex numbers, complex.\n        >>> complexCalculator = ComplexCalculator()\n        >>> complexCalculator.divide(1+2j, 3+4j)\n        (0.44+0.08j)\n        \"\"\"\n        if c2 == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        return c1 / c2\n```",
    "25": "```python\nimport json\nimport os\n\nclass CookiesUtil:\n    \"\"\"\n    This is a class as utility for managing and manipulating Cookies, \n    including methods for retrieving, saving, and setting Cookies data.\n    \"\"\"\n\n    def __init__(self, cookies_file):\n        \"\"\"\n        Initializes the CookiesUtil with the specified cookies file.\n        :param cookies_file: The cookies file to use, str.\n        \"\"\"\n        self.cookies_file = cookies_file\n        self.cookies = self.load_cookies()  # Load cookies at initialization\n\n    def get_cookies(self, response):\n        \"\"\"\n        Gets the cookies from the specified response and saves it to cookies_file.\n        :param response: The response to get cookies from, dict.\n        \"\"\"\n        self.cookies = response.get('cookies', {})\n        self._save_cookies()\n\n    def load_cookies(self):\n        \"\"\"\n        Loads the cookies from the cookies_file to the cookies data.\n        :return: The cookies data, dict.\n        \"\"\"\n        if os.path.exists(self.cookies_file):\n            with open(self.cookies_file, 'r') as file:\n                return json.load(file)\n        return {}\n\n    def _save_cookies(self):\n        \"\"\"\n        Saves the cookies to the cookies_file, \n        and returns True if successful, False otherwise.\n        :return: True if successful, False otherwise.\n        \"\"\"\n        try:\n            with open(self.cookies_file, 'w') as file:\n                json.dump(self.cookies, file)\n            return True\n        except Exception as e:\n            print(f\"Error saving cookies: {e}\")\n            return False\n```",
    "27": "```python\nclass CurrencyConverter:\n    \"\"\"\n    This is a class for currency conversion, which supports converting amounts between different currencies,\n    retrieving supported currencies, adding new currency rates, and updating existing currency rates.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the exchange rates of the US dollar against various currencies.\n        \"\"\"\n        self.rates = {\n            'USD': 1.0,\n            'EUR': 0.85,\n            'GBP': 0.72,\n            'JPY': 110.15,\n            'CAD': 1.23,\n            'AUD': 1.34,\n            'CNY': 6.40,\n        }\n\n    def convert(self, amount, from_currency, to_currency):\n        \"\"\"\n        Convert the value of a given currency to another currency type.\n        :param amount: float, The value of a given currency.\n        :param from_currency: string, source currency type.\n        :param to_currency: string, target currency type.\n        :return: float, value converted to another currency type.\n        \"\"\"\n        if from_currency not in self.rates or to_currency not in self.rates:\n            raise ValueError(\"Unsupported currency type.\")\n        \n        # Convert the amount to USD first, then to the target currency\n        amount_in_usd = amount / self.rates[from_currency]\n        converted_amount = amount_in_usd * self.rates[to_currency]\n        return converted_amount\n\n    def get_supported_currencies(self):\n        \"\"\"\n        Returns a list of supported currency types.\n        :return: list, All supported currency types.\n        \"\"\"\n        return list(self.rates.keys())\n\n    def add_currency_rate(self, currency, rate):\n        \"\"\"\n        Add a new supported currency type, return False if the currency type is already in the support list.\n        :param currency: string, currency type to be added.\n        :param rate: float, exchange rate for this type of currency.\n        :return: If successful, returns None; if unsuccessful, returns False.\n        \"\"\"\n        if currency in self.rates:\n            return False\n        self.rates[currency] = rate\n\n    def update_currency_rate(self, currency, new_rate):\n        \"\"\"\n        Update the exchange rate for a certain currency.\n        :param currency: string, currency type.\n        :param new_rate: float, new exchange rate.\n        :return: If successful, returns None; if unsuccessful, returns False.\n        \"\"\"\n        if currency not in self.rates:\n            return False\n        self.rates[currency] = new_rate\n```\n",
    "30": "```python\nimport numpy as np\n\nclass DataStatistics2:\n    \"\"\"\n    This is a class for performing data statistics, supporting to get the sum, minimum, maximum, variance, standard deviation, and correlation of a given dataset.\n    \"\"\"\n\n    def __init__(self, data):\n        \"\"\"\n        Initialize Data List\n        :param data: list\n        \"\"\"\n        self.data = np.array(data)\n\n    def get_sum(self):\n        \"\"\"\n        Calculate the sum of data\n        :return: float\n        \"\"\"\n        return np.sum(self.data)\n\n    def get_min(self):\n        \"\"\"\n        Calculate the minimum value in the data\n        :return: float\n        \"\"\"\n        return np.min(self.data)\n\n    def get_max(self):\n        \"\"\"\n        Calculate the maximum value in the data\n        :return: float\n        \"\"\"\n        return np.max(self.data)\n\n    def get_variance(self):\n        \"\"\"\n        Calculate variance, accurate to two digits after the Decimal separator\n        :return: float\n        \"\"\"\n        return round(np.var(self.data, ddof=0), 2)\n\n    def get_std_deviation(self):\n        \"\"\"\n        Calculate standard deviation, accurate to two digits after the Decimal separator\n        :return: float\n        \"\"\"\n        return round(np.std(self.data, ddof=0), 2)\n\n    def get_correlation(self, other_data):\n        \"\"\"\n        Calculate correlation with another dataset\n        :param other_data: list\n        :return: float\n        \"\"\"\n        other_data = np.array(other_data)\n        return round(np.corrcoef(self.data, other_data)[0, 1], 2)\n```",
    "26": "```python\nimport csv\n\nclass CSVProcessor:\n    \"\"\"\n    This is a class for processing CSV files, including reading and writing CSV data,\n    as well as processing specific operations and saving as a new CSV file.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def read_csv(self, file_name):\n        \"\"\"\n        Read the csv file by file_name, get the title and data from it\n        :param file_name: str, name of the csv file\n        :return title, data: (list, list), first row is title, the rest is data\n        \"\"\"\n        try:\n            with open(file_name, mode='r', newline='', encoding='utf-8') as csvfile:\n                reader = csv.reader(csvfile)\n                title = next(reader)\n                data = [row for row in reader]\n            return title, data\n        except Exception as e:\n            print(f\"Error reading {file_name}: {e}\")\n            return [], []\n\n    def write_csv(self, data, file_name):\n        \"\"\"\n        Write data into a csv file.\n        :param data: list of lists, data to be written to csv\n        :param file_name: str, name of the csv file\n        :return: int, if success return 1, or 0 otherwise\n        \"\"\"\n        try:\n            with open(file_name, mode='w', newline='', encoding='utf-8') as csvfile:\n                writer = csv.writer(csvfile)\n                writer.writerows(data)\n            return 1\n        except Exception as e:\n            print(f\"Error writing to {file_name}: {e}\")\n            return 0\n\n    def process_csv_data(self, N, save_file_name):\n        \"\"\"\n        Read a csv file into variable title and data.\n        Only remain the N th (from 0) column data and Capitalize them,\n        store the title and new data into a new csv file.\n        Add '_process' suffix after old file name, as a new file name.\n        :param N: int, the N th column(from 0)\n        :param save_file_name: str, the name of file that needs to be processed.\n        :return: int, if success return 1, or 0 otherwise\n        \"\"\"\n        title, data = self.read_csv(save_file_name)\n        if not title or not data:\n            return 0\n\n        new_title = title[:]\n        new_data = [[row[N].upper()] for row in data if len(row) > N]\n\n        new_file_name = f\"{save_file_name.split('.')[0]}_process.csv\"\n        return self.write_csv([new_title] + new_data, new_file_name)\n```",
    "28": "```python\nimport sqlite3\nimport pandas as pd\n\nclass DatabaseProcessor:\n    \"\"\"\n    A class for processing a database, supporting table creation, data insertion,\n    data searching by name, and data deletion.\n    \"\"\"\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initialize the database processor with the specified database name.\n        :param database_name: str, the name of the database file.\n        \"\"\"\n        self.database_name = database_name\n        self.connection = sqlite3.connect(self.database_name)\n        self.cursor = self.connection.cursor()\n\n    def create_table(self, table_name, key1, key2):\n        \"\"\"\n        Create a new table in the database if it doesn't exist.\n        :param table_name: str, the name of the table to create.\n        :param key1: str, the name of the first column in the table.\n        :param key2: str, the name of the second column in the table.\n        \"\"\"\n        create_table_query = f\"\"\"\n        CREATE TABLE IF NOT EXISTS {table_name} (\n            id INTEGER PRIMARY KEY,\n            {key1} TEXT,\n            {key2} INTEGER\n        );\n        \"\"\"\n        self.cursor.execute(create_table_query)\n        self.connection.commit()\n\n    def insert_into_database(self, table_name, data):\n        \"\"\"\n        Insert data into the specified table in the database.\n        :param table_name: str, the name of the table to insert data into.\n        :param data: list, a list of dictionaries where each dictionary represents a row of data.\n        \"\"\"\n        for entry in data:\n            columns = ', '.join(entry.keys())\n            placeholders = ', '.join('?' * len(entry))\n            insert_query = f\"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})\"\n            self.cursor.execute(insert_query, tuple(entry.values()))\n        self.connection.commit()\n\n    def search_database(self, table_name, name):\n        \"\"\"\n        Search the specified table in the database for rows with a matching name.\n        :param table_name: str, the name of the table to search.\n        :param name: str, the name to search for.\n        :return: list, a list of tuples representing the rows with the matching name, if any;\n                otherwise, returns None.\n        \"\"\"\n        search_query = f\"SELECT * FROM {table_name} WHERE name = ?\"\n        self.cursor.execute(search_query, (name,))\n        results = self.cursor.fetchall()\n        return results if results else None\n\n    def delete_from_database(self, table_name, name):\n        \"\"\"\n        Delete rows from the specified table in the database with a matching name.\n        :param table_name: str, the name of the table to delete rows from.\n        :param name: str, the name to match for deletion.\n        \"\"\"\n        delete_query = f\"DELETE FROM {table_name} WHERE name = ?\"\n        self.cursor.execute(delete_query, (name,))\n        self.connection.commit()\n\n    def close(self):\n        \"\"\"Close the database connection.\"\"\"\n        self.connection.close()\n```",
    "29": "```python\nfrom collections import Counter\n\nclass DataStatistics:\n    \"\"\"\n    This class performs statistical calculations: mean, median, and mode of a given data set.\n    \"\"\"\n\n    def mean(self, data):\n        \"\"\"\n        Calculate the average value of a group of data, accurate to two digits after the decimal separator.\n        \n        :param data: list, data list\n        :return: float, the mean value\n        >>> ds = DataStatistics()\n        >>> ds.mean([1, 2, 3, 4, 5])\n        3.00\n        \"\"\"\n        if not data:\n            return 0.0\n        return round(sum(data) / len(data), 2)\n\n    def median(self, data):\n        \"\"\"\n        Calculate the median of a group of data, accurate to two digits after the decimal separator.\n        \n        :param data: list, data list\n        :return: float, the median value\n        >>> ds = DataStatistics()\n        >>> ds.median([2, 5, 1, 3, 4])\n        3.00\n        \"\"\"\n        if not data:\n            return 0.0\n        sorted_data = sorted(data)\n        n = len(sorted_data)\n        mid = n // 2\n        if n % 2 == 0:\n            return round((sorted_data[mid - 1] + sorted_data[mid]) / 2, 2)\n        else:\n            return round(sorted_data[mid], 2)\n\n    def mode(self, data):\n        \"\"\"\n        Calculate the mode of a set of data.\n        \n        :param data: list, data list\n        :return: list, the mode(s)\n        >>> ds = DataStatistics()\n        >>> ds.mode([2, 2, 3, 3, 4])\n        [2, 3]\n        \"\"\"\n        if not data:\n            return []\n        frequency = Counter(data)\n        max_count = max(frequency.values())\n        modes = [value for value, count in frequency.items() if count == max_count]\n        return modes\n```",
    "23": "```python\nimport math\nfrom typing import List\n\nclass CombinationCalculator:\n    \"\"\"\n    This is a class that provides methods to calculate the number of combinations for a specific count,\n    calculate all possible combinations, and generate combinations with a specified number of elements.\n    \"\"\"\n\n    def __init__(self, datas: List[str]):\n        \"\"\"\n        Initialize the calculator with a list of data.\n        \"\"\"\n        self.datas = datas\n\n    @staticmethod\n    def count(n: int, m: int) -> int:\n        \"\"\"\n        Calculate the number of combinations for a specific count.\n        :param n: The total number of elements.\n        :param m: The number of elements in each combination.\n        :return: The number of combinations.\n        >>> CombinationCalculator.count(4, 2)\n        6\n        \"\"\"\n        if m > n or m < 0:\n            return 0\n        return math.factorial(n) // (math.factorial(m) * math.factorial(n - m))\n\n    @staticmethod\n    def count_all(n: int) -> int:\n        \"\"\"\n        Calculate the number of all possible combinations.\n        :param n: The total number of elements.\n        :return: The number of all possible combinations.\n        >>> CombinationCalculator.count_all(4)\n        15\n        \"\"\"\n        total_combinations = 0\n        for m in range(1, n + 1):\n            total_combinations += CombinationCalculator.count(n, m)\n        \n        return total_combinations if total_combinations <= (2**63 - 1) else float(\"inf\")\n\n    def select(self, m: int) -> List[List[str]]:\n        \"\"\"\n        Generate combinations with a specified number of elements.\n        :param m: The number of elements in each combination.\n        :return: A list of combinations.\n        >>> calc = CombinationCalculator([\"A\", \"B\", \"C\", \"D\"])\n        >>> calc.select(2)\n        [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]\n        \"\"\"\n        result = []\n        self._select(0, [], m, result)\n        return result\n\n    def select_all(self) -> List[List[str]]:\n        \"\"\"\n        Generate all possible combinations of selecting elements from the given data list.\n        :return: A list of combinations.\n        >>> calc = CombinationCalculator([\"A\", \"B\", \"C\", \"D\"])\n        >>> calc.select_all()\n        [['A'], ['B'], ['C'], ['D'], ['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D'], ['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'C', 'D'], ['B', 'C', 'D'], ['A', 'B', 'C', 'D']]\n        \"\"\"\n        result = []\n        for m in range(1, len(self.datas) + 1):\n            result.extend(self.select(m))\n        return result\n\n    def _select(self, dataIndex: int, resultList: List[str], m: int, result: List[List[str]]):\n        \"\"\"\n        Generate combinations with a specified number of elements by recursion.\n        :param dataIndex: The index of the data to be selected.\n        :param resultList: The list of elements in the combination.\n        :param m: The number of elements in each combination.\n        :param result: The list of combinations.\n        :return: None.\n        >>> calc = CombinationCalculator([\"A\", \"B\", \"C\", \"D\"])\n        >>> result = []\n        >>> calc._select(0, [], 2, result)\n        >>> result\n        [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]\n        \"\"\"\n        if len(resultList) == m:\n            result.append(resultList.copy())\n            return\n        \n        for i in range(dataIndex, len(self.datas)):\n            resultList.append(self.datas[i])\n            self._select(i + 1, resultList, m, result)\n            resultList.pop()\n```",
    "33": "```python\nclass DiscountStrategy:\n    \"\"\"\n    This class allows the use of different discount strategies based on shopping credit or shopping cart in a supermarket.\n    \"\"\"\n\n    def __init__(self, customer, cart, promotion=None):\n        \"\"\"\n        Initialize the DiscountStrategy with customer information, a cart of items, and an optional promotion.\n        :param customer: dict, customer information\n        :param cart: list of dicts, a cart of items with details\n        :param promotion: function, optional promotion applied to the order\n        \"\"\"\n        self.customer = customer\n        self.cart = cart\n        self.promotion = promotion\n\n    def total(self):\n        \"\"\"\n        Calculate the total cost of items in the cart.\n        :return: float, total cost of items\n        \"\"\"\n        return sum(item['quantity'] * item['price'] for item in self.cart)\n\n    def due(self):\n        \"\"\"\n        Calculate the final amount to be paid after applying the discount.\n        :return: float, final amount to be paid\n        \"\"\"\n        total_cost = self.total()\n        discount = self.promotion(self) if self.promotion else 0\n        return total_cost - discount\n\n    @staticmethod\n    def FidelityPromo(order):\n        \"\"\"\n        Calculate the discount based on the fidelity points of the customer.\n        :param order: DiscountStrategy, the order to apply the discount to\n        :return: float, discount amount\n        \"\"\"\n        if order.customer['fidelity'] >= 1000:\n            return order.total() * 0.05\n        return 0.0\n\n    @staticmethod\n    def BulkItemPromo(order):\n        \"\"\"\n        Calculate the discount based on bulk item quantity in the order.\n        :param order: DiscountStrategy, the order to apply the discount to\n        :return: float, discount amount\n        \"\"\"\n        discount = sum(item['quantity'] * item['price'] * 0.10 \n                       for item in order.cart if item['quantity'] >= 20)\n        return discount\n\n    @staticmethod\n    def LargeOrderPromo(order):\n        \"\"\"\n        Calculate the discount based on the number of different products in the order.\n        :param order: DiscountStrategy, the order to apply the discount to\n        :return: float, discount amount\n        \"\"\"\n        if len(order.cart) >= 10:\n            return order.total() * 0.07\n        return 0.0\n```",
    "36": "```python\nfrom datetime import datetime\n\nclass EmailClient:\n    \"\"\"\n    This is a class that serves as an email client, implementing functions such as checking emails, determining whether there is sufficient space, and cleaning up space.\n    \"\"\"\n\n    def __init__(self, addr: str, capacity: float) -> None:\n        \"\"\"\n        Initializes the EmailClient class with the email address and the capacity of the email box.\n        :param addr: The email address, str.\n        :param capacity: The capacity of the email box, float.\n        \"\"\"\n        self.addr = addr\n        self.capacity = capacity\n        self.inbox = []\n\n    def send_to(self, recv, content: str, size: float) -> bool:\n        \"\"\"\n        Sends an email to the given email address.\n        :param recv: The email address of the receiver, EmailClient.\n        :param content: The content of the email, str.\n        :param size: The size of the email, float.\n        :return: True if the email is sent successfully, False if the receiver's email box is full.\n        \"\"\"\n        if recv.is_full_with_one_more_email(size):\n            return False\n        \n        email = {\n            'sender': self.addr,\n            'receiver': recv.addr,\n            'content': content,\n            'size': size,\n            'time': datetime.now(),\n            'state': 'unread'\n        }\n        recv.inbox.append(email)\n        return True\n\n    def fetch(self) -> dict:\n        \"\"\"\n        Retrieves the first unread email in the email box and marks it as read.\n        :return: The first unread email in the email box, dict.\n        \"\"\"\n        for email in self.inbox:\n            if email['state'] == 'unread':\n                email['state'] = 'read'\n                return email\n        return None\n\n    def is_full_with_one_more_email(self, size: float) -> bool:\n        \"\"\"\n        Determines whether the email box is full after adding an email of the given size.\n        :param size: The size of the email, float.\n        :return: True if the email box is full, False otherwise.\n        \"\"\"\n        return self.get_occupied_size() + size > self.capacity\n\n    def get_occupied_size(self) -> float:\n        \"\"\"\n        Gets the total size of the emails in the email box.\n        :return: The total size of the emails in the email box, float.\n        \"\"\"\n        return sum(email['size'] for email in self.inbox)\n\n    def clear_inbox(self, size: float) -> None:\n        \"\"\"\n        Clears the email box by deleting the oldest emails until the email box has enough space to accommodate the given size.\n        :param size: The size of the email, float.\n        \"\"\"\n        while self.get_occupied_size() + size > self.capacity and self.inbox:\n            self.inbox.pop(0)  # Remove the oldest email\n```",
    "37": "```python\nclass EncryptionUtils:\n    \"\"\"\n    This class provides methods for encryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.\n    \"\"\"\n\n    def __init__(self, key):\n        \"\"\"\n        Initializes the class with a key.\n        :param key: The key to use for encryption, str.\n        \"\"\"\n        self.key = key\n\n    def caesar_cipher(self, plaintext, shift):\n        \"\"\"\n        Encrypts the plaintext using the Caesar cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :param shift: The number of characters to shift each character in the plaintext, int.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.caesar_cipher(\"abc\", 1)\n        'bcd'\n        \"\"\"\n        ciphertext = ''\n        for char in plaintext:\n            if char.isalpha():\n                shift_base = ord('a') if char.islower() else ord('A')\n                new_char = chr((ord(char) - shift_base + shift) % 26 + shift_base)\n                ciphertext += new_char\n            else:\n                ciphertext += char\n        return ciphertext\n\n    def vigenere_cipher(self, plaintext):\n        \"\"\"\n        Encrypts the plaintext using the Vigenere cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.vigenere_cipher(\"abc\")\n        'kfa'\n        \"\"\"\n        ciphertext = ''\n        key_length = len(self.key)\n        for i, char in enumerate(plaintext):\n            if char.isalpha():\n                shift_base = ord('a') if char.islower() else ord('A')\n                key_char = self.key[i % key_length].lower()\n                shift = ord(key_char) - ord('a')\n                new_char = chr((ord(char) - shift_base + shift) % 26 + shift_base)\n                ciphertext += new_char\n            else:\n                ciphertext += char\n        return ciphertext\n\n    def rail_fence_cipher(self, plain_text, rails):\n        \"\"\"\n        Encrypts the plaintext using the Rail Fence cipher.\n        :param plain_text: The plaintext to encrypt, str.\n        :param rails: The number of rails to use, int.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.rail_fence_cipher(\"abc\", 2)\n        'acb'\n        \"\"\"\n        fence = [''] * rails\n        rail = 0\n        direction = 1  # 1 for down, -1 for up\n\n        for char in plain_text:\n            fence[rail] += char\n            rail += direction\n            if rail == 0 or rail == rails - 1:\n                direction *= -1  # Change direction\n\n        return ''.join(fence)\n```",
    "34": "```python\nfrom docx import Document\nfrom docx.shared import Pt\nfrom docx.enum.text import WD_PARAGRAPH_ALIGNMENT\n\n\nclass DocFileHandler:\n    \"\"\"\n    This class handles Word documents and provides functionalities for reading, writing,\n    and modifying the content of Word documents.\n    \"\"\"\n\n    def __init__(self, file_path):\n        \"\"\"\n        Initializes the DocFileHandler object with the specified file path.\n        :param file_path: str, the path to the Word document file.\n        \"\"\"\n        self.file_path = file_path\n        self.document = Document()\n\n    def read_text(self):\n        \"\"\"\n        Reads the content of a Word document and returns it as a string.\n        :return: str, the content of the Word document.\n        \"\"\"\n        content = []\n        for paragraph in self.document.paragraphs:\n            content.append(paragraph.text)\n        return '\\n'.join(content)\n\n    def write_text(self, content, font_size=12, alignment='left'):\n        \"\"\"\n        Writes the specified content to a Word document.\n        :param content: str, the text content to write.\n        :param font_size: int, optional, the font size of the text (default is 12).\n        :param alignment: str, optional, the alignment of the text ('left', 'center', or 'right'; default is 'left').\n        :return: bool, True if the write operation is successful, False otherwise.\n        \"\"\"\n        try:\n            paragraph = self.document.add_paragraph(content)\n            run = paragraph.runs[0]\n            run.font.size = Pt(font_size)\n            paragraph.alignment = self._get_alignment_value(alignment)\n            return True\n        except Exception as e:\n            print(f\"Error writing text: {e}\")\n            return False\n\n    def add_heading(self, heading, level=1):\n        \"\"\"\n        Adds a heading to the Word document.\n        :param heading: str, the text of the heading.\n        :param level: int, optional, the level of the heading (1, 2, 3, etc.; default is 1).\n        :return: bool, True if the heading is successfully added, False otherwise.\n        \"\"\"\n        try:\n            self.document.add_heading(heading, level=level)\n            return True\n        except Exception as e:\n            print(f\"Error adding heading: {e}\")\n            return False\n\n    def add_table(self, data):\n        \"\"\"\n        Adds a table to the Word document with the specified data.\n        :param data: list of lists, the data to populate the table.\n        :return: bool, True if the table is successfully added, False otherwise.\n        \"\"\"\n        try:\n            table = self.document.add_table(rows=len(data), cols=len(data[0]))\n            for row_idx, row_data in enumerate(data):\n                for col_idx, cell_data in enumerate(row_data):\n                    table.cell(row_idx, col_idx).text = str(cell_data)\n            return True\n        except Exception as e:\n            print(f\"Error adding table: {e}\")\n            return False\n\n    def _get_alignment_value(self, alignment):\n        \"\"\"\n        Returns the alignment value corresponding to the given alignment string.\n        :param alignment: str, the alignment string ('left', 'center', or 'right').\n        :return: int, the alignment value.\n        \"\"\"\n        alignment_map = {\n            'left': WD_PARAGRAPH_ALIGNMENT.LEFT,\n            'center': WD_PARAGRAPH_ALIGNMENT.CENTER,\n            'right': WD_PARAGRAPH_ALIGNMENT.RIGHT\n        }\n        return alignment_map.get(alignment, WD_PARAGRAPH_ALIGNMENT.LEFT)\n\n    def save(self):\n        \"\"\"\n        Saves the Word document to the specified file path.\n        :return: bool, True if the save operation is successful, False otherwise.\n        \"\"\"\n        try:\n            self.document.save(self.file_path)\n            return True\n        except Exception as e:\n            print(f\"Error saving document: {e}\")\n            return False\n```",
    "35": "```python\nclass EightPuzzle:\n    \"\"\"\n    This class is an implementation of the classic 8-puzzle game, including methods for finding the blank tile,\n    making moves, getting possible moves, and solving the puzzle using a breadth-first search algorithm.\n    \"\"\"\n\n    def __init__(self, initial_state):\n        \"\"\"\n        Initializes the initial state of the Eight Puzzle Game and sets the goal state.\n        :param initial_state: a 3x3 list of integers representing the initial state\n        \"\"\"\n        self.initial_state = initial_state\n        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]\n\n    def find_blank(self, state):\n        \"\"\"\n        Find the blank position (0 element) of the current state.\n        :param state: a 3x3 list of integers representing the current state.\n        :return: tuple of (i, j) representing coordinates of the blank block.\n        \"\"\"\n        for i in range(3):\n            for j in range(3):\n                if state[i][j] == 0:\n                    return i, j\n\n    def move(self, state, direction):\n        \"\"\"\n        Makes a move in the specified direction by swapping the blank block with an adjacent block.\n        :param state: a 3x3 list of integers representing the state before moving.\n        :param direction: str, direction to move ('up', 'down', 'left', 'right').\n        :return: new_state, a 3x3 list of integers representing the state after moving.\n        \"\"\"\n        i, j = self.find_blank(state)\n        new_state = [row.copy() for row in state]  # Create a copy of the state\n\n        if direction == 'up' and i > 0:\n            new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]\n        elif direction == 'down' and i < 2:\n            new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]\n        elif direction == 'left' and j > 0:\n            new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]\n        elif direction == 'right' and j < 2:\n            new_state[i][j], new_state[i][j + 1] = new_state[i][j + 1], new_state[i][j]\n        else:\n            return state  # No movement possible, return the original state\n\n        return new_state\n\n    def get_possible_moves(self, state):\n        \"\"\"\n        Finds all possible moving directions based on the current state.\n        :param state: a 3x3 list of integers representing the current state.\n        :return: a list of strings representing possible moving directions.\n        \"\"\"\n        i, j = self.find_blank(state)\n        moves = []\n\n        if i > 0: moves.append('up')\n        if i < 2: moves.append('down')\n        if j > 0: moves.append('left')\n        if j < 2: moves.append('right')\n\n        return moves\n\n    def solve(self):\n        \"\"\"\n        Uses BFS algorithm to find the path solution from the initial state to the goal state.\n        :return: path, a list of strings representing the solution to reach the goal state.\n        \"\"\"\n        from collections import deque\n\n        open_list = deque([(self.initial_state, [])])  # Queue of (state, path)\n        visited = set()  # Track visited states\n\n        while open_list:\n            current_state, path = open_list.popleft()\n            visited.add(tuple(map(tuple, current_state)))  # Add to visited\n\n            if current_state == self.goal_state:\n                return path\n\n            for move_direction in self.get_possible_moves(current_state):\n                new_state = self.move(current_state, move_direction)\n                if tuple(map(tuple, new_state)) not in visited:\n                    open_list.append((new_state, path + [move_direction]))\n\n        return []  # Return empty if no solution is found\n```",
    "38": "```python\nimport openpyxl\n\n\nclass ExcelProcessor:\n    \"\"\"\n    A class for processing Excel files, including reading and writing Excel data,\n    as well as processing specific operations and saving as a new Excel file.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def read_excel(self, file_name):\n        \"\"\"\n        Read data from an Excel file.\n        \n        :param file_name: str, Excel file name to read\n        :return: list of data, Data in Excel\n        \"\"\"\n        workbook = openpyxl.load_workbook(file_name)\n        sheet = workbook.active\n        data = []\n\n        for row in sheet.iter_rows(values_only=True):\n            data.append(row)\n\n        return data\n\n    def write_excel(self, data, file_name):\n        \"\"\"\n        Write data to the specified Excel file.\n        \n        :param data: list, Data to be written\n        :param file_name: str, Excel file name to write to\n        :return: int, 1 for successful writing, 0 for failed writing\n        \"\"\"\n        try:\n            workbook = openpyxl.Workbook()\n            sheet = workbook.active\n\n            for row in data:\n                sheet.append(row)\n\n            workbook.save(file_name)\n            return 1\n        except Exception as e:\n            print(f\"Error writing Excel file: {e}\")\n            return 0\n\n    def process_excel_data(self, N, save_file_name):\n        \"\"\"\n        Change the specified column in the Excel file to uppercase.\n        \n        :param N: int, The serial number of the column to change (1-indexed)\n        :param save_file_name: str, source file name\n        :return: (int, str), The former is the return value of write_excel,\n                 while the latter is the saved file name of the processed data\n        \"\"\"\n        data = self.read_excel(save_file_name)\n\n        # Convert the specified column to uppercase\n        for i in range(1, len(data)):\n            if len(data[i]) >= N:\n                data[i] = list(data[i])  # Convert tuple to list to modify\n                data[i][N - 1] = str(data[i][N - 1]).upper()  # Change to uppercase\n                data[i] = tuple(data[i])  # Convert back to tuple\n\n        output_file_name = f\"processed_{save_file_name}\"\n        success = self.write_excel(data, output_file_name)\n\n        return success, output_file_name\n```",
    "40": "```python\nclass FitnessTracker:\n    \"\"\"\n    A class to track fitness metrics including BMI (Body Mass Index) and calorie intake based on user's height, weight, age, and sex.\n    \"\"\"\n\n    def __init__(self, height: float, weight: float, age: int, sex: str) -> None:\n        \"\"\"\n        Initialize the class with height, weight, age, and sex.\n        :param height: User's height in meters.\n        :param weight: User's weight in kilograms.\n        :param age: User's age in years.\n        :param sex: User's sex, either 'male' or 'female'.\n        \"\"\"\n        self.height = height\n        self.weight = weight\n        self.age = age\n        self.sex = sex\n\n    def get_BMI(self) -> float:\n        \"\"\"\n        Calculate the BMI based on the height and weight.\n        :return: BMI, which is the weight divided by the square of height.\n        \"\"\"\n        return self.weight / (self.height ** 2)\n\n    def condition_judge(self) -> int:\n        \"\"\"\n        Judge the condition of the user based on the BMI standard.\n        :return: 1 if the user is too fat, -1 if the user is too thin, 0 if the user is normal.\n        \"\"\"\n        bmi = self.get_BMI()\n        if self.sex == \"male\":\n            if bmi < 20:\n                return -1\n            elif bmi > 25:\n                return 1\n            else:\n                return 0\n        elif self.sex == \"female\":\n            if bmi < 19:\n                return -1\n            elif bmi > 24:\n                return 1\n            else:\n                return 0\n        else:\n            raise ValueError(\"Sex must be either 'male' or 'female'.\")\n\n    def calculate_calorie_intake(self) -> float:\n        \"\"\"\n        Calculate the calorie intake based on the user's condition and BMR (Basal Metabolic Rate).\n        :return: Calorie intake based on user's condition.\n        \"\"\"\n        bmr = (10 * self.weight) + (6.25 * self.height * 100) - (5 * self.age)\n        if self.sex == \"female\":\n            bmr -= 161\n        elif self.sex == \"male\":\n            bmr += 5\n        else:\n            raise ValueError(\"Sex must be either 'male' or 'female'.\")\n\n        condition = self.condition_judge()\n        if condition == 1:  # Too fat\n            return bmr * 1.2\n        elif condition == -1:  # Too thin\n            return bmr * 1.6\n        else:  # Normal\n            return bmr * 1.4\n```",
    "32": "```python\nclass DecryptionUtils:\n    \"\"\"\n    This is a class that provides methods for decryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.\n    \"\"\"\n\n    def __init__(self, key):\n        \"\"\"\n        Initializes the decryption utility with a key.\n        :param key: The key to use for decryption, str.\n        \"\"\"\n        self.key = key\n\n    def caesar_decipher(self, ciphertext, shift):\n        \"\"\"\n        Deciphers the given ciphertext using the Caesar cipher.\n        :param ciphertext: The ciphertext to decipher, str.\n        :param shift: The shift to use for decryption, int.\n        :return: The deciphered plaintext, str.\n        >>> d = DecryptionUtils('key')\n        >>> d.caesar_decipher('ifmmp', 1)\n        'hello'\n        \"\"\"\n        plaintext = []\n        for char in ciphertext:\n            if char.isalpha():\n                shift_amount = shift % 26\n                new_char = chr((ord(char) - shift_amount - 97) % 26 + 97) if char.islower() else chr((ord(char) - shift_amount - 65) % 26 + 65)\n                plaintext.append(new_char)\n            else:\n                plaintext.append(char)\n        return ''.join(plaintext)\n\n    def vigenere_decipher(self, ciphertext):\n        \"\"\"\n        Deciphers the given ciphertext using the Vigenere cipher.\n        :param ciphertext: The ciphertext to decipher, str.\n        :return: The deciphered plaintext, str.\n        >>> d = DecryptionUtils('key')\n        >>> d.vigenere_decipher('ifmmp')\n        'ybocl'\n        \"\"\"\n        plaintext = []\n        key_length = len(self.key)\n        for i, char in enumerate(ciphertext):\n            if char.isalpha():\n                shift_amount = ord(self.key[i % key_length].lower()) - 97\n                new_char = chr((ord(char) - shift_amount - 97) % 26 + 97) if char.islower() else chr((ord(char) - shift_amount - 65) % 26 + 65)\n                plaintext.append(new_char)\n            else:\n                plaintext.append(char)\n        return ''.join(plaintext)\n\n    def rail_fence_decipher(self, encrypted_text, rails):\n        \"\"\"\n        Deciphers the given ciphertext using the Rail Fence cipher.\n        :param encrypted_text: The ciphertext to decipher, str.\n        :param rails: The number of rails to use for decryption, int.\n        :return: The deciphered plaintext, str.\n        >>> d = DecryptionUtils('key')\n        >>> d.rail_fence_decipher('Hoo!el,Wrdl l', 3)\n        'Hello, World!'\n        \"\"\"\n        length = len(encrypted_text)\n        rail = [['\\n' for _ in range(length)] for _ in range(rails)]\n        dir_down = None\n        row, col = 0, 0\n\n        for i in range(length):\n            if row == 0:\n                dir_down = True\n            if row == rails - 1:\n                dir_down = False\n            \n            rail[row][col] = '*'\n            col += 1\n            \n            if dir_down:\n                row += 1\n            else:\n                row -= 1\n\n        index = 0\n        for i in range(rails):\n            for j in range(length):\n                if (rail[i][j] == '*' and index < len(encrypted_text)):\n                    rail[i][j] = encrypted_text[index]\n                    index += 1\n\n        result = []\n        row, col = 0, 0\n        for i in range(length):\n            if row == 0:\n                dir_down = True\n            if row == rails - 1:\n                dir_down = False\n\n            if rail[row][col] != '\\n':\n                result.append(rail[row][col])\n                col += 1\n            \n            if dir_down:\n                row += 1\n            else:\n                row -= 1\n\n        return ''.join(result)\n```",
    "41": "```python\nclass GomokuGame:\n    \"\"\"\n    This class is an implementation of a Gomoku game, supporting for making moves, checking for a winner, and checking if there are five consecutive symbols on the game board.\n    \"\"\"\n\n    def __init__(self, board_size):\n        \"\"\"\n        Initializes the game with a given board size.\n        It initializes the board with empty spaces and sets the current player symbol as 'X'.\n        \"\"\"\n        self.board_size = board_size\n        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        \"\"\"\n        Makes a move at the given row and column.\n        If the move is valid, it places the current player's symbol on the board\n        and changes the current player to the other player.\n        :param row: int, the row index of this move\n        :param col: int, the column index\n        :return: True if the move is valid, or False otherwise.\n        \"\"\"\n        if self.is_valid_move(row, col):\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        return False\n\n    def is_valid_move(self, row, col):\n        \"\"\"\n        Checks whether a move is valid.\n        :param row: int, the row index\n        :param col: int, the column index\n        :return: True if the move is valid, otherwise False.\n        \"\"\"\n        return 0 <= row < self.board_size and 0 <= col < self.board_size and self.board[row][col] == ' '\n\n    def check_winner(self):\n        \"\"\"\n        Checks if there is a winner by looking for five in a row in all directions.\n        :return: the symbol of the winning player (either 'X' or 'O') if there is a winner, or None otherwise.\n        \"\"\"\n        for row in range(self.board_size):\n            for col in range(self.board_size):\n                if self.board[row][col] != ' ':\n                    if self._check_five_in_a_row(row, col, (1, 0)) or \\\n                       self._check_five_in_a_row(row, col, (0, 1)) or \\\n                       self._check_five_in_a_row(row, col, (1, 1)) or \\\n                       self._check_five_in_a_row(row, col, (1, -1)):\n                        return self.board[row][col]\n        return None\n\n    def _check_five_in_a_row(self, row, col, direction):\n        \"\"\"\n        Checks if there are five consecutive symbols of the same player in a row\n        starting from a given cell in a given direction.\n        :param row: int, row of the given cell\n        :param col: int, column of the given cell\n        :param direction: tuple, (dx, dy)\n        :return: True if there are five consecutive symbols of the same player, and False otherwise.\n        \"\"\"\n        count = 0\n        dx, dy = direction\n        symbol = self.board[row][col]\n\n        for i in range(5):\n            new_row = row + i * dx\n            new_col = col + i * dy\n            if 0 <= new_row < self.board_size and 0 <= new_col < self.board_size:\n                if self.board[new_row][new_col] == symbol:\n                    count += 1\n                else:\n                    break\n            else:\n                break\n        \n        return count == 5\n```",
    "39": "```python\nfrom collections import deque\n\nclass ExpressionCalculator:\n    \"\"\"\n    This class performs calculations with basic arithmetic operations: addition, subtraction,\n    multiplication, division, and modulo in postfix notation.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the expression calculator.\n        \"\"\"\n        self.postfix_stack = deque()\n        self.operator_priority = {'+': 1, '-': 1, '*': 2, '/': 2, '%': 2}\n\n    def calculate(self, expression):\n        \"\"\"\n        Calculate the result of the given postfix expression.\n        \n        :param expression: string, the postfix expression to be calculated\n        :return: float, the calculated result\n        \n        >>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.calculate(\"2 3 4 * +\")\n        14.0\n        \"\"\"\n        tokens = expression.split()\n        stack = []\n\n        for token in tokens:\n            if token.isdigit():\n                stack.append(float(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                result = self._calculate(first, second, token)\n                stack.append(result)\n\n        return stack[0]\n\n    def prepare(self, expression):\n        \"\"\"\n        Prepare the infix expression for conversion to postfix notation.\n        \n        :param expression: string, the infix expression to be prepared\n        \n        >>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.prepare(\"2 + 3 * 4\")\n        >>> expression_calculator.postfix_stack\n        deque(['2', '3', '4', '*', '+'])\n        \"\"\"\n        output = []\n        operators = deque()\n        tokens = expression.replace(\" \", \"\")\n\n        for token in tokens:\n            if token.isdigit():\n                output.append(token)\n            elif token in self.operator_priority:\n                while (operators and \n                       self.operator_priority[token] <= self.operator_priority[operators[-1]]):\n                    output.append(operators.pop())\n                operators.append(token)\n\n        while operators:\n            output.append(operators.pop())\n\n        self.postfix_stack = deque(output)\n\n    @staticmethod\n    def is_operator(c):\n        \"\"\"\n        Check if a character is an operator.\n        \n        :param c: string, the character to be checked\n        :return: bool, True if the character is an operator, False otherwise\n        \n        >>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.is_operator(\"+\")\n        True\n        \"\"\"\n        return c in {'+', '-', '*', '/', '%'}\n\n    def compare(self, cur, peek):\n        \"\"\"\n        Compare the precedence of two operators.\n        \n        :param cur: string, the current operator\n        :param peek: string, the operator at the top of the operator stack\n        :return: bool, True if the current operator has higher or equal precedence, False otherwise\n        \n        >>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.compare(\"+\", \"-\")\n        True\n        \"\"\"\n        return self.operator_priority[cur] >= self.operator_priority[peek]\n\n    @staticmethod\n    def _calculate(first_value, second_value, current_op):\n        \"\"\"\n        Perform the mathematical calculation based on the given operands and operator.\n        \n        :param first_value: float, the first operand\n        :param second_value: float, the second operand\n        :param current_op: string, the operator\n        :return: float, the calculated result\n        \n        >>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator._calculate(2, 3, \"+\")\n        5.0\n        \"\"\"\n        if current_op == '+':\n            return first_value + second_value\n        elif current_op == '-':\n            return first_value - second_value\n        elif current_op == '*':\n            return first_value * second_value\n        elif current_op == '/':\n            return first_value / second_value\n        elif current_op == '%':\n            return first_value % second_value\n\n    @staticmethod\n    def transform(expression):\n        \"\"\"\n        Transform the infix expression to a format suitable for conversion.\n        \n        :param expression: string, the infix expression to be transformed\n        :return: string, the transformed expression\n        \n        >>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.transform(\"2 + 3 * 4\")\n        \"2+3*4\"\n        \"\"\"\n        return expression.replace(\" \", \"\")\n```",
    "43": "```python\nclass HRManagementSystem:\n    \"\"\"\n    This is a class as personnel management system that implements functions such as adding, deleting, querying, and updating employees.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the HRManagementSystem with an attribute employees, which is an empty dictionary.\n        \"\"\"\n        self.employees = {}\n\n    def add_employee(self, employee_id, name, position, department, salary):\n        \"\"\"\n        Add a new employee to the HRManagementSystem.\n        :param employee_id: The employee's id, int.\n        :param name: The employee's name, str.\n        :param position: The employee's position, str.\n        :param department: The employee's department, str.\n        :param salary: The employee's salary, int.\n        :return: If the employee is already in the HRManagementSystem, returns False, otherwise, returns True.\n        \"\"\"\n        if employee_id in self.employees:\n            return False\n        self.employees[employee_id] = {\n            'name': name,\n            'position': position,\n            'department': department,\n            'salary': salary\n        }\n        return True\n\n    def remove_employee(self, employee_id):\n        \"\"\"\n        Remove an employee from the HRManagementSystem.\n        :param employee_id: The employee's id, int.\n        :return: If the employee is already in the HRManagementSystem, returns True, otherwise, returns False.\n        \"\"\"\n        return self.employees.pop(employee_id, None) is not None\n\n    def update_employee(self, employee_id: int, employee_info: dict):\n        \"\"\"\n        Update an employee's information in the HRManagementSystem.\n        :param employee_id: The employee's id, int.\n        :param employee_info: The employee's information, dict.\n        :return: If the employee is already in the HRManagementSystem, returns True, otherwise, returns False.\n        \"\"\"\n        if employee_id not in self.employees:\n            return False\n        self.employees[employee_id].update(employee_info)\n        return True\n\n    def get_employee(self, employee_id):\n        \"\"\"\n        Get an employee's information from the HRManagementSystem.\n        :param employee_id: The employee's id, int.\n        :return: If the employee is already in the HRManagementSystem, returns the employee's information, otherwise, returns False.\n        \"\"\"\n        return self.employees.get(employee_id, False)\n\n    def list_employees(self):\n        \"\"\"\n        List all employees' information in the HRManagementSystem.\n        :return: A dictionary of all employees' information.\n        \"\"\"\n        return {employee_id: {**{'employee_ID': employee_id}, **info} for employee_id, info in self.employees.items()}\n```",
    "31": "```python\nimport math\nfrom statistics import mean, stdev\n\nclass DataStatistics4:\n    \"\"\"\n    This class performs advanced mathematical calculations and statistics,\n    including correlation coefficient, skewness, kurtosis, and probability density function (PDF)\n    for a normal distribution.\n    \"\"\"\n\n    @staticmethod\n    def correlation_coefficient(data1, data2):\n        \"\"\"\n        Calculate the correlation coefficient of two sets of data.\n        :param data1: The first set of data, list.\n        :param data2: The second set of data, list.\n        :return: The correlation coefficient, float.\n        \"\"\"\n        n = len(data1)\n        if n != len(data2):\n            raise ValueError(\"Data lists must have the same length.\")\n        \n        mean1, mean2 = mean(data1), mean(data2)\n        numerator = sum((x - mean1) * (y - mean2) for x, y in zip(data1, data2))\n        denominator = math.sqrt(sum((x - mean1) ** 2 for x in data1) * sum((y - mean2) ** 2 for y in data2))\n        \n        return numerator / denominator if denominator != 0 else 0.0\n\n    @staticmethod\n    def skewness(data):\n        \"\"\"\n        Calculate the skewness of a set of data.\n        :param data: The input data list, list.\n        :return: The skewness, float.\n        \"\"\"\n        n = len(data)\n        if n < 3:\n            raise ValueError(\"At least three data points are required.\")\n        \n        mean_val = mean(data)\n        std_dev = stdev(data)\n        skew = (n / ((n - 1) * (n - 2))) * sum(((x - mean_val) / std_dev) ** 3 for x in data)\n        \n        return skew\n\n    @staticmethod\n    def kurtosis(data):\n        \"\"\"\n        Calculate the kurtosis of a set of data.\n        :param data: The input data list, list.\n        :return: The kurtosis, float.\n        \"\"\"\n        n = len(data)\n        if n < 4:\n            raise ValueError(\"At least four data points are required.\")\n        \n        mean_val = mean(data)\n        std_dev = stdev(data)\n        kurt = (n * (n + 1) * sum(((x - mean_val) / std_dev) ** 4 for x in data) - 3 * (n - 1) ** 2) / ((n - 2) * (n - 3))\n        \n        return kurt\n\n    @staticmethod\n    def pdf(data, mu, sigma):\n        \"\"\"\n        Calculate the probability density function (PDF) of a set of data under a normal distribution.\n        :param data: The input data list, list.\n        :param mu: The mean of the normal distribution, float.\n        :param sigma: The standard deviation of the normal distribution, float.\n        :return: The probability density function (PDF), list.\n        \"\"\"\n        if sigma <= 0:\n            raise ValueError(\"Standard deviation must be positive.\")\n        \n        pdf_values = [(1 / (sigma * math.sqrt(2 * math.pi))) * math.exp(-((x - mu) ** 2) / (2 * sigma ** 2)) for x in data]\n        \n        return pdf_values\n```",
    "42": "```python\nclass Hotel:\n    \"\"\"\n    This is a class for hotel management system, managing the booking, check-in, check-out, and availability of rooms in a hotel with different room types.\n    \"\"\"\n\n    def __init__(self, name, rooms):\n        \"\"\"\n        Initialize the hotel name, available rooms, and booked rooms.\n        :param name: str, the hotel name\n        :param rooms: dict, available rooms by type\n        \"\"\"\n        self.name = name\n        self.available_rooms = rooms\n        self.booked_rooms = {room_type: {} for room_type in rooms}\n\n    def book_room(self, room_type, room_number, name):\n        \"\"\"\n        Book a specified number of rooms for a guest.\n        :param room_type: str, type of room to book\n        :param room_number: int, number of rooms to book\n        :param name: str, guest name\n        :return: str or int or bool, booking status\n        \"\"\"\n        if room_type not in self.available_rooms:\n            return False\n\n        available = self.available_rooms[room_type]\n        if room_number <= available:\n            self.available_rooms[room_type] -= room_number\n            self.booked_rooms[room_type][name] = self.booked_rooms[room_type].get(name, 0) + room_number\n            return 'Success!'\n        elif available > 0:\n            return available\n        return False\n\n    def check_in(self, room_type, room_number, name):\n        \"\"\"\n        Check in a guest to their booked room.\n        :param room_type: str, type of room to check in\n        :param room_number: int, number of rooms to check in\n        :param name: str, guest name\n        :return: bool, check-in status\n        \"\"\"\n        if room_type not in self.booked_rooms or name not in self.booked_rooms[room_type]:\n            return False\n\n        booked_rooms = self.booked_rooms[room_type][name]\n        if room_number > booked_rooms:\n            return False\n\n        if room_number == booked_rooms:\n            del self.booked_rooms[room_type][name]\n        else:\n            self.booked_rooms[room_type][name] -= room_number\n\n        return True\n\n    def check_out(self, room_type, room_number):\n        \"\"\"\n        Check out a specified number of rooms and update available rooms.\n        :param room_type: str, type of room to check out\n        :param room_number: int, number of rooms to check out\n        \"\"\"\n        if room_type in self.available_rooms:\n            self.available_rooms[room_type] += room_number\n        else:\n            self.available_rooms[room_type] = room_number\n\n    def get_available_rooms(self, room_type):\n        \"\"\"\n        Get the number of specific type of available rooms.\n        :param room_type: str, the room type to check\n        :return: int, the remaining number of this type of rooms\n        \"\"\"\n        return self.available_rooms.get(room_type, 0)\n```",
    "45": "```python\nfrom PIL import Image, ImageEnhance\n\nclass ImageProcessor:\n    \"\"\"\n    This class processes images, including loading, saving, resizing, rotating, and adjusting brightness.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the image attribute.\"\"\"\n        self.image = None\n\n    def load_image(self, image_path):\n        \"\"\"\n        Load an image using PIL.\n        :param image_path: str, path of the image to be loaded.\n        \"\"\"\n        self.image = Image.open(image_path)\n\n    def save_image(self, save_path):\n        \"\"\"\n        Save the image to a specified path if an image has been loaded.\n        :param save_path: str, the path where the image will be saved.\n        \"\"\"\n        if self.image is not None:\n            self.image.save(save_path)\n        else:\n            raise ValueError(\"No image has been loaded to save.\")\n\n    def resize_image(self, width, height):\n        \"\"\"\n        Resize the image if it has been loaded.\n        :param width: int, target width of the image.\n        :param height: int, target height of the image.\n        \"\"\"\n        if self.image is not None:\n            self.image = self.image.resize((width, height))\n        else:\n            raise ValueError(\"No image has been loaded to resize.\")\n\n    def rotate_image(self, degrees):\n        \"\"\"\n        Rotate the image if it has been loaded.\n        :param degrees: float, degrees to rotate the image.\n        \"\"\"\n        if self.image is not None:\n            self.image = self.image.rotate(degrees)\n        else:\n            raise ValueError(\"No image has been loaded to rotate.\")\n\n    def adjust_brightness(self, factor):\n        \"\"\"\n        Adjust the brightness of the image if it has been loaded.\n        :param factor: float, brightness factor (0.0 for black, 1.0 for original).\n        \"\"\"\n        if self.image is not None:\n            enhancer = ImageEnhance.Brightness(self.image)\n            self.image = enhancer.enhance(factor)\n        else:\n            raise ValueError(\"No image has been loaded to adjust brightness.\")\n```",
    "48": "```python\nimport socket\nimport re\n\n\nclass IpUtil:\n    \"\"\"\n    A utility class for IP address operations,\n    including validation of IPv4/IPv6 addresses and hostname retrieval.\n    \"\"\"\n\n    @staticmethod\n    def is_valid_ipv4(ip_address):\n        \"\"\"\n        Check if the given IP address is a valid IPv4 address.\n        :param ip_address: str, the IP address to check\n        :return: bool, True if the IP address is valid, False otherwise\n        >>> IpUtil.is_valid_ipv4('192.168.0.123')\n        True\n        >>> IpUtil.is_valid_ipv4('256.0.0.0')\n        False\n        \"\"\"\n        pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n        if re.match(pattern, ip_address):\n            parts = list(map(int, ip_address.split('.')))\n            return all(0 <= part < 256 for part in parts)\n        return False\n\n    @staticmethod\n    def is_valid_ipv6(ip_address):\n        \"\"\"\n        Check if the given IP address is a valid IPv6 address.\n        :param ip_address: str, the IP address to check\n        :return: bool, True if the IP address is valid, False otherwise\n        >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334')\n        True\n        >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:::8a2e:0370:7334')\n        False\n        \"\"\"\n        try:\n            socket.inet_pton(socket.AF_INET6, ip_address)\n            return True\n        except socket.error:\n            return False\n\n    @staticmethod\n    def get_hostname(ip_address):\n        \"\"\"\n        Get the hostname associated with the given IP address.\n        :param ip_address: str, the IP address to get the hostname for\n        :return: str, the hostname associated with the IP address\n        >>> IpUtil.get_hostname('110.242.68.3')\n        'www.baidu.com'\n        >>> IpUtil.get_hostname('10.0.0.1')\n        'localhost'\n        \"\"\"\n        try:\n            return socket.gethostbyaddr(ip_address)[0]\n        except socket.herror:\n            return 'Hostname not found'\n```",
    "44": "Here's the cleaned-up and functional code for the `HtmlUtil` class that includes the implementation of the required methods. The methods have been designed to be easy to read and maintain while adhering to high software quality standards.\n\n```python\nimport re\nfrom bs4 import BeautifulSoup\n\nclass HtmlUtil:\n    \"\"\"\n    A utility class for formatting and extracting code from HTML text,\n    including cleaning up text and converting certain elements into specific marks.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize a series of labels for different types of content.\n        \"\"\"\n        self.SPACE_MARK = '-SPACE-'\n        self.JSON_MARK = '-JSON-'\n        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'\n        self.URL_MARK = '-URL-'\n        self.NUMBER_MARK = '-NUMBER-'\n        self.TRACE_MARK = '-TRACE-'\n        self.COMMAND_MARK = '-COMMAND-'\n        self.COMMENT_MARK = '-COMMENT-'\n        self.CODE_MARK = '-CODE-'\n\n    @staticmethod\n    def _format_line_feed(text):\n        \"\"\"\n        Replace consecutive line breaks with a single line break.\n        \n        :param text: string with consecutive line breaks.\n        :return: string with replaced line breaks.\n        \"\"\"\n        return re.sub(r'\\n+', '\\n', text).strip()\n\n    def format_line_html_text(self, html_text):\n        \"\"\"\n        Extracts text from HTML, removing code sections and adding a marker for code.\n        \n        :param html_text: string containing HTML.\n        :return: cleaned text with -CODE- markers for code sections.\n        \"\"\"\n        soup = BeautifulSoup(html_text, 'html.parser')\n        \n        # Extract text and code and replace code sections with -CODE- markers\n        text_parts = []\n        code_parts = []\n        \n        for element in soup.body.find_all(True):  # find all tags\n            if element.name in ['pre', 'code']:\n                code_parts.append(element.get_text())\n            else:\n                text_parts.append(element.get_text())\n        \n        cleaned_text = self._format_line_feed('\\n'.join(text_parts))\n        code_marked_text = '\\n'.join([cleaned_text] + [self.CODE_MARK for _ in code_parts])\n        \n        return code_marked_text\n\n    def extract_code_from_html_text(self, html_text):\n        \"\"\"\n        Extracts code from the HTML body.\n        \n        :param html_text: string containing HTML.\n        :return: list of code snippets found in the HTML.\n        \"\"\"\n        soup = BeautifulSoup(html_text, 'html.parser')\n        code_snippets = []\n\n        # Extract code from <pre> and <code> tags\n        for element in soup.find_all(['pre', 'code']):\n            code_snippets.append(element.get_text())\n\n        return code_snippets\n\n# Example usage\nif __name__ == \"__main__\":\n    html_text = \"\"\"\n    <html>\n    <body>\n        <h1>Title</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n            print(i)</code></pre>\n    </body>\n    </html>\n    \"\"\"\n\n    htmlutil = HtmlUtil()\n    formatted_text = htmlutil.format_line_html_text(html_text)\n    print(formatted_text)\n    \n    extracted_code = htmlutil.extract_code_from_html_text(html_text)\n    print(extracted_code)\n```\n\n### Key Features\n- **Code Clarity**: Each method has a clear purpose and is well-documented.\n- **Modularity**: The class is designed to separate concerns, with methods dedicated to specific tasks.\n- **Robustness**: The use of `BeautifulSoup` ensures that HTML parsing is handled correctly.\n- **Testing**: Sample usage is included to demonstrate how to use the class effectively.",
    "47": "```python\nimport re\n\nclass IPAddress:\n    \"\"\"\n    This is a class to process IP Address, including validating, getting the octets and obtaining the binary representation of a valid IP address.\n    \"\"\"\n\n    def __init__(self, ip_address):\n        \"\"\"\n        Initialize the IP address to the specified address\n        :param ip_address: string\n        \"\"\"\n        self.ip_address = ip_address\n\n    def is_valid(self):\n        \"\"\"\n        Judge whether the IP address is valid, that is, whether the IP address is composed of four decimal digits separated by '.'. \n        Each digit is greater than or equal to 0 and less than or equal to 255.\n        \n        :return: bool\n        >>> ipaddress = IPAddress(\"10.10.10.10\")\n        >>> ipaddress.is_valid()\n        True\n        \"\"\"\n        pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n        return bool(re.match(pattern, self.ip_address))\n\n    def get_octets(self):\n        \"\"\"\n        If the IP address is valid, the list of four decimal numbers separated by \".\" constituting the IP address is returned; \n        otherwise, an empty list is returned.\n        \n        :return: list\n        >>> ipaddress = IPAddress(\"10.10.10.10\")\n        >>> ipaddress.get_octets()\n        ['10', '10', '10', '10']\n        \"\"\"\n        if self.is_valid():\n            return self.ip_address.split('.')\n        return []\n\n    def get_binary(self):\n        \"\"\"\n        If the IP address is valid, return the binary form of the IP address; otherwise, return ''.\n        \n        :return: string\n        >>> ipaddress = IPAddress(\"10.10.10.10\")\n        >>> ipaddress.get_binary()\n        '00001010.00001010.00001010.00001010'\n        \"\"\"\n        if self.is_valid():\n            return '.'.join(format(int(octet), '08b') for octet in self.get_octets())\n        return ''\n```",
    "53": "```python\nimport re\nimport string\n\nclass LongestWord:\n    \"\"\"\n    This class allows adding words to a list and finding the longest word in a given sentence \n    by comparing the words with those in the word list.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize a list of words.\n        \"\"\"\n        self.word_list = []\n\n    def add_word(self, word):\n        \"\"\"\n        Append the input word into self.word_list.\n        \n        :param word: str, input word\n        \"\"\"\n        if isinstance(word, str) and word:\n            self.word_list.append(word)\n\n    def find_longest_word(self, sentence):\n        \"\"\"\n        Remove punctuation marks and split a sentence into a list of words. \n        Find the longest split word that is in the self.word_list.\n        Words are strictly case-sensitive.\n        \n        :param sentence: a sentence str\n        :return: longest split word that is in the self.word_list. Returns '' if self.word_list is empty.\n        \n        >>> longestWord = LongestWord()\n        >>> longestWord.add_word('A')\n        >>> longestWord.add_word('aM')\n        >>> longestWord.find_longest_word('I am a student.')\n        'a'\n        \"\"\"\n        if not self.word_list:\n            return ''\n\n        # Remove punctuation and split the sentence into words\n        words = re.findall(r'\\b\\w+\\b', sentence)\n\n        # Find the longest word in the given words that is present in the word list\n        longest = ''\n        for word in words:\n            if word in self.word_list and len(word) > len(longest):\n                longest = word\n                \n        return longest\n```",
    "49": "```python\nclass JobMarketplace:\n    \"\"\"\n    This class provides functionalities to publish positions, remove positions, submit resumes,\n    withdraw resumes, search for positions, and obtain candidate information.\n    \"\"\"\n\n    def __init__(self):\n        self.job_listings = []\n        self.resumes = []\n\n    def post_job(self, job_title, company, requirements):\n        \"\"\"\n        Publish a job position and add it to the job_listings list.\n        \n        :param job_title: The title of the position, str.\n        :param company: The company of the position, str.\n        :param requirements: The requirements of the position, list.\n        \"\"\"\n        job = {\n            'job_title': job_title,\n            'company': company,\n            'requirements': requirements\n        }\n        self.job_listings.append(job)\n\n    def remove_job(self, job):\n        \"\"\"\n        Remove a job position from the job_listings list.\n        \n        :param job: The position information to be removed, dict.\n        \"\"\"\n        if job in self.job_listings:\n            self.job_listings.remove(job)\n\n    def submit_resume(self, name, skills, experience):\n        \"\"\"\n        Submit a resume and add it to the resumes list.\n        \n        :param name: The name of the candidate, str.\n        :param skills: The skills of the candidate, list.\n        :param experience: The experience of the candidate, str.\n        \"\"\"\n        resume = {\n            'name': name,\n            'skills': skills,\n            'experience': experience\n        }\n        self.resumes.append(resume)\n\n    def withdraw_resume(self, resume):\n        \"\"\"\n        Withdraw a resume from the resumes list.\n        \n        :param resume: The resume information to be removed, dict.\n        \"\"\"\n        if resume in self.resumes:\n            self.resumes.remove(resume)\n\n    def search_jobs(self, criteria):\n        \"\"\"\n        Search for job positions that meet the given criteria.\n        \n        :param criteria: The search criteria, str.\n        :return: A list of job positions that match the criteria.\n        \"\"\"\n        matching_jobs = [\n            job for job in self.job_listings\n            if any(skill in job['requirements'] for skill in criteria)\n        ]\n        return matching_jobs\n\n    def get_job_applicants(self, job):\n        \"\"\"\n        Obtain candidate information for a specific job position.\n        \n        :param job: The position information, dict.\n        :return: A list of candidate information that meets the job requirements.\n        \"\"\"\n        applicants = [\n            resume for resume in self.resumes\n            if all(skill in resume['skills'] for skill in job['requirements'])\n        ]\n        return applicants\n```",
    "55": "```python\nclass Manacher:\n    \"\"\"\n    This class implements the Manacher algorithm to find the longest palindromic substring in a given string.\n    \"\"\"\n\n    def __init__(self, input_string: str) -> None:\n        \"\"\"\n        Initializes the Manacher class with the given input_string.\n        :param input_string: The input string to be searched, str.\n        \"\"\"\n        self.input_string = input_string\n\n    def preprocess_string(self) -> str:\n        \"\"\"\n        Preprocesses the input string by inserting a delimiter between characters.\n        :return: Preprocessed string, str.\n        \"\"\"\n        return '|' + '|'.join(self.input_string) + '|'\n\n    def longest_palindromic_substring(self) -> str:\n        \"\"\"\n        Finds the longest palindromic substring in the given string.\n        :return: The longest palindromic substring, str.\n        \"\"\"\n        processed = self.preprocess_string()\n        n = len(processed)\n        p = [0] * n\n        center = right = 0\n\n        for i in range(n):\n            mirror = 2 * center - i\n\n            if i < right:\n                p[i] = min(right - i, p[mirror])\n\n            a, b = i + (1 + p[i]), i - (1 + p[i])\n            while a < n and b >= 0 and processed[a] == processed[b]:\n                p[i] += 1\n                a += 1\n                b -= 1\n\n            if i + p[i] > right:\n                center, right = i, i + p[i]\n\n        max_length = max(p)\n        center_index = p.index(max_length)\n\n        start = (center_index - max_length) // 2\n        return self.input_string[start:start + max_length]\n\n# Example usage:\n# manacher = Manacher('ababa')\n# print(manacher.longest_palindromic_substring())  # Output: 'ababa'\n```",
    "52": "```python\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk import pos_tag, word_tokenize\nimport string\n\nnltk.download('averaged_perceptron_tagger')\nnltk.download('punkt')\nnltk.download('wordnet')\n\nclass Lemmatization:\n    \"\"\"\n    This class performs lemmatization and part-of-speech tagging on sentences, as well as removes punctuation.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the WordNetLemmatizer object.\n        \"\"\"\n        self.lemmatizer = WordNetLemmatizer()\n\n    def lemmatize_sentence(self, sentence):\n        \"\"\"\n        Removes punctuation from the sentence, tokenizes it, tags parts of speech, \n        and lemmatizes the words based on their parts of speech.\n\n        :param sentence: A sentence as a string.\n        :return: A list of lemmatized words.\n        \n        >>> lemmatization = Lemmatization()\n        >>> lemmatization.lemmatize_sentence(\"I am running in a race.\")\n        ['I', 'be', 'run', 'in', 'a', 'race']\n        \"\"\"\n        sentence = self.remove_punctuation(sentence)\n        tokens = word_tokenize(sentence)\n        pos_tags = self.get_pos_tag(tokens)\n        \n        lemmatized_words = []\n        for word, tag in zip(tokens, pos_tags):\n            lemmatized_word = self.lemmatizer.lemmatize(word, pos=self.get_wordnet_pos(tag))\n            lemmatized_words.append(lemmatized_word)\n        \n        return lemmatized_words\n\n    def get_pos_tag(self, tokens):\n        \"\"\"\n        Tags parts of speech for each word in the tokenized sentence.\n\n        :param tokens: A list of tokens.\n        :return: A list of part-of-speech tags for each token.\n        \n        >>> lemmatization = Lemmatization()\n        >>> lemmatization.get_pos_tag([\"I\", \"am\", \"running\", \"in\", \"a\", \"race\"])\n        ['PRP', 'VBP', 'VBG', 'IN', 'DT', 'NN']\n        \"\"\"\n        return [tag for _, tag in pos_tag(tokens)]\n\n    def remove_punctuation(self, sentence):\n        \"\"\"\n        Removes punctuation from the input text.\n\n        :param sentence: A sentence as a string.\n        :return: A string without punctuation.\n        \n        >>> lemmatization = Lemmatization()\n        >>> lemmatization.remove_punctuation(\"I am running in a race.\")\n        'I am running in a race'\n        \"\"\"\n        return sentence.translate(str.maketrans('', '', string.punctuation))\n\n    def get_wordnet_pos(self, tag):\n        \"\"\"\n        Converts the part-of-speech tag to a format understood by WordNetLemmatizer.\n\n        :param tag: A part-of-speech tag.\n        :return: A corresponding WordNet part-of-speech constant.\n        \"\"\"\n        if tag.startswith('J'):\n            return 'a'  # Adjective\n        elif tag.startswith('V'):\n            return 'v'  # Verb\n        elif tag.startswith('N'):\n            return 'n'  # Noun\n        elif tag.startswith('R'):\n            return 'r'  # Adverb\n        else:\n            return 'n'  # Default to noun\n```",
    "46": "```python\nclass Interpolation:\n    \"\"\"\n    This is a class that implements the Linear interpolation operation of one-dimensional and two-dimensional data\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def interpolate_1d(x, y, x_interp):\n        \"\"\"\n        Linear interpolation of one-dimensional data\n        :param x: The x-coordinate of the data point, list.\n        :param y: The y-coordinate of the data point, list.\n        :param x_interp: The x-coordinate of the interpolation point, list.\n        :return: The y-coordinate of the interpolation point, list.\n        >>> interpolation = Interpolation()\n        >>> interpolation.interpolate_1d([1, 2, 3], [1, 2, 3], [1.5, 2.5])\n        [1.5, 2.5]\n        \"\"\"\n        result = []\n        for xi in x_interp:\n            if xi < x[0] or xi > x[-1]:\n                raise ValueError(\"Interpolation point out of bounds.\")\n            for i in range(len(x) - 1):\n                if x[i] <= xi <= x[i + 1]:\n                    slope = (y[i + 1] - y[i]) / (x[i + 1] - x[i])\n                    interpolated_value = y[i] + slope * (xi - x[i])\n                    result.append(interpolated_value)\n                    break\n        return result\n\n    @staticmethod\n    def interpolate_2d(x, y, z, x_interp, y_interp):\n        \"\"\"\n        Linear interpolation of two-dimensional data\n        :param x: The x-coordinate of the data point, list.\n        :param y: The y-coordinate of the data point, list.\n        :param z: The z-coordinate of the data point, list of lists.\n        :param x_interp: The x-coordinate of the interpolation point, list.\n        :param y_interp: The y-coordinate of the interpolation point, list.\n        :return: The z-coordinate of the interpolation point, list.\n        >>> interpolation = Interpolation()\n        >>> interpolation.interpolate_2d([1, 2, 3], [1, 2, 3], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1.5, 2.5], [1.5, 2.5])\n        [3.0, 7.0]\n        \"\"\"\n        result = []\n        for xi, yi in zip(x_interp, y_interp):\n            if xi < x[0] or xi > x[-1] or yi < y[0] or yi > y[-1]:\n                raise ValueError(\"Interpolation point out of bounds.\")\n            x1, x2 = None, None\n            y1, y2 = None, None\n            \n            # Find the surrounding points\n            for i in range(len(x) - 1):\n                if x[i] <= xi <= x[i + 1]:\n                    x1, x2 = x[i], x[i + 1]\n                    break\n            for j in range(len(y) - 1):\n                if y[j] <= yi <= y[j + 1]:\n                    y1, y2 = y[j], y[j + 1]\n                    break\n            \n            # Calculate the four corners of the grid\n            q11 = z[y.index(y1)][x.index(x1)]\n            q21 = z[y.index(y1)][x.index(x2)]\n            q12 = z[y.index(y2)][x.index(x1)]\n            q22 = z[y.index(y2)][x.index(x2)]\n\n            # Perform bilinear interpolation\n            interpolated_value = (q11 * (x2 - xi) * (y2 - yi) +\n                                  q21 * (xi - x1) * (y2 - yi) +\n                                  q12 * (x2 - xi) * (yi - y1) +\n                                  q22 * (xi - x1) * (yi - y1)) / ((x2 - x1) * (y2 - y1))\n            result.append(interpolated_value)\n        return result\n```",
    "51": "```python\nimport numpy as np\n\nclass KappaCalculator:\n    \"\"\"\n    This class calculates Cohen's and Fleiss' kappa coefficients.\n    \"\"\"\n\n    @staticmethod\n    def kappa(testData, k):\n        \"\"\"\n        Calculate Cohen's kappa value of a k-dimensional matrix.\n        \n        :param testData: The k-dimensional matrix to calculate Cohen's kappa value.\n        :param k: int, Matrix dimension.\n        :return: float, the Cohen's kappa value of the matrix.\n        \n        >>> KappaCalculator.kappa([[2, 1, 1], [1, 2, 1], [1, 1, 2]], 3)\n        0.25\n        \"\"\"\n        observed_agreement = np.sum(np.diag(testData))\n        total = np.sum(testData)\n        expected_agreement = np.sum(np.sum(testData, axis=0) ** 2) / (total ** 2)\n\n        if total == 0:\n            return 0.0\n\n        kappa_value = (observed_agreement / total - expected_agreement) / (1 - expected_agreement)\n        return kappa_value\n\n    @staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        \"\"\"\n        Calculate Fleiss' kappa value of an N * k matrix.\n        \n        :param testData: Input data matrix, N * k.\n        :param N: int, Number of samples.\n        :param k: int, Number of categories.\n        :param n: int, Number of raters.\n        :return: float, Fleiss' kappa value.\n        \n        >>> KappaCalculator.fleiss_kappa([[0, 0, 0, 0, 14],\n        >>>                               [0, 2, 6, 4, 2],\n        >>>                               [0, 0, 3, 5, 6],\n        >>>                               [0, 3, 9, 2, 0],\n        >>>                               [2, 2, 8, 1, 1],\n        >>>                               [7, 7, 0, 0, 0],\n        >>>                               [3, 2, 6, 3, 0],\n        >>>                               [2, 5, 3, 2, 2],\n        >>>                               [6, 5, 2, 1, 0],\n        >>>                               [0, 2, 2, 3, 7]], 10, 5, 14)\n        0.20993070442195522\n        \"\"\"\n        p = np.sum(testData, axis=0) / (N * n)\n        P_e = np.sum(p ** 2)\n        P_o = np.mean(np.sum(testData ** 2, axis=1) / (n ** 2))\n\n        if P_e == 1:\n            return 0.0\n\n        fleiss_kappa_value = (P_o - P_e) / (1 - P_e)\n        return fleiss_kappa_value\n```",
    "57": "```python\nimport numpy as np\n\nclass MetricsCalculator2:\n    \"\"\"\n    The class provides methods to calculate Mean Reciprocal Rank (MRR) and Mean Average Precision (MAP)\n    based on input data. MRR measures the ranking quality, while MAP measures the average precision.\n    \"\"\"\n\n    @staticmethod\n    def mrr(data):\n        \"\"\"\n        Compute the MRR of the input data.\n        \n        :param data: A tuple or list containing the actual results and total ground truth.\n                     - A tuple: ([1,0,...], 5)\n                     - A list of tuples: [([1,0,1,...], 5), ([1,0,...], 6)]\n        :return: The MRR value and a list of reciprocal ranks for each input.\n        \"\"\"\n        if isinstance(data, tuple):\n            data = [data]\n        \n        reciprocal_ranks = []\n        \n        for results, ground_truth in data:\n            rank = next((i + 1 for i, val in enumerate(results) if val == 1), None)\n            reciprocal_rank = 1 / rank if rank else 0\n            reciprocal_ranks.append(reciprocal_rank)\n        \n        mean_reciprocal_rank = np.mean(reciprocal_ranks)\n        return mean_reciprocal_rank, reciprocal_ranks\n\n    @staticmethod\n    def map(data):\n        \"\"\"\n        Compute the MAP of the input data.\n        \n        :param data: A tuple or list containing the actual results and total ground truth.\n                     - A tuple: ([1,0,...], 5)\n                     - A list of tuples: [([1,0,1,...], 5), ([1,0,...], 6)]\n        :return: The MAP value and a list of average precision for each input.\n        \"\"\"\n        if isinstance(data, tuple):\n            data = [data]\n        \n        average_precisions = []\n\n        for results, ground_truth in data:\n            correct_count = 0\n            precision_sum = 0\n            \n            for i, val in enumerate(results):\n                if val == 1:\n                    correct_count += 1\n                    precision_sum += correct_count / (i + 1)\n            \n            average_precision = precision_sum / (correct_count if correct_count > 0 else 1)\n            average_precisions.append(average_precision)\n\n        mean_average_precision = np.mean(average_precisions)\n        return mean_average_precision, average_precisions\n```",
    "50": "```python\nimport json\nimport os\n\nclass JSONProcessor:\n    \"\"\"\n    A class to process JSON files, including reading and writing JSON files,\n    as well as processing JSON data by removing a specified key from the JSON object.\n    \"\"\"\n\n    def read_json(self, file_path):\n        \"\"\"\n        Read a JSON file and return the data.\n        \n        :param file_path: str, the path of the JSON file.\n        :return: dict or int, the data from the JSON file if read successfully,\n                        -1 if an error occurs during the reading process,\n                        0 if the file does not exist.\n        \"\"\"\n        if not os.path.exists(file_path):\n            return 0\n        \n        try:\n            with open(file_path, 'r') as file:\n                return json.load(file)\n        except Exception:\n            return -1\n\n    def write_json(self, data, file_path):\n        \"\"\"\n        Write data to a JSON file and save it to the given path.\n\n        :param data: dict, the data to be written to the JSON file.\n        :param file_path: str, the path of the JSON file.\n        :return: int, 1 if the writing process is successful,\n                      -1 if an error occurs during the writing process.\n        \"\"\"\n        try:\n            with open(file_path, 'w') as file:\n                json.dump(data, file, indent=4)\n            return 1\n        except Exception:\n            return -1\n\n    def process_json(self, file_path, remove_key):\n        \"\"\"\n        Read a JSON file and process the data by removing a specified key\n        and rewrite the modified data back to the file.\n\n        :param file_path: str, the path of the JSON file.\n        :param remove_key: str, the key to be removed.\n        :return: int, 1 if the specified key is successfully removed and the data is written back,\n                      0 if the file does not exist or the specified key does not exist in the data.\n        \"\"\"\n        json_data = self.read_json(file_path)\n        \n        if json_data in [0, -1] or remove_key not in json_data:\n            return 0\n        \n        json_data.pop(remove_key, None)\n        return self.write_json(json_data, file_path)\n```",
    "56": "```python\nclass MetricsCalculator:\n    \"\"\"\n    The class calculates precision, recall, F1 score, and accuracy based on predicted and true labels.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the number of all four samples to 0\n        \"\"\"\n        self.true_positives = 0\n        self.false_positives = 0\n        self.false_negatives = 0\n        self.true_negatives = 0\n\n    def update(self, predicted_labels, true_labels):\n        \"\"\"\n        Update the number of all four samples (true_positives, false_positives, false_negatives, true_negatives)\n        :param predicted_labels: list, predicted results\n        :param true_labels: list, true labels\n        :return: None\n        \"\"\"\n        for pred, true in zip(predicted_labels, true_labels):\n            if pred == 1 and true == 1:\n                self.true_positives += 1\n            elif pred == 1 and true == 0:\n                self.false_positives += 1\n            elif pred == 0 and true == 1:\n                self.false_negatives += 1\n            elif pred == 0 and true == 0:\n                self.true_negatives += 1\n\n    def precision(self):\n        \"\"\"\n        Calculate precision\n        :return: float\n        \"\"\"\n        total_predicted_positives = self.true_positives + self.false_positives\n        return self.true_positives / total_predicted_positives if total_predicted_positives > 0 else 0.0\n\n    def recall(self):\n        \"\"\"\n        Calculate recall\n        :return: float\n        \"\"\"\n        total_actual_positives = self.true_positives + self.false_negatives\n        return self.true_positives / total_actual_positives if total_actual_positives > 0 else 0.0\n\n    def f1_score(self):\n        \"\"\"\n        Calculate f1 score, which is the harmonic mean of precision and recall\n        :return: float\n        \"\"\"\n        precision_val = self.precision()\n        recall_val = self.recall()\n        return 2 * (precision_val * recall_val) / (precision_val + recall_val) if (precision_val + recall_val) > 0 else 0.0\n\n    def accuracy(self):\n        \"\"\"\n        Calculate accuracy\n        :return: float\n        \"\"\"\n        total_samples = self.true_positives + self.false_positives + self.false_negatives + self.true_negatives\n        return (self.true_positives + self.true_negatives) / total_samples if total_samples > 0 else 0.0\n```",
    "54": "```python\nimport random\n\nclass MahjongConnect:\n    \"\"\"\n    MahjongConnect is a class representing a game board for Mahjong Connect with features like creating the board,\n    checking valid moves, finding paths, removing icons, and checking if the game is over.\n    \"\"\"\n\n    def __init__(self, board_size, icons):\n        \"\"\"\n        Initialize the board size and the icon list, create the game board.\n        :param board_size: list of two integer numbers, representing the number of rows and columns of the game board\n        :param icons: list of string, representing the icons\n        \"\"\"\n        self.board_size = board_size\n        self.icons = icons\n        self.board = self.create_board()\n\n    def create_board(self):\n        \"\"\"\n        Create the game board with the given board size and icons.\n        :return: 2-dimensional list, the game board\n        \"\"\"\n        flat_icons = self.icons * (self.board_size[0] * self.board_size[1] // len(self.icons))\n        random.shuffle(flat_icons)\n        return [flat_icons[i:i + self.board_size[1]] for i in range(0, len(flat_icons), self.board_size[1])]\n\n    def is_valid_move(self, pos1, pos2):\n        \"\"\"\n        Check if the move of two icons is valid.\n        :param pos1: position tuple(x, y) of the first icon\n        :param pos2: position tuple(x, y) of the second icon\n        :return: True or False, representing whether the move of two icons is valid\n        \"\"\"\n        if pos1 == pos2:\n            return False\n        if not self.is_within_bounds(pos1) or not self.is_within_bounds(pos2):\n            return False\n        if self.board[pos1[0]][pos1[1]] != self.board[pos2[0]][pos2[1]]:\n            return False\n        return self.has_path(pos1, pos2)\n\n    def has_path(self, pos1, pos2):\n        \"\"\"\n        Check if there is a path between two icons.\n        :param pos1: position tuple(x, y) of the first icon\n        :param pos2: position tuple(x, y) of the second icon\n        :return: True or False, representing whether there is a path between two icons\n        \"\"\"\n        # Implement pathfinding logic (not shown)\n        pass\n\n    def remove_icons(self, pos1, pos2):\n        \"\"\"\n        Remove the connected icons on the game board.\n        :param pos1: position tuple(x, y) of the first icon to be removed\n        :param pos2: position tuple(x, y) of the second icon to be removed\n        \"\"\"\n        self.board[pos1[0]][pos1[1]] = ' '\n        self.board[pos2[0]][pos2[1]] = ' '\n\n    def is_game_over(self):\n        \"\"\"\n        Check if the game is over (i.e., if there are no more icons on the game board).\n        :return: True or False, representing whether the game is over\n        \"\"\"\n        return all(icon == ' ' for row in self.board for icon in row)\n\n    def is_within_bounds(self, pos):\n        \"\"\"\n        Check if the position is within the bounds of the board.\n        :param pos: position tuple(x, y)\n        :return: True if within bounds, False otherwise\n        \"\"\"\n        return 0 <= pos[0] < self.board_size[0] and 0 <= pos[1] < self.board_size[1]\n```",
    "58": "```python\nimport random\n\nclass MinesweeperGame:\n    \"\"\"\n    This is a class that implements mine sweeping games including minesweeping and winning judgment.\n    \"\"\"\n\n    def __init__(self, n, k) -> None:\n        \"\"\"\n        Initializes the MinesweeperGame class with the size of the board and the number of mines.\n        :param n: The size of the board, int.\n        :param k: The number of mines, int.\n        \"\"\"\n        self.n = n\n        self.k = k\n        self.minesweeper_map = self.generate_mine_sweeper_map()\n        self.player_map = self.generate_player_map()\n        self.score = 0\n\n    def generate_mine_sweeper_map(self):\n        \"\"\"\n        Generates a minesweeper map with the given size of the board and the number of mines.\n        :return: The minesweeper map, list.\n        \"\"\"\n        board = [[0 for _ in range(self.n)] for _ in range(self.n)]\n        mines = set()\n\n        while len(mines) < self.k:\n            x, y = random.randint(0, self.n - 1), random.randint(0, self.n - 1)\n            if (x, y) not in mines:\n                mines.add((x, y))\n                board[x][y] = 'X'\n                self.update_adjacent_cells(board, x, y)\n\n        return board\n\n    def update_adjacent_cells(self, board, x, y):\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if 0 <= x + dx < self.n and 0 <= y + dy < self.n and board[x + dx][y + dy] != 'X':\n                    board[x + dx][y + dy] += 1\n\n    def generate_player_map(self):\n        \"\"\"\n        Generates a player map with the given size of the board.\n        :return: The player map, list.\n        \"\"\"\n        return [['-' for _ in range(self.n)] for _ in range(self.n)]\n\n    def check_won(self):\n        \"\"\"\n        Checks whether the player has won the game.\n        :return: True if the player has won the game, False otherwise.\n        \"\"\"\n        for row in self.player_map:\n            for cell in row:\n                if cell == '-' and not self.is_mine(cell):\n                    return False\n        return True\n\n    def is_mine(self, cell):\n        return cell == 'X'\n\n    def sweep(self, x, y):\n        \"\"\"\n        Sweeps the given position.\n        :param x: The x coordinate of the position, int.\n        :param y: The y coordinate of the position, int.\n        :return: True if the player has won the game, False otherwise, or the player map.\n        \"\"\"\n        if self.minesweeper_map[x][y] == 'X':\n            return \"Game Over! You hit a mine.\"\n        \n        self.player_map[x][y] = self.minesweeper_map[x][y]\n        if self.check_won():\n            return True\n\n        return self.player_map\n```",
    "62": "```python\nclass NLPDataProcessor:\n    \"\"\"\n    The class processes NLP data by removing stop words from a list of strings using a pre-defined stop word list.\n    \"\"\"\n\n    @staticmethod\n    def construct_stop_word_list():\n        \"\"\"\n        Construct a stop word list including 'a', 'an', 'the'.\n        :return: a list of stop words\n        >>> NLPDataProcessor.construct_stop_word_list()\n        ['a', 'an', 'the']\n        \"\"\"\n        return ['a', 'an', 'the']\n\n    @staticmethod\n    def remove_stop_words(string_list, stop_word_list):\n        \"\"\"\n        Remove all the stop words from the list of strings.\n        :param string_list: a list of strings\n        :param stop_word_list: a list of stop words\n        :return: a list of words without stop words\n        >>> NLPDataProcessor.remove_stop_words(['This is a test.'], NLPDataProcessor.construct_stop_word_list())\n        [['This', 'is', 'test.']]\n        \"\"\"\n        return [[word for word in string.split() if word.lower() not in stop_word_list] for string in string_list]\n\n    @classmethod\n    def process(cls, string_list):\n        \"\"\"\n        Construct a stop word list including 'a', 'an', 'the', and remove all the stop words from the list of strings.\n        :param string_list: a list of strings\n        :return: a list of words without stop words\n        >>> NLPDataProcessor.process(['This is a test.'])\n        [['This', 'is', 'test.']]\n        \"\"\"\n        stop_word_list = cls.construct_stop_word_list()\n        return cls.remove_stop_words(string_list, stop_word_list)\n```",
    "60": "```python\nimport sqlite3\n\nclass MovieTicketDB:\n    \"\"\"\n    This is a class for movie database operations, which allows for inserting movie information, \n    searching for movie information by name, and deleting movie information by name.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the MovieTicketDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"\n        Creates a \"tickets\" table in the database if it does not exist already.\n        Fields include ID of type int, movie name of type str, theater name of type str, \n        seat number of type str, and customer name of type str.\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS tickets (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                movie_name TEXT NOT NULL,\n                theater_name TEXT NOT NULL,\n                seat_number TEXT NOT NULL,\n                customer_name TEXT NOT NULL\n            )\n        ''')\n        self.connection.commit()\n\n    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        \"\"\"\n        Inserts a new ticket into the \"tickets\" table.\n        :param movie_name: str, the name of the movie.\n        :param theater_name: str, the name of the theater.\n        :param seat_number: str, the seat number.\n        :param customer_name: str, the name of the customer.\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name) \n            VALUES (?, ?, ?, ?)\n        ''', (movie_name, theater_name, seat_number, customer_name))\n        self.connection.commit()\n\n    def search_tickets_by_customer(self, customer_name):\n        \"\"\"\n        Searches for tickets in the \"tickets\" table by customer name.\n        :param customer_name: str, the name of the customer to search for.\n        :return: list of tuples, the rows from the \"tickets\" table that match the search criteria.\n        \"\"\"\n        self.cursor.execute('''\n            SELECT * FROM tickets WHERE customer_name = ?\n        ''', (customer_name,))\n        return self.cursor.fetchall()\n\n    def delete_ticket(self, ticket_id):\n        \"\"\"\n        Deletes a ticket from the \"tickets\" table by ticket ID.\n        :param ticket_id: int, the ID of the ticket to delete.\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            DELETE FROM tickets WHERE id = ?\n        ''', (ticket_id,))\n        self.connection.commit()\n\n    def close(self):\n        \"\"\"\n        Closes the database connection.\n        :return: None\n        \"\"\"\n        self.connection.close()\n```",
    "59": "```python\nfrom datetime import datetime\nimport numpy as np\n\nclass MovieBookingSystem:\n    \"\"\"\n    A class representing a movie booking system that allows adding movies, booking tickets, and checking available movies within a given time range.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the movie booking system with an empty list of movies.\n        \"\"\"\n        self.movies = []\n\n    def add_movie(self, name, price, start_time, end_time, n):\n        \"\"\"\n        Add a new movie to the system.\n        :param name: str, movie name\n        :param price: float, price for one ticket\n        :param start_time: str, movie start time in HH:MM format\n        :param end_time: str, movie end time in HH:MM format\n        :param n: int, the size of seats (n x n)\n        \"\"\"\n        start_time_dt = datetime.strptime(start_time, '%H:%M')\n        end_time_dt = datetime.strptime(end_time, '%H:%M')\n        seats = np.zeros((n, n))\n\n        movie_info = {\n            'name': name,\n            'price': price,\n            'start_time': start_time_dt,\n            'end_time': end_time_dt,\n            'seats': seats\n        }\n        self.movies.append(movie_info)\n\n    def book_ticket(self, name, seats_to_book):\n        \"\"\"\n        Book tickets for a movie by updating the seat availability.\n        :param name: str, movie name\n        :param seats_to_book: list of tuples, representing seats to book [(row1, col1), (row2, col2), ...]\n        :return: str, booking status message\n        \"\"\"\n        movie = next((m for m in self.movies if m['name'].lower() == name.lower()), None)\n        if not movie:\n            return \"Movie not found.\"\n\n        for row, col in seats_to_book:\n            if movie['seats'][row, col] == 1:\n                return \"Booking failed.\"\n\n        for row, col in seats_to_book:\n            movie['seats'][row, col] = 1\n\n        return \"Booking success.\"\n\n    def available_movies(self, start_time, end_time):\n        \"\"\"\n        Get a list of available movies within the specified time range.\n        :param start_time: str, start time in HH:MM format\n        :param end_time: str, end time in HH:MM format\n        :return: list of str, names of available movies\n        \"\"\"\n        start_time_dt = datetime.strptime(start_time, '%H:%M')\n        end_time_dt = datetime.strptime(end_time, '%H:%M')\n\n        available = [\n            movie['name'] for movie in self.movies\n            if movie['start_time'] >= start_time_dt and movie['end_time'] <= end_time_dt\n        ]\n        return available\n```",
    "63": "```python\nimport re\nfrom collections import Counter\n\nclass NLPDataProcessor:\n    \"\"\"\n    The class processes NLP data by extracting words from a list of strings, calculating the frequency of each word, \n    and returning the top 5 most frequent words.\n    \"\"\"\n\n    def process_data(self, string_list):\n        \"\"\"\n        Keep only English letters and spaces in the string, convert the string to lower case,\n        and split the string into a list of words.\n        \n        :param string_list: a list of strings\n        :return: words_list: a list of words lists\n        >>> NLPDataProcessor().process_data(['This is a test.'])\n        [['this', 'is', 'a', 'test']]\n        \"\"\"\n        words_list = []\n        for string in string_list:\n            cleaned_string = re.sub(r'[^a-zA-Z\\s]', '', string).lower()\n            words_list.append(cleaned_string.split())\n        return words_list\n\n    def calculate_word_frequency(self, words_list):\n        \"\"\"\n        Calculate the word frequency of each word in the list of words lists, \n        and sort the word frequency dictionary by value in descending order.\n        \n        :param words_list: a list of words lists\n        :return: top 5 word frequency dictionary\n        >>> NLPDataProcessor().calculate_word_frequency([['this', 'is', 'a', 'test'], ['this', 'is', 'another', 'test']])\n        {'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1}\n        \"\"\"\n        flat_list = [word for sublist in words_list for word in sublist]\n        word_count = Counter(flat_list)\n        return dict(word_count.most_common(5))\n\n    def process(self, string_list):\n        \"\"\"\n        Process the input strings to calculate word frequency.\n        \n        :param string_list: a list of strings\n        :return: top 5 word frequency dictionary\n        >>> NLPDataProcessor().process(['This is a test.', 'This is another test.'])\n        {'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1}\n        \"\"\"\n        words_list = self.process_data(string_list)\n        return self.calculate_word_frequency(words_list)\n```",
    "61": "```python\nimport random\n\nclass MusicPlayer:\n    \"\"\"\n    A music player that allows playing, stopping, adding/removing songs, setting volume, shuffling, and switching songs.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the music player with an empty playlist, no current song, and a default volume of 50.\n        \"\"\"\n        self.playlist = []\n        self.current_song_index = None\n        self.volume = 50\n\n    def add_song(self, song):\n        \"\"\"\n        Adds a song to the playlist.\n        :param song: The song to add to the playlist, str.\n        \"\"\"\n        self.playlist.append(song)\n\n    def remove_song(self, song):\n        \"\"\"\n        Removes a song from the playlist.\n        :param song: The song to remove from the playlist, str.\n        \"\"\"\n        if song in self.playlist:\n            self.playlist.remove(song)\n\n    def play(self):\n        \"\"\"\n        Plays the current song in the playlist.\n        :return: The current song in the playlist, or False if there is no current song.\n        \"\"\"\n        if self.current_song_index is not None:\n            return self.playlist[self.current_song_index]\n        return False\n\n    def stop(self):\n        \"\"\"\n        Stops the current song in the playlist.\n        :return: True if the current song was stopped, False if there was no current song.\n        \"\"\"\n        if self.current_song_index is not None:\n            self.current_song_index = None\n            return True\n        return False\n\n    def switch_song(self):\n        \"\"\"\n        Switches to the next song in the playlist.\n        :return: True if the next song was switched to, False if there was no next song.\n        \"\"\"\n        if self.playlist and (self.current_song_index is None or self.current_song_index + 1 < len(self.playlist)):\n            self.current_song_index = (self.current_song_index + 1) % len(self.playlist)\n            return True\n        return False\n\n    def previous_song(self):\n        \"\"\"\n        Switches to the previous song in the playlist.\n        :return: True if the previous song was switched to, False if there was no previous song.\n        \"\"\"\n        if self.playlist and (self.current_song_index is not None and self.current_song_index > 0):\n            self.current_song_index -= 1\n            return True\n        return False\n\n    def set_volume(self, volume):\n        \"\"\"\n        Sets the volume of the music player, if the volume is between 0 and 100.\n        :param volume: The volume to set the music player to, int.\n        :return: True if the volume was set, False if the volume was invalid.\n        \"\"\"\n        if 0 <= volume <= 100:\n            self.volume = volume\n            return True\n        return False\n\n    def shuffle(self):\n        \"\"\"\n        Shuffles the playlist.\n        :return: True if the playlist was shuffled, False if the playlist was empty.\n        \"\"\"\n        if self.playlist:\n            random.shuffle(self.playlist)\n            return True\n        return False\n```",
    "67": "```python\nclass Order:\n    \"\"\"\n    The class manages restaurant orders by allowing the addition of dishes, calculation of the total cost, and checkout.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the order management system.\n        self.menu stores the dishes of restaurant inventory.\n        menu = [{\"dish\": dish_name, \"price\": price, \"count\": count}, ...]\n        self.selected_dishes stores the dishes selected by customers.\n        selected_dishes = [{\"dish\": dish_name, \"count\": count, \"price\": price}, ...]\n        self.sales stores the sales of each dish.\n        sales = {dish_name: sales}\n        \"\"\"\n        self.menu = []\n        self.selected_dishes = []\n        self.sales = {}\n\n    def add_dish(self, dish):\n        \"\"\"\n        Check the self.menu and add to self.selected_dishes if the dish count is valid.\n        If the dish has been successfully added, change the count in self.menu.\n        :param dish: dict, the information of dish. dish = {\"dish\": dish_name, \"count\": count, price: price}\n        :return: True if successfully added, or False otherwise.\n        \"\"\"\n        for menu_item in self.menu:\n            if menu_item['dish'] == dish['dish']:\n                if menu_item['count'] >= dish['count']:\n                    self.selected_dishes.append(dish)\n                    menu_item['count'] -= dish['count']\n                    return True\n                break\n        return False\n\n    def calculate_total(self):\n        \"\"\"\n        Calculate the total price of dishes that have been ordered. Multiply the count, price, and sales.\n        :return total: float, the final total price.\n        \"\"\"\n        total = 0.0\n        for selected in self.selected_dishes:\n            dish_name = selected['dish']\n            price = selected['price']\n            count = selected['count']\n            discount = self.sales.get(dish_name, 1)  # Default discount is 1 (no discount)\n            total += price * count * discount\n        return total\n\n    def checkout(self):\n        \"\"\"\n        Check out the dishes ordered. If self.selected_dishes is not empty, invoke the calculate_total method.\n        :return: False if self.selected_dishes is empty, or total (return value of calculate_total) otherwise.\n        \"\"\"\n        if not self.selected_dishes:\n            return False\n        return self.calculate_total()\n```",
    "68": "```python\nclass PageUtil:\n    \"\"\"\n    PageUtil class is a versatile utility for handling pagination and search functionalities in an efficient and convenient manner.\n    \"\"\"\n\n    def __init__(self, data, page_size):\n        \"\"\"\n        Initialize the PageUtil object with the given data and page size.\n        :param data: list, the data to be paginated\n        :param page_size: int, the number of items per page\n        \"\"\"\n        self.data = data\n        self.page_size = page_size\n        self.total_items = len(data)\n        self.total_pages = (self.total_items + page_size - 1) // page_size\n\n    def get_page(self, page_number):\n        \"\"\"\n        Retrieve a specific page of data.\n        :param page_number: int, the page number to fetch\n        :return: list, the data on the specified page\n        \"\"\"\n        if page_number < 1 or page_number > self.total_pages:\n            return []\n        \n        start_index = (page_number - 1) * self.page_size\n        end_index = start_index + self.page_size\n        return self.data[start_index:end_index]\n\n    def get_page_info(self, page_number):\n        \"\"\"\n        Retrieve information about a specific page.\n        :param page_number: int, the page number to fetch information about\n        :return: dict, containing page information such as current page number, total pages, etc.\n        \"\"\"\n        page_data = self.get_page(page_number)\n        return {\n            \"current_page\": page_number,\n            \"per_page\": self.page_size,\n            \"total_pages\": self.total_pages,\n            \"total_items\": self.total_items,\n            \"has_previous\": page_number > 1,\n            \"has_next\": page_number < self.total_pages,\n            \"data\": page_data\n        }\n\n    def search(self, keyword):\n        \"\"\"\n        Search for items in the data that contain the given keyword.\n        :param keyword: str, the keyword to search for\n        :return: dict, containing search information such as total results and matching items\n        \"\"\"\n        keyword = str(keyword)\n        results = [item for item in self.data if keyword in str(item)]\n        total_results = len(results)\n        total_pages = (total_results + self.page_size - 1) // self.page_size\n\n        return {\n            \"keyword\": keyword,\n            \"total_results\": total_results,\n            \"total_pages\": total_pages,\n            \"results\": results\n        }\n```",
    "64": "```python\nclass NumberConverter:\n    \"\"\"\n    The class allows converting between decimal, binary, octal, and hexadecimal formats.\n    \"\"\"\n\n    @staticmethod\n    def decimal_to_binary(decimal_num):\n        \"\"\"\n        Convert a number from decimal format to binary format.\n        :param decimal_num: int, decimal number\n        :return: str, the binary representation of an integer.\n        >>> NumberConverter.decimal_to_binary(42423)\n        '1010010110110111'\n        \"\"\"\n        return bin(decimal_num)[2:]\n\n    @staticmethod\n    def binary_to_decimal(binary_num):\n        \"\"\"\n        Convert a number from binary format to decimal format.\n        :param binary_num: str, binary number\n        :return: int, the decimal representation of binary number str.\n        >>> NumberConverter.binary_to_decimal('1010010110110111')\n        42423\n        \"\"\"\n        return int(binary_num, 2)\n\n    @staticmethod\n    def decimal_to_octal(decimal_num):\n        \"\"\"\n        Convert a number from decimal format to octal format.\n        :param decimal_num: int, decimal number\n        :return: str, the octal representation of an integer.\n        >>> NumberConverter.decimal_to_octal(42423)\n        '122667'\n        \"\"\"\n        return oct(decimal_num)[2:]\n\n    @staticmethod\n    def octal_to_decimal(octal_num):\n        \"\"\"\n        Convert a number from octal format to decimal format.\n        :param octal_num: str, octal number\n        :return: int, the decimal representation of octal number str.\n        >>> NumberConverter.octal_to_decimal('122667')\n        42423\n        \"\"\"\n        return int(octal_num, 8)\n\n    @staticmethod\n    def decimal_to_hex(decimal_num):\n        \"\"\"\n        Convert a number from decimal format to hex format.\n        :param decimal_num: int, decimal number\n        :return: str, the hex representation of an integer.\n        >>> NumberConverter.decimal_to_hex(42423)\n        'a5b7'\n        \"\"\"\n        return hex(decimal_num)[2:]\n\n    @staticmethod\n    def hex_to_decimal(hex_num):\n        \"\"\"\n        Convert a number from hex format to decimal format.\n        :param hex_num: str, hex number\n        :return: int, the decimal representation of hex number str.\n        >>> NumberConverter.hex_to_decimal('a5b7')\n        42423\n        \"\"\"\n        return int(hex_num, 16)\n```",
    "66": "```python\nclass NumericEntityUnescaper:\n    \"\"\"\n    This class provides functionality to replace numeric entities with their corresponding characters in a given string.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def replace(self, string):\n        \"\"\"\n        Replaces numeric character references (HTML entities) in the input string with their corresponding Unicode characters.\n        \n        :param string: str, the input string containing numeric character references.\n        :return: str, the input string with numeric character references replaced with their corresponding Unicode characters.\n        \n        >>> unescaper = NumericEntityUnescaper()\n        >>> unescaper.replace(\"&#65;&#66;&#67;\")\n        'ABC'\n        \"\"\"\n        import re\n\n        def decode_entity(match):\n            # Extract the numeric value and convert it to a character\n            num = int(match.group(1))\n            return chr(num)\n\n        # Regex to find numeric character references (e.g., &#65;)\n        pattern = r'&#(\\d+);'\n        return re.sub(pattern, decode_entity, string)\n\n    @staticmethod\n    def is_hex_char(char):\n        \"\"\"\n        Determines whether a given character is a hexadecimal digit.\n        \n        :param char: str, the character to check.\n        :return: bool, True if the character is a hexadecimal digit, False otherwise.\n        \n        >>> NumericEntityUnescaper.is_hex_char('a')\n        True\n        >>> NumericEntityUnescaper.is_hex_char('g')\n        False\n        \"\"\"\n        return char.lower() in '0123456789abcdef'\n```",
    "69": "```python\nimport PyPDF2\n\nclass PDFHandler:\n    \"\"\"\n    The class allows merging multiple PDF files into one and extracting text from PDFs using the PyPDF2 library.\n    \"\"\"\n\n    def __init__(self, filepaths):\n        \"\"\"\n        Initializes the PDFHandler with a list of file paths.\n        :param filepaths: List of strings representing the paths to PDF files.\n        \"\"\"\n        self.filepaths = filepaths\n        self.readers = [PyPDF2.PdfReader(fp) for fp in filepaths]\n\n    def merge_pdfs(self, output_filepath):\n        \"\"\"\n        Merges multiple PDF files into a single PDF and saves it to the specified output file path.\n        :param output_filepath: str, output file path to save the merged PDF.\n        :return: str, confirmation message upon successful merge.\n        \"\"\"\n        merger = PyPDF2.PdfWriter()\n        for reader in self.readers:\n            for page in reader.pages:\n                merger.add_page(page)\n\n        with open(output_filepath, 'wb') as output_file:\n            merger.write(output_file)\n\n        return f\"Merged PDFs saved at {output_filepath}\"\n\n    def extract_text_from_pdfs(self):\n        \"\"\"\n        Extracts text from each PDF file and returns it as a list of strings.\n        :return: list of str, each element is the text of one PDF file.\n        \"\"\"\n        pdf_texts = []\n        for reader in self.readers:\n            text = \"\"\n            for page in reader.pages:\n                text += page.extract_text() or \"\"\n            pdf_texts.append(text.strip())\n        return pdf_texts\n```",
    "70": "```python\nclass PersonRequest:\n    \"\"\"\n    This class validates input personal information data and sets invalid fields to None based on specific rules.\n    \"\"\"\n\n    def __init__(self, name: str, sex: str, phone_number: str):\n        \"\"\"\n        Initialize PersonRequest object with the provided information.\n        :param name: str, the name of the person\n        :param sex: str, the sex of the person\n        :param phone_number: str, the phone number of the person\n        \"\"\"\n        self.name = self._validate_name(name)\n        self.sex = self._validate_sex(sex)\n        self.phone_number = self._validate_phone_number(phone_number)\n\n    def _validate_name(self, name: str) -> str:\n        \"\"\"\n        Validate the name and return it. If name is empty or exceeds 33 characters in length, set to None.\n        :param name: str, the name to validate\n        :return: str, the validated name or None if invalid\n        \"\"\"\n        if name and len(name) <= 33:\n            return name\n        return None\n\n    def _validate_sex(self, sex: str) -> str:\n        \"\"\"\n        Validate the sex and return it. If sex is not Man, Woman, or UGM, set to None.\n        :param sex: str, the sex to validate\n        :return: str, the validated sex or None if invalid\n        \"\"\"\n        valid_sex_options = {'Man', 'Woman', 'UGM'}\n        if sex in valid_sex_options:\n            return sex\n        return None\n\n    def _validate_phone_number(self, phone_number: str) -> str:\n        \"\"\"\n        Validate the phone number and return it. If phone_number is empty or not an 11 digit number, set to None.\n        :param phone_number: str, the phone number to validate\n        :return: str, the validated phone number or None if invalid\n        \"\"\"\n        if phone_number.isdigit() and len(phone_number) == 11:\n            return phone_number\n        return None\n```",
    "65": "```python\nclass NumberWordFormatter:\n    \"\"\"\n    This class converts numbers into their corresponding English word representation, \n    handling both integer and decimal parts, and incorporating appropriate connectors and units.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize NumberWordFormatter object.\n        \"\"\"\n        self.NUMBER = [\"\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\"]\n        self.NUMBER_TEEN = [\"TEN\", \"ELEVEN\", \"TWELVE\", \"THIRTEEN\", \"FOURTEEN\", \"FIFTEEN\", \"SIXTEEN\", \n                            \"SEVENTEEN\", \"EIGHTEEN\", \"NINETEEN\"]\n        self.NUMBER_TEN = [\"TEN\", \"TWENTY\", \"THIRTY\", \"FORTY\", \"FIFTY\", \"SIXTY\", \"SEVENTY\", \n                           \"EIGHTY\", \"NINETY\"]\n        self.NUMBER_MORE = [\"\", \"THOUSAND\", \"MILLION\", \"BILLION\"]\n        \n    def format(self, x):\n        \"\"\"\n        Converts a number into words format.\n        :param x: int or float, the number to be converted into words format\n        :return: str, the number in words format\n        \"\"\"\n        if isinstance(x, str):\n            x = float(x)\n        integer_part, decimal_part = str(x).split('.') if '.' in str(x) else (str(x), None)\n        words = self.convert_integer_part(integer_part)\n        if decimal_part:\n            words += \" POINT \" + \" \".join(self.NUMBER[int(digit)] for digit in decimal_part)\n        return words.strip() + \" ONLY\"\n\n    def format_string(self, x):\n        \"\"\"\n        Converts a string representation of a number into words format.\n        :param x: str, the string representation of a number\n        :return: str, the number in words format\n        \"\"\"\n        return self.format(float(x))\n\n    def convert_integer_part(self, num):\n        \"\"\"\n        Converts the integer part of a number into words format.\n        :param num: str, the integer part of the number\n        :return: str, the number in words format\n        \"\"\"\n        num = int(num)\n        if num == 0:\n            return \"ZERO\"\n        \n        words = \"\"\n        for idx, chunk in enumerate(self.chunk_number(num)):\n            if chunk > 0:\n                words = self.trans_three(chunk) + \" \" + self.NUMBER_MORE[idx] + \" \" + words\n        \n        return words.strip()\n\n    def chunk_number(self, num):\n        \"\"\"\n        Breaks the number into chunks of three digits.\n        :param num: int, the number to chunk\n        :return: list of int, the chunks\n        \"\"\"\n        chunks = []\n        while num > 0:\n            chunks.append(num % 1000)\n            num //= 1000\n        return chunks\n\n    def trans_two(self, s):\n        \"\"\"\n        Converts a two-digit number into words format.\n        :param s: str, the two-digit number\n        :return: str, the number in words format\n        \"\"\"\n        n = int(s)\n        if n < 10:\n            return self.NUMBER[n]\n        elif n < 20:\n            return self.NUMBER_TEEN[n - 10]\n        else:\n            ten = n // 10\n            one = n % 10\n            return self.NUMBER_TEN[ten - 1] + (\" \" + self.NUMBER[one] if one > 0 else \"\")\n\n    def trans_three(self, s):\n        \"\"\"\n        Converts a three-digit number into words format.\n        :param s: str, the three-digit number\n        :return: str, the number in words format\n        \"\"\"\n        n = int(s)\n        hundred = n // 100\n        rest = n % 100\n        words = \"\"\n        if hundred > 0:\n            words += self.NUMBER[hundred] + \" HUNDRED\"\n        if rest > 0:\n            if hundred > 0:\n                words += \" AND \"\n            words += self.trans_two(rest)\n        return words.strip()\n\n    def parse_more(self, i):\n        \"\"\"\n        Parses the thousand/million/billion suffix based on the index.\n        :param i: int, the index representing the magnitude (thousand, million, billion)\n        :return: str, the corresponding suffix for the magnitude\n        \"\"\"\n        return self.NUMBER_MORE[i]\n```",
    "73": "```python\nclass RPGCharacter:\n    \"\"\"\n    The class represents a role-playing game character, which allows to attack other characters, heal, gain experience, level up, and check if the character is alive.\n    \"\"\"\n\n    MAX_HP = 100\n    MAX_LEVEL = 100\n    HEAL_AMOUNT = 10\n\n    def __init__(self, name, hp, attack_power, defense, level=1):\n        \"\"\"\n        Initialize an RPG character object.\n        :param name: str, the name of the character.\n        :param hp: int, The health points of the character.\n        :param attack_power: int, the attack power of the character.\n        :param defense: int, the defense points of the character.\n        :param level: int, the level of the character. Default is 1.\n        \"\"\"\n        self.name = name\n        self.hp = hp\n        self.attack_power = attack_power\n        self.defense = defense\n        self.level = level\n        self.exp = 0\n\n    def attack(self, other_character):\n        \"\"\"\n        Attack another character. The damage caused needs to offset the defense value.\n        :param other_character: RPGCharacter, The character being attacked.\n        \"\"\"\n        damage = max(0, self.attack_power - other_character.defense)\n        other_character.hp = max(0, other_character.hp - damage)\n\n    def heal(self):\n        \"\"\"\n        Heal the character with 10 hp and the max hp is 100.\n        :return: int, the current health points after healing.\n        \"\"\"\n        self.hp = min(self.MAX_HP, self.hp + self.HEAL_AMOUNT)\n        return self.hp\n\n    def gain_exp(self, amount):\n        \"\"\"\n        Gain experience points for the character and level up when the exp has reached the values that is 100 times the current level.\n        The experience that overflows should be used to calculate the next level up until exhausted.\n        :param amount: int, the amount of experience points to gain.\n        \"\"\"\n        self.exp += amount\n        while self.exp >= 100 * self.level and self.level < self.MAX_LEVEL:\n            self.level_up()\n    \n    def level_up(self):\n        \"\"\"\n        Level up the character and return to zero experience points, increase hp by 20 points, attack power and defense points by 5 points.\n        :return: tuple[int, int, int, int], the new level, health points, attack power, and defense points after leveling up.\n        \"\"\"\n        if self.level < self.MAX_LEVEL:\n            self.level += 1\n            self.hp = min(self.MAX_HP, self.hp + 20)\n            self.attack_power += 5\n            self.defense += 5\n            self.exp = 0\n        return self.level, self.hp, self.attack_power, self.defense\n\n    def is_alive(self):\n        \"\"\"\n        Check if player is alive.\n        :return: True if the hp is larger than 0, or False otherwise.\n        \"\"\"\n        return self.hp > 0\n```",
    "76": "```python\nclass SignInSystem:\n    \"\"\"\n    This is a class for a sign-in system, including adding users, signing in/out, checking sign-in status,\n    and retrieving signed-in/not signed-in users.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the sign-in system.\n        \"\"\"\n        self.users = {}\n\n    def add_user(self, username):\n        \"\"\"\n        Add a user to the sign-in system if the user wasn't already added.\n        The initial state is set to False (not signed in).\n        :param username: str, the username to be added.\n        :return: bool, True if the user is added successfully, False if the user already exists.\n        \"\"\"\n        if username in self.users:\n            return False\n        self.users[username] = False\n        return True\n\n    def sign_in(self, username):\n        \"\"\"\n        Sign in a user if the user is in the system and change the state to True (signed in).\n        :param username: str, the username to be signed in.\n        :return: bool, True if the user is signed in successfully, False if the user does not exist.\n        \"\"\"\n        if username in self.users and not self.users[username]:\n            self.users[username] = True\n            return True\n        return False\n\n    def check_sign_in(self, username):\n        \"\"\"\n        Check if a user is signed in.\n        :param username: str, the username to be checked.\n        :return: bool, True if the user is signed in, False if the user does not exist or is not signed in.\n        \"\"\"\n        return self.users.get(username, False)\n\n    def all_signed_in(self):\n        \"\"\"\n        Check if all users are signed in.\n        :return: bool, True if all users are signed in, False otherwise.\n        \"\"\"\n        return all(self.users.values())\n\n    def all_not_signed_in(self):\n        \"\"\"\n        Get a list of usernames that are not signed in.\n        :return: list[str], a list of usernames that are not signed in.\n        \"\"\"\n        return [username for username, signed_in in self.users.items() if not signed_in]\n```",
    "72": "```python\nimport re\n\nclass RegexUtils:\n    \"\"\"\n    The class provides methods to match, find all occurrences, split, and substitute text using regular expressions.\n    It also includes predefined patterns for validating phone numbers and extracting email addresses.\n    \"\"\"\n\n    def match(self, pattern, text):\n        \"\"\"Check if the text matches the regular expression.\"\"\"\n        return bool(re.match(pattern, text))\n\n    def findall(self, pattern, text):\n        \"\"\"Find all matching substrings and return a list of all matching substrings.\"\"\"\n        return re.findall(pattern, text)\n\n    def split(self, pattern, text):\n        \"\"\"Split text based on regular expression patterns and return a list of substrings.\"\"\"\n        return re.split(pattern, text)\n\n    def sub(self, pattern, replacement, text):\n        \"\"\"Replace the substring matched by a regular expression with the specified string.\"\"\"\n        return re.sub(pattern, replacement, text)\n\n    def generate_email_pattern(self):\n        \"\"\"Generate regular expression patterns that match email addresses.\"\"\"\n        return r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n\n    def generate_phone_number_pattern(self):\n        \"\"\"Generate regular expression patterns that match phone numbers.\"\"\"\n        return r'\\b\\d{3}-\\d{3}-\\d{4}\\b'\n\n    def generate_split_sentences_pattern(self):\n        \"\"\"Generate regular expression patterns that match the middle characters of two sentences.\"\"\"\n        return r'[.!?][\\s]{1,2}(?=[A-Z])'\n\n    def split_sentences(self, text):\n        \"\"\"Split the text into a list of sentences without punctuation except the last sentence.\"\"\"\n        sentences = re.split(self.generate_split_sentences_pattern(), text)\n        return [sentence.strip(' ') for sentence in sentences if sentence]\n\n    def validate_phone_number(self, phone_number):\n        \"\"\"Verify if the phone number is valid.\"\"\"\n        pattern = self.generate_phone_number_pattern()\n        return bool(re.match(pattern, phone_number))\n\n    def extract_email(self, text):\n        \"\"\"Extract all email addresses from the text.\"\"\"\n        pattern = self.generate_email_pattern()\n        return self.findall(pattern, text)\n```",
    "75": "```python\nclass ShoppingCart:\n    \"\"\"\n    The class manages items, their prices, quantities, and allows to add, remove, view items, and calculate the total price.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the items representing the shopping list as an empty dictionary\n        \"\"\"\n        self.items = {}\n\n    def add_item(self, item: str, price: float, quantity: int = 1) -> None:\n        \"\"\"\n        Add item information to the shopping list items, including price and quantity. The default quantity is 1\n        :param item: string, Item to be added\n        :param price: float, The price of the item\n        :param quantity: int, The number of items, defaults to 1\n        \"\"\"\n        if item in self.items:\n            self.items[item]['quantity'] += quantity\n        else:\n            self.items[item] = {'price': price, 'quantity': quantity}\n\n    def remove_item(self, item: str, quantity: int = 1) -> None:\n        \"\"\"\n        Subtract the specified quantity of item from the shopping list items\n        :param item: string, Item to be subtracted in quantity\n        :param quantity: int, Quantity to be subtracted\n        \"\"\"\n        if item in self.items:\n            if self.items[item]['quantity'] > quantity:\n                self.items[item]['quantity'] -= quantity\n            elif self.items[item]['quantity'] == quantity:\n                del self.items[item]\n\n    def view_items(self) -> dict:\n        \"\"\"\n        Return the current shopping list items\n        :return: dict, the current shopping list items\n        \"\"\"\n        return self.items\n\n    def total_price(self) -> float:\n        \"\"\"\n        Calculate the total price of all items in the shopping list, which is the quantity of each item multiplied by the price\n        :return: float, the total price of all items in the shopping list\n        \"\"\"\n        return sum(item['price'] * item['quantity'] for item in self.items.values())\n```",
    "78": "```python\nimport re\n\nclass SplitSentence:\n    \"\"\"\n    The class allows to split sentences, count words in a sentence, and process a text file to find the maximum word count.\n    \"\"\"\n\n    def split_sentences(self, sentences_string):\n        \"\"\"\n        Split a string into a list of sentences. Sentences end with . or ? and have a space after that. \n        Note that Mr. also ends with . but is not considered a sentence.\n        :param sentences_string: string, string to split\n        :return: list, split sentence list\n        >>> ss = SplitSentence()\n        >>> ss.split_sentences(\"aaa aaaa. bb bbbb bbb? cccc cccc. dd ddd?\")\n        ['aaa aaaa.', 'bb bbbb bbb?', 'cccc cccc.', 'dd ddd?']\n        \"\"\"\n        # Using regex to split on '. ' or '? '\n        return re.split(r'(?<!\\bMr)\\. |(?<!\\bMr)\\? ', sentences_string)\n\n    def count_words(self, sentence):\n        \"\"\"\n        Count the number of words in a sentence. \n        Words are separated by spaces, punctuation marks and numbers are not counted as words.\n        :param sentence: string, sentence to be counted, where words are separated by spaces\n        :return: int, number of words in the sentence\n        >>> ss = SplitSentence()\n        >>> ss.count_words(\"abc def\")\n        2\n        \"\"\"\n        # Using regex to find words (excluding numbers and punctuation)\n        words = re.findall(r'\\b[a-zA-Z]+\\b', sentence)\n        return len(words)\n\n    def process_text_file(self, sentences_string):\n        \"\"\"\n        Given a text, return the number of words in the longest sentence\n        :param sentences_string: string, undivided long sentence\n        :return: int, the number of words in the longest sentence\n        >>> ss = SplitSentence()\n        >>> ss.process_text_file(\"aaa aaaa. bb bbbb bbb? cccc ccccccc cc ccc. dd ddd?\")\n        4\n        \"\"\"\n        sentences = self.split_sentences(sentences_string)\n        max_word_count = max(self.count_words(sentence) for sentence in sentences)\n        return max_word_count\n```",
    "74": "```python\nclass Server:\n    \"\"\"\n    This is a class as a server, which handles a whitelist, message sending and receiving, and information display.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the whitelist as an empty list, and initialize the sending and receiving information as empty dictionaries.\n        \"\"\"\n        self.white_list = []\n        self.send_struct = {}\n        self.receive_struct = {}\n\n    def add_white_list(self, addr):\n        \"\"\"\n        Add an address to the whitelist and do nothing if it already exists.\n        :param addr: int, address to be added\n        :return: new whitelist or False if the address already exists\n        \"\"\"\n        if addr not in self.white_list:\n            self.white_list.append(addr)\n            return self.white_list\n        return False\n\n    def del_white_list(self, addr):\n        \"\"\"\n        Remove an address from the whitelist and do nothing if it does not exist.\n        :param addr: int, address to be deleted\n        :return: new whitelist or False if the address does not exist\n        \"\"\"\n        if addr in self.white_list:\n            self.white_list.remove(addr)\n            return self.white_list\n        return False\n\n    def recv(self, info):\n        \"\"\"\n        Receive information containing address and content. If the address is on the whitelist, receive the content; otherwise, do not receive it.\n        :param info: dict, information dictionary containing address and content\n        :return: content if successfully received, otherwise return False\n        \"\"\"\n        addr = info.get(\"addr\")\n        if addr in self.white_list:\n            self.receive_struct[addr] = info[\"content\"]\n            return info[\"content\"]\n        return False\n\n    def send(self, info):\n        \"\"\"\n        Send information containing address and content.\n        :param info: dict, information dictionary containing address and content\n        :return: None if successfully sent, otherwise return an error message\n        \"\"\"\n        addr = info.get(\"addr\")\n        self.send_struct = {\"addr\": addr, \"content\": info[\"content\"]}\n        return None\n\n    def show(self, type):\n        \"\"\"\n        Returns struct of the specified type.\n        :param type: string, the type of struct to be returned, which can be 'send' or 'receive'\n        :return: corresponding struct or False if type is invalid\n        \"\"\"\n        if type == 'send':\n            return self.send_struct\n        elif type == 'receive':\n            return self.receive_struct\n        return False\n```",
    "77": "```python\nimport random\n\nclass Snake:\n    \"\"\"\n    The class represents a snake game where the snake can move, eat food, reset, and generate a random food position.\n    \"\"\"\n\n    def __init__(self, screen_width, screen_height, block_size):\n        \"\"\"\n        Initialize the snake's initial state.\n        :param screen_width: int, width of the game screen.\n        :param screen_height: int, height of the game screen.\n        :param block_size: int, size of moving units.\n        \"\"\"\n        self.length = 1\n        self.screen_width = screen_width\n        self.screen_height = screen_height\n        self.block_size = block_size\n        self.positions = [(screen_width // 2, screen_height // 2)]\n        self.score = 0\n        self.food_position = self.random_food_position()\n\n    def move(self, direction):\n        \"\"\"\n        Move the snake in the specified direction.\n        :param direction: tuple, representing the direction of movement (dx, dy).\n        \"\"\"\n        new_head = (self.positions[0][0] + direction[0] * self.block_size,\n                     self.positions[0][1] + direction[1] * self.block_size)\n\n        if new_head == self.food_position:\n            self.eat_food()\n        elif new_head in self.positions:\n            self.reset()\n        else:\n            self.positions.insert(0, new_head)\n            if len(self.positions) > self.length:\n                self.positions.pop()\n\n    def random_food_position(self):\n        \"\"\"\n        Randomly generate a new food position that is not occupied by the snake.\n        :return: tuple, representing the position (x, y) of food.\n        \"\"\"\n        while True:\n            x = random.randint(0, (self.screen_width - self.block_size) // self.block_size) * self.block_size\n            y = random.randint(0, (self.screen_height - self.block_size) // self.block_size) * self.block_size\n            food_position = (x, y)\n            if food_position not in self.positions:\n                return food_position\n\n    def reset(self):\n        \"\"\"\n        Reset the snake to its initial state.\n        \"\"\"\n        self.length = 1\n        self.positions = [(self.screen_width // 2, self.screen_height // 2)]\n        self.score = 0\n        self.food_position = self.random_food_position()\n\n    def eat_food(self):\n        \"\"\"\n        Increase the length of the snake and the score by 100, and generate a new food position.\n        \"\"\"\n        self.length += 1\n        self.score += 100\n        self.food_position = self.random_food_position()\n```",
    "71": "```python\nclass PushBoxGame:\n    \"\"\"\n    This class implements a functionality of a sokoban game, where the player needs to move boxes to designated targets in order to win.\n    \"\"\"\n\n    def __init__(self, game_map):\n        \"\"\"\n        Initialize the push box game with the map and various attributes.\n        :param game_map: list[str], the map of the push box game, represented as a list of strings. \n            Each character on the map represents a different element:\n            - '#' represents a wall;\n            - 'O' represents the player;\n            - 'G' represents the target position;\n            - 'X' represents the box.\n        \"\"\"\n        self.map = game_map\n        self.player_row, self.player_col = self.find_player()\n        self.targets = self.find_targets()\n        self.boxes = self.find_boxes()\n        self.is_game_over = False\n\n    def find_player(self):\n        for row in range(len(self.map)):\n            for col in range(len(self.map[row])):\n                if self.map[row][col] == 'O':\n                    return row, col\n        return None  # Should not happen if the map is valid\n\n    def find_targets(self):\n        targets = []\n        for row in range(len(self.map)):\n            for col in range(len(self.map[row])):\n                if self.map[row][col] == 'G':\n                    targets.append((row, col))\n        return targets\n\n    def find_boxes(self):\n        boxes = []\n        for row in range(len(self.map)):\n            for col in range(len(self.map[row])):\n                if self.map[row][col] == 'X':\n                    boxes.append((row, col))\n        return boxes\n\n    def check_win(self):\n        \"\"\"\n        Check if the game is won. The game is won when all boxes are on target positions.\n        \"\"\"\n        return all(box in self.targets for box in self.boxes)\n\n    def move(self, direction):\n        \"\"\"\n        Move the player based on the specified direction and check if the game is won.\n        :param direction: str, the direction of the player's movement. \n            It can be 'w', 's', 'a', or 'd' representing up, down, left, or right respectively.\n        :return: True if the game is won, False otherwise.\n        \"\"\"\n        move_map = {'w': (-1, 0), 's': (1, 0), 'a': (0, -1), 'd': (0, 1)}\n        if direction in move_map:\n            delta_row, delta_col = move_map[direction]\n            new_player_row = self.player_row + delta_row\n            new_player_col = self.player_col + delta_col\n\n            if self.is_valid_move(new_player_row, new_player_col):\n                self.player_row = new_player_row\n                self.player_col = new_player_col\n                self.update_boxes()\n                self.is_game_over = self.check_win()\n                return self.is_game_over\n        return False\n\n    def is_valid_move(self, new_row, new_col):\n        if self.map[new_row][new_col] == '#':\n            return False  # Wall\n        if (new_row, new_col) in self.boxes:\n            # Check if we can push the box\n            box_new_row = new_row + (new_row - self.player_row)\n            box_new_col = new_col + (new_col - self.player_col)\n            return (0 <= box_new_row < len(self.map) and\n                    0 <= box_new_col < len(self.map[0]) and\n                    self.map[box_new_row][box_new_col] != '#' and\n                    (box_new_row, box_new_col) not in self.boxes)\n        return True\n\n    def update_boxes(self):\n        # Update the position of boxes if they are pushed\n        for box_index in range(len(self.boxes)):\n            box_row, box_col = self.boxes[box_index]\n            if (box_row, box_col) == (self.player_row + (self.player_row - box_row), \n                                      self.player_col + (self.player_col - box_col)):\n                self.boxes[box_index] = (box_row + (box_row - self.player_row), \n                                         box_col + (box_col - self.player_col))\n\n    def print_map(self):\n        display_map = [list(row) for row in self.map]\n        display_map[self.player_row][self.player_col] = 'O'\n        for box_row, box_col in self.boxes:\n            display_map[box_row][box_col] = 'X'\n        for target_row, target_col in self.targets:\n            display_map[target_row][target_col] = 'G'\n\n        for row in display_map:\n            print(''.join(row))\n```",
    "80": "```python\nclass SQLQueryBuilder:\n    \"\"\"\n    This class provides methods to build SQL queries, including SELECT, INSERT, UPDATE, and DELETE statements.\n    \"\"\"\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        \"\"\"\n        Generate the SELECT SQL statement from the given parameters.\n        :param table: str, the query table in database.\n        :param columns: list of str, ['col1', 'col2'].\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        :return: str, the SQL query statement.\n        \"\"\"\n        columns_part = ', '.join(columns) if isinstance(columns, list) else columns\n        query = f\"SELECT {columns_part} FROM {table}\"\n        if where:\n            conditions = ' AND '.join([f\"{key}='{value}'\" for key, value in where.items()])\n            query += f\" WHERE {conditions}\"\n        return query\n\n    @staticmethod\n    def insert(table, data):\n        \"\"\"\n        Generate the INSERT SQL statement from the given parameters.\n        :param table: str, the table to be inserted in database.\n        :param data: dict, the key and value in SQL insert statement.\n        :return: str, the SQL insert statement.\n        \"\"\"\n        columns = ', '.join(data.keys())\n        values = ', '.join([f\"'{value}'\" for value in data.values()])\n        return f\"INSERT INTO {table} ({columns}) VALUES ({values})\"\n\n    @staticmethod\n    def delete(table, where=None):\n        \"\"\"\n        Generate the DELETE SQL statement from the given parameters.\n        :param table: str, the table that will be executed with DELETE operation in database.\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        :return: str, the SQL delete statement.\n        \"\"\"\n        query = f\"DELETE FROM {table}\"\n        if where:\n            conditions = ' AND '.join([f\"{key}='{value}'\" for key, value in where.items()])\n            query += f\" WHERE {conditions}\"\n        return query\n\n    @staticmethod\n    def update(table, data, where=None):\n        \"\"\"\n        Generate the UPDATE SQL statement from the given parameters.\n        :param table: str, the table that will be executed with UPDATE operation in database.\n        :param data: dict, the key and value in SQL update statement.\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        :return: str, the SQL update statement.\n        \"\"\"\n        set_clause = ', '.join([f\"{key}='{value}'\" for key, value in data.items()])\n        query = f\"UPDATE {table} SET {set_clause}\"\n        if where:\n            conditions = ' AND '.join([f\"{key}='{value}'\" for key, value in where.items()])\n            query += f\" WHERE {conditions}\"\n        return query\n```",
    "79": "```python\nclass SQLGenerator:\n    \"\"\"\n    This class generates SQL statements for common operations on a table, such as SELECT, INSERT, UPDATE, and DELETE.\n    \"\"\"\n\n    def __init__(self, table_name):\n        \"\"\"\n        Initialize the table name.\n        :param table_name: str\n        \"\"\"\n        self.table_name = table_name\n\n    def select(self, fields=None, condition=None):\n        \"\"\"\n        Generates a SELECT SQL statement based on the specified fields and conditions.\n        :param fields: list, optional. Default is None. The list of fields to be queried.\n        :param condition: str, optional. Default is None. The condition expression for the query.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        fields_clause = ', '.join(fields) if fields else '*'\n        condition_clause = f\" WHERE {condition}\" if condition else ''\n        return f\"SELECT {fields_clause} FROM {self.table_name}{condition_clause};\"\n\n    def insert(self, data):\n        \"\"\"\n        Generates an INSERT SQL statement based on the given data.\n        :param data: dict. The data to be inserted, in dictionary form where keys are field names and values are field values.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        fields = ', '.join(data.keys())\n        values = ', '.join(f\"'{value}'\" for value in data.values())\n        return f\"INSERT INTO {self.table_name} ({fields}) VALUES ({values});\"\n\n    def update(self, data, condition):\n        \"\"\"\n        Generates an UPDATE SQL statement based on the given data and condition.\n        :param data: dict. The data to be updated, in dictionary form where keys are field names and values are new field values.\n        :param condition: str. The condition expression for the update.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        set_clause = ', '.join(f\"{key} = '{value}'\" for key, value in data.items())\n        return f\"UPDATE {self.table_name} SET {set_clause} WHERE {condition};\"\n\n    def delete(self, condition):\n        \"\"\"\n        Generates a DELETE SQL statement based on the given condition.\n        :param condition: str. The condition expression for the delete.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        return f\"DELETE FROM {self.table_name} WHERE {condition};\"\n\n    def select_female_under_age(self, age):\n        \"\"\"\n        Generates a SQL statement to select females under a specified age.\n        :param age: int. The specified age.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        return f\"SELECT * FROM {self.table_name} WHERE age < {age} AND gender = 'female';\"\n\n    def select_by_age_range(self, min_age, max_age):\n        \"\"\"\n        Generates a SQL statement to select records within a specified age range.\n        :param min_age: int. The minimum age.\n        :param max_age: int. The maximum age.\n        :return: str. The generated SQL statement.\n        \"\"\"\n        return f\"SELECT * FROM {self.table_name} WHERE age BETWEEN {min_age} AND {max_age};\"\n```",
    "84": "```python\nimport json\nimport re\n\nclass TextFileProcessor:\n    \"\"\"\n    The class handles reading, writing, and processing text files. It can read the file as JSON, read the raw text, write content to the file, and process the file by removing non-alphabetic characters.\n    \"\"\"\n\n    def __init__(self, file_path):\n        \"\"\"\n        Initialize the file path.\n        :param file_path: str\n        \"\"\"\n        self.file_path = file_path\n\n    def read_file_as_json(self):\n        \"\"\"\n        Read the self.file_path file as json format.\n        if the file content doesn't obey json format, the code will raise error.\n        :return data: dict if the file is stored as json format, or str/int/float according to the file content otherwise.\n        \"\"\"\n        with open(self.file_path, 'r') as file:\n            return json.load(file)\n\n    def read_file(self):\n        \"\"\"\n        Read and return the content of self.file_path file.\n        :return: the same return as the read() method\n        \"\"\"\n        with open(self.file_path, 'r') as file:\n            return file.read()\n\n    def write_file(self, content):\n        \"\"\"\n        Write content into the self.file_path file, and overwrite if the file has already existed.\n        :param content: any content\n        \"\"\"\n        with open(self.file_path, 'w') as file:\n            file.write(content)\n\n    def process_file(self):\n        \"\"\"\n        Read the self.file_path file and filter out non-alphabetic characters from the content string.\n        Overwrite the after-processed data into the same self.file_path file.\n        \"\"\"\n        content = self.read_file()\n        processed_content = re.sub(r'[^a-zA-Z]', '', content)\n        self.write_file(processed_content)\n        return processed_content\n```",
    "86": "```python\nclass TicTacToe:\n    \"\"\"\n    The class represents a game of Tic-Tac-Toe and its functions include making a move on the board, \n    checking for a winner, and determining if the board is full.\n    \"\"\"\n\n    def __init__(self, N=3):\n        \"\"\"\n        Initialize a 3x3 game board with all empty spaces and current player symbol, default is 'X'.\n        \"\"\"\n        self.board = [[' ' for _ in range(N)] for _ in range(N)]\n        self.current_player = 'X'\n        self.size = N\n\n    def make_move(self, row, col):\n        \"\"\"\n        Place the current player's mark at the specified position on the board and switch the mark.\n        :param row: int, the row index of the position\n        :param col: int, the column index of the position\n        :return: bool, indicating whether the move was successful or not\n        \"\"\"\n        if 0 <= row < self.size and 0 <= col < self.size and self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        return False\n\n    def check_winner(self):\n        \"\"\"\n        Check if there is a winner on the board in rows, columns, and diagonals.\n        :return: str or None, the mark of the winner ('X' or 'O'), or None if there is no winner yet\n        \"\"\"\n        lines = self.board + list(zip(*self.board)) + [ \n            [self.board[i][i] for i in range(self.size)], \n            [self.board[i][self.size - 1 - i] for i in range(self.size)]\n        ]\n\n        for line in lines:\n            if line[0] != ' ' and all(cell == line[0] for cell in line):\n                return line[0]\n        return None\n\n    def is_board_full(self):\n        \"\"\"\n        Check if the game board is completely filled.\n        :return: bool, indicating whether the game board is full or not\n        \"\"\"\n        return all(cell != ' ' for row in self.board for cell in row)\n```",
    "85": "```python\nimport time\n\nclass Thermostat:\n    \"\"\"\n    The class manages temperature control, including setting and retrieving the target temperature, adjusting the mode, and simulating temperature operation.\n    \"\"\"\n\n    def __init__(self, current_temperature: float, target_temperature: float, mode: str):\n        \"\"\"\n        Initialize instances of the Thermostat class, including the current temperature, target temperature, and operating mode.\n        :param current_temperature: float\n        :param target_temperature: float\n        :param mode: str, the work mode ('heat' or 'cool')\n        \"\"\"\n        self.current_temperature = current_temperature\n        self.target_temperature = target_temperature\n        self.mode = mode\n\n    def get_target_temperature(self) -> float:\n        \"\"\"Get the target temperature of the thermostat.\"\"\"\n        return self.target_temperature\n\n    def set_target_temperature(self, temperature: float):\n        \"\"\"Set the target temperature.\"\"\"\n        self.target_temperature = temperature\n\n    def get_mode(self) -> str:\n        \"\"\"Get the current operating mode.\"\"\"\n        return self.mode\n\n    def set_mode(self, mode: str):\n        \"\"\"Set the operating mode.\"\"\"\n        if mode in ['heat', 'cool']:\n            self.mode = mode\n        else:\n            raise ValueError(\"Mode must be 'heat' or 'cool'.\")\n\n    def auto_set_mode(self):\n        \"\"\"Automatically set the operating mode based on the current and target temperatures.\"\"\"\n        if self.current_temperature < self.target_temperature:\n            self.set_mode('heat')\n        else:\n            self.set_mode('cool')\n\n    def auto_check_conflict(self) -> bool:\n        \"\"\"\n        Check for conflicts between the operating mode and temperature relationship.\n        Adjusts mode if there is a conflict.\n        :return: True if there is no conflict, False otherwise.\n        \"\"\"\n        if (self.current_temperature < self.target_temperature and self.mode == 'cool') or \\\n           (self.current_temperature > self.target_temperature and self.mode == 'heat'):\n            self.auto_set_mode()\n            return False\n        return True\n\n    def simulate_operation(self) -> int:\n        \"\"\"\n        Simulate the operation of the thermostat, adjusting the current temperature until the target is reached.\n        :return: int, the time it took to complete the simulation in seconds.\n        \"\"\"\n        self.auto_set_mode()\n        start_time = time.time()\n        \n        while abs(self.current_temperature - self.target_temperature) > 0.1:\n            adjustment = 0.1 if self.mode == 'heat' else -0.1\n            self.current_temperature += adjustment\n            time.sleep(1)  # Simulate time passing\n        \n        return int(time.time() - start_time)\n```",
    "83": "```python\nimport sqlite3\n\nclass StudentDatabaseProcessor:\n    \"\"\"\n    This is a class with database operations, including inserting student information,\n    searching for student information by name, and deleting student information by name.\n    \"\"\"\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initializes the StudentDatabaseProcessor object with the specified database name.\n        :param database_name: str, the name of the SQLite database.\n        \"\"\"\n        self.database_name = database_name\n        self.connection = sqlite3.connect(self.database_name)\n        self.cursor = self.connection.cursor()\n        self.create_student_table()\n\n    def create_student_table(self):\n        \"\"\"\n        Creates a \"students\" table in the database if it does not exist already.\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS students (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT NOT NULL,\n                age INTEGER NOT NULL,\n                gender TEXT NOT NULL,\n                grade INTEGER NOT NULL\n            )\n        ''')\n        self.connection.commit()\n\n    def insert_student(self, student_data):\n        \"\"\"\n        Inserts a new student into the \"students\" table.\n        :param student_data: dict, a dictionary containing the student's information (name, age, gender, grade).\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            INSERT INTO students (name, age, gender, grade)\n            VALUES (:name, :age, :gender, :grade)\n        ''', student_data)\n        self.connection.commit()\n\n    def search_student_by_name(self, name):\n        \"\"\"\n        Searches for a student in the \"students\" table by their name.\n        :param name: str, the name of the student to search for.\n        :return: list of tuples, the rows from the \"students\" table that match the search criteria.\n        \"\"\"\n        self.cursor.execute('''\n            SELECT * FROM students WHERE name = ?\n        ''', (name,))\n        return self.cursor.fetchall()\n\n    def delete_student_by_name(self, name):\n        \"\"\"\n        Deletes a student from the \"students\" table by their name.\n        :param name: str, the name of the student to delete.\n        :return: None\n        \"\"\"\n        self.cursor.execute('''\n            DELETE FROM students WHERE name = ?\n        ''', (name,))\n        self.connection.commit()\n\n    def close_connection(self):\n        \"\"\"\n        Closes the database connection.\n        :return: None\n        \"\"\"\n        self.connection.close()\n```",
    "91": "```python\nimport urllib.parse\n\nclass UrlPath:\n    \"\"\"\n    The class is a utility for encapsulating and manipulating the path component of a URL,\n    including adding nodes, parsing path strings, and building path strings with optional encoding.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the UrlPath object with an empty list of segments and a flag indicating the presence of an end tag.\n        \"\"\"\n        self.segments = []\n        self.with_end_tag = False\n\n    def add(self, segment: str):\n        \"\"\"\n        Adds a segment to the list of segments in the UrlPath.\n        :param segment: str, the segment to add.\n        >>> url_path = UrlPath()\n        >>> url_path.add('foo')\n        >>> url_path.add('bar')\n        >>> url_path.segments\n        ['foo', 'bar']\n        \"\"\"\n        if segment:\n            self.segments.append(segment)\n\n    def parse(self, path: str, charset: str):\n        \"\"\"\n        Parses a given path string and populates the list of segments in the UrlPath.\n        :param path: str, the path string to parse.\n        :param charset: str, the character encoding of the path string.\n        >>> url_path = UrlPath()\n        >>> url_path.parse('/foo/bar/', 'utf-8')\n        >>> url_path.segments\n        ['foo', 'bar']\n        \"\"\"\n        fixed_path = self.fix_path(path)\n        self.segments = [urllib.parse.unquote(segment, encoding=charset) for segment in fixed_path.split('/') if segment]\n\n    @staticmethod\n    def fix_path(path: str) -> str:\n        \"\"\"\n        Fixes the given path string by removing leading and trailing slashes.\n        :param path: str, the path string to fix.\n        :return: str, the fixed path string.\n        >>> url_path = UrlPath()\n        >>> url_path.fix_path('/foo/bar/')\n        'foo/bar'\n        \"\"\"\n        return path.strip('/')\n\n    def build(self) -> str:\n        \"\"\"\n        Builds the URL path string from the segments.\n        :return: str, the constructed URL path string.\n        \"\"\"\n        path = '/'.join(self.segments)\n        if self.with_end_tag:\n            path += '/'\n        return path\n```",
    "82": "```python\nclass StockPortfolioTracker:\n    \"\"\"\n    This is a class as StockPortfolioTracker that allows to add stocks, remove stocks,\n    buy stocks, sell stocks, calculate the total value of the portfolio, and obtain a summary of the portfolio.\n    \"\"\"\n\n    def __init__(self, cash_balance):\n        \"\"\"\n        Initialize the StockPortfolioTracker class with a cash balance and an empty portfolio.\n        \"\"\"\n        self.portfolio = []\n        self.cash_balance = cash_balance\n\n    def add_stock(self, stock):\n        \"\"\"\n        Add a stock to the portfolio.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        \"\"\"\n        self.portfolio.append(stock)\n\n    def remove_stock(self, stock):\n        \"\"\"\n        Remove a stock from the portfolio.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        :return: True if stock was removed successfully, False otherwise.\n        \"\"\"\n        for idx, item in enumerate(self.portfolio):\n            if item == stock:\n                del self.portfolio[idx]\n                return True\n        return False\n\n    def buy_stock(self, stock):\n        \"\"\"\n        Buy a stock and add it to the portfolio.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        :return: True if the stock was bought successfully, False if the cash balance is not enough.\n        \"\"\"\n        total_cost = stock['price'] * stock['quantity']\n        if self.cash_balance >= total_cost:\n            self.cash_balance -= total_cost\n            self.add_stock(stock)\n            return True\n        return False\n\n    def sell_stock(self, stock):\n        \"\"\"\n        Sell a stock and remove it from the portfolio and add the cash to the cash balance.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        :return: True if the stock was sold successfully, False if the quantity of the stock is not enough.\n        \"\"\"\n        for item in self.portfolio:\n            if item['name'] == stock['name'] and item['quantity'] >= stock['quantity']:\n                total_value = stock['price'] * stock['quantity']\n                item['quantity'] -= stock['quantity']\n                if item['quantity'] == 0:\n                    self.remove_stock(item)\n                self.cash_balance += total_value\n                return True\n        return False\n\n    def calculate_portfolio_value(self):\n        \"\"\"\n        Calculate the total value of the portfolio.\n        :return: the total value of the portfolio, float.\n        \"\"\"\n        return sum(item['price'] * item['quantity'] for item in self.portfolio)\n\n    def get_portfolio_summary(self):\n        \"\"\"\n        Get a summary of the portfolio.\n        :return: a tuple of the total value of the portfolio and a list of dictionaries with keys \"name\" and \"value\"\n        \"\"\"\n        total_value = self.calculate_portfolio_value()\n        summary = [{'name': item['name'], 'value': item['price'] * item['quantity']} for item in self.portfolio]\n        return total_value, summary\n\n    def get_stock_value(self, stock):\n        \"\"\"\n        Get the value of a stock.\n        :param stock: a dictionary with keys \"name\", \"price\", and \"quantity\"\n        :return: the value of the stock, float.\n        \"\"\"\n        return stock['price'] * stock['quantity']\n```",
    "89": "```python\nimport random\n\nclass TwentyFourPointGame:\n    \"\"\"\n    This is a game of twenty-four points, which provides to generate four numbers \n    and check whether the player's expression is equal to 24.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.nums = self._generate_cards()\n\n    def _generate_cards(self) -> list:\n        \"\"\"\n        Generate four random numbers between 1 and 9 for the cards.\n        :return: list of integers, representing the player's cards\n        \"\"\"\n        return [random.randint(1, 9) for _ in range(4)]\n\n    def get_my_cards(self) -> list:\n        \"\"\"\n        Get a list of four random numbers between 1 and 9 representing the player's cards.\n        :return: list of integers, representing the player's cards\n        >>> game = TwentyFourPointGame()\n        >>> game.get_my_cards()\n        [4, 3, 6, 6]  # Example output\n        \"\"\"\n        return self.nums\n\n    def answer(self, expression: str) -> bool:\n        \"\"\"\n        Check if a given mathematical expression using the cards can evaluate to 24.\n        :param expression: string, mathematical expression using the cards\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        >>> game = TwentyFourPointGame()\n        >>> game.nums = [4, 3, 6, 6]\n        >>> ans = \"4*3+6+6\"\n        >>> ret = game.answer(ans)\n        True\n        \"\"\"\n        return self.evaluate_expression(expression)\n\n    def evaluate_expression(self, expression: str) -> bool:\n        \"\"\"\n        Evaluate a mathematical expression and check if the result is 24.\n        :param expression: string, mathematical expression\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        >>> game = TwentyFourPointGame()\n        >>> nums = [4, 3, 6, 6]\n        >>> ans = \"4*3+6+6\"\n        >>> ret = game.evaluate_expression(ans)\n        True\n        \"\"\"\n        try:\n            return eval(expression) == 24\n        except Exception:\n            return False\n```",
    "87": "```python\nimport datetime\n\nclass TimeUtils:\n    \"\"\"\n    A utility class for handling various time-related operations.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize TimeUtils and set the current datetime.\n        \"\"\"\n        self.datetime = datetime.datetime.now()\n\n    def get_current_time(self):\n        \"\"\"\n        Return the current time in the format of '%H:%M:%S'.\n        :return: string\n        \"\"\"\n        return self.datetime.strftime('%H:%M:%S')\n\n    def get_current_date(self):\n        \"\"\"\n        Return the current date in the format of '%Y-%m-%d'.\n        :return: string\n        \"\"\"\n        return self.datetime.strftime('%Y-%m-%d')\n\n    def add_seconds(self, seconds):\n        \"\"\"\n        Add the specified number of seconds to the current time.\n        :param seconds: int, number of seconds to add\n        :return: string, time after adding the specified number of seconds in the format '%H:%M:%S'\n        \"\"\"\n        future_time = self.datetime + datetime.timedelta(seconds=seconds)\n        return future_time.strftime('%H:%M:%S')\n\n    def string_to_datetime(self, string):\n        \"\"\"\n        Convert the time string to a datetime instance.\n        :param string: string, string before converting format\n        :return: datetime instance\n        \"\"\"\n        return datetime.datetime.strptime(string, \"%Y-%m-%d %H:%M:%S\")\n\n    def datetime_to_string(self, dt):\n        \"\"\"\n        Convert a datetime instance to a string.\n        :param dt: the datetime instance to convert\n        :return: string, converted time string\n        \"\"\"\n        return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    def get_minutes(self, string_time1, string_time2):\n        \"\"\"\n        Calculate how many minutes have passed between two times, and round the results to the nearest minute.\n        :return: int, the number of minutes between two times, rounded off\n        \"\"\"\n        time1 = self.string_to_datetime(string_time1)\n        time2 = self.string_to_datetime(string_time2)\n        return round((time2 - time1).total_seconds() / 60)\n\n    def get_format_time(self, year, month, day, hour, minute, second):\n        \"\"\"\n        Get formatted time.\n        :param year: int\n        :param month: int\n        :param day: int\n        :param hour: int\n        :param minute: int\n        :param second: int\n        :return: formatted time string\n        \"\"\"\n        dt = datetime.datetime(year, month, day, hour, minute, second)\n        return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n```",
    "88": "```python\nfrom math import pi, fabs\n\nclass TriCalculator:\n    \"\"\"\n    The class allows to calculate trigonometric values, including cosine, sine, and tangent, using Taylor series approximations.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def cos(self, x):\n        \"\"\"\n        Calculate the cos value of the x-degree angle\n        :param x: float\n        :return: float\n        >>> tricalculator = TriCalculator()\n        >>> tricalculator.cos(60)\n        0.5\n        \"\"\"\n        return self.taylor(x, 10)\n\n    def factorial(self, a):\n        \"\"\"\n        Calculate the factorial of a\n        :param a: int\n        :return: int\n        >>> tricalculator = TriCalculator()\n        >>> tricalculator.factorial(5)\n        120\n        \"\"\"\n        if a < 0:\n            raise ValueError(\"Factorial is not defined for negative numbers.\")\n        result = 1\n        for i in range(1, a + 1):\n            result *= i\n        return result\n\n    def taylor(self, x, n):\n        \"\"\"\n        Finding the n-order Taylor expansion value of cos (x/180 * pi)\n        :param x: int\n        :param n: int\n        :return: float\n        >>> tricalculator = TriCalculator()\n        >>> tricalculator.taylor(60, 10)\n        0.5000000000000001\n        \"\"\"\n        radians = x * (pi / 180)\n        cos_value = 0\n        for i in range(n):\n            term = ((-1) ** i) * (radians ** (2 * i)) / self.factorial(2 * i)\n            cos_value += term\n        return cos_value\n\n    def sin(self, x):\n        \"\"\"\n        Calculate the sin value of the x-degree angle\n        :param x: float\n        :return: float\n        >>> tricalculator = TriCalculator()\n        >>> tricalculator.sin(30)\n        0.5\n        \"\"\"\n        return self.taylor_sin(x, 10)\n\n    def taylor_sin(self, x, n):\n        \"\"\"\n        Finding the n-order Taylor expansion value of sin (x/180 * pi)\n        :param x: int\n        :param n: int\n        :return: float\n        >>> tricalculator = TriCalculator()\n        >>> tricalculator.taylor_sin(30, 10)\n        0.49999999999999994\n        \"\"\"\n        radians = x * (pi / 180)\n        sin_value = 0\n        for i in range(n):\n            term = ((-1) ** i) * (radians ** (2 * i + 1)) / self.factorial(2 * i + 1)\n            sin_value += term\n        return sin_value\n\n    def tan(self, x):\n        \"\"\"\n        Calculate the tan value of the x-degree angle\n        :param x: float\n        :return: float\n        >>> tricalculator = TriCalculator()\n        >>> tricalculator.tan(45)\n        1.0\n        \"\"\"\n        sin_value = self.sin(x)\n        cos_value = self.cos(x)\n        if fabs(cos_value) < 1e-10:\n            raise ValueError(\"Tangent is undefined for angles where cosine is zero.\")\n        return sin_value / cos_value\n```",
    "90": "```python\nfrom urllib.parse import urlparse, parse_qs\n\nclass URLHandler:\n    \"\"\"\n    The class supports handling URLs, including extracting the scheme, host, path, query parameters, and fragment.\n    \"\"\"\n\n    def __init__(self, url):\n        \"\"\"\n        Initialize URLHandler with a given URL.\n        \"\"\"\n        self.url = url\n        self.parsed_url = urlparse(url)\n\n    def get_scheme(self):\n        \"\"\"\n        Get the scheme of the URL.\n        :return: string, the scheme of the URL.\n        >>> urlhandler = URLHandler(\"https://www.baidu.com/s?wd=aaa&rsv_spt=1#page\")\n        >>> urlhandler.get_scheme()\n        'https'\n        \"\"\"\n        return self.parsed_url.scheme\n\n    def get_host(self):\n        \"\"\"\n        Get the host domain name of the URL.\n        :return: string, the host domain name of the URL.\n        >>> urlhandler = URLHandler(\"https://www.baidu.com/s?wd=aaa&rsv_spt=1#page\")\n        >>> urlhandler.get_host()\n        'www.baidu.com'\n        \"\"\"\n        return self.parsed_url.netloc\n\n    def get_path(self):\n        \"\"\"\n        Get the path of the resource in the URL.\n        :return: string, the address of the resource in the URL.\n        >>> urlhandler = URLHandler(\"https://www.baidu.com/s?wd=aaa&rsv_spt=1#page\")\n        >>> urlhandler.get_path()\n        '/s'\n        \"\"\"\n        return self.parsed_url.path\n\n    def get_query_params(self):\n        \"\"\"\n        Get the request parameters of the URL.\n        :return: dict, the request parameters of the URL.\n        >>> urlhandler = URLHandler(\"https://www.baidu.com/s?wd=aaa&rsv_spt=1#page\")\n        >>> urlhandler.get_query_params()\n        {'wd': ['aaa'], 'rsv_spt': ['1']}\n        \"\"\"\n        return parse_qs(self.parsed_url.query)\n\n    def get_fragment(self):\n        \"\"\"\n        Get the fragment after '#' in the URL.\n        :return: string, the fragment after '#' of the URL.\n        >>> urlhandler = URLHandler(\"https://www.baidu.com/s?wd=aaa&rsv_spt=1#page\")\n        >>> urlhandler.get_fragment()\n        'page'\n        \"\"\"\n        return self.parsed_url.fragment\n```",
    "92": "```python\nimport sqlite3\n\nclass UserLoginDB:\n    \"\"\"\n    This is a database management class for user login verification, providing functions for inserting user information, \n    searching user information, deleting user information, and validating user login.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the UserLoginDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"Creates the users table if it does not exist.\"\"\"\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password TEXT NOT NULL\n            )\n        ''')\n        self.connection.commit()\n\n    def insert_user(self, username, password):\n        \"\"\"\n        Inserts a new user into the \"users\" table.\n        :param username: str, the username of the user.\n        :param password: str, the password of the user.\n        :return: None\n        \"\"\"\n        try:\n            self.cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\n            self.connection.commit()\n        except sqlite3.IntegrityError:\n            print(\"Error: Username already exists.\")\n\n    def search_user_by_username(self, username):\n        \"\"\"\n        Searches for users in the \"users\" table by username.\n        :param username: str, the username of the user to search for.\n        :return: list of tuples, the rows from the \"users\" table that match the search criteria.\n        \"\"\"\n        self.cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))\n        return self.cursor.fetchall()\n\n    def delete_user_by_username(self, username):\n        \"\"\"\n        Deletes a user from the \"users\" table by username.\n        :param username: str, the username of the user to delete.\n        :return: None\n        \"\"\"\n        self.cursor.execute(\"DELETE FROM users WHERE username = ?\", (username,))\n        self.connection.commit()\n\n    def validate_user_login(self, username, password):\n        \"\"\"\n        Determine whether the user can log in, that is, the user is in the database and the password is correct.\n        :param username: str, the username of the user to validate.\n        :param password: str, the password of the user to validate.\n        :return: bool, representing whether the user can log in correctly.\n        \"\"\"\n        self.cursor.execute(\"SELECT password FROM users WHERE username = ?\", (username,))\n        result = self.cursor.fetchone()\n        return result is not None and result[0] == password\n\n    def close(self):\n        \"\"\"Closes the database connection.\"\"\"\n        self.connection.close()\n```",
    "81": "```python\nimport math\nfrom collections import Counter\n\nclass Statistics3:\n    \"\"\"\n    This class implements methods for calculating statistical indicators\n    such as median, mode, correlation, mean, correlation matrix,\n    standard deviation, and Z-score.\n    \"\"\"\n\n    @staticmethod\n    def median(data):\n        \"\"\"\n        Calculates the median of the given list.\n        :param data: The given list (list of numbers).\n        :return: The median of the given list (float).\n        \"\"\"\n        n = len(data)\n        if n == 0:\n            raise ValueError(\"Data list is empty\")\n        sorted_data = sorted(data)\n        mid = n // 2\n        return (sorted_data[mid] + sorted_data[mid - 1]) / 2 if n % 2 == 0 else sorted_data[mid]\n\n    @staticmethod\n    def mode(data):\n        \"\"\"\n        Calculates the mode of the given list.\n        :param data: The given list (list of numbers).\n        :return: The mode of the given list (list).\n        \"\"\"\n        if not data:\n            raise ValueError(\"Data list is empty\")\n        frequency = Counter(data)\n        max_count = max(frequency.values())\n        return [num for num, count in frequency.items() if count == max_count]\n\n    @staticmethod\n    def correlation(x, y):\n        \"\"\"\n        Calculates the correlation of the given lists.\n        :param x: The first list (list of numbers).\n        :param y: The second list (list of numbers).\n        :return: The correlation of the given lists (float).\n        \"\"\"\n        if len(x) != len(y):\n            raise ValueError(\"Lists must be of the same length\")\n        n = len(x)\n        mean_x = Statistics3.mean(x)\n        mean_y = Statistics3.mean(y)\n        covariance = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y)) / n\n        std_x = Statistics3.standard_deviation(x)\n        std_y = Statistics3.standard_deviation(y)\n        return covariance / (std_x * std_y)\n\n    @staticmethod\n    def mean(data):\n        \"\"\"\n        Calculates the mean of the given list.\n        :param data: The given list (list of numbers).\n        :return: The mean of the given list (float).\n        \"\"\"\n        if not data:\n            raise ValueError(\"Data list is empty\")\n        return sum(data) / len(data)\n\n    @staticmethod\n    def correlation_matrix(data):\n        \"\"\"\n        Calculates the correlation matrix of the given list of lists.\n        :param data: The given list of lists (2D list).\n        :return: The correlation matrix of the given list (list of lists).\n        \"\"\"\n        if not data or not all(isinstance(row, list) for row in data):\n            raise ValueError(\"Input must be a 2D list\")\n        num_vars = len(data)\n        return [[Statistics3.correlation(data[i], data[j]) for j in range(num_vars)] for i in range(num_vars)]\n\n    @staticmethod\n    def standard_deviation(data):\n        \"\"\"\n        Calculates the standard deviation of the given list.\n        :param data: The given list (list of numbers).\n        :return: The standard deviation of the given list (float).\n        \"\"\"\n        if not data:\n            raise ValueError(\"Data list is empty\")\n        mean_value = Statistics3.mean(data)\n        variance = sum((x - mean_value) ** 2 for x in data) / len(data)\n        return math.sqrt(variance)\n\n    @staticmethod\n    def z_score(data):\n        \"\"\"\n        Calculates the z-score of the given list.\n        :param data: The given list (list of numbers).\n        :return: The z-score of the given list (list).\n        \"\"\"\n        if not data:\n            raise ValueError(\"Data list is empty\")\n        mean_value = Statistics3.mean(data)\n        std_dev = Statistics3.standard_deviation(data)\n        return [(x - mean_value) / std_dev for x in data]\n```",
    "93": "```python\nimport numpy as np\n\nclass VectorUtil:\n    \"\"\"\n    The class provides vector operations, including calculating similarity, cosine similarities, average similarity, and IDF weights.\n    \"\"\"\n\n    @staticmethod\n    def similarity(vector_1, vector_2):\n        \"\"\"\n        Compute the cosine similarity between one vector and another vector.\n        :param vector_1: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).\n        :param vector_2: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).\n        :return: float, Cosine similarity between `vector_1` and `vector_2`\n        \"\"\"\n        dot_product = np.dot(vector_1, vector_2)\n        norm_1 = np.linalg.norm(vector_1)\n        norm_2 = np.linalg.norm(vector_2)\n        return dot_product / (norm_1 * norm_2) if norm_1 and norm_2 else 0.0\n\n    @staticmethod\n    def cosine_similarities(vector_1, vectors_all):\n        \"\"\"\n        Compute cosine similarities between one vector and a set of other vectors.\n        :param vector_1: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).\n        :param vectors_all: list of numpy.ndarray, For each row in vectors_all, distance from vector_1 is computed, expected shape (num_vectors, dim).\n        :return: numpy.ndarray, Cosine similarities between `vector_1` and each row in `vectors_all`, shape (num_vectors,).\n        \"\"\"\n        return np.array([VectorUtil.similarity(vector_1, vector) for vector in vectors_all])\n\n    @staticmethod\n    def n_similarity(vector_list_1, vector_list_2):\n        \"\"\"\n        Compute cosine similarity between two sets of vectors.\n        :param vector_list_1: list of numpy.ndarray\n        :param vector_list_2: list of numpy.ndarray\n        :return: numpy.ndarray, Similarities between vector_list_1 and vector_list_2.\n        \"\"\"\n        similarities = [VectorUtil.similarity(v1, v2) for v1 in vector_list_1 for v2 in vector_list_2]\n        return np.mean(similarities) if similarities else 0.0\n\n    @staticmethod\n    def compute_idf_weight_dict(total_num, number_dict):\n        \"\"\"\n        Calculate log(total_num+1/count+1) for each count in number_dict\n        :param total_num: int\n        :param number_dict: dict\n        :return: dict\n        \"\"\"\n        return {key: np.log((total_num + 1) / (count + 1)) for key, count in number_dict.items()}\n```",
    "96": "```python\nclass WeatherSystem:\n    \"\"\"\n    This is a class representing a weather system that provides functionality to query weather information for a specific city\n    and convert temperature units between Celsius and Fahrenheit.\n    \"\"\"\n\n    def __init__(self, city: str) -> None:\n        \"\"\"\n        Initialize the weather system with a city name.\n        \"\"\"\n        self.temperature = None\n        self.weather = None\n        self.city = city\n\n    def query(self, weather_list: dict, tmp_units: str = 'celsius') -> tuple:\n        \"\"\"\n        Query the weather system for the weather and temperature of the city, \n        and convert the temperature units based on the input parameter.\n        \n        :param weather_list: a dictionary of weather information for different cities, dict.\n        :param tmp_units: the temperature units to convert to, str.\n        :return: the temperature and weather of the city, tuple.\n        \n        >>> weatherSystem = WeatherSystem('New York')\n        >>> weather_list = {\n        ...     'New York': {'weather': 'sunny', 'temperature': 27, 'temperature units': 'celsius'},\n        ...     'Beijing': {'weather': 'cloudy', 'temperature': 23, 'temperature units': 'celsius'}\n        ... }\n        >>> weatherSystem.query(weather_list)\n        (27, 'sunny')\n        \"\"\"\n        if self.city not in weather_list:\n            raise ValueError(\"City not found in weather list.\")\n        \n        city_weather = weather_list[self.city]\n        self.weather = city_weather['weather']\n        self.temperature = city_weather['temperature']\n\n        if tmp_units.lower() == 'fahrenheit':\n            self.temperature = self.celsius_to_fahrenheit()\n\n        return self.temperature, self.weather\n\n    def set_city(self, city: str) -> None:\n        \"\"\"\n        Set the city of the weather system.\n        \n        :param city: the city to set, str.\n        :return: None\n        \n        >>> weatherSystem = WeatherSystem('New York')\n        >>> weatherSystem.set_city('Beijing')\n        >>> weatherSystem.city\n        'Beijing'\n        \"\"\"\n        self.city = city\n\n    def celsius_to_fahrenheit(self) -> float:\n        \"\"\"\n        Convert the temperature from Celsius to Fahrenheit.\n        \n        :return: the temperature in Fahrenheit, float.\n        \n        >>> weatherSystem = WeatherSystem('New York')\n        >>> weatherSystem.temperature = 27\n        >>> weatherSystem.celsius_to_fahrenheit()\n        80.6\n        \"\"\"\n        return (self.temperature * 9/5) + 32\n\n    def fahrenheit_to_celsius(self) -> float:\n        \"\"\"\n        Convert the temperature from Fahrenheit to Celsius.\n        \n        :return: the temperature in Celsius, float.\n        \n        >>> weatherSystem = WeatherSystem('New York')\n        >>> weatherSystem.temperature = 80.6\n        >>> weatherSystem.fahrenheit_to_celsius()\n        27.0\n        \"\"\"\n        return (self.temperature - 32) * 5/9\n```",
    "95": "```python\nclass Warehouse:\n    \"\"\"\n    The class manages inventory and orders, including adding products, updating product quantities,\n    retrieving product quantities, creating orders, changing order statuses, and tracking orders.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize two fields:\n        self.inventory: dict that stores the products {Product ID: {'name': str, 'quantity': int}}.\n        self.orders: dict that stores the orders {Order ID: {'product_id': int, 'quantity': int, 'status': str}}.\n        \"\"\"\n        self.inventory = {}\n        self.orders = {}\n\n    def add_product(self, product_id, name, quantity):\n        \"\"\"\n        Add product to inventory or update the quantity if it already exists.\n        :param product_id: int\n        :param name: str, product name\n        :param quantity: int, product quantity\n        \"\"\"\n        if product_id in self.inventory:\n            self.inventory[product_id]['quantity'] += quantity\n        else:\n            self.inventory[product_id] = {'name': name, 'quantity': quantity}\n\n    def update_product_quantity(self, product_id, quantity):\n        \"\"\"\n        Update the quantity of the specified product in inventory.\n        :param product_id: int\n        :param quantity: int, amount to change (can be negative)\n        \"\"\"\n        if product_id in self.inventory:\n            self.inventory[product_id]['quantity'] += quantity\n\n    def get_product_quantity(self, product_id):\n        \"\"\"\n        Get the quantity of specific product by product_id.\n        :param product_id: int\n        :return: int if product exists, False otherwise.\n        \"\"\"\n        return self.inventory[product_id]['quantity'] if product_id in self.inventory else False\n\n    def create_order(self, order_id, product_id, quantity):\n        \"\"\"\n        Create an order if product is available in the required quantity.\n        :param order_id: int\n        :param product_id: int\n        :param quantity: int, quantity of product\n        :return: False if product is not available or quantity is insufficient\n        \"\"\"\n        if product_id in self.inventory and self.inventory[product_id]['quantity'] >= quantity:\n            self.orders[order_id] = {'product_id': product_id, 'quantity': quantity, 'status': 'Shipped'}\n            self.update_product_quantity(product_id, -quantity)\n            return True\n        return False\n\n    def change_order_status(self, order_id, status):\n        \"\"\"\n        Change the status of the specified order.\n        :param order_id: int\n        :param status: str, new status\n        :return: False if order_id does not exist\n        \"\"\"\n        if order_id in self.orders:\n            self.orders[order_id]['status'] = status\n            return True\n        return False\n\n    def track_order(self, order_id):\n        \"\"\"\n        Get the status of the specified order.\n        :param order_id: int\n        :return: str status if order exists, False otherwise.\n        \"\"\"\n        return self.orders[order_id]['status'] if order_id in self.orders else False\n```",
    "94": "```python\nclass VendingMachine:\n    \"\"\"\n    This is a class to simulate a vending machine, including adding products, inserting coins,\n    purchasing products, viewing balance, replenishing product inventory, and displaying product information.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initializes the vending machine's inventory and balance.\"\"\"\n        self.inventory = {}\n        self.balance = 0.0\n\n    def add_item(self, item_name, price, quantity):\n        \"\"\"\n        Adds a product to the vending machine's inventory.\n        :param item_name: The name of the product to be added, str.\n        :param price: The price of the product to be added, float.\n        :param quantity: The quantity of the product to be added, int.\n        \"\"\"\n        self.inventory[item_name] = {'price': price, 'quantity': quantity}\n\n    def insert_coin(self, amount):\n        \"\"\"\n        Inserts coins into the vending machine.\n        :param amount: The amount of coins to be inserted, float.\n        :return: The balance of the vending machine after the coins are inserted, float.\n        \"\"\"\n        self.balance += amount\n        return self.balance\n\n    def purchase_item(self, item_name):\n        \"\"\"\n        Purchases a product from the vending machine and returns the balance after the purchase.\n        :param item_name: The name of the product to be purchased, str.\n        :return: If successful, returns the balance of the vending machine after the product is purchased, \n                 float; otherwise, returns False.\n        \"\"\"\n        if item_name in self.inventory:\n            item = self.inventory[item_name]\n            if item['quantity'] > 0 and self.balance >= item['price']:\n                item['quantity'] -= 1\n                self.balance -= item['price']\n                return self.balance\n        return False\n\n    def restock_item(self, item_name, quantity):\n        \"\"\"\n        Replenishes the inventory of a product already in the vending machine.\n        :param item_name: The name of the product to be replenished, str.\n        :param quantity: The quantity of the product to be replenished, int.\n        :return: If the product is already in the vending machine, returns True; otherwise, returns False.\n        \"\"\"\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] += quantity\n            return True\n        return False\n\n    def display_items(self):\n        \"\"\"\n        Displays the products in the vending machine.\n        :return: If the vending machine is empty, returns False; otherwise, returns a list of the products in \n                 the vending machine, str.\n        \"\"\"\n        if not self.inventory:\n            return False\n        return ', '.join(f\"{item} - ${info['price']} [{info['quantity']}]\" \n                         for item, info in self.inventory.items())\n```",
    "97": "```python\nclass Words2Numbers:\n    \"\"\"\n    The class provides a text-to-number conversion utility, allowing conversion of written numbers (in words) to their numerical representation.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the word lists and dictionaries required for conversion\n        \"\"\"\n        self.numwords = {}\n        self.units = [\n            \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n            \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n            \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\n        ]\n        self.tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n        self.scales = [\"hundred\", \"thousand\", \"million\", \"billion\", \"trillion\"]\n\n        self.numwords[\"and\"] = (1, 0)\n        for idx, word in enumerate(self.units):\n            self.numwords[word] = (1, idx)\n        for idx, word in enumerate(self.tens):\n            self.numwords[word] = (1, idx * 10)\n        for idx, word in enumerate(self.scales):\n            self.numwords[word] = (10 ** (idx * 3 or 2), 0)\n\n        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}\n        self.ordinal_endings = [('ieth', 'y'), ('th', '')]\n\n    def text2int(self, textnum):\n        \"\"\"\n        Convert the word string to the corresponding integer string\n        :param textnum: string, the word string to be converted\n        :return: string, the final converted integer string\n        >>> w2n = Words2Numbers()\n        >>> w2n.text2int(\"thirty-two\")\n        \"32\"\n        \"\"\"\n        textnum = textnum.replace(\"-\", \" \")\n        parts = textnum.split()\n        current = total = 0\n\n        for part in parts:\n            if part not in self.numwords:\n                raise ValueError(f\"Invalid word: {part}\")\n            scale, increment = self.numwords[part]\n            current += increment\n            if scale > 1:\n                total += current * scale\n                current = 0\n\n        return str(total + current)\n\n    def is_valid_input(self, textnum):\n        \"\"\"\n        Check if the input text contains only valid words that can be converted into numbers.\n        :param textnum: The input text containing words representing numbers.\n        :return: True if input is valid, False otherwise.\n        >>> w2n = Words2Numbers()\n        >>> w2n.is_valid_input(\"thirty-two\")\n        True\n        \"\"\"\n        textnum = textnum.replace(\"-\", \" \")\n        parts = textnum.split()\n        return all(part in self.numwords or part in self.ordinal_words for part in parts)\n```",
    "99": "```python\nimport zipfile\nimport os\n\n\nclass ZipFileProcessor:\n    \"\"\"\n    This is a compressed file processing class that provides the ability to read and decompress compressed files.\n    \"\"\"\n\n    def __init__(self, file_name):\n        \"\"\"\n        Initialize file name.\n        :param file_name: string\n        \"\"\"\n        self.file_name = file_name\n\n    def read_zip_file(self):\n        \"\"\"\n        Get open file object.\n        :return: If successful, returns the open file object; otherwise, returns None.\n        \"\"\"\n        try:\n            return zipfile.ZipFile(self.file_name, 'r')\n        except (FileNotFoundError, zipfile.BadZipFile) as e:\n            print(f\"Error opening zip file: {e}\")\n            return None\n\n    def extract_all(self, output_path):\n        \"\"\"\n        Extract all zip files and place them in the specified path.\n        :param output_path: string, The location of the extracted file.\n        :return: True if successful, False otherwise.\n        \"\"\"\n        with self.read_zip_file() as zip_file:\n            if zip_file:\n                try:\n                    zip_file.extractall(output_path)\n                    return True\n                except Exception as e:\n                    print(f\"Error extracting files: {e}\")\n                    return False\n        return False\n\n    def extract_file(self, file_name, output_path):\n        \"\"\"\n        Extract the file with the specified name from the zip file and place it in the specified path.\n        :param file_name: string, The name of the file to be uncompressed.\n        :param output_path: string, The location of the extracted file.\n        :return: True if successful, False otherwise.\n        \"\"\"\n        with self.read_zip_file() as zip_file:\n            if zip_file:\n                try:\n                    zip_file.extract(file_name, output_path)\n                    return True\n                except KeyError:\n                    print(f\"File {file_name} not found in zip.\")\n                except Exception as e:\n                    print(f\"Error extracting file: {e}\")\n        return False\n\n    def create_zip_file(self, files, output_file_name):\n        \"\"\"\n        Compress the specified file list into a zip file and place it in the specified path.\n        :param files: list of string, List of files to compress.\n        :param output_file_name: string, Specified output path.\n        :return: True if successful, False otherwise.\n        \"\"\"\n        try:\n            with zipfile.ZipFile(output_file_name, 'w') as zip_file:\n                for file in files:\n                    if os.path.exists(file):\n                        zip_file.write(file, os.path.basename(file))\n                    else:\n                        print(f\"File {file} does not exist.\")\n            return True\n        except Exception as e:\n            print(f\"Error creating zip file: {e}\")\n            return False\n```",
    "98": "```python\nimport xml.etree.ElementTree as ET\n\n\nclass XMLProcessor:\n    \"\"\"\n    A class to handle XML files, including reading, writing, processing, and finding elements in an XML file.\n    \"\"\"\n\n    def __init__(self, file_name):\n        \"\"\"\n        Initialize the XMLProcessor object with the given file name.\n        :param file_name: string, the name of the XML file to be processed.\n        \"\"\"\n        self.file_name = file_name\n        self.root = None\n\n    def read_xml(self):\n        \"\"\"\n        Reads the XML file and returns the root element.\n        :return: Element, the root element of the XML file.\n        \"\"\"\n        try:\n            tree = ET.parse(self.file_name)\n            self.root = tree.getroot()\n            return self.root\n        except ET.ParseError as e:\n            print(f\"Error reading XML: {e}\")\n            return None\n\n    def write_xml(self, file_name):\n        \"\"\"\n        Writes the XML data to the specified file.\n        :param file_name: string, the name of the file to write the XML data.\n        :return: bool, True if the write operation is successful, False otherwise.\n        \"\"\"\n        try:\n            tree = ET.ElementTree(self.root)\n            tree.write(file_name)\n            return True\n        except Exception as e:\n            print(f\"Error writing XML: {e}\")\n            return False\n\n    def process_xml_data(self, file_name):\n        \"\"\"\n        Modifies the data in XML elements and writes the updated XML data to a new file.\n        :param file_name: string, the name of the file to write the modified XML data.\n        :return: bool, True if the write operation is successful, False otherwise.\n        \"\"\"\n        if self.root is None:\n            print(\"XML root is not initialized. Please read the XML first.\")\n            return False\n\n        # Example modification: update all 'item' elements to 'processed' prefix\n        for item in self.root.findall('item'):\n            item.text = f\"processed {item.text}\"\n\n        return self.write_xml(file_name)\n\n    def find_element(self, element_name):\n        \"\"\"\n        Finds the XML elements with the specified name.\n        :param element_name: string, the name of the elements to find.\n        :return: list, a list of found elements with the specified name.\n        \"\"\"\n        if self.root is None:\n            print(\"XML root is not initialized. Please read the XML first.\")\n            return []\n\n        return self.root.findall(element_name)\n```"
}