{
    "4": "```python\ndef find_lucky_time(x, hh, mm):\n    def is_lucky(time):\n        return '7' in time\n\n    def time_to_string(total_minutes):\n        hours = total_minutes // 60\n        minutes = total_minutes % 60\n        return f\"{hours:02}:{minutes:02}\"\n\n    wake_up_time = hh * 60 + mm\n    for y in range(wake_up_time // x + 1):\n        alarm_time = wake_up_time - x * y\n        if alarm_time < 0:\n            alarm_time += 24 * 60\n        if is_lucky(time_to_string(alarm_time)):\n            return y\n\nx = int(input())\nhh, mm = map(int, input().split())\nprint(find_lucky_time(x, hh, mm))\n```",
    "21": "```python\ndef max_distance(n, a):\n    min_pos = a.index(1)\n    max_pos = a.index(n)\n    distance = abs(min_pos - max_pos)\n    \n    # Try swapping the minimum element with the last element\n    new_min_pos = n - 1\n    new_max_pos = max_pos\n    if min_pos != new_min_pos:\n        new_distance = abs(new_min_pos - new_max_pos)\n        if new_distance > distance:\n            distance = new_distance\n    \n    # Try swapping the maximum element with the first element\n    new_min_pos = min_pos\n    new_max_pos = 0\n    if max_pos != new_max_pos:\n        new_distance = abs(new_min_pos - new_max_pos)\n        if new_distance > distance:\n            distance = new_distance\n    \n    return distance\n\nn = int(input())\na = list(map(int, input().split()))\nprint(max_distance(n, a))\n```",
    "37": "```python\na, b, c = map(int, input().split())\nif c % gcd(a, b) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n```",
    "43": "```python\nimport math\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        angle = math.atan2(y, x)\n        vectors.append((angle, i + 1))\n    \n    vectors.sort()\n    \n    min_angle = float('inf')\n    min_pair = (0, 0)\n    \n    for i in range(n):\n        angle1, index1 = vectors[i]\n        angle2, index2 = vectors[(i + 1) % n]\n        diff = abs(angle1 - angle2)\n        if diff > math.pi:\n            diff = 2 * math.pi - diff\n        if diff < min_angle:\n            min_angle = diff\n            min_pair = (index1, index2)\n    \n    print(min_pair[0], min_pair[1])\n\nif __name__ == \"__main__\":\n    main()\n```",
    "48": "```python\nimport sys\nimport math\n\ndef kth_largest_in_multiplication_table(n, m, k):\n    if n > m:\n        n, m = m, n\n    \n    def count_numbers_less_than_or_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(x // i, m)\n        return count\n    \n    left, right = 1, n * m\n    while left < right:\n        mid = (left + right) // 2\n        if count_numbers_less_than_or_equal(mid) < k:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    m = int(data[1])\n    k = int(data[2])\n    print(kth_largest_in_multiplication_table(n, m, k))\n```",
    "65": "```python\ndef game_23(n, m):\n    if n == m:\n        return 0\n    moves = 0\n    while m > n:\n        if m % 2 == 0:\n            m //= 2\n        elif m % 3 == 0:\n            m //= 3\n        else:\n            return -1\n        moves += 1\n    if m == n:\n        return moves\n    else:\n        return -1\n\n# Read input\nn, m = map(int, input().split())\n\n# Print the result\nprint(game_23(n, m))\n```",
    "85": "```python\ndef find_price(A, B):\n    for price in range(1, 10001):\n        tax_8_percent = (price * 8) // 100\n        tax_10_percent = (price * 10) // 100\n        if tax_8_percent == A and tax_10_percent == B:\n            return price\n    return -1\n\nA, B = map(int, input().split())\nprint(find_price(A, B))\n```",
    "98": "```python\nimport math\n\ndef min_moves_to_reach_N(N):\n    # Find the smallest integer i such that i * i >= N\n    i = math.ceil(math.sqrt(N))\n    # The minimum number of moves is i - 1 (to move from (1,1) to (i,1)) + (i - j) (to move from (i,1) to (i,j))\n    # where j is the largest integer such that i * j <= N\n    j = N // i\n    return i - 1 + (i - j)\n\nN = int(input())\nprint(min_moves_to_reach_N(N))\n```"
}