{
    "99": "```python\nimport zipfile\nimport os\n\n\nclass ZipFileProcessor:\n    \"\"\"\n    This is a compressed file processing class that provides the ability to read and decompress compressed files\n    \"\"\"\n\n    def __init__(self, file_name):\n        \"\"\"\n        Initialize file name\n        :param file_name:string\n        \"\"\"\n        self.file_name = file_name\n\n    def read_zip_file(self):\n        \"\"\"\n        Get open file object\n        :return:If successful, returns the open file object; otherwise, returns None\n        \"\"\"\n        try:\n            if self.file_name:\n                zip_file = zipfile.ZipFile(self.file_name, 'r')\n                return zip_file\n            else:\n                return None\n        except FileNotFoundError:\n            return None\n        except zipfile.BadZipFile:\n            return None\n\n    def extract_all(self, output_path):\n        \"\"\"\n        Extract all zip files and place them in the specified path\n        :param output_path: string, The location of the extracted file\n        :return: True or False, representing whether the extraction operation was successful\n        \"\"\"\n        try:\n            if self.file_name:\n                with zipfile.ZipFile(self.file_name, 'r') as zip_ref:\n                    zip_ref.extractall(output_path)\n                return True\n            else:\n                return False\n        except FileNotFoundError:\n            return False\n        except zipfile.BadZipFile:\n            return False\n        except Exception as e:\n            return False\n\n    def extract_file(self, file_name, output_path):\n        \"\"\"\n        Extract the file with the specified name from the zip file and place it in the specified path\n        :param file_name:string, The name of the file to be uncompressed\n        :param output_path:string, The location of the extracted file\n        :return: True or False, representing whether the extraction operation was successful\n        \"\"\"\n        try:\n            if self.file_name:\n                with zipfile.ZipFile(self.file_name, 'r') as zip_ref:\n                    zip_ref.extract(file_name, output_path)\n                return True\n            else:\n                return False\n        except FileNotFoundError:\n            return False\n        except zipfile.BadZipFile:\n            return False\n        except KeyError:\n            return False\n        except Exception as e:\n            return False\n\n    def create_zip_file(self, files, output_file_name):\n        \"\"\"\n        Compress the specified file list into a zip file and place it in the specified path\n        :param files:list of string, List of files to compress\n        :param output_file_name: string, Specified output path\n        :return:True or False, representing whether the compression operation was successful\n        \"\"\"\n        try:\n            if files and output_file_name:\n                with zipfile.ZipFile(output_file_name, 'w') as zip_ref:\n                    for file in files:\n                        zip_ref.write(file, os.path.basename(file))\n                return True\n            else:\n                return False\n        except FileNotFoundError:\n            return False\n        except Exception as e:\n            return False\n```"
}