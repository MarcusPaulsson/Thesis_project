{
    "95": "```python\nclass Warehouse:\n    \"\"\"\n    Manages inventory and orders.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the inventory and orders dictionaries.\n        \"\"\"\n        self.inventory = {}  # {product_id: {'name': product_name, 'quantity': quantity}}\n        self.orders = {}  # {order_id: {'product_id': product_id, 'quantity': quantity, 'status': status}}\n\n    def add_product(self, product_id, name, quantity):\n        \"\"\"\n        Adds a product to the inventory or updates the quantity if the product already exists.\n\n        Args:\n            product_id (int): The unique identifier for the product.\n            name (str): The name of the product.\n            quantity (int): The quantity of the product to add.\n        \"\"\"\n        if not isinstance(product_id, int):\n            raise TypeError(\"Product ID must be an integer.\")\n        if not isinstance(name, str):\n            raise TypeError(\"Product name must be a string.\")\n        if not isinstance(quantity, int):\n            raise TypeError(\"Quantity must be an integer.\")\n        if quantity < 0:\n            raise ValueError(\"Quantity must be non-negative.\")\n\n        if product_id in self.inventory:\n            self.inventory[product_id]['quantity'] += quantity\n        else:\n            self.inventory[product_id] = {'name': name, 'quantity': quantity}\n\n    def update_product_quantity(self, product_id, quantity_change):\n        \"\"\"\n        Updates the quantity of a product in the inventory.\n\n        Args:\n            product_id (int): The ID of the product to update.\n            quantity_change (int): The amount to change the quantity by (can be positive or negative).\n        \"\"\"\n        if not isinstance(product_id, int):\n            raise TypeError(\"Product ID must be an integer.\")\n        if not isinstance(quantity_change, int):\n            raise TypeError(\"Quantity change must be an integer.\")\n\n        if product_id in self.inventory:\n            self.inventory[product_id]['quantity'] += quantity_change\n\n    def get_product_quantity(self, product_id):\n        \"\"\"\n        Retrieves the quantity of a specific product in the inventory.\n\n        Args:\n            product_id (int): The ID of the product to retrieve the quantity for.\n\n        Returns:\n            int: The quantity of the product if it exists in the inventory, or False otherwise.\n        \"\"\"\n        if not isinstance(product_id, int):\n            raise TypeError(\"Product ID must be an integer.\")\n\n        if product_id in self.inventory:\n            return self.inventory[product_id]['quantity']\n        else:\n            return False\n\n    def create_order(self, order_id, product_id, quantity):\n        \"\"\"\n        Creates a new order.\n\n        Args:\n            order_id (int): The unique ID for the order.\n            product_id (int): The ID of the product being ordered.\n            quantity (int): The quantity of the product being ordered.\n\n        Returns:\n            bool: True if the order was created successfully, False otherwise (e.g., if the product\n                  is not in stock or the quantity is insufficient).\n        \"\"\"\n        if not isinstance(order_id, int):\n            raise TypeError(\"Order ID must be an integer.\")\n        if not isinstance(product_id, int):\n            raise TypeError(\"Product ID must be an integer.\")\n        if not isinstance(quantity, int):\n            raise TypeError(\"Quantity must be an integer.\")\n        if quantity <= 0:\n            raise ValueError(\"Quantity must be positive.\")\n\n        if product_id not in self.inventory:\n            return False\n\n        if self.inventory[product_id]['quantity'] < quantity:\n            return False\n\n        self.orders[order_id] = {'product_id': product_id, 'quantity': quantity, 'status': 'Shipped'}\n        return True\n\n    def change_order_status(self, order_id, status):\n        \"\"\"\n        Changes the status of an existing order.\n\n        Args:\n            order_id (int): The ID of the order to update.\n            status (str): The new status for the order.\n\n        Returns:\n            bool: True if the order status was changed successfully, False otherwise (e.g., if the order does not exist).\n        \"\"\"\n        if not isinstance(order_id, int):\n            raise TypeError(\"Order ID must be an integer.\")\n        if not isinstance(status, str):\n            raise TypeError(\"Status must be a string.\")\n\n        if order_id not in self.orders:\n            return False\n\n        self.orders[order_id]['status'] = status\n        return True\n\n    def track_order(self, order_id):\n        \"\"\"\n        Retrieves the status of a specific order.\n\n        Args:\n            order_id (int): The ID of the order to track.\n\n        Returns:\n            str: The status of the order if it exists, or False otherwise.\n        \"\"\"\n        if not isinstance(order_id, int):\n            raise TypeError(\"Order ID must be an integer.\")\n\n        if order_id not in self.orders:\n            return False\n\n        return self.orders[order_id]['status']\n```"
}