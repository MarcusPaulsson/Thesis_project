{
    "0": null,
    "1": null,
    "2": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def get_dp(row_idx, rem):\n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n        \n        if row_idx == n:\n            if rem == 0:\n                return 0\n            else:\n                return float('-inf')\n\n        max_sum = float('-inf')\n\n        # Don't pick anything from the current row\n        max_sum = max(max_sum, get_dp(row_idx + 1, rem))\n\n        row_len = len(a[row_idx])\n        max_picks = m // 2\n\n        row_dp = {}\n        row_dp[(0, 0)] = 0\n        \n        for col_idx in range(row_len):\n            new_row_dp = row_dp.copy()\n            for num_picks, current_sum in row_dp.items():\n                if num_picks < max_picks:\n                    new_row_dp[(num_picks + 1, (current_sum + a[row_idx][col_idx]) % k)] = max(new_row_dp.get((num_picks + 1, (current_sum + a[row_idx][col_idx]) % k), float('-inf')), current_sum + a[row_idx][col_idx])\n            row_dp = new_row_dp\n        \n        for num_picks, current_sum in row_dp.items():\n            max_sum = max(max_sum, get_dp(row_idx + 1, (rem - current_sum) % k) + current_sum)\n            \n\n        dp[(row_idx, rem)] = max_sum\n        return max_sum\n\n    result = get_dp(0, 0)\n    print(result)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        best_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_seq, remaining_arr, moves):\n            nonlocal best_len, best_moves\n            \n            if not remaining_arr:\n                if len(current_seq) > best_len:\n                    best_len = len(current_seq)\n                    best_moves = moves\n                return\n\n            if not current_seq:\n                # Take left\n                backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_val = current_seq[-1]\n                \n                if remaining_arr[0] > last_val:\n                    backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                \n                if remaining_arr[-1] > last_val and remaining_arr[0] != remaining_arr[-1]:\n                    backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n        backtrack([], arr, \"\")\n        return best_len, best_moves\n    \n    def find_longest_increasing_sequence_with_duplicates(arr):\n        best_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_seq, remaining_arr, moves):\n            nonlocal best_len, best_moves\n            \n            if not remaining_arr:\n                if len(current_seq) > best_len:\n                    best_len = len(current_seq)\n                    best_moves = moves\n                return\n\n            if not current_seq:\n                # Take left\n                backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_val = current_seq[-1]\n                \n                if remaining_arr[0] > last_val:\n                    backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                \n                if remaining_arr[-1] > last_val:\n                    backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n        backtrack([], arr, \"\")\n        return best_len, best_moves\n\n    \n    len_seq, moves = find_longest_increasing_sequence_with_duplicates(a)\n    print(len_seq)\n    print(moves)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    unique_vals = sorted(list(set(a)))\n\n    if len(unique_vals) > 3:\n        print(-1)\n        return\n\n    if len(unique_vals) == 1:\n        print(0)\n        return\n\n    if len(unique_vals) == 2:\n        d = abs(unique_vals[0] - unique_vals[1])\n        if d % 2 == 0:\n            print(d // 2)\n        else:\n            print(d)\n        return\n\n    if len(unique_vals) == 3:\n        if unique_vals[1] - unique_vals[0] == unique_vals[2] - unique_vals[1]:\n            print(unique_vals[1] - unique_vals[0])\n        else:\n            print(-1)\n        return\nsolve()\n```",
    "5": "```python\ndef solve():\n  x1, y1, x2, y2 = map(int, input().split())\n  x3, y3, x4, y4 = map(int, input().split())\n  x5, y5, x6, y6 = map(int, input().split())\n\n  white_area = (x2 - x1) * (y2 - y1)\n  \n  def intersection_area(x1a, y1a, x2a, y2a, x1b, y1b, x2b, y2b):\n    x_overlap = max(0, min(x2a, x2b) - max(x1a, x1b))\n    y_overlap = max(0, min(y2a, y2b) - max(y1a, y1b))\n    return x_overlap * y_overlap\n\n  black1_on_white = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n  black2_on_white = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n\n  \n  intersection_black1_black2 = intersection_area(x3, y3, x4, y4, x5, y5, x6, y6)\n  black1_black2_on_white = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4) + intersection_area(x1, y1, x2, y2, x5, y5, x6, y6) - intersection_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n  \n  covered_area = black1_on_white + black2_on_white - intersection_area(max(x1, x3, x5), max(y1, y3, y5), min(x2, x4, x6), min(y2, y4, y6), max(x1, x3, x5), max(y1, y3, y5), min(x2, x4, x6), min(y2, y4, y6))\n\n  if white_area > black1_black2_on_white:\n      print(\"YES\")\n  else:\n      print(\"NO\")\n  \nsolve()\n```",
    "6": "```python\ndef f(x):\n  x += 1\n  while x % 10 == 0:\n    x //= 10\n  return x\n\ndef solve():\n  n = int(input())\n  reachable = {n}\n  curr = n\n  while True:\n    curr = f(curr)\n    if curr in reachable:\n      break\n    reachable.add(curr)\n  print(len(reachable))\n\nsolve()\n```",
    "7": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    assigned = [False] * (n + 1)\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i]] = True\n\n    unassigned_givers = []\n    unassigned_receivers = []\n    for i in range(n):\n        if f[i] == 0:\n            unassigned_givers.append(i)\n\n    for i in range(1, n + 1):\n        if not assigned[i]:\n            unassigned_receivers.append(i)\n\n    for i in range(len(unassigned_givers)):\n        giver_index = unassigned_givers[i]\n        receiver = unassigned_receivers[i]\n        \n        if giver_index + 1 == receiver:\n            if i + 1 < len(unassigned_givers):\n                unassigned_receivers[i], unassigned_receivers[i+1] = unassigned_receivers[i+1], unassigned_receivers[i]\n                \n            else:\n                \n                for j in range(len(unassigned_givers)):\n                    if unassigned_givers[j] + 1 != unassigned_receivers[i] and i != j:\n                        unassigned_receivers[i], unassigned_receivers[j] = unassigned_receivers[j], unassigned_receivers[i]\n                        break\n            \n        \n        f[giver_index] = receiver\n    \n    print(*f)\n\nsolve()\n```",
    "8": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n    \n    \n    colors = [0] * n\n    color_idx = 1\n    \n    \n    indices = []\n    for i in range(n):\n        indices.append((a[i], i))\n    \n    indices.sort()\n    \n    \n    possible_indices = []\n    for i in range(n):\n      possible_indices.append(indices[i][1])\n    \n    \n    \n    \n    \n    color_assignment = {}\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "9": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    \n    print(count)\n\nsolve()\n```",
    "10": null,
    "11": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    \n    best_a = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a = list(a)\n            for k in range(i, j + 1):\n                temp_a[k] = str(f[int(a[k]) - 1])\n            \n            temp_a = \"\".join(temp_a)\n            \n            if temp_a > best_a:\n                best_a = temp_a\n    \n    print(best_a)\n\nsolve()\n```",
    "12": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  best_cost = float('inf')\n  best_triple = None\n  \n  for A in range(1, 2 * a + 1):\n    for B in range(A, 2 * b + 1, A):\n      for C in range(B, 2 * c + 1, B):\n        cost = abs(A - a) + abs(B - b) + abs(C - c)\n        if cost < best_cost:\n          best_cost = cost\n          best_triple = (A, B, C)\n          \n  print(best_cost)\n  print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "13": null,
    "14": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c, i + 1))\n\n    schedule = [0] * n\n    exam_days = {}\n    for s, d, c, i in exams:\n        schedule[d - 1] = m + 1\n        exam_days[d - 1] = i\n    \n    preparation_counts = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            \n            best_exam = -1\n            for s, d, c, i in exams:\n                if s <= day + 1 < d and preparation_counts[i-1] < c:\n                    if best_exam == -1:\n                        best_exam = i\n                    \n            if best_exam != -1:\n                schedule[day] = best_exam\n                preparation_counts[best_exam - 1] += 1\n    \n    possible = True\n    for i in range(m):\n        s, d, c, idx = exams[i]\n        if preparation_counts[idx-1] != c:\n            possible = False\n            break\n    \n    if possible:\n        print(*schedule)\n    else:\n        print(-1)\n        \n\nsolve()\n```",
    "15": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    if n == m:\n        print(0)\n        return\n    \n    if m % n != 0:\n        print(-1)\n        return\n    \n    diff = m // n\n    \n    count = 0\n    while diff % 2 == 0:\n        diff //= 2\n        count += 1\n    \n    while diff % 3 == 0:\n        diff //= 3\n        count += 1\n        \n    if diff != 1:\n        print(-1)\n    else:\n        print(count)\n\nsolve()\n```",
    "16": "```python\ndef solve():\n  n, k = map(int, input().split())\n  t = input()\n  \n  overlap = 0\n  for i in range(1, n):\n    if t[:n-i] == t[i:]:\n      overlap = n - i\n      break\n  \n  if overlap == 0:\n    print(t + t * (k - 1))\n  else:\n    print(t + t[overlap:] * (k - 1))\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    nice_indices = []\n    for i in range(n):\n        temp_arr = a[:i] + a[i+1:]\n        total_sum = sum(temp_arr)\n        \n        for j in range(len(temp_arr)):\n            if temp_arr[j] == total_sum - temp_arr[j]:\n                nice_indices.append(i + 1)\n                break\n                \n    print(len(nice_indices))\n    if nice_indices:\n        print(*nice_indices)\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n        seen = set()\n        for l in range(i):\n            if s[l] == s[i-1]:\n                dp[i][1:] = [max(0, dp[i][x] - dp[l][x-1]) for x in range(1, i+1)]\n                break\n\n\n    total_subsequences = 0\n    for i in range(n + 1):\n        total_subsequences += dp[n][i]\n    \n    if total_subsequences < k:\n        print(\"-1\")\n        return\n\n    cost = 0\n    for length in range(n, -1, -1):\n        if dp[n][length] <= k:\n            cost += dp[n][length] * (n - length)\n            k -= dp[n][length]\n        else:\n            cost += k * (n - length)\n            k = 0\n            break\n\n    print(cost)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    def check_degree(tree_edges):\n        degree = 0\n        for u, v in tree_edges:\n            if u == 1 or v == 1:\n                degree += 1\n        return degree\n\n    def is_connected(tree_edges):\n        if not tree_edges:\n            return False\n\n        adj = [[] for _ in range(n + 1)]\n        for u, v in tree_edges:\n            adj[u].append(v)\n            adj[v].append(u)\n\n        visited = [False] * (n + 1)\n        q = [1]\n        visited[1] = True\n        count = 0\n        \n        while q:\n            curr = q.pop(0)\n            count += 1\n            for neighbor in adj[curr]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    q.append(neighbor)\n        \n        return count == n\n\n    def find_spanning_tree(edges, n, d):\n        import itertools\n        for r in range(n):\n            for tree_edges in itertools.combinations(edges, n - 1):\n                tree_edges_list = list(tree_edges)\n                if is_connected(tree_edges_list) and check_degree(tree_edges_list) == d:\n                    return tree_edges_list\n        return None\n    \n    spanning_tree = find_spanning_tree(edges, n, d)\n\n    if spanning_tree:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "20": null,
    "21": "```python\nimport math\n\na = int(input())\nprint(int(math.ceil(math.log(a, 2))))\n```",
    "22": null,
    "23": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n            \n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n                dp[i][j] = min(dp[i][j], k + 1)\n\n    subsequence_counts = [0] * (n + 1)\n    for i in range(n + 1):\n        subsequence_counts[i] = dp[n][i]\n\n    cost = 0\n    remaining_k = k\n    \n    for length in range(n, -1, -1):\n      \n        count_subsequences_length = subsequence_counts[length]\n        \n        if count_subsequences_length <= remaining_k:\n            cost += (n - length) * count_subsequences_length\n            remaining_k -= count_subsequences_length\n        else:\n            cost += (n - length) * remaining_k\n            remaining_k = 0\n            break\n    \n    if remaining_k > 0:\n      print(\"-1\")\n    else:\n      print(cost)\n\nsolve()\n```",
    "25": "```python\na, b, c = map(int, input().split())\nweek = [1, 2, 3, 1, 3, 2, 1]\nweek_a = week.count(1)\nweek_b = week.count(2)\nweek_c = week.count(3)\nweeks = min(a // week_a, b // week_b, c // week_c)\na -= weeks * week_a\nb -= weeks * week_b\nc -= weeks * week_c\ndays = weeks * 7\nmax_days = 0\nfor start in range(7):\n    temp_a = a\n    temp_b = b\n    temp_c = c\n    temp_days = 0\n    for i in range(7):\n        day = week[(start + i) % 7]\n        if day == 1:\n            if temp_a > 0:\n                temp_a -= 1\n                temp_days += 1\n            else:\n                break\n        elif day == 2:\n            if temp_b > 0:\n                temp_b -= 1\n                temp_days += 1\n            else:\n                break\n        else:\n            if temp_c > 0:\n                temp_c -= 1\n                temp_days += 1\n            else:\n                break\n    max_days = max(max_days, temp_days)\nprint(days + max_days)\n\n```",
    "26": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tiles.append([list(map(int, input().split())) for _ in range(2)])\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "27": "```python\nn = int(input())\ntotal_sum = n * (n + 1) // 2\nif total_sum % 2 == 0:\n  print(0)\nelse:\n  print(1)\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_sequences(n, s):\n        count = 0\n        for i in range(1 << (2 * n)):\n            seq = \"\"\n            for j in range(2 * n):\n                if (i >> j) & 1:\n                    seq += '('\n                else:\n                    seq += ')'\n            \n            if is_regular(seq) and s in seq:\n                count = (count + 1) % mod\n        return count\n\n    print(count_regular_sequences(n, s))\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    ans = float('inf')\n\n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        temp_n = list(n)\n        moves = 0\n        \n        # Find the rightmost digit of the suffix\n        digit1_idx = -1\n        for i in range(n_len - 1, -1, -1):\n            if temp_n[i] == suffix[1]:\n                digit1_idx = i\n                break\n        \n        if digit1_idx == -1:\n            continue\n        \n        # Move the digit to the rightmost position\n        for i in range(digit1_idx, n_len - 1):\n            temp_n[i], temp_n[i+1] = temp_n[i+1], temp_n[i]\n            moves += 1\n        \n        # Find the rightmost digit of the suffix (excluding the last one)\n        digit2_idx = -1\n        for i in range(n_len - 2, -1, -1):\n            if temp_n[i] == suffix[0]:\n                digit2_idx = i\n                break\n        \n        if digit2_idx == -1:\n            continue\n        \n        # Move the digit to the second rightmost position\n        for i in range(digit2_idx, n_len - 2):\n            temp_n[i], temp_n[i+1] = temp_n[i+1], temp_n[i]\n            moves += 1\n        \n        # Remove leading zeros\n        first_non_zero_idx = -1\n        for i in range(n_len - 2):\n            if temp_n[i] != '0':\n                first_non_zero_idx = i\n                break\n        \n        if first_non_zero_idx == -1:\n            first_non_zero_idx = n_len - 2\n            \n        leading_zeros = 0\n        for i in range(first_non_zero_idx):\n          leading_zeros += 1\n        \n        moves += leading_zeros\n        \n        ans = min(ans, moves)\n    \n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\nsolve()\n```",
    "30": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def check(num_colors, colors):\n        colored_string = []\n        for i in range(n):\n            colored_string.append((s[i], colors[i]))\n        \n        sorted_string = sorted(s)\n        \n        def can_sort(arr):\n            for i in range(len(arr)):\n                for j in range(len(arr) - 1):\n                    if arr[j][0] > arr[j+1][0] and arr[j][1] != arr[j+1][1]:\n                        arr[j], arr[j+1] = arr[j+1], arr[j]\n                        return True\n            return False\n        \n        temp_colored_string = colored_string[:]\n        for _ in range(n * (n - 1) // 2):\n            if not can_sort(temp_colored_string):\n                break\n        \n        sorted_colored_string = [x[0] for x in temp_colored_string]\n        \n        return sorted_colored_string == list(sorted_string)\n    \n    for num_colors in range(1, n + 1):\n        for i in range(num_colors ** n):\n            colors = []\n            temp = i\n            for _ in range(n):\n                colors.append((temp % num_colors) + 1)\n                temp //= num_colors\n                \n            if check(num_colors, colors):\n                print(num_colors)\n                print(*colors)\n                return\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    \n    \n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    import itertools\n    \n    for permutation in itertools.permutations(strings):\n        if check_order(list(permutation)):\n            print(\"YES\")\n            for s in permutation:\n                print(s)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    solved = 0\n    l = 0\n    r = n - 1\n    \n    while l <= r:\n        if a[l] <= k:\n            solved += 1\n            l += 1\n        elif a[r] <= k:\n            solved += 1\n            r -= 1\n        else:\n            break\n            \n    print(solved)\n\nsolve()\n```",
    "33": "```python\ndef solve():\n    a, b = map(int, input().split())\n    \n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for h in range(1, int(total**0.5) + 2):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: Red forms a rectangle\n            for red_h in range(1, int(a**0.5) + 2):\n                if a % red_h == 0:\n                    red_w = a // red_h\n                    if red_h <= h and red_w <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n            \n            # Case 2: Blue forms a rectangle\n            for blue_h in range(1, int(b**0.5) + 2):\n                if b % blue_h == 0:\n                    blue_w = b // blue_h\n                    if blue_h <= h and blue_w <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n                        \n    print(best_perimeter)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n  n = int(input())\n  s = input()\n\n  for i in range(1 << n):\n    coloring = \"\"\n    for j in range(n):\n      if (i >> j) & 1:\n        coloring += \"1\"\n      else:\n        coloring += \"0\"\n    \n    s0 = \"\"\n    s1 = \"\"\n    for j in range(n):\n      if coloring[j] == '0':\n        s0 += s[j]\n      else:\n        s1 += s[j]\n    \n    sorted_s0 = \"\".join(sorted(list(s0)))\n    sorted_s1 = \"\".join(sorted(list(s1)))\n    \n    merged = \"\"\n    idx0 = 0\n    idx1 = 0\n    \n    \n    \n    temp = list(s)\n    \n    \n    \n    coloring_list = list(coloring)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    while idx0 < len(sorted_s0) or idx1 < len(sorted_s1):\n      if idx0 < len(sorted_s0) and (idx1 == len(sorted_s1) or sorted_s0[idx0] <= sorted_s1[idx1]):\n        merged += sorted_s0[idx0]\n        idx0 += 1\n      else:\n        merged += sorted_s1[idx1]\n        idx1 += 1\n\n    \n    \n    if \"\".join(sorted(list(s))) == merged:\n      print(\"YES\")\n      print(coloring)\n      return\n  \n  print(\"NO\")\n\nsolve()\n```",
    "35": "```python\ndef solve():\n    a, b = map(int, input().split())\n    \n    ans = -1\n    for price in range(1, 2000):\n        tax8 = int(price * 0.08)\n        tax10 = int(price * 0.1)\n        \n        if tax8 == a and tax10 == b:\n            ans = price\n            break\n            \n    print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - sum(a)\n\n    if remaining == 0:\n        print(\"YES\")\n        print(*a)\n        return\n    \n    add = remaining // k\n    rem = remaining % k\n    \n    for i in range(k):\n        a[i] += add\n    \n    for i in range(k-1, k-1-rem, -1):\n        a[i] += 1\n        \n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n                \n                \n            b = a[:]\n            \n            \n            \n            \n            \n            \n            for j in range(k - 1):\n                while not (b[j] < b[j+1] <= 2 * b[j]):\n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                        \n                        diff = b[j+1] - 2 * b[j]\n                        if diff > 0:\n                            b[j] += diff\n                        else:\n                            b[j+1] += 1\n                            \n                            \n                            \n                            \n                            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            ",
    "37": null,
    "38": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def check_palindrome(mat):\n        for i in range(n):\n            for j in range(n):\n                if mat[i][j] != mat[n-1-i][j] or mat[i][j] != mat[i][n-1-j]:\n                    return False\n        return True\n    \n    def backtrack(row, col):\n        if row == n:\n            if check_palindrome(matrix):\n                print(\"YES\")\n                for r in matrix:\n                    print(*r)\n                return True\n            else:\n                return False\n        \n        if col == n:\n            return backtrack(row + 1, 0)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                matrix[row][col] = num\n                counts[num] -= 1\n                \n                if backtrack(row, col + 1):\n                    return True\n                \n                matrix[row][col] = 0\n                counts[num] += 1\n        \n        return False\n    \n    if not backtrack(0, 0):\n        print(\"NO\")\n\nsolve()\n```",
    "39": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n    \n    import itertools\n    \n    for perm in itertools.permutations(range(n)):\n        curr_r = r\n        possible = True\n        for i in perm:\n            a, b = projects[i]\n            if curr_r < a:\n                possible = False\n                break\n            curr_r += b\n            if curr_r < 0:\n                possible = False\n                break\n        \n        if possible:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "40": "```python\ndef solve():\n  n, m, d = map(int, input().split())\n  c = list(map(int, input().split()))\n\n  if d > n + 1:\n    print(\"YES\")\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = m\n    print(*arr)\n    return\n\n  min_space = m - 1\n  total_len = sum(c)\n  remaining_space = n - total_len\n\n  if remaining_space + min_space >= d:\n      \n      pos = [0] * m\n      \n      curr_pos = 0\n      for i in range(m):\n          \n          jump_possible = True\n          \n          if curr_pos == 0:\n            needed_space = min(d - 1, remaining_space)\n            \n          else:\n            needed_space = min(d - 1, remaining_space)\n            \n          pos[i] = curr_pos + needed_space\n          remaining_space -= needed_space\n          \n          curr_pos = pos[i] + c[i]\n            \n\n      \n      arr = [0] * n\n      for i in range(m):\n          for j in range(pos[i], pos[i] + c[i]):\n              arr[j] = i + 1\n      \n      print(\"YES\")\n      print(*arr)\n      \n      \n  else:\n      print(\"NO\")\n    \nsolve()\n```",
    "41": "```python\ns = input()\nt = input()\nn = len(s)\nm = len(t)\nans = 0\nfor i in range(n + 1):\n    for j in range(i, n + 1):\n        temp = \"\"\n        if i > 0:\n            temp += s[:i]\n        if j < n:\n            temp += s[j:]\n        \n        \n        k = 0\n        l = 0\n        flag = True\n        while k < len(temp) and l < m:\n            if temp[k] == t[l]:\n                l += 1\n            k += 1\n        if l == m:\n            ans = max(ans, j - i)\n\nprint(ans)\n```",
    "42": "```python\nx = float(input())\na = int(x * 10)\nb = int((x * 10 - a) * 10)\n\nprint(a, b)\n```",
    "43": "```python\ndef solve():\n  n, d, k = map(int, input().split())\n\n  if d >= n:\n    print(\"NO\")\n    return\n\n  if d == 1 and n > 2:\n    if k <= 1:\n      print(\"NO\")\n      return\n    if n > k + 1:\n      print(\"NO\")\n      return\n\n  if d > 1 and k == 1:\n    print(\"NO\")\n    return\n\n  edges = []\n  \n  # Create the diameter path\n  for i in range(d):\n    edges.append((i + 1, i + 2))\n  \n  degrees = [0] * (n + 1)\n  for u, v in edges:\n    degrees[u] += 1\n    degrees[v] += 1\n  \n  next_node = d + 2\n  \n  # Add nodes to the diameter path\n  for i in range(1, d + 2):\n    while degrees[i] < k and next_node <= n:\n      edges.append((i, next_node))\n      degrees[i] += 1\n      degrees[next_node] += 1\n      next_node += 1\n\n  if next_node <= n:\n    print(\"NO\")\n    return\n  \n  print(\"YES\")\n  for u, v in edges:\n    print(u, v)\n\nsolve()\n```",
    "44": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = 0\n        a -= 1\n        result = \"0\"\n    else:\n        start = 1\n        b -= 1\n        result = \"1\"\n        \n    while x > 0:\n        if start == 0:\n            if b > 0:\n                result += \"1\"\n                b -= 1\n            else:\n                result += \"0\"\n                a -= 1\n            start = 1\n        else:\n            if a > 0:\n                result += \"0\"\n                a -= 1\n            else:\n                result += \"1\"\n                b -= 1\n            start = 0\n        x -= 1\n        \n    while a > 0:\n        result += \"0\"\n        a -= 1\n    while b > 0:\n        result += \"1\"\n        b -= 1\n        \n    print(result)\n    \nsolve()\n```",
    "45": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    def check(res, s, t):\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                return False\n        return True\n\n    import itertools\n    \n    chars = ['a'] * n + ['b'] * n + ['c'] * n\n    \n    for perm in itertools.permutations(chars):\n        res = \"\".join(perm)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "46": "```python\ndef solve():\n  n = int(input())\n  q = list(map(int, input().split()))\n\n  for first_element in range(1, n + 1):\n    p = [first_element]\n    valid = True\n    for i in range(n - 1):\n      next_element = p[-1] + q[i]\n      if 1 <= next_element <= n:\n        p.append(next_element)\n      else:\n        valid = False\n        break\n\n    if valid:\n      if len(set(p)) == n:\n        print(*p)\n        return\n\n  print(\"-1\")\n\nsolve()\n```",
    "47": "```python\ndef solve():\n  n = int(input())\n  x = list(map(int, input().split()))\n\n  min_cost = float('inf')\n  for target in range(min(x), max(x) + 1):\n    cost = 0\n    for val in x:\n      cost += abs(val - target) % 2\n    min_cost = min(min_cost, cost)\n\n  print(min_cost)\n\nsolve()\n```",
    "48": "```python\nimport math\n\ndef solve():\n  n = int(input())\n\n  ans = float('inf')\n  for i in range(1, int(math.sqrt(n)) + 1):\n    if n % i == 0:\n      j = n // i\n      ans = min(ans, i + j - 2)\n      \n  print(ans)\n\nsolve()\n```"
}