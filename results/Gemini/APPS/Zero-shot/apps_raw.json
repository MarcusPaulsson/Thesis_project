{
    "0": "```python\ndef solve():\n  s = input()\n  n = len(s)\n  \n  first_bracket = -1\n  for i in range(n):\n    if s[i] == '[':\n      first_bracket = i\n      break\n  \n  if first_bracket == -1:\n    print(\"-1\")\n    return\n  \n  last_bracket = -1\n  for i in range(n - 1, -1, -1):\n    if s[i] == ']':\n      last_bracket = i\n      break\n  \n  if last_bracket == -1 or last_bracket <= first_bracket:\n    print(\"-1\")\n    return\n  \n  first_colon = -1\n  for i in range(first_bracket + 1, last_bracket):\n    if s[i] == ':':\n      first_colon = i\n      break\n  \n  if first_colon == -1:\n    print(\"-1\")\n    return\n  \n  last_colon = -1\n  for i in range(last_bracket - 1, first_colon, -1):\n    if s[i] == ':':\n      last_colon = i\n      break\n      \n  if last_colon == -1 or last_colon <= first_colon:\n    print(\"-1\")\n    return\n  \n  count = 0\n  for i in range(first_colon + 1, last_colon):\n    if s[i] == '|':\n      count += 1\n  \n  print(4 + count)\n  \nsolve()\n```",
    "1": "```python\ndef solve():\n  x = int(input())\n  s = str(x)\n  n = len(s)\n  \n  best_num = x\n  best_sum = sum(int(digit) for digit in s)\n  \n  for i in range(n):\n    if s[i] == '0':\n      continue\n    \n    current_num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n    current_num = int(current_num_str)\n    current_sum = sum(int(digit) for digit in current_num_str)\n    \n    if current_sum > best_sum:\n      best_sum = current_sum\n      best_num = current_num\n    elif current_sum == best_sum and current_num > best_num:\n      best_num = current_num\n      \n  print(best_num)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n  n = int(input())\n  s = str(n)\n  l = len(s)\n  \n  first_digit = int(s[0])\n  \n  next_lucky = (first_digit + 1) * (10**(l-1))\n  \n  print(next_lucky - n)\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n\n    if l == 1 and r == n:\n        print(0)\n        return\n\n    if l == 1:\n        print(abs(pos - r) + 1)\n        return\n\n    if r == n:\n        print(abs(pos - l) + 1)\n        return\n    \n    ans = min(abs(pos - l) + abs(r - l) + 2, abs(pos - r) + abs(r - l) + 2)\n    print(ans)\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n    \n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n        \n    if max_damage >= x:\n        print(1)\n        return\n    \n    max_diff = 0\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n        \n    if max_diff <= 0:\n        print(-1)\n        return\n    \n    remaining = x - max_damage\n    \n    ans = 1 + (remaining + max_diff - 1) // max_diff\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\nn, m = map(int, input().split())\n\nleft = 0\nright = 2 * 10**9\n\nwhile left <= right:\n    mid = (left + right) // 2\n    total_sparrows = mid * (mid + 1) // 2\n    \n    if total_sparrows >= n + (n // m) * m:\n        right = mid - 1\n    else:\n        left = mid + 1\n\nprint(left)\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    for i in range(d):\n        l, r, t, b = 0, 0, 0, 0\n        for j in range(d):\n            if i == j:\n                continue\n\n            x1_i, y1_i, x2_i, y2_i = sofas[i]\n            x1_j, y1_j, x2_j, y2_j = sofas[j]\n\n            min_x_i = min(y1_i, y2_i)\n            max_x_i = max(y1_i, y2_i)\n            min_y_i = min(x1_i, x2_i)\n            max_y_i = max(x1_i, x2_i)\n            \n            min_x_j = min(y1_j, y2_j)\n            max_x_j = max(y1_j, y2_j)\n            min_y_j = min(x1_j, x2_j)\n            max_y_j = max(x1_j, x2_j)\n            \n            \n            \n            is_left = False\n            is_right = False\n            is_top = False\n            is_bottom = False\n            \n            if min_x_i > max_x_j:\n                is_left = True\n            if max_x_i < min_x_j:\n                is_right = True\n            if min_y_i > max_y_j:\n                is_top = True\n            if max_y_i < min_y_j:\n                is_bottom = True\n\n            if is_left:\n                l += 1\n            if is_right:\n                r += 1\n            if is_top:\n                t += 1\n            if is_bottom:\n                b += 1\n\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n  n = int(input())\n  \n  min_days_off = (n // 7) * 2 \n  if n % 7 == 1:\n    pass\n  elif n % 7 == 2:\n    pass\n  elif n % 7 == 3:\n    pass\n  elif n % 7 == 4:\n    pass\n  elif n % 7 == 5:\n    pass\n  elif n % 7 == 6:\n    min_days_off = (n // 7) * 2 + 1\n  \n\n  max_days_off = (n // 7) * 2\n  if n % 7 == 1:\n    pass\n  elif n % 7 == 2:\n      max_days_off += 2\n  elif n % 7 == 3:\n      max_days_off += 2\n  elif n % 7 == 4:\n      max_days_off += 2\n  elif n % 7 == 5:\n      max_days_off += 2\n  elif n % 7 == 6:\n      max_days_off += 2\n      \n  if n <= 5:\n      min_days_off = 0\n      max_days_off = min(2, n)\n  else:\n      rem = n % 7\n      if rem == 6:\n          min_days_off = (n // 7) * 2 + 1\n      else:\n          min_days_off = (n // 7) * 2\n  \n  if n <= 1:\n      min_days_off = 0\n      max_days_off = n\n  elif n <= 2:\n      min_days_off = 0\n      max_days_off = n\n  elif n <=3:\n      min_days_off = 0\n      max_days_off = 2\n  elif n <= 4:\n      min_days_off = 0\n      max_days_off = 2\n  \n  \n  print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)\n\ndef lcm(a, b):\n  return (a * b) // gcd(a, b)\n\nn, a, b, p, q = map(int, input().split())\n\nred_count = n // a\nblue_count = n // b\nboth_count = n // lcm(a, b)\n\nred_only = red_count - both_count\nblue_only = blue_count - both_count\n\ntotal_chocolates = 0\n\nif p > q:\n  total_chocolates += red_only * p\n  total_chocolates += both_count * p\n  total_chocolates += blue_only * q\nelse:\n  total_chocolates += blue_only * q\n  total_chocolates += both_count * q\n  total_chocolates += red_only * p\n\nprint(total_chocolates)\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        dependencies.append(list(map(int, input().split()))[1:])\n\n    indegree = [0] * (n + 1)\n    graph = [[] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for dep in dependencies[i-1]:\n            graph[dep].append(i)\n            indegree[i] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if indegree[i] == 0 :\n            q.append(i)\n            \n    result = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        result.append(u)\n        count+=1\n\n        for v in graph[u]:\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(\"-1\")\n        return\n    \n    necessary = set(main_courses)\n    \n    \n    \n    \n    visited = [False] * (n+1)\n    ans=[]\n    \n    def dfs(node):\n        if visited[node]:\n            return\n        visited[node] = True\n        \n        for neighbor in dependencies[node-1]:\n            dfs(neighbor)\n            \n        ans.append(node)\n    \n    for course in main_courses:\n        dfs(course)\n        \n    ans = ans[::-1]\n    \n    \n    \n    print(len(ans))\n    print(*ans)\n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    available = [True] * (n + 1)\n    for x in p:\n        available[x] = False\n\n    remaining = []\n    for i in range(n, 0, -1):\n        if available[i]:\n            remaining.append(i)\n\n    p_full = p[:]\n    for i in range(n - k):\n        p_full.append(remaining[i])\n\n    def is_stack_sortable(arr):\n        stack = []\n        b = []\n        idx = 0\n        for i in range(2 * len(arr)):\n            if idx < len(arr) and (not stack or arr[idx] < stack[-1]):\n                stack.append(arr[idx])\n                idx += 1\n            elif stack:\n                b.append(stack.pop())\n            else:\n                return False\n\n        for i in range(len(b) - 1):\n            if b[i] > b[i+1]:\n                return False\n        return True\n\n    if is_stack_sortable(p_full):\n        print(*p_full)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\nn, k, t = map(int, input().split())\n\nif t <= k:\n    print(t)\nelif t <= n:\n    print(k)\nelse:\n    print(k - (t - n))\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    u = \"\"\n    t = \"\"\n    \n    def move1():\n        nonlocal s, t\n        if len(s) > 0:\n            t += s[0]\n            s = s[1:]\n            return True\n        return False\n    \n    def move2():\n        nonlocal t, u\n        if len(t) > 0:\n            u += t[-1]\n            t = t[:-1]\n            return True\n        return False\n\n    suffix_mins = [\"\"] * (n + 1)\n    suffix_mins[n] = \"\"\n    \n    for i in range(n - 1, -1, -1):\n        if suffix_mins[i+1] == \"\" or s[i] <= suffix_mins[i+1][0]:\n            suffix_mins[i] = s[i]\n            if suffix_mins[i+1] != \"\":\n              suffix_mins[i] += suffix_mins[i+1]\n        else:\n            suffix_mins[i] = s[i] + suffix_mins[i+1]\n            suffix_mins[i] = min(suffix_mins[i], suffix_mins[i+1])\n        \n    \n    suffix_min_chars = [\"\"] * n\n\n    min_char = 'z'\n    for i in range(n):\n        min_char = min(min_char, s[i])\n        suffix_min_chars[i] = min_char\n    \n    curr_index = 0\n    while curr_index < n:\n        if len(t) > 0 and t[-1] <= suffix_min_chars[curr_index]:\n            u += t[-1]\n            t = t[:-1]\n        else:\n            t += s[0]\n            s = s[1:]\n            curr_index += 1\n\n    while len(t) > 0:\n        u += t[-1]\n        t = t[:-1]\n    \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n  n = int(input())\n  data = []\n  for _ in range(n):\n    data.append(list(map(int, input().split())))\n\n  possible = True\n  for i in range(n):\n    if data[i][1] > data[i][0]:\n      possible = False\n      break\n    if i > 0:\n      if data[i][0] < data[i-1][0] or data[i][1] < data[i-1][1]:\n        possible = False\n        break\n      if data[i][0] - data[i-1][0] < data[i][1] - data[i-1][1]:\n        possible = False\n        break\n\n  if possible:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n    \n    ans = 0\n    while True:\n        h_str = str(hh).zfill(2)\n        m_str = str(mm).zfill(2)\n        \n        if h_str == m_str[::-1]:\n            print(ans)\n            return\n        \n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        \n        ans += 1\n\nsolve()\n```",
    "22": "```python\ndef is_s_palindrome(s):\n  \"\"\"\n  Checks if a string is an \"s-palindrome\".\n\n  Args:\n    s: The string to check.\n\n  Returns:\n    \"TAK\" if the string is an \"s-palindrome\", \"NIE\" otherwise.\n  \"\"\"\n\n  s_palindrome_chars = {\n      'A': 'A', 'H': 'H', 'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T',\n      'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y', 'b': 'd',\n      'd': 'b', 'o': 'o', 'p': 'q', 'q': 'p', 'v': 'v', 'w': 'w',\n      'x': 'x'\n  }\n\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] not in s_palindrome_chars or s[n - 1 - i] not in s_palindrome_chars:\n      return \"NIE\"\n    if s_palindrome_chars.get(s[i]) != s[n - 1 - i]:\n      return \"NIE\"\n\n  if n % 2 == 1:\n    if s[n // 2] not in s_palindrome_chars or s_palindrome_chars.get(s[n // 2]) != s[n // 2]:\n      return \"NIE\"\n\n  return \"TAK\"\n\n\nif __name__ == \"__main__\":\n  s = input()\n  print(is_s_palindrome(s))\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    a_len = len(a)\n    b_len = len(b)\n\n    if a_len > b_len:\n        print(\"\".join(a_digits))\n        return\n    \n    a_counts = Counter(a)\n    \n    def find_max(index, current_num, remaining_counts, smaller):\n        if index == a_len:\n            return current_num\n        \n        best_num = \"\"\n        \n        possible_digits = sorted(remaining_counts.keys(), reverse=True)\n        \n        for digit in possible_digits:\n            if smaller or digit <= b[index]:\n                new_remaining_counts = remaining_counts.copy()\n                new_remaining_counts[digit] -= 1\n                if new_remaining_counts[digit] == 0:\n                    del new_remaining_counts[digit]\n                    \n                new_smaller = smaller or digit < b[index]\n                \n                temp_num = find_max(index + 1, current_num + digit, new_remaining_counts, new_smaller)\n                \n                if len(temp_num) == a_len and (best_num == \"\" or temp_num > best_num):\n                    best_num = temp_num\n        \n        return best_num\n    \n    result = find_max(0, \"\", a_counts, False)\n    print(result)\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n            \n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n                \n    if k != 0:\n        print(\"-1\")\n        return\n    \n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\nx, y, z = map(float, input().split())\n\na1 = x ** (y ** z)\na2 = x ** (z ** y)\na3 = (x ** y) ** z\na4 = (x ** z) ** y\na5 = y ** (x ** z)\na6 = y ** (z ** x)\na7 = (y ** x) ** z\na8 = (y ** z) ** x\na9 = z ** (x ** y)\na10 = z ** (y ** x)\na11 = (z ** x) ** y\na12 = (z ** y) ** x\n\nvalues = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\nexpressions = [\"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"]\n\nmax_val = max(values)\nindex = values.index(max_val)\n\nprint(expressions[index])\n```",
    "27": "```python\ndef solve():\n  n = int(input())\n  s = input()\n  \n  ans = n\n  for i in range(1, n // 2 + 1):\n    prefix = s[:i]\n    if s[:i] == s[i:2*i]:\n      ans = min(ans, i + 1 + (n - 2 * i))\n  print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n    \n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n    \n    moves = []\n    \n    e = len(examples)\n    \n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            moves.append(('move', examples[i][0], str(i + 1)))\n    \n    # Move regular tests to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            moves.append(('move', regular[i][0], str(e + i + 1)))\n\n    \n    # Resolve cycles\n    \n    cycles = []\n    visited = [False] * n\n    \n    for i in range(n):\n        if not visited[i]:\n            cycle = []\n            curr = i\n            while not visited[curr]:\n                visited[curr] = True\n                cycle.append(curr)\n                \n                next_file = None\n                if files[curr][1]=='1':\n                    next_file = int(files[curr][0]) -1\n                else:\n                    next_file = e + int(files[curr][0]) - (1 if int(files[curr][0])>e else 0) -1\n                    \n                if next_file >=n:\n                  next_file = curr\n                \n                \n                \n                if files[curr][1] == '1':\n                    \n                    found = False\n                    for j in range(len(examples)):\n                        if examples[j][1] == curr:\n                            if str(j+1) != files[curr][0]:\n                                break\n                            found = True\n                            \n                    if not found:\n                        pass\n                else:\n                    found = False\n                    for j in range(len(regular)):\n                        if regular[j][1] == curr:\n                            if str(e+j+1) != files[curr][0]:\n                                break\n                            found = True\n                    if not found:\n                        pass\n                \n                \n                \n                found = False\n                next_file= -1\n                \n                \n                if files[curr][1] == '1':\n                    for j in range(len(examples)):\n                        if str(j+1) == files[curr][0]:\n                            next_file = examples[j][1]\n                            found=True\n                            break\n                else:\n                    for j in range(len(regular)):\n                        if str(e+j+1) == files[curr][0]:\n                            next_file = regular[j][1]\n                            found= True\n                            break\n                            \n                if not found:\n                    next_file = curr\n                \n                \n                \n            \n                curr = next_file\n            \n            if len(cycle) > 1:\n                cycles.append(cycle)\n    \n    \n    temp_name = \"07x45l\"\n    \n    \n    \n    while temp_name in [f[0] for f in files]:\n        temp_name = \"08y56m\"\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    fixed_moves = []\n\n    \n    \n    \n    for i in range(e):\n        if files[examples[i][1]][0] != str(i+1):\n            fixed_moves.append(('move', files[examples[i][1]][0], str(i+1)))\n    \n    for i in range(len(regular)):\n        if files[regular[i][1]][0] != str(e+i+1):\n            fixed_moves.append(('move', files[regular[i][1]][0], str(e+i+1)))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "29": "```python\ndef solve():\n  s = input()\n  digits = [int(c) for c in s]\n  \n  ans = 6\n  for i in range(1000):\n    s1 = str(i).zfill(3)\n    sum1 = sum(int(c) for c in s1)\n    \n    for j in range(1000):\n      s2 = str(j).zfill(3)\n      sum2 = sum(int(c) for c in s2)\n      \n      if sum1 == sum2:\n        \n        temp_digits = [int(c) for c in s1 + s2]\n        \n        diff = 0\n        for k in range(6):\n          if digits[k] != temp_digits[k]:\n            diff += 1\n        ans = min(ans, diff)\n  print(ans)\n\nsolve()\n```",
    "30": "```python\nimport math\n\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    if k > mod:\n        print(0, 1)\n        return\n\n    num = 1\n    den = 1\n    twos = 0\n\n    for i in range(k):\n        if i == 0:\n            continue\n        val = (pow(2, n, mod) - i) % mod\n        num = (num * val) % mod\n        \n        temp = i\n        while temp % 2 == 0 and temp > 0:\n            twos += 1\n            temp //= 2\n\n    den = pow(pow(2, n, mod), k - 1, mod) % mod\n    \n\n    two_pow = min(n * (k - 1), twos)\n\n    \n    num = (num * pow(pow(2, two_pow, mod), mod - 2, mod)) % mod\n    den = (den * pow(pow(2, two_pow, mod), mod - 2, mod)) % mod\n    \n    a = (den - num) % mod\n    b = den % mod\n\n    print(a, b)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # Distance from North Pole (0 to 20000)\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0:\n            if direction != \"South\":\n                print(\"NO\")\n                return\n            else:\n                current_pos += t\n        elif current_pos == 20000:\n            if direction != \"North\":\n                print(\"NO\")\n                return\n            else:\n                current_pos -= t\n        else:\n            if direction == \"South\":\n                current_pos += t\n            elif direction == \"North\":\n                current_pos -= t\n            \n            if current_pos < 0 or current_pos > 20000:\n                print(\"NO\")\n                return\n    \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n    \n    g, x, y = extended_gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n    \n    x *= (b2 - b1) // g\n    y *= (b2 - b1) // g\n    \n    lcm = (a1 * a2) // g\n    \n    k = x\n    \n    k0 = k % (a2 // g)\n    \n    first_x = a1 * k0 + b1\n    \n    if first_x < L:\n        diff = L - first_x\n        num_lcm = (diff + lcm - 1) // lcm\n        first_x += num_lcm * lcm\n    \n    if first_x > R:\n        print(0)\n        return\n    \n    count = (R - first_x) // lcm + 1\n    \n    \n    \n    \n    \n    \n    k_min_a1 = (L - b1 + a1 - 1) // a1 if L > b1 else 0\n    k_min_a2 = (L - b2 + a2 - 1) // a2 if L > b2 else 0\n    \n    \n    \n    \n    \n    \n    \n    valid_count = 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    print(count)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    max_x = 0\n    for plates_a in range(1, n):\n        plates_b = n - plates_a\n        \n        if plates_a > a or plates_b > b:\n            continue\n        \n        x_a = a // plates_a\n        x_b = b // plates_b\n        \n        max_x = max(max_x, min(x_a, x_b))\n        \n    print(max_x)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n  n = int(input())\n\n  if n == 0:\n    print(0, 0)\n    return\n\n  l, r = 0, 10**9\n  k = 0\n  while l <= r:\n    mid = (l + r) // 2\n    if 3 * mid * (mid + 1) >= n:\n      k = mid\n      r = mid - 1\n    else:\n      l = mid + 1\n\n  n -= 3 * k * (k - 1)\n\n  if n <= k:\n    print(2 * k - n, 2 * n)\n  elif n <= 2 * k:\n    n -= k\n    print(k - 2 * n, 2 * k)\n  elif n <= 3 * k:\n    n -= 2 * k\n    print(-k - n, 2 * k - 2 * n)\n  elif n <= 4 * k:\n    n -= 3 * k\n    print(-2 * k + n, -2 * n)\n  elif n <= 5 * k:\n    n -= 4 * k\n    print(-k + 2 * n, -2 * k)\n  else:\n    n -= 5 * k\n    print(k + n, -2 * k + 2 * n)\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, L = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for start in range(L):\n        temp = []\n        for i in range(n):\n            temp.append((sasha[i] + start) % L)\n        temp.sort()\n        \n        if temp == kefa:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "40": "```python\ndef solve():\n    n = int(input())\n    ratings = []\n    for _ in range(n):\n        ratings.append(list(map(int, input().split())))\n\n    changed = False\n    for a, b in ratings:\n        if a != b:\n            changed = True\n            break\n\n    if changed:\n        print(\"rated\")\n        return\n\n    sorted_order = True\n    for i in range(n - 1):\n        if ratings[i][0] < ratings[i+1][0]:\n            sorted_order = False\n            break\n\n    if not sorted_order:\n        print(\"unrated\")\n    else:\n        print(\"maybe\")\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n    n = len(arr)\n    distances = [float('inf')] * n\n    \n    # Forward pass\n    last_zero = float('-inf')\n    for i in range(n):\n        if arr[i] == 0:\n            last_zero = i\n        if last_zero != float('-inf'):\n            distances[i] = min(distances[i], i - last_zero)\n            \n    # Backward pass\n    last_zero = float('inf')\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 0:\n            last_zero = i\n        if last_zero != float('inf'):\n            distances[i] = min(distances[i], last_zero - i)\n    \n    return distances\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    result = nearest_zero(arr)\n    print(*result)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def contains(t, s):\n        for i in range(len(t)):\n            shifted_t = t[i:] + t[:i]\n            if s in shifted_t:\n                return True\n        return False\n    \n    count = 0\n    seen = set()\n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        if contains(binary_string, s):\n            if binary_string not in seen:\n                count += 1\n                seen.add(binary_string)\n    \n    print(count)\n\nsolve()\n```",
    "44": "```python\nd, k, a, b, t = map(int, input().split())\n\nif d <= k:\n  print(d * a)\nelse:\n  if k * a + t >= k * b:\n    print(k * a + (d - k) * b)\n  else:\n    num_breaks = (d - 1) // k\n    \n    total_time = num_breaks * (k * a + t)\n    \n    remaining_distance = d - num_breaks * k\n    \n    total_time += remaining_distance * a\n    \n    print(total_time)\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, i)\n            if i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // i)\n\n    if best_gcd == 1 and k * (k + 1) // 2 > n:\n      print(-1)\n      return\n    \n    \n    \n    if best_gcd == 1 and n < k*(k+1)//2:\n        print(-1)\n        return\n\n    \n    \n    sequence = []\n    sum_so_far = 0\n    for i in range(1, k):\n        sequence.append(best_gcd * i)\n        sum_so_far += best_gcd * i\n\n    sequence.append(n - sum_so_far)\n\n    if sequence[-1] <= sequence[-2]:\n        print(-1)\n        return\n        \n\n    print(*sequence)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    count = 0\n    for x in range(1, n + 1):\n        for y in range(1, m + 1):\n            if (x + y) % 5 == 0:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "47": "```python\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_beauty = 0\n    for i in range(1 << n):\n        temp_a = a[:]\n        start = -1\n        end = -1\n        \n        subarray_indices = []\n        \n        current_subarray = []\n        \n        bits = bin(i)[2:].zfill(n)\n        \n        is_in_subarray = False\n        \n        for j in range(n):\n            if bits[j] == '1':\n                if not is_in_subarray:\n                    start = j\n                    is_in_subarray = True\n                end = j\n            else:\n                if is_in_subarray:\n                    is_in_subarray = False\n        \n        if start != -1:\n            for j in range(start, end + 1):\n                temp_a[j] *= x\n        \n        current_beauty = 0\n        max_so_far = 0\n        \n        for val in temp_a:\n            current_beauty += val\n            if current_beauty < 0:\n                current_beauty = 0\n            max_so_far = max(max_so_far, current_beauty)\n        \n        max_beauty = max(max_beauty, max_so_far)\n    \n    print(max_beauty)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\ndigits = 1\ncount = 9\nwhile k > digits * count:\n    k -= digits * count\n    digits += 1\n    count *= 10\n\nnum = 10**(digits - 1) + (k - 1) // digits\nindex = (k - 1) % digits\n\nprint(str(num)[index])\n```",
    "51": "```python\ndef solve():\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    \n    x = max(divisors)\n    \n    def get_divisors(num):\n        divs = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                divs.append(i)\n                if i * i != num:\n                    divs.append(num // i)\n        return sorted(divs)\n\n    divisors_x = get_divisors(x)\n    \n    temp_divisors = divisors[:]\n    \n    for val in divisors_x:\n        if val in temp_divisors:\n            temp_divisors.remove(val)\n        else:\n            break\n    else:\n        if not temp_divisors:\n            print(x, x)\n            return\n            \n        y = max(temp_divisors)\n        \n        divisors_y = get_divisors(y)\n        \n        combined_divisors = sorted(divisors_x + divisors_y)\n        divisors.sort()\n    \n        if combined_divisors == divisors:\n            print(x, y)\n            return\n        \n    divisors.sort()\n    \n    x = max(divisors)\n    divisors_x = get_divisors(x)\n    temp_divisors = divisors[:]\n    \n    for val in divisors_x:\n        if val in temp_divisors:\n            temp_divisors.remove(val)\n        else:\n            break\n    \n    y = max(temp_divisors)\n    divisors_y = get_divisors(y)\n\n    print(x,y)\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n    def get_dp(row_idx, remaining_rows, current_sum):\n        if (row_idx, remaining_rows, current_sum) in dp:\n            return dp[(row_idx, remaining_rows, current_sum)]\n\n        if row_idx == n:\n            if current_sum % k == 0:\n                return 0\n            else:\n                return float('-inf')\n\n        max_sum = get_dp(row_idx + 1, remaining_rows - 1, current_sum)\n\n        row = a[row_idx]\n        max_row_sum = 0\n\n        \n        row_dp = {}\n        def get_row_dp(col_idx, remaining_cols, current_row_sum):\n            if (col_idx, remaining_cols, current_row_sum) in row_dp:\n                return row_dp[(col_idx, remaining_cols, current_row_sum)]\n            \n            if col_idx == m:\n                if remaining_cols == 0:\n                    return current_row_sum\n                else:\n                    return float('-inf')\n\n            if remaining_cols == 0:\n                return 0\n            \n            val1 = get_row_dp(col_idx + 1, remaining_cols, current_row_sum)\n            val2 = get_row_dp(col_idx + 1, remaining_cols - 1, current_row_sum + row[col_idx])\n            \n            row_dp[(col_idx, remaining_cols, current_row_sum)] = max(val1, val2)\n            return row_dp[(col_idx, remaining_cols, current_row_sum)]\n        \n\n        max_row_sum = get_row_dp(0, m // 2, 0)\n        \n        max_sum = max(max_sum, get_dp(row_idx + 1, remaining_rows - 1, current_sum + max_row_sum))\n        dp[(row_idx, remaining_rows, current_sum)] = max_sum\n        return max_sum\n\n    print(get_dp(0, n, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_subsequence(arr):\n        best_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_seq, remaining_arr, moves):\n            nonlocal best_len, best_moves\n            \n            if not remaining_arr:\n                if len(current_seq) > best_len:\n                    best_len = len(current_seq)\n                    best_moves = moves\n                return\n            \n            if not current_seq or remaining_arr[0] > current_seq[-1]:\n                backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n            \n            if not current_seq or remaining_arr[-1] > current_seq[-1]:\n                if len(remaining_arr) > 1 or remaining_arr[0] != remaining_arr[-1]:\n                    backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            \n            if not current_seq and len(remaining_arr) == 1:\n                if len(current_seq) + 1 > best_len:\n                  best_len = len(current_seq) + 1\n                  best_moves = moves + \"L\"\n                return\n\n        backtrack([], a, \"\")\n        return best_len, best_moves\n\n    length, moves = find_longest_increasing_subsequence(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    distinct_values = sorted(list(set(a)))\n\n    if len(distinct_values) > 3:\n        print(-1)\n        return\n\n    if len(distinct_values) == 1:\n        print(0)\n        return\n\n    if len(distinct_values) == 2:\n        diff = abs(distinct_values[0] - distinct_values[1])\n        if diff % 2 == 0:\n            print(diff // 2)\n        else:\n            print(diff)\n        return\n\n    if len(distinct_values) == 3:\n        v1, v2, v3 = distinct_values\n        if v2 - v1 == v3 - v2:\n            print(v2 - v1)\n        else:\n            print(-1)\n        return\n\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n    \n    # Intersection of white and black 1\n    x_overlap1 = max(0, min(x2, x4) - max(x1, x3))\n    y_overlap1 = max(0, min(y2, y4) - max(y1, y3))\n    intersection_area1 = x_overlap1 * y_overlap1\n    \n    # Intersection of white and black 2\n    x_overlap2 = max(0, min(x2, x6) - max(x1, x5))\n    y_overlap2 = max(0, min(y2, y6) - max(y1, y5))\n    intersection_area2 = x_overlap2 * y_overlap2\n    \n    # Intersection of white, black 1, and black 2\n    x_overlap12 = max(0, min(x2, x4, x6) - max(x1, x3, x5))\n    y_overlap12 = max(0, min(y2, y4, y6) - max(y1, y3, y5))\n    intersection_area12 = x_overlap12 * y_overlap12\n    \n    total_covered_area = intersection_area1 + intersection_area2 - intersection_area12\n    \n    if white_area > total_covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    assigned = [False] * n\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i] - 1] = True\n\n    unassigned_givers = []\n    unassigned_receivers = []\n    for i in range(n):\n        if f[i] == 0:\n            unassigned_givers.append(i)\n        if not assigned[i]:\n            unassigned_receivers.append(i)\n\n    for i in range(len(unassigned_givers)):\n        f[unassigned_givers[i]] = unassigned_receivers[i] + 1\n\n    \n    \n    \n    \n    \n    conflicts = True\n    while conflicts:\n        conflicts = False\n        for i in range(n):\n            if f[i] == i + 1:\n                \n                \n                \n                for j in range(len(unassigned_givers)):\n                    if unassigned_givers[j] == i:\n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        ",
    "58": "```python\ndef solve():\n  n, k = map(int, input().split())\n  a = list(map(int, input().split()))\n\n  counts = {}\n  for x in a:\n    counts[x] = counts.get(x, 0) + 1\n\n  for x in counts:\n    if counts[x] > k:\n      print(\"NO\")\n      return\n\n  coloring = [0] * n\n  color_assignment = {}\n  color_index = 1\n  \n  indices_by_value = {}\n  for i in range(n):\n      if a[i] not in indices_by_value:\n          indices_by_value[a[i]] = []\n      indices_by_value[a[i]].append(i)\n\n  \n  for val in indices_by_value:\n      for index in indices_by_value[val]:\n          coloring[index] = color_index\n          color_index = (color_index % k) + 1\n          \n  print(\"YES\")\n  print(*coloring)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    a_list = list(map(int, list(a)))\n    \n    best_a = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a_list = a_list[:]\n            \n            for k in range(i, j + 1):\n                temp_a_list[k] = f[temp_a_list[k] - 1]\n            \n            temp_a_str = \"\".join(map(str, temp_a_list))\n            \n            if temp_a_str > best_a:\n                best_a = temp_a_str\n    \n    print(best_a)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  best_cost = float('inf')\n  best_triple = None\n  \n  for A in range(1, 2 * a + 1):\n    for B_mult in range(1, 2 * b // A + 2):\n      B = A * B_mult\n      if B == 0:\n          continue\n      for C_mult in range(1, 2 * c // B + 2):\n        C = B * C_mult\n        \n        cost = abs(a - A) + abs(b - B) + abs(c - C)\n        \n        if cost < best_cost:\n          best_cost = cost\n          best_triple = (A, B, C)\n          \n  print(best_cost)\n  print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c, i + 1))\n\n    schedule = [0] * n\n    exam_days = {}\n    for _, d, _, exam_id in exams:\n        if d - 1 in exam_days:\n            print(\"-1\")\n            return\n        exam_days[d - 1] = exam_id\n        schedule[d - 1] = m + 1\n\n    prep_counts = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            best_exam = -1\n            for i in range(m):\n                s, d, c, exam_id = exams[i]\n                if s <= day + 1 < d and prep_counts[i] < c:\n                    if best_exam == -1:\n                        best_exam = i\n                    else:\n                        s_best, d_best, c_best, exam_id_best = exams[best_exam]\n                        if d < d_best:\n                            best_exam = i\n            if best_exam != -1:\n                schedule[day] = exams[best_exam][3]\n                prep_counts[best_exam] += 1\n\n    for i in range(m):\n        if exams[i][2] != prep_counts[i]:\n            print(\"-1\")\n            return\n\n    print(*schedule)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n  n, k = map(int, input().split())\n  t = input()\n  \n  if k == 1:\n    print(t)\n    return\n    \n  max_overlap = 0\n  for overlap in range(1, n):\n    if t[:n - overlap] == t[overlap:]:\n      max_overlap = n - overlap\n      break\n      \n  print(t + t[max_overlap:] * (k - 1))\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n        \n    counts = []\n    for i in range(n + 1):\n        counts.append(dp[n][i])\n    \n    total_cost = 0\n    for length in range(n, -1, -1):\n        if k > counts[length]:\n            total_cost += counts[length] * (n - length)\n            k -= counts[length]\n        else:\n            total_cost += k * (n - length)\n            k = 0\n            break\n    \n    if k > 0:\n        print(\"-1\")\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n\n    def check(tree_edges):\n        adj = [[] for _ in range(n + 1)]\n        for u, v in tree_edges:\n            adj[u].append(v)\n            adj[v].append(u)\n        \n        degree_one = len(adj[1])\n        \n        if degree_one != d:\n            return False\n\n        visited = [False] * (n + 1)\n        q = [1]\n        visited[1] = True\n        count = 0\n        while q:\n            u = q.pop(0)\n            count += 1\n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    q.append(v)\n        return count == n\n\n    import itertools\n    for i in itertools.combinations(edges, n - 1):\n        if check(i):\n            print(\"YES\")\n            for u, v in i:\n                print(u, v)\n            return\n    print(\"NO\")\n\nsolve()\n```",
    "71": "```python\nimport math\n\na = int(input())\nprint(math.ceil(math.log2(a)))\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n  n, k = map(int, input().split())\n  s = input()\n\n  dp = [[0] * (n + 1) for _ in range(n + 1)]\n  dp[0][0] = 1\n\n  for i in range(1, n + 1):\n    for j in range(i + 1):\n      dp[i][0] = 1\n      if j > 0:\n        dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\n  total_subsequences = sum(dp[n])\n\n  if k > total_subsequences:\n    print(-1)\n    return\n\n  dp = [[0] * (n + 1) for _ in range(n + 1)]\n  dp[0][0] = 1\n\n  for i in range(1, n + 1):\n    for j in range(i + 1):\n      dp[i][0] = 1\n      if j > 0:\n        dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        dp[i][j] = min(dp[i][j], k)\n\n  cost = 0\n  for length in range(n, -1, -1):\n    num_subsequences_of_length = dp[n][length]\n    \n    if k > num_subsequences_of_length:\n      cost += (n - length) * num_subsequences_of_length\n      k -= num_subsequences_of_length\n    else:\n      cost += (n - length) * k\n      k = 0\n      break\n\n  print(cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    def calculate_days(start_day):\n        days = 0\n        a_temp, b_temp, c_temp = a, b, c\n        \n        while True:\n            day = (start_day + days) % 7\n            \n            if day in [0, 3, 6]:  # Monday, Thursday, Sunday\n                if a_temp > 0:\n                    a_temp -= 1\n                else:\n                    break\n            elif day in [1, 5]:  # Tuesday, Saturday\n                if b_temp > 0:\n                    b_temp -= 1\n                else:\n                    break\n            else:  # Wednesday, Friday\n                if c_temp > 0:\n                    c_temp -= 1\n                else:\n                    break\n            \n            days += 1\n        \n        return days\n    \n    max_days = 0\n    for start_day in range(7):\n        max_days = max(max_days, calculate_days(start_day))\n    \n    print(max_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tiles.append([list(map(int, input().split())) for _ in range(2)])\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n    \n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n    \n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n    n = int(input())\n    total_sum = n * (n + 1) // 2\n    if total_sum % 2 == 0:\n        print(0)\n    else:\n        print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    len_s = len(s)\n    \n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    def count_substring(seq, sub):\n        count = 0\n        for i in range(len(seq) - len(sub) + 1):\n            if seq[i:i+len(sub)] == sub:\n                count += 1\n        return count\n    \n    def generate_bracket_sequences(length):\n        if length == 0:\n            return [\"\"]\n        \n        sequences = []\n        for sub_seq in generate_bracket_sequences(length - 1):\n            sequences.append(\"(\" + sub_seq)\n            sequences.append(\")\" + sub_seq)\n        return sequences\n    \n    all_sequences = generate_bracket_sequences(2 * n)\n    \n    count = 0\n    for seq in all_sequences:\n        if is_regular(seq) and count_substring(seq, s) > 0:\n            count += 1\n    \n    print(count % (10**9 + 7))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    s = list(n)\n    l = len(s)\n    ans = float('inf')\n\n    for i in range(l):\n        for j in range(i + 1, l):\n            if (s[i] == '0' and s[j] == '0') or (s[i] == '2' and s[j] == '5') or (s[i] == '5' and s[j] == '0') or (s[i] == '7' and s[j] == '5') or (s[i] == '0' and s[j] == '5') or (s[i] == '5' and s[j] == '0'):\n                temp = s[:]\n                moves = 0\n\n                # Move the second digit to the last position\n                for k in range(j, l - 1):\n                    temp[k], temp[k + 1] = temp[k + 1], temp[k]\n                    moves += 1\n\n                # Move the first digit to the second last position\n                for k in range(i, l - 2):\n                    temp[k], temp[k + 1] = temp[k + 1], temp[k]\n                    moves += 1\n\n                # Remove leading zeros\n                leading_zeros = 0\n                for k in range(l - 2):\n                    if temp[k] == '0':\n                        leading_zeros += 1\n                    else:\n                        break\n\n                # If there are leading zeroes after removing the last 2 digits\n                if leading_zeros > 0:\n                    # Swap the first non-zero digit with the leading zero(s)\n                    first_non_zero_idx = -1\n                    for k in range(leading_zeros, l - 2):\n                        if temp[k] != '0':\n                            first_non_zero_idx = k\n                            break\n\n                    if first_non_zero_idx != -1:\n                        for k in range(first_non_zero_idx, leading_zeros, -1):\n                            temp[k], temp[k - 1] = temp[k - 1], temp[k]\n                            moves += 1\n                    else:\n                        continue\n                \n                ans = min(ans, moves)\n\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    colors = [0] * n\n    \n    def check(num_colors):\n        coloring = [0] * n\n        \n        def is_sortable(coloring):\n            arr = list(s)\n            \n            swapped = True\n            while swapped:\n                swapped = False\n                for i in range(n - 1):\n                    if arr[i] > arr[i+1] and coloring[i] != coloring[i+1]:\n                        arr[i], arr[i+1] = arr[i+1], arr[i]\n                        swapped = True\n            \n            return \"\".join(arr) == \"\".join(sorted(s))\n        \n        \n        def find_coloring(index):\n            if index == n:\n                if is_sortable(coloring):\n                    return True\n                else:\n                    return False\n            \n            for color in range(1, num_colors + 1):\n                coloring[index] = color\n                if find_coloring(index + 1):\n                    return True\n                coloring[index] = 0\n            \n            return False\n\n        if find_coloring(0):\n            return True, coloring\n        else:\n            return False, None\n\n    \n    for num_colors in range(1, n + 1):\n        possible, coloring = check(num_colors)\n        if possible:\n            print(num_colors)\n            print(*coloring)\n            return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    import itertools\n    \n    for perm in itertools.permutations(strings):\n        if check_order(list(perm)):\n            print(\"YES\")\n            for s in perm:\n                print(s)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "83": "```python\nimport math\n\ndef solve():\n  a, b = map(int, input().split())\n  total = a + b\n  \n  best_perimeter = float('inf')\n  \n  for height in range(1, int(math.sqrt(total)) + 2):\n    if total % height == 0:\n      width = total // height\n      \n      # Case 1: 'a' forms a rectangle\n      for a_height in range(1, int(math.sqrt(a)) + 2):\n        if a % a_height == 0:\n          a_width = a // a_height\n          \n          if a_height <= height and a_width <= width:\n            best_perimeter = min(best_perimeter, 2 * (height + width))\n      \n      # Case 2: 'b' forms a rectangle\n      for b_height in range(1, int(math.sqrt(b)) + 2):\n        if b % b_height == 0:\n          b_width = b // b_height\n          \n          if b_height <= height and b_width <= width:\n            best_perimeter = min(best_perimeter, 2 * (height + width))\n  \n  print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += '1'\n            else:\n                coloring += '0'\n\n        s0 = \"\"\n        s1 = \"\"\n        for j in range(n):\n            if coloring[j] == '0':\n                s0 += s[j]\n            else:\n                s1 += s[j]\n\n        s0 = \"\".join(sorted(s0))\n        s1 = \"\".join(sorted(s1))\n\n        merged = \"\"\n        idx0 = 0\n        idx1 = 0\n        for j in range(n):\n            if coloring[j] == '0':\n                merged += s0[idx0]\n                idx0 += 1\n            else:\n                merged += s1[idx1]\n                idx1 += 1\n                \n        if \"\".join(sorted(s)) == \"\".join(sorted(merged)):\n            \n            sorted_flag = True\n            for k in range(n - 1):\n                if merged[k] > merged[k+1]:\n                    sorted_flag = False\n                    break\n            \n            if sorted_flag:\n                print(\"YES\")\n                print(coloring)\n                return\n\n    print(\"NO\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    diff = n - sum(a)\n\n    add = diff // k\n    rem = diff % k\n\n    for i in range(k):\n        a[i] += add\n\n    for i in range(k - 1, k - 1 - rem, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if a[i + 1] > 2 * a[i]:\n            needed = a[i + 1] - 2 * a[i]\n            a[i] += needed\n            a[i + 1] -= needed\n            \n            \n            if a[i+1] <= a[i]:\n                print(\"NO\")\n                return\n\n    for i in range(k - 1):\n        if a[i+1] <= a[i]:\n            print(\"NO\")\n            return\n\n    \n    for i in range(k - 1):\n        if a[i+1] > 2 * a[i]:\n            print(\"NO\")\n            return\n\n    if sum(a) != n:\n        print(\"NO\")\n        return\n\n    \n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def can_place(r, c, val):\n        if counts[val] == 0:\n            return False\n        return True\n    \n    def place(r, c, val):\n        matrix[r][c] = val\n        counts[val] -= 1\n        \n    def unplace(r, c, val):\n        matrix[r][c] = 0\n        counts[val] += 1\n    \n    def is_valid():\n      for i in range(n):\n        for j in range(n):\n          if matrix[i][j] != matrix[n-1-i][j] or matrix[i][j] != matrix[i][n-1-j]:\n            return False\n      return True\n    \n    def solve_recursive(r, c):\n        if r == n:\n            if is_valid():\n              return True\n            else:\n              return False\n        \n        if c == n:\n            return solve_recursive(r + 1, 0)\n        \n        if matrix[r][c] != 0:\n            return solve_recursive(r, c + 1)\n        \n        for val in sorted(counts.keys()):\n            if can_place(r, c, val):\n                place(r, c, val)\n                place(n - 1 - r, c, val)\n                place(r, n - 1 - c, val)\n                place(n - 1 - r, n - 1 - c, val)\n                \n                if solve_recursive(r, c + 1):\n                    return True\n                \n                unplace(r, c, val)\n                unplace(n - 1 - r, c, val)\n                unplace(r, n - 1 - c, val)\n                unplace(n - 1 - r, n - 1 - c, val)\n        \n        return False\n    \n    if solve_recursive(0, 0):\n        print(\"YES\")\n        for row in matrix:\n            print(*row)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(order):\n        curr_r = r\n        for i in order:\n            a, b = projects[i]\n            if curr_r < a:\n                return False\n            curr_r += b\n            if curr_r < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if check(order):\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    min_empty = n - total_length\n\n    arr = [0] * n\n    \n    pos = 0\n    for i in range(m):\n        empty_before = min(min_empty, d - 1)\n        \n        pos += empty_before\n        min_empty -= empty_before\n        \n        for j in range(c[i]):\n            arr[pos] = i + 1\n            pos += 1\n            \n    if pos + d <= n + 1 :\n        \n        curr_pos = 0\n        can_reach = True\n        \n        while curr_pos < n + 1:\n          \n            next_pos = -1\n            \n            for k in range(min(d, n + 1 - curr_pos)):\n                if curr_pos + k + 1 == n + 1:\n                    next_pos = curr_pos + k + 1\n                    break\n                \n                if curr_pos + k + 1 <= n and arr[curr_pos + k ] != 0 :\n                    next_pos = curr_pos + k + 1\n\n            if next_pos == -1:\n                can_reach = False\n                break\n\n            curr_pos = next_pos\n        \n        if can_reach:\n            print(\"YES\")\n            print(*arr)\n            return\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    print(\"NO\")\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    \n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            \n            ti = 0\n            si = 0\n            possible = True\n            while ti < m and si < len(temp_s):\n                if t[ti] == temp_s[si]:\n                    ti += 1\n                    si += 1\n                else:\n                    si += 1\n            \n            if ti == m:\n                ans = max(ans, j - i)\n                \n    print(ans)\n\nsolve()\n```",
    "92": "```python\ndef solve():\n    x = float(input())\n    \n    for a in range(1, 11):\n        for b in range(1, 11):\n            if abs(a / b - x) < 1e-7:\n                print(a, b)\n                return\n\nsolve()\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        print(\"NO\")\n        return\n    \n    if k == 1 and d > 1:\n        print(\"NO\")\n        return\n\n    if k == 1 and d == 1 and n > 2:\n        print(\"NO\")\n        return\n\n    if k == 1 and d == 1 and n == 2:\n        print(\"YES\")\n        print(\"1 2\")\n        return\n    \n    if d == n - 1 and k < 2:\n        print(\"NO\")\n        return\n\n    edges = []\n    \n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n\n    remaining_nodes = n - d - 1\n    \n    if remaining_nodes < 0:\n        print(\"NO\")\n        return\n\n    degree = [0] * (n + 1)\n    for u, v in edges:\n        degree[u] += 1\n        degree[v] += 1\n\n    next_node = d + 2\n\n    # Add remaining nodes to the path\n    for i in range(1, d + 2):\n        while degree[i] < k and remaining_nodes > 0:\n            edges.append((i, next_node))\n            degree[i] += 1\n            degree[next_node] += 1\n            next_node += 1\n            remaining_nodes -= 1\n\n    if remaining_nodes > 0:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n  a, b, x = map(int, input().split())\n\n  if a > b:\n    start = 0\n    a -= 1\n  else:\n    start = 1\n    b -= 1\n\n  s = str(start)\n  x -= 1\n\n  while x > 0:\n    if start == 0:\n      if b > 0:\n        s += '1'\n        b -= 1\n        start = 1\n      else:\n        s += '0'\n        a -= 1\n    else:\n      if a > 0:\n        s += '0'\n        a -= 1\n        start = 0\n      else:\n        s += '1'\n        b -= 1\n    x -= 1\n\n  if start == 0:\n    s += '0' * a\n    s += '1' * b\n  else:\n    s += '1' * b\n    s += '0' * a\n  print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    chars = ['a', 'b', 'c']\n\n    import itertools\n\n    for perm in itertools.permutations(chars):\n        res = \"\"\n        for _ in range(n):\n            res += perm[0]\n            res += perm[1]\n            res += perm[2]\n\n        valid = True\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                valid = False\n                break\n        \n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    odd_count = 0\n    even_count = 0\n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    print(min(odd_count, even_count))\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a3 - a1), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, -min(a1 - b2, a2 - b3, a3 - b1))\n    \n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}