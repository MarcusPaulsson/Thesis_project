{
    "30": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    def calculate_operations(target):\n        operations = 0\n        i = 0\n        while i < n:\n            if s[i] != target[i % 2]:\n                operations += 1\n                j = i + 1\n                while j < n and s[j] != target[i % 2]:\n                    j += 1\n                i = j\n            else:\n                i += 1\n        return operations\n\n    operations1 = calculate_operations(\"01\")\n    operations2 = calculate_operations(\"10\")\n    print(min(operations1, operations2))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "31": "```python\ndef solve():\n    s = input()\n    visited = set()\n    x, y = 0, 0\n    time = 0\n    for move in s:\n        nx, ny = x, y\n        if move == 'N':\n            ny += 1\n        elif move == 'S':\n            ny -= 1\n        elif move == 'E':\n            nx += 1\n        elif move == 'W':\n            nx -= 1\n        \n        segment = tuple(sorted([(x, y), (nx, ny)]))\n        \n        if segment in visited:\n            time += 1\n        else:\n            time += 5\n            visited.add(segment)\n            \n        x, y = nx, ny\n        \n    print(time)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    chanek_coins = 0\n    turn = 0 \n    \n    while n > 0:\n        if turn == 0:\n            if n % 2 == 0 and n // 2 > 1:\n                n_take_half = solve_rec(n // 2, 1)\n                n_take_one = solve_rec(n - 1, 1)\n                \n                if n // 2 + n_take_half >= 1 + n_take_one:\n                    chanek_coins += n // 2\n                    n -= n // 2\n                else:\n                    chanek_coins += 1\n                    n -= 1\n            elif n % 2 == 0:\n                chanek_coins += n // 2\n                n -= n // 2\n            else:\n                chanek_coins += 1\n                n -= 1\n            turn = 1\n        else:\n            if n % 2 == 0 and n // 2 > 1:\n                n_take_half = solve_rec(n // 2, 0)\n                n_take_one = solve_rec(n - 1, 0)\n                \n                if n // 2 + n_take_half >= 1 + n_take_one:\n                    n -= n // 2\n                else:\n                    n -= 1\n            elif n % 2 == 0:\n                n -= n // 2\n            else:\n                n -= 1\n            turn = 0\n            \n    print(chanek_coins)\n    \ndef solve_rec(n, turn):\n    if n <= 0:\n        return 0\n\n    if turn == 0:\n        if n % 2 == 0 and n // 2 > 1:\n            return max(n // 2  + solve_rec(n // 2, 1), 1 + solve_rec(n - 1, 1))\n        elif n % 2 == 0:\n            return n // 2 + solve_rec(n // 2, 1)\n        else:\n            return 1 + solve_rec(n - 1, 1)\n    else:\n        if n % 2 == 0 and n // 2 > 1:\n            return solve_rec(n // 2, 0) if solve_rec(n // 2, 0) > solve_rec(n - 1, 0) else solve_rec(n - 1, 0)\n        elif n % 2 == 0:\n            return solve_rec(n // 2, 0)\n        else:\n            return solve_rec(n - 1, 0)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "33": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    \n    print(2)\n    \n    a = n\n    b = n - 1\n    \n    for i in range(n - 1):\n        print(a, b)\n        a = (a + b + 1) // 2\n        b = n - 2 - i\n        if b < 1:\n            break\n        \nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "34": "```python\ndef solve():\n    n = int(input())\n    \n    if n % 2 == 0:\n        print(\"1\" * (n // 2))\n    else:\n        print(\"7\" + \"1\" * ((n - 3) // 2))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "35": "```python\ndef solve():\n    n = int(input())\n    e = list(map(int, input().split()))\n    e.sort()\n    \n    count = 0\n    group_size = 0\n    \n    for i in range(n):\n        group_size += 1\n        if group_size >= e[i]:\n            count += 1\n            group_size = 0\n            \n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    q = list(map(int, input().split()))\n    \n    prefix_sums = [0] * (n + 1)\n    for i in range(n):\n        prefix_sums[i+1] = prefix_sums[i] + a[i]\n    \n    for query in q:\n        for i in range(1, n + 1):\n            if query <= prefix_sums[i]:\n                print(i)\n                break\n\nsolve()\n```",
    "37": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    def decomposition(p):\n        unmarked = [True] * n\n        l = []\n        for i in range(n):\n            if unmarked[i]:\n                reachable = []\n                curr = i\n                while unmarked[curr]:\n                    reachable.append(curr)\n                    unmarked[curr] = False\n                    curr = p[curr] - 1\n                \n                max_val = -1\n                max_idx = -1\n                for j in range(len(reachable)):\n                    if p[reachable[j]] > max_val:\n                        max_val = p[reachable[j]]\n                        max_idx = j\n                \n                shifted_reachable = reachable[max_idx:] + reachable[:max_idx]\n                \n                l.append([p[idx] for idx in shifted_reachable])\n        return l\n\n    def new_year_transformation(p):\n        decomp = decomposition(p)\n        decomp.sort(key=lambda x: x[0])\n        result = []\n        for sublist in decomp:\n            result.extend(sublist)\n        return result\n    \n    def is_good(p):\n        return new_year_transformation(p) == p\n\n    good_permutations = []\n    \n    import itertools\n    \n    all_permutations = list(itertools.permutations(range(1, n + 1)))\n    \n    for perm in all_permutations:\n        p = list(perm)\n        if is_good(p):\n            good_permutations.append(p)\n            \n    good_permutations.sort()\n\n    if k > len(good_permutations):\n        print(-1)\n    else:\n        print(*good_permutations[k-1])\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "38": "```python\ndef solve():\n  n, k1, k2 = map(int, input().split())\n  a = list(map(int, input().split()))\n  b = list(map(int, input().split()))\n  \n  max_a = max(a)\n  max_b = max(b)\n  \n  if max_a > max_b:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "39": "```python\ndef solve():\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n    \n    cost = 0\n    i = n - 2\n    while i >= 0:\n        j = i\n        while j >= 0 and s[j] == s[i]:\n            j -= 1\n        \n        if s[i] == 'A':\n            cost += a\n        else:\n            cost += b\n        \n        i = j\n        \n    \n    i = 0\n    while i < n:\n        \n        temp_cost = 0\n        \n        j = n - 2\n        \n        \n        temp_i = i\n        temp_cost = 0\n        \n        while j >= temp_i:\n            k = j\n            while k >= temp_i and s[k] == s[j]:\n                k -= 1\n            \n            if s[j] == 'A':\n                temp_cost += a\n            else:\n                temp_cost += b\n            \n            j = k\n        \n        \n        if temp_cost <= p:\n            print(i + 1)\n            return\n        \n        i += 1\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "40": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    unique_vals = sorted(list(set(a)))\n    \n    def check_sorted(arr):\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n        return True\n    \n    if check_sorted(a):\n        print(0)\n        return\n\n    def get_moves(arr):\n        moves = []\n        for val in unique_vals:\n            moves.append((val, \"start\"))\n            moves.append((val, \"end\"))\n        return moves\n\n    def apply_move(arr, val, direction):\n        new_arr = []\n        moved_elements = []\n        remaining_elements = []\n        \n        for x in arr:\n            if x == val:\n                moved_elements.append(x)\n            else:\n                remaining_elements.append(x)\n        \n        if direction == \"start\":\n            new_arr = moved_elements + remaining_elements\n        else:\n            new_arr = remaining_elements + moved_elements\n        \n        return new_arr\n    \n    \n    min_ops = float('inf')\n\n    \n    q = [(a, 0, [])] \n    visited = {tuple(a)}\n\n    while q:\n        curr_arr, ops, applied_moves = q.pop(0)\n\n        if check_sorted(curr_arr):\n            min_ops = min(min_ops, ops)\n            continue\n            \n        if ops >= min_ops:\n            continue\n\n        if ops > len(unique_vals):\n            continue\n            \n        moves = get_moves(curr_arr)\n\n        for val, direction in moves:\n            new_arr = apply_move(curr_arr, val, direction)\n            \n            if tuple(new_arr) not in visited:\n                visited.add(tuple(new_arr))\n                q.append((new_arr, ops + 1, applied_moves + [(val, direction)]))\n\n    print(min_ops)\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "41": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = list(input())\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_prefixes(seq):\n        count = 0\n        for i in range(1, len(seq) + 1):\n            if is_regular(seq[:i]):\n                count += 1\n        return count\n\n    def reverse_substring(l, r, seq):\n        sub = seq[l-1:r]\n        sub.reverse()\n        seq[l-1:r] = sub\n\n    operations = []\n\n    # 1. Create the target string with k regular prefixes\n    target = ['('] * k + [')'] * k + ['('] * (n // 2 - k) + [')'] * (n // 2 - k)\n    \n    # 2. Align the string\n    for i in range(n):\n        if s[i] != target[i]:\n            # Find the correct element in the remaining string\n            for j in range(i + 1, n):\n                if s[j] == target[i]:\n                    # Reverse the substring\n                    operations.append((i + 1, j + 1))\n                    reverse_substring(i + 1, j + 1, s)\n                    break\n    \n    print(len(operations))\n    for l, r in operations:\n        print(l, r)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "42": "```python\ndef solve():\n  s = input()\n  n = len(s)\n  count = 0\n  for i in range(n):\n    for j in range(i, n):\n      sub = s[i:j+1]\n      length = j - i + 1\n      value = int(sub, 2)\n      if length == value:\n        count += 1\n  print(count)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "43": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    min_time = float('inf')\n\n    for i in range(1 << n):\n        delivery_time = 0\n        pickup_time = 0\n        \n        for j in range(n):\n            if (i >> j) & 1:\n                delivery_time = max(delivery_time, a[j])\n            else:\n                pickup_time += b[j]\n        \n        min_time = min(min_time, max(delivery_time, pickup_time))\n\n    print(min_time)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "44": "```python\ndef solve():\n    n = int(input())\n    ans = []\n    for i in range(2, 2 * n + 2, 2):\n        ans.append(i)\n    print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "45": "```python\ndef solve():\n  x = int(input())\n  count = 0\n  staircase_size = 1\n  while True:\n    cells_needed = staircase_size * (staircase_size + 1) // 2\n    if cells_needed <= x:\n      x -= cells_needed\n      count += 1\n      staircase_size = staircase_size * 2 + 1\n    else:\n      break\n  print(count)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "46": "```python\ndef solve():\n  s = input()\n  n = len(s)\n  \n  counts = {'R': 0, 'S': 0, 'P': 0}\n  for char in s:\n    counts[char] += 1\n  \n  best_choice = ''\n  if counts['R'] >= counts['S'] and counts['R'] >= counts['P']:\n    best_choice = 'P'\n  elif counts['S'] >= counts['R'] and counts['S'] >= counts['P']:\n    best_choice = 'R'\n  else:\n    best_choice = 'S'\n  \n  print(best_choice * n)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "47": null,
    "48": "```python\ndef solve():\n  x, y, k = map(int, input().split())\n  \n  # Need k sticks and k coal\n  # k coal require k * y sticks\n  # Total sticks needed: k + k * y\n  # We start with 1 stick\n  # We need to buy k + k * y - 1 sticks\n  # Each trade gives us x - 1 sticks\n  \n  sticks_needed = k + k * y - 1\n  trades_sticks = (sticks_needed + x - 2) // (x - 1)\n  \n  print(trades_sticks + k)\n  \n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "49": "```python\ndef solve():\n  l, r = map(int, input().split())\n  \n  def count_classy(n):\n    s = str(n)\n    length = len(s)\n    \n    dp = {}\n    \n    def recurse(index, non_zero_count, is_tight):\n      if index == length:\n        return 1\n      \n      if (index, non_zero_count, is_tight) in dp:\n        return dp[(index, non_zero_count, is_tight)]\n      \n      ans = 0\n      \n      upper_bound = int(s[index]) if is_tight else 9\n      \n      for digit in range(upper_bound + 1):\n        new_non_zero_count = non_zero_count + (1 if digit != 0 else 0)\n        new_is_tight = is_tight and (digit == int(s[index]))\n        \n        if new_non_zero_count <= 3:\n          ans += recurse(index + 1, new_non_zero_count, new_is_tight)\n      \n      dp[(index, non_zero_count, is_tight)] = ans\n      return ans\n    \n    return recurse(0, 0, True)\n\n  print(count_classy(r) - count_classy(l - 1))\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "50": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = float('inf')\n\n    for l in range(n + 1):\n        for r in range(n + 1):\n            temp_a = a[:]\n            \n            eaten = []\n            \n            \n            left_idx = n - 1\n            right_idx = n\n            \n            \n            for _ in range(l):\n                eaten.append(temp_a[left_idx])\n                left_idx -= 1\n                \n            for _ in range(r):\n                eaten.append(temp_a[right_idx])\n                right_idx += 1\n                \n            \n            remaining_a = []\n            for i in range(2 * n):\n                if i not in range(left_idx + 1, n) and i not in range(n, right_idx):\n                    remaining_a.append(temp_a[i])\n                    \n            \n            strawberry_count = remaining_a.count(1)\n            blueberry_count = remaining_a.count(2)\n            \n            if strawberry_count == blueberry_count:\n                ans = min(ans, l + r)\n                \n    print(ans)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "51": "```python\ndef solve():\n    n, k, d1, d2 = map(int, input().split())\n    \n    def check(x, y, z):\n        if x < 0 or y < 0 or z < 0:\n            return False\n        if x + y + z > k:\n            return False\n        \n        mx = max(x, y, z)\n        rem = n // 3 * 3 - (x + y + z)\n        if rem < 0:\n            return False\n        \n        if rem % 3 != 0:\n            return False\n            \n        need = mx * 3 - (x+y+z)\n        \n        if need > n-k:\n            return False\n        \n        if (n-k-need)%3 !=0:\n            return False\n            \n        return True\n\n    for sgn1 in [-1, 1]:\n        for sgn2 in [-1, 1]:\n            x = (d1 * sgn1 - d2 * sgn2)\n            if x % 3 != 0:\n                continue\n            x //= 3\n            y = x + d2 * sgn2\n            z = y - d1 * sgn1\n            \n            if check(x, y, z):\n                print(\"yes\")\n                return\n\n    print(\"no\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "52": null,
    "53": "```python\ndef solve():\n    n, s = input().split()\n    n = int(n)\n    \n    def get_min_lis(n, s):\n        perm = [0] * n\n        nums = list(range(1, n + 1))\n        \n        idx = 0\n        i = 0\n        while i < n:\n            j = i\n            while j < n - 1 and s[j] == '>':\n                j += 1\n            \n            for k in range(j, i - 1, -1):\n                perm[k] = nums[idx]\n                idx += 1\n            i = j + 1\n        return perm\n    \n    def get_max_lis(n, s):\n        perm = [0] * n\n        nums = list(range(1, n + 1))\n        \n        idx = 0\n        i = 0\n        while i < n:\n            j = i\n            while j < n - 1 and s[j] == '<':\n                j += 1\n                \n            for k in range(j, i - 1, -1):\n                perm[k] = nums[idx]\n                idx += 1\n            i = j + 1\n        return perm\n        \n    print(*get_min_lis(n, s))\n    print(*get_max_lis(n, s))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    \n    total = 0\n    for x in s:\n        if x <= 2048:\n            total += x\n    \n    if total >= 2048:\n        if total >= 2048:\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            if any(x == 2048 for x in s):\n                print(\"YES\")\n                return\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            print(\"YES\")\n            return\n        else:\n            print(\"NO\")\n            return\n    else:\n        print(\"NO\")\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "55": "```python\ndef solve():\n    n = int(input())\n    print((n + 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "56": "```python\ndef solve():\n  n, k = map(int, input().split())\n  \n  grid = [['0'] * n for _ in range(n)]\n  \n  row = 0\n  col = 0\n  \n  for _ in range(k):\n    grid[row][col] = '1'\n    row = (row + 1) % n\n    col = (col + 1) % n\n    \n    if grid[row][col] == '1':\n      col = (col + 1) % n\n      \n  row_sums = [0] * n\n  col_sums = [0] * n\n  \n  for i in range(n):\n    for j in range(n):\n      if grid[i][j] == '1':\n        row_sums[i] += 1\n        col_sums[j] += 1\n        \n  max_row = max(row_sums)\n  min_row = min(row_sums)\n  max_col = max(col_sums)\n  min_col = min(col_sums)\n  \n  f_a = (max_row - min_row)**2 + (max_col - min_col)**2\n  \n  print(f_a)\n  for row in grid:\n    print(\"\".join(row))\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def can_reduce(arr):\n        if len(arr) == 1:\n            return True\n        \n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i+1]:\n                # Try removing arr[i]\n                new_arr1 = arr[:i] + arr[i+1:]\n                if can_reduce(new_arr1):\n                    return True\n                \n                # Try removing arr[i+1]\n                new_arr2 = arr[:i+1] + arr[i+2:]\n                if can_reduce(new_arr2):\n                    return True\n        \n        return False\n\n    if can_reduce(a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "58": "```python\ndef solve():\n  n, m, k = map(int, input().split())\n  \n  dp = {}\n  \n  def calculate_cost(h, w, target):\n    if (h, w, target) in dp:\n      return dp[(h, w, target)]\n    \n    if target == 0:\n      return 0\n    if h * w == target:\n      return 0\n    if h * w < target or target < 0:\n      return float('inf')\n    \n    min_cost = float('inf')\n    \n    # Horizontal cuts\n    for i in range(1, h):\n      cost = w * w\n      min_cost = min(min_cost, cost + calculate_cost(i, w, target) + calculate_cost(h - i, w, 0))\n      min_cost = min(min_cost, cost + calculate_cost(i, w, 0) + calculate_cost(h - i, w, target))\n\n      for target1 in range(0, target + 1):\n         cost = w * w\n         min_cost = min(min_cost, cost + calculate_cost(i, w, target1) + calculate_cost(h - i, w, target - target1))\n    \n    # Vertical cuts\n    for i in range(1, w):\n      cost = h * h\n      min_cost = min(min_cost, cost + calculate_cost(h, i, target) + calculate_cost(h, w - i, 0))\n      min_cost = min(min_cost, cost + calculate_cost(h, i, 0) + calculate_cost(h, w - i, target))\n      \n      for target1 in range(0, target + 1):\n          cost = h * h\n          min_cost = min(min_cost, cost + calculate_cost(h, i, target1) + calculate_cost(h, w - i, target - target1))\n    \n    dp[(h, w, target)] = min_cost\n    return min_cost\n  \n  print(calculate_cost(n, m, k))\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "59": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    bounds = []\n    for i in range(n):\n        if a[i] == -1:\n            if i > 0 and a[i-1] != -1:\n                bounds.append(a[i-1])\n            if i < n-1 and a[i+1] != -1:\n                bounds.append(a[i+1])\n    \n    if not bounds:\n        print(0, 42)\n        return\n\n    min_bound = min(bounds)\n    max_bound = max(bounds)\n    \n    k = (min_bound + max_bound) // 2\n    \n    arr = []\n    for x in a:\n        if x == -1:\n            arr.append(k)\n        else:\n            arr.append(x)\n    \n    m = 0\n    for i in range(n-1):\n        m = max(m, abs(arr[i] - arr[i+1]))\n    \n    print(m, k)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "60": "```python\ndef solve():\n    a, b = map(int, input().split())\n    print(a ^ 0 + b ^ 0)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if p[i] < p[j] and p[j] > p[k]:\n                    print(\"YES\")\n                    print(i + 1, j + 1, k + 1)\n                    return\n    print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "62": "```python\ndef solve():\n    s = input()\n    adj = {}\n    for i in range(len(s) - 1):\n        if s[i] not in adj:\n            adj[s[i]] = set()\n        if s[i+1] not in adj:\n            adj[s[i+1]] = set()\n        adj[s[i]].add(s[i+1])\n        adj[s[i+1]].add(s[i])\n    \n    for char in adj:\n        if len(adj[char]) > 2:\n            print(\"NO\")\n            return\n    \n    starts = []\n    all_chars = set(s)\n    for char in adj:\n        if len(adj[char]) <= 1:\n            starts.append(char)\n    \n    if not starts:\n        \n        first_char = s[0]\n        \n        layout = first_char\n        visited = {first_char}\n        \n        curr = first_char\n        \n        while True:\n            \n            neighbors = adj[curr]\n            \n            next_char = None\n            for neighbor in neighbors:\n                if neighbor not in visited:\n                    next_char = neighbor\n                    break\n            \n            if next_char is None:\n                break\n                \n            layout += next_char\n            visited.add(next_char)\n            curr = next_char\n        \n        \n        remaining_chars = \"\"\n        for char in \"abcdefghijklmnopqrstuvwxyz\":\n            if char not in visited:\n                remaining_chars += char\n        \n        if len(layout + remaining_chars) != 26:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(layout + remaining_chars)\n        \n        \n    else:\n        \n        if len(starts) > 2:\n            \n            \n            \n            first_char = starts[0]\n            \n            layout = first_char\n            visited = {first_char}\n            \n            curr = first_char\n            \n            while True:\n                \n                neighbors = adj[curr]\n                \n                next_char = None\n                for neighbor in neighbors:\n                    if neighbor not in visited:\n                        next_char = neighbor\n                        break\n                \n                if next_char is None:\n                    break\n                    \n                layout += next_char\n                visited.add(next_char)\n                curr = next_char\n            \n            \n            remaining_chars = \"\"\n            for char in \"abcdefghijklmnopqrstuvwxyz\":\n                if char not in visited:\n                    remaining_chars += char\n            \n            if len(layout + remaining_chars) != 26:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n                print(layout + remaining_chars)\n            \n        \n        else:\n            \n            first_char = starts[0]\n            \n            layout = first_char\n            visited = {first_char}\n            \n            curr = first_char\n            \n            while True:\n                \n                if curr not in adj:\n                    break\n                    \n                neighbors = adj[curr]\n                \n                next_char = None\n                for neighbor in neighbors:\n                    if neighbor not in visited:\n                        next_char = neighbor\n                        break\n                \n                if next_char is None:\n                    break\n                    \n                layout += next_char\n                visited.add(next_char)\n                curr = next_char\n            \n            \n            remaining_chars = \"\"\n            for char in \"abcdefghijklmnopqrstuvwxyz\":\n                if char not in visited:\n                    remaining_chars += char\n            \n            if len(layout + remaining_chars) != 26:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n                print(layout + remaining_chars)\n            \n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "63": "```python\ndef solve():\n  n, k = map(int, input().split())\n  a = list(map(int, input().split()))\n  w = list(map(int, input().split()))\n  \n  a.sort()\n  w.sort()\n  \n  happiness = 0\n  \n  # Assign largest elements to friends with w_i = 1\n  l = n - 1\n  for i in range(k):\n    if w[i] == 1:\n      happiness += 2 * a[l]\n      l -= 1\n  \n  # Assign remaining elements to friends with w_i > 1\n  r = 0\n  for i in range(k - 1, -1, -1):\n    if w[i] > 1:\n      happiness += a[l] + a[r]\n      l -= 1\n      r += w[i] - 1\n      \n  print(happiness)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "64": "```python\ndef solve():\n    n, l = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def calculate_time(time):\n        pos1 = 0\n        speed1 = 1\n        idx1 = 0\n        time1 = 0\n        \n        while time1 < time:\n            if idx1 < n:\n                dist_to_flag = a[idx1] - pos1\n                time_to_flag = dist_to_flag / speed1\n                \n                if time1 + time_to_flag <= time:\n                    time1 += time_to_flag\n                    pos1 = a[idx1]\n                    speed1 += 1\n                    idx1 += 1\n                else:\n                    pos1 += speed1 * (time - time1)\n                    time1 = time\n            else:\n                pos1 += speed1 * (time - time1)\n                time1 = time\n\n        pos2 = l\n        speed2 = 1\n        idx2 = n - 1\n        time2 = 0\n        \n        while time2 < time:\n            if idx2 >= 0:\n                dist_to_flag = pos2 - a[idx2]\n                time_to_flag = dist_to_flag / speed2\n                \n                if time2 + time_to_flag <= time:\n                    time2 += time_to_flag\n                    pos2 = a[idx2]\n                    speed2 += 1\n                    idx2 -= 1\n                else:\n                    pos2 -= speed2 * (time - time2)\n                    time2 = time\n            else:\n                pos2 -= speed2 * (time - time2)\n                time2 = time\n        \n        return pos1, pos2\n    \n    low = 0\n    high = l\n    \n    for _ in range(100):\n        mid = (low + high) / 2\n        pos1, pos2 = calculate_time(mid)\n        \n        if pos1 < pos2:\n            low = mid\n        else:\n            high = mid\n            \n    print(f\"{low:.12f}\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "65": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    dp = {}\n\n    def calculate_min_skips(index, turn):\n        if index == n:\n            return 0\n\n        if (index, turn) in dp:\n            return dp[(index, turn)]\n\n        if turn == 0: \n            ans = float('inf')\n            \n            ans = min(ans, a[index] + calculate_min_skips(index + 1, 1))\n            \n            if index + 1 < n:\n                ans = min(ans, a[index] + a[index+1] + calculate_min_skips(index + 2, 1))\n\n            dp[(index, turn)] = ans\n            return ans\n        else:\n            \n            ans = calculate_min_skips(index + 1, 0)\n            if index + 1 < n:\n                ans = min(ans, calculate_min_skips(index + 2, 0))\n            \n            dp[(index, turn)] = ans\n            return ans\n\n    print(calculate_min_skips(0, 0))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "66": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    print(*a)\n    print(*b)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "67": "```python\ndef solve():\n    n = int(input())\n    s = list(input())\n    t = list(input())\n\n    ops = []\n    \n    for i in range(n):\n        if s[i] != t[i]:\n            found = False\n            for j in range(i + 1, n):\n                if s[j] == s[i]:\n                    ops.append((j + 1, i + 1))\n                    s[j], t[i] = t[i], s[j]\n                    found = True\n                    break\n            if not found:\n                for j in range(i + 1, n):\n                    if t[j] == s[i]:\n                        ops.append((i + 1, j + 1))\n                        s[i], t[j] = t[j], s[i]\n                        ops.append((j + 1, i + 1))\n                        s[j], t[i] = t[i], s[j]\n                        found = True\n                        break\n            if not found:\n                print(\"No\")\n                return\n    \n    if len(ops) <= 2 * n:\n        print(\"Yes\")\n        print(len(ops))\n        for i, j in ops:\n            print(i, j)\n    else:\n        print(\"No\")\n\nk = int(input())\nfor _ in range(k):\n    solve()\n```",
    "68": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def get_operations(s):\n        if not s:\n            return 0\n        \n        max_ops = 0\n        for i in range(len(s)):\n            temp_s = list(s)\n            del temp_s[i]\n            temp_s = \"\".join(temp_s)\n            \n            if not temp_s:\n                max_ops = max(max_ops, 1)\n                continue\n                \n            first_char = temp_s[0]\n            prefix_len = 0\n            for j in range(len(temp_s)):\n                if temp_s[j] == first_char:\n                    prefix_len += 1\n                else:\n                    break\n            \n            temp_s = temp_s[prefix_len:]\n            \n            max_ops = max(max_ops, 1 + get_operations(temp_s))\n        \n        return max_ops\n\n    print(get_operations(s))\n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "69": "```python\ndef solve():\n  a, b = map(int, input().split())\n  s = input()\n  n = len(s)\n  \n  gaps = []\n  \n  first_one = -1\n  last_one = -1\n  \n  for i in range(n):\n    if s[i] == '1':\n      if first_one == -1:\n        first_one = i\n      last_one = i\n      \n  if first_one == -1:\n    print(0)\n    return\n  \n  \n  \n  current_gap = 0\n  for i in range(first_one + 1, last_one + 1):\n    if s[i] == '0':\n      current_gap += 1\n    else:\n      if current_gap > 0:\n        gaps.append(current_gap)\n      current_gap = 0\n      \n  \n  cost = a\n  \n  for gap in gaps:\n    cost += min(a, gap * b)\n  \n  print(cost)\n  \n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "70": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    ans = 0\n    for i in range(k // 2):\n        counts = {}\n        for j in range(0, n, k):\n            char1 = s[i + j]\n            char2 = s[k - 1 - i + j]\n            \n            if char1 not in counts:\n                counts[char1] = 0\n            counts[char1] += 1\n            \n            if char2 not in counts:\n                counts[char2] = 0\n            counts[char2] += 1\n        \n        total_chars = sum(counts.values())\n        max_count = 0\n        for count in counts.values():\n            max_count = max(max_count, count)\n        \n        ans += total_chars - max_count\n    \n    if k % 2 == 1:\n        counts = {}\n        for j in range(0, n, k):\n            char = s[k // 2 + j]\n            if char not in counts:\n                counts[char] = 0\n            counts[char] += 1\n        \n        total_chars = sum(counts.values())\n        max_count = 0\n        for count in counts.values():\n            max_count = max(max_count, count)\n        \n        ans += total_chars - max_count\n    \n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "71": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    coins = 0\n    balance = 0\n    for i in range(n):\n        balance += a[i]\n        if balance < 0:\n            coins += abs(balance)\n\n    print(coins)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "72": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    unique_elements = sorted(list(set(a)))\n    \n    if len(unique_elements) > k:\n        print(-1)\n        return\n    \n    while len(unique_elements) < k:\n        unique_elements.append(1)\n    \n    print(n * k)\n    print(*(unique_elements * n))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def mex(arr):\n        seen = set(arr)\n        for i in range(n + 1):\n            if i not in seen:\n                return i\n        return n + 1\n\n    ops = []\n    \n    for _ in range(2 * n):\n        \n        is_sorted = True\n        for i in range(n - 1):\n            if a[i] > a[i+1]:\n                is_sorted = False\n                break\n        \n        if is_sorted:\n            break\n\n        m = mex(a)\n\n        if m < n:\n            for i in range(n):\n                if a[i] != i and a[i] > m:\n                    a[i] = m\n                    ops.append(i + 1)\n                    break\n            else:\n                for i in range(n):\n                    if a[i] != i:\n                        a[i] = m\n                        ops.append(i+1)\n                        break\n        else:\n            \n            for i in range(n-1):\n                if a[i] > a[i+1]:\n                    a[i+1] = m\n                    ops.append(i+2)\n                    break\n    \n    is_sorted = True\n    for i in range(n - 1):\n        if a[i] > a[i+1]:\n            is_sorted = False\n            break\n            \n    if not is_sorted:\n        for i in range(n):\n            a[i] = i\n            ops.append(i+1)\n    \n    print(len(ops))\n    print(*ops)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    minions = []\n    for _ in range(n):\n        minions.append(list(map(int, input().split())))\n\n    best_actions = []\n    max_power = -1\n\n    import itertools\n\n    for perm in itertools.permutations(range(n)):\n        for i in range(1 << n):\n            actions = []\n            army = []\n            current_power = 0\n            \n            for idx in perm:\n                actions.append(idx + 1)\n                \n                power_increase = 0\n                for minion_idx in army:\n                    power_increase += minions[idx][1]\n                \n                new_minion_power = minions[idx][0] + power_increase\n                \n                army.append(idx)\n                current_power += new_minion_power\n                \n                if len(army) > k:\n                    current_power -= new_minion_power\n                    army.remove(idx)\n                    current_power -= minions[idx][0]\n                    \n                    remove_idx = idx\n                    actions.append(-(idx+1))\n                    \n                \n            if current_power > max_power:\n                max_power = current_power\n                best_actions = actions\n    \n    print(len(best_actions))\n    print(*best_actions)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "75": null,
    "76": "```python\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n % 4 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolve()\n```",
    "77": "```python\ndef solve():\n    n = int(input())\n    boards = []\n    for _ in range(n):\n        boards.append(list(map(int, input().split())))\n    \n    dp = [[float('inf')] * 3 for _ in range(n)]\n    \n    dp[0][0] = 0\n    dp[0][1] = boards[0][1]\n    dp[0][2] = 2 * boards[0][1]\n    \n    for i in range(1, n):\n        for j in range(3):\n            for k in range(3):\n                if boards[i-1][0] + k != boards[i][0] + j:\n                    dp[i][j] = min(dp[i][j], dp[i-1][k] + j * boards[i][1])\n    \n    print(min(dp[n-1]))\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "78": "```python\ndef solve():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n\n    ans = float('inf')\n\n    for r in range(n):\n        for c in range(m):\n            cost = 0\n            for i in range(m):\n                if grid[r][i] == '.':\n                    cost += 1\n            for i in range(n):\n                if grid[i][c] == '.':\n                    cost += 1\n            if grid[r][c] == '.':\n                cost -= 1\n            ans = min(ans, cost)\n\n    print(ans)\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "79": "```python\nimport math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve():\n    n = int(input())\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i != n:\n                divisors.append(n // i)\n    divisors.append(n)\n    divisors.sort()\n\n    best_order = []\n    min_moves = float('inf')\n\n    import itertools\n    for order in itertools.permutations(divisors):\n        moves = 0\n        is_decrypted = True\n        for i in range(len(order)):\n            if gcd(order[i], order[(i + 1) % len(order)]) == 1:\n                is_decrypted = False\n                break\n\n        if is_decrypted:\n            if moves < min_moves:\n                min_moves = moves\n                best_order = list(order)\n        else:\n          \n            temp_order = list(order)\n            num_moves = 0\n            \n            \n            while True:\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                is_decrypted = True\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                insertions = []\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                for i in range(len(temp_order)):\n                    if gcd(temp_order[i], temp_order[(i + 1) % len(temp_order)]) == 1:\n                        is_decrypted = False\n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        lcm_val = (temp_order[i] * temp_order[(i + 1) % len(temp_order)]) // gcd(temp_order[i], temp_order[(i + 1) % len(temp_order)])\n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        ",
    "80": "```python\ndef solve():\n    l, r = map(int, input().split())\n    count = 0\n    \n    n = r - l + 1\n    count = n * (n - 1) // 2\n    \n    num_zeros = 0\n    for i in range(l, r + 1):\n      if i == 0:\n        num_zeros += 1\n      elif i & (i-1) == 0:\n        num_zeros += 1\n    \n    count += num_zeros * (n - num_zeros) + num_zeros * (num_zeros - 1) // 2\n    \n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "81": "```python\ndef solve():\n    a = input()\n    b = input()\n    c = input()\n    n = len(a)\n    \n    for i in range(n):\n        if (a[i] == c[i] and b[i] == c[i]):\n            print(\"NO\")\n            return\n        elif a[i] == c[i] and b[i] != c[i]:\n            continue\n        elif a[i] != c[i] and b[i] == c[i]:\n            continue\n        elif a[i] != c[i] and b[i] != c[i]:\n            if a[i] != b[i]:\n                continue\n            else:\n                print(\"NO\")\n                return\n    print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "82": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    if n == 2:\n        print(p[1], p[0])\n        return\n    \n    p_prime = list(reversed(p))\n    print(*p_prime)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "83": "```python\ndef solve():\n  x, y, a, b = map(int, input().split())\n  \n  if a + b == 0:\n    if x == y:\n      print(0)\n    else:\n      print(-1)\n    return\n      \n  if (y - x) % (a + b) == 0:\n    print((y - x) // (a + b))\n  else:\n    print(-1)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_array = a[i:j+1]\n            stack = []\n            for element in sub_array:\n                if not stack or stack[-1] != element:\n                    stack.append(element)\n                else:\n                    stack.pop()\n            if not stack:\n                count += 1\n    print(count)\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "85": "```python\ndef solve():\n    s = input()\n    x = int(input())\n    n = len(s)\n    w = ['0'] * n\n    \n    for i in range(n):\n        if s[i] == '1':\n            if i - x >= 0:\n                w[i - x] = '1'\n            if i + x < n:\n                w[i + x] = '1'\n    \n    w_str = \"\".join(w)\n    \n    s_reconstructed = ['0'] * n\n    for i in range(n):\n        if i - x >= 0 and w_str[i - x] == '1':\n            s_reconstructed[i] = '1'\n        if i + x < n and w_str[i + x] == '1':\n            s_reconstructed[i] = '1'\n            \n    s_reconstructed_str = \"\".join(s_reconstructed)\n    \n    if s_reconstructed_str == s:\n        print(w_str)\n    else:\n        print(\"-1\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "86": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ones = a.count(1)\n    zeros = a.count(0)\n\n    if ones <= n // 2:\n        print(n // 2)\n        print(*([0] * (n // 2)))\n    else:\n        if ones % 2 == 0:\n            print(ones)\n            print(*([1] * ones))\n        else:\n            print(ones - 1)\n            print(*([1] * (ones - 1)))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "87": "```python\nimport math\n\ndef gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)\n\ndef solve():\n  m, d, w = map(int, input().split())\n  \n  w = w // gcd(d - 1, w)\n  \n  mn = min(m, d)\n  \n  k = mn // w\n  \n  ans = mn * k - w * (k * (k + 1) // 2)\n  \n  print(ans)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "88": "```python\ndef solve():\n    t = int(input())\n    x = list(map(int, input().split()))\n\n    for target in x:\n        if target < 19:\n            if target == 5 or target == 6 or target == 7 or target == 8 or target == 9 or target == 10 or target == 11 or target == 12 or target == 13 or target == 14 or target == 15 or target == 16 or target == 17 or target == 18:\n              print(\"YES\")\n            elif target == 1:\n              print(\"YES\")\n            elif target == 2:\n              print(\"YES\")\n            elif target == 3:\n              print(\"YES\")\n            elif target == 4:\n              print(\"YES\")\n            elif target == 19:\n              print(\"YES\")\n            \n            else:\n              print(\"NO\")\n            \n        else:\n            print(\"YES\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    parents = {}\n    \n    def build_tree(arr):\n        if not arr:\n            return {}\n        \n        root = arr[0]\n        children = []\n        \n        i = 1\n        while i < len(arr):\n            level_start = i\n            j = i\n            while j < len(arr) and arr[j] > arr[i-1]:\n                j += 1\n            \n            children.append(arr[i:j])\n            i = j\n        \n        tree = {}\n        tree[root] = []\n        \n        for child_level in children:\n            for child in child_level:\n                tree[root].append(child)\n                parents[child] = root\n                \n        for child_level in children:\n            build_tree(child_level)\n        \n        return tree\n    \n    build_tree(a)\n    \n    max_depth = 0\n    for i in range(1, n + 1):\n        depth = 0\n        curr = i\n        while curr != 1:\n          if curr not in parents:\n            depth = -1\n            break;\n          curr = parents[curr]\n          depth += 1\n        if depth != -1:\n            max_depth = max(max_depth, depth)\n    \n    print(max_depth)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "90": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    \n    unlocked_indices = [i for i in range(n) if l[i] == 0]\n    unlocked_values = [a[i] for i in unlocked_indices]\n    unlocked_values.sort()\n    \n    new_a = a[:]\n    \n    for i in range(len(unlocked_indices)):\n        new_a[unlocked_indices[i]] = unlocked_values[i]\n        \n    print(*new_a)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "91": "```python\ndef solve():\n  n = int(input())\n  q = list(map(int, input().split()))\n\n  p = [0] * n\n  used = [False] * (n + 1)\n\n  p[0] = q[0]\n  used[p[0]] = True\n\n  for i in range(1, n):\n    if q[i] > q[i-1]:\n      p[i] = q[i]\n      used[p[i]] = True\n    else:\n      found = False\n      for j in range(1, q[i]):\n        if not used[j]:\n          p[i] = j\n          used[j] = True\n          found = True\n          break\n      if not found:\n        print(\"-1\")\n        return\n\n  if len(set(p)) != n:\n    print(\"-1\")\n    return\n\n  print(*p)\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "92": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(n):\n            temp_s = list(s)\n            temp_t = list(t)\n            \n            def transform(arr, start_idx, end_idx):\n                if start_idx < 0 or start_idx >= len(arr) or end_idx < 0 or end_idx >= len(arr):\n                    return arr\n                \n                arr[end_idx] = arr[start_idx]\n                return \"\".join(arr)\n            \n            \n            queue_s = [s]\n            visited_s = {s}\n            \n            while queue_s:\n                curr_s = queue_s.pop(0)\n                \n                if curr_s == t:\n                    print(\"YES\")\n                    return\n                \n                for k in range(n - 1):\n                    next_s1 = list(curr_s)\n                    next_s1 = transform(next_s1, k, k+1)\n                    next_s1 = \"\".join(next_s1)\n                    \n                    if next_s1 not in visited_s:\n                        queue_s.append(next_s1)\n                        visited_s.add(next_s1)\n                        \n                    next_s2 = list(curr_s)\n                    next_s2 = transform(next_s2, k+1, k)\n                    next_s2 = \"\".join(next_s2)\n                    \n                    if next_s2 not in visited_s:\n                        queue_s.append(next_s2)\n                        visited_s.add(next_s2)\n                \n    \n    \n    sets = set(s)\n    sett = set(t)\n    \n    common = sets.intersection(sett)\n    \n    if len(common) > 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "93": null,
    "94": "```python\ndef solve():\n    n, T = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    colors = [0] * n\n    \n    for i in range(n):\n        \n        if 2 * a[i] < T:\n            colors[i] = 0\n        elif 2 * a[i] > T:\n            colors[i] = 1\n        else:\n            if i % 2 == 0:\n                colors[i] = 0\n            else:\n                colors[i] = 1\n                \n    print(*colors)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    if n == 1:\n        print(\"-1\")\n    else:\n        s = \"\"\n        for i in range(n):\n            s += \"2\"\n        print(s)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "96": "```python\ndef solve():\n    n, T, a, b = map(int, input().split())\n    types = list(map(int, input().split()))\n    times = list(map(int, input().split()))\n\n    problems = []\n    for i in range(n):\n        problems.append((times[i], types[i]))\n\n    problems.sort()\n\n    max_points = 0\n\n    for leave_time in range(T + 1):\n        solved_count = 0\n        time_spent = 0\n        \n        mandatory_problems = []\n        for i in range(n):\n            if problems[i][0] <= leave_time:\n                mandatory_problems.append(i)\n\n        possible = True\n        solved = [False] * n\n        \n        for i in mandatory_problems:\n            if problems[i][1] == 0:\n                time_spent += a\n            else:\n                time_spent += b\n            \n            if time_spent > leave_time:\n                possible = False\n                break\n            solved[i] = True\n\n        if possible:\n            solved_count = len(mandatory_problems)\n            \n            remaining_problems = []\n            for i in range(n):\n                if not solved[i]:\n                    remaining_problems.append(i)\n            \n            remaining_problems.sort(key=lambda i: a if problems[i][1] == 0 else b)\n            \n            for i in remaining_problems:\n                if problems[i][1] == 0:\n                    if time_spent + a <= leave_time:\n                        time_spent += a\n                        solved_count += 1\n                else:\n                    if time_spent + b <= leave_time:\n                        time_spent += b\n                        solved_count += 1\n            \n            max_points = max(max_points, solved_count)\n    \n    print(max_points)\n\nm = int(input())\nfor _ in range(m):\n    solve()\n```",
    "97": "```python\ndef solve():\n    s, c = input().split()\n    n = len(s)\n\n    if s < c:\n        print(s)\n        return\n\n    best_s = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            temp_s = list(s)\n            temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n            temp_s = \"\".join(temp_s)\n            if temp_s < c:\n                if best_s is None or temp_s < best_s:\n                    best_s = temp_s\n\n    if best_s is None:\n        print(\"---\")\n    else:\n        print(best_s)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "98": "```python\ndef solve():\n    c, m, x = map(int, input().split())\n    print(min(c, m, (c + m + x) // 3))\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    s_list = list(s)\n    \n    indices_to_remove = []\n    \n    i = 0\n    while i < len(s_list) - 1:\n        if s_list[i] == '1' and s_list[i+1] == '0':\n            indices_to_remove.append(i)\n            i += 2\n        else:\n            i += 1\n            \n    \n    \n    \n    \n    import itertools\n    \n    best_string = s\n    \n    \n    \n    for r in range(len(indices_to_remove)+1):\n        for comb in itertools.combinations(indices_to_remove, r):\n            temp_s_list = list(s)\n            temp_indices_to_remove = list(comb)\n            \n            temp_indices_to_remove.sort(reverse=True)\n            \n            \n            \n            \n            \n            \n            current_s_list = list(s)\n            \n            removed_count = 0\n            \n            \n            for index in temp_indices_to_remove:\n                \n                \n                \n                if index - removed_count >= 0 and index - removed_count + 1 < len(current_s_list) and current_s_list[index - removed_count] == '1' and current_s_list[index - removed_count + 1] == '0':\n                    \n                    \n                    \n                    \n                    \n                    \n                    current_s_list.pop(index - removed_count + 1)\n                    \n                    removed_count += 1\n                    \n                    \n                \n                \n                    \n            \n            \n            \n            current_s = \"\".join(current_s_list)\n            \n            \n            \n            \n            \n            \n            \n            \n            if len(current_s) < len(best_string):\n                \n                best_string = current_s\n            elif len(current_s) == len(best_string):\n                \n                if current_s < best_string:\n                    \n                    best_string = current_s\n    \n    print(best_string)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```"
}