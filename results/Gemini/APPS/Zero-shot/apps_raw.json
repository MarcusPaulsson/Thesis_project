{
    "0": "```python\ndef solve():\n    n = int(input())\n    words = []\n    for _ in range(n):\n        words.append(input())\n\n    def reverse_word(word):\n        return word[::-1]\n\n    def check(reversed_indices):\n        temp_words = []\n        for i in range(n):\n            if i in reversed_indices:\n                temp_words.append(reverse_word(words[i]))\n            else:\n                temp_words.append(words[i])\n        \n        if len(set(temp_words)) != n:\n            return False\n        \n        def can_be_arranged(arr):\n            if not arr:\n                return True\n            \n            import itertools\n            for perm in itertools.permutations(arr):\n                valid = True\n                for i in range(len(perm) - 1):\n                    if perm[i][-1] != perm[i+1][0]:\n                        valid = False\n                        break\n                if valid:\n                    return True\n            return False\n\n        return can_be_arranged(temp_words)\n    \n\n    min_reversed = float('inf')\n    best_reversed_indices = []\n\n    for i in range(1 << n):\n        reversed_indices = []\n        for j in range(n):\n            if (i >> j) & 1:\n                reversed_indices.append(j)\n\n        if check(reversed_indices):\n            if len(reversed_indices) < min_reversed:\n                min_reversed = len(reversed_indices)\n                best_reversed_indices = reversed_indices\n\n    if min_reversed == float('inf'):\n        print(\"-1\")\n    else:\n        print(min_reversed)\n        if min_reversed > 0:\n            print(*(x + 1 for x in best_reversed_indices))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "1": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    \n    if n > k or m > k:\n        print(-1)\n        return\n    \n    if n == m:\n        print(k)\n    else:\n        if (k - max(n, m)) % 2 == 0:\n            print(k)\n        else:\n            print(k - 1)\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    \n    p = [0] * n\n    \n    p[0] = a[0]\n    \n    for i in range(1, n):\n        if a[i] != p[i-1]:\n            p[i] = a[i]\n        elif b[i] != p[i-1]:\n            p[i] = b[i]\n        else:\n            p[i] = c[i]\n            \n    if p[n-1] == p[0]:\n        if a[n-1] != p[n-2] and a[n-1] != p[0]:\n            p[n-1] = a[n-1]\n        elif b[n-1] != p[n-2] and b[n-1] != p[0]:\n           p[n-1] = b[n-1]\n        else:\n            p[n-1] = c[n-1]\n\n    print(*p)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "3": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    \n    if total_sum == 0:\n        print(0)\n        return\n    \n    a.sort()\n    \n    transfer_sum = 0\n    for i in range(n - 1, n - 1 - k, -1):\n        transfer_sum += a[i]\n        \n    print(transfer_sum)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "4": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    result = \"\"\n    for m in range(1, n + 1):\n        is_beautiful = False\n        for l in range(n):\n            for r in range(l, n):\n                sub_array = p[l:r+1]\n                if len(sub_array) == m:\n                    nums = sorted(sub_array)\n                    expected = list(range(1, m + 1))\n                    if nums == expected:\n                        is_beautiful = True\n                        break\n                elif len(sub_array) > m:\n                    nums = sorted(sub_array)\n                    expected = list(range(1,m+1))\n                    \n                    \n                    \n                    temp = []\n                    for x in sub_array:\n                        if x <= m:\n                          temp.append(x)\n\n                    if len(temp) == m:\n                        \n                        if sorted(temp) == expected:\n                            is_beautiful = True\n                            break\n                            \n            if is_beautiful:\n                break\n        \n        result += \"1\" if is_beautiful else \"0\"\n    \n    print(result)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "5": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    results = []\n    \n    for l1 in range(1, n):\n        l2 = n - l1\n        p1 = a[:l1]\n        p2 = a[l1:]\n        \n        \n        def is_permutation(arr):\n            if not arr:\n                return False\n            m = len(arr)\n            seen = set()\n            for x in arr:\n                if not (1 <= x <= m):\n                    return False\n                if x in seen:\n                    return False\n                seen.add(x)\n            return len(seen) == m and m > 0\n        \n        if is_permutation(p1) and is_permutation(p2):\n            results.append((l1, l2))\n    \n    print(len(results))\n    for l1, l2 in results:\n        print(l1, l2)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "6": "```python\ndef solve():\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    def check(closed_spots):\n        adj = [[] for _ in range(n + 1)]\n        for u, v in edges:\n            if u not in closed_spots and v not in closed_spots:\n                adj[u].append(v)\n\n        for start_node in range(1, n + 1):\n            if start_node in closed_spots:\n                continue\n            \n            q = [(start_node, [start_node])]\n            while q:\n                curr, path = q.pop(0)\n                if len(path) > 1 and path[-1] != start_node:\n                    \n                    return False\n                \n                for neighbor in adj[curr]:\n                    q.append((neighbor, path + [neighbor]))\n        return True\n\n    for i in range(1 << n):\n        closed_spots = []\n        for j in range(n):\n            if (i >> j) & 1:\n                closed_spots.append(j + 1)\n\n        if len(closed_spots) <= (4/7) * n:\n            if check(closed_spots):\n                print(len(closed_spots))\n                print(*closed_spots)\n                return\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": null,
    "8": "```python\ndef solve():\n  n, k = map(int, input().split())\n  s = input()\n  \n  wins = 0\n  for char in s:\n    if char == 'W':\n      wins += 1\n  \n  if wins + k >= n:\n    print(2 * n - 1)\n    return\n  \n  if wins == 0:\n    if k == 0:\n      print(0)\n    else:\n      print(2 * k - 1)\n    return\n  \n  \n  \n  gaps = []\n  start = -1\n  end = -1\n  \n  for i in range(n):\n    if s[i] == 'W':\n      if start == -1:\n        start = i\n      end = i\n  \n  \n  curr_gap = 0\n  for i in range(start + 1, end + 1):\n    if s[i] == 'L':\n      curr_gap += 1\n    else:\n      if curr_gap > 0:\n        gaps.append(curr_gap)\n        curr_gap = 0\n  \n  if curr_gap > 0:\n      gaps.append(curr_gap)\n\n  \n  gaps.sort()\n  \n  score = 0\n  \n  for i in range(n):\n    if s[i] == 'W':\n      if i > 0 and s[i-1] == 'W':\n        score += 2\n      else:\n        score += 1\n  \n  \n  for gap in gaps:\n    if k >= gap:\n      score += 2 * gap + 1\n      k -= gap\n    else:\n      score += 2 * k\n      k = 0\n      break\n\n  score += 2 * k\n  \n  print(score)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "9": "```python\ndef solve():\n    s = input()\n    groups = []\n    i = 0\n    while i < len(s):\n        j = i\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        groups.append(s[i])\n        i = j\n\n    score_alice = 0\n    turns = 0\n    while len(groups) > 0:\n        min_len = float('inf')\n        min_idx = -1\n        \n        \n        \n        temp_groups = []\n        i = 0\n        count = 1\n        while i < len(s):\n            if i + 1 < len(s) and s[i] == s[i+1]:\n                count += 1\n            else:\n                temp_groups.append((s[i], count))\n                count = 1\n            i += 1\n\n        \n        \n        \n        \n        \n        \n        \n        new_s = \"\"\n        for char, count in temp_groups:\n            new_s += char * count\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
    "10": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    best_seq = []\n    max_sum = -1\n\n    for i in range(1 << n):\n        seq = []\n        for j in range(n):\n            if (i >> j) & 1:\n                seq.append(p[j])\n\n        if len(seq) < 2:\n            continue\n\n        current_sum = 0\n        for j in range(len(seq) - 1):\n            current_sum += abs(seq[j] - seq[j+1])\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            best_seq = seq\n        elif current_sum == max_sum:\n            if len(seq) < len(best_seq):\n                best_seq = seq\n\n    print(len(best_seq))\n    print(*best_seq)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "11": "```python\ndef solve():\n    s = input()\n    n = len(s)\n\n    def calculate_grid_area(seq):\n        x, y = 0, 0\n        min_x, max_x = 0, 0\n        min_y, max_y = 0, 0\n        \n        for move in seq:\n            if move == 'W':\n                y -= 1\n            elif move == 'S':\n                y += 1\n            elif move == 'A':\n                x -= 1\n            elif move == 'D':\n                x += 1\n            \n            min_x = min(min_x, x)\n            max_x = max(max_x, x)\n            min_y = min(min_y, y)\n            max_y = max(max_y, y)\n        \n        width = max_x - min_x + 1\n        height = max_y - min_y + 1\n        return width * height\n\n    min_area = calculate_grid_area(s)\n\n    for i in range(n + 1):\n        for char in ['W', 'A', 'S', 'D']:\n            new_s = s[:i] + char + s[i:]\n            min_area = min(min_area, calculate_grid_area(new_s))\n\n    print(min_area)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        elif a[i] < b[i]:\n            found_pos = False\n            for j in range(i):\n                if a[j] == 1:\n                    found_pos = True\n                    break\n            if not found_pos:\n                print(\"NO\")\n                return\n        else:\n            found_neg = False\n            for j in range(i):\n                if a[j] == -1:\n                    found_neg = True\n                    break\n            if not found_neg:\n                print(\"NO\")\n                return\n    print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "13": "```python\ndef solve():\n  n, g, b = map(int, input().split())\n  \n  required_good = (n + 1) // 2\n  \n  full_cycles = required_good // g\n  remaining_good = required_good % g\n  \n  total_days = full_cycles * (g + b)\n  \n  if remaining_good > 0:\n    total_days += remaining_good\n  else:\n    total_days -= b\n    total_days += g\n\n  print(max(n, total_days))\n  \n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "14": "```python\ndef solve():\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    \n    if a1 == b1 + b2 and a2 == a1:\n        print(\"Yes\")\n        return\n    if a1 == b1 + a2 and b2 == a1:\n        print(\"Yes\")\n        return\n    if b1 == a1 + b2 and a2 == b1:\n        print(\"Yes\")\n        return\n    if b1 == a1 + a2 and b2 == b1:\n        print(\"Yes\")\n        return\n    \n    print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "15": "```python\ndef solve():\n    a, b, x, y = map(int, input().split())\n    \n    ans = 0\n    \n    # Case 1: Window above the dead pixel\n    ans = max(ans, a * y)\n    \n    # Case 2: Window below the dead pixel\n    ans = max(ans, a * (b - y - 1))\n    \n    # Case 3: Window to the left of the dead pixel\n    ans = max(ans, b * x)\n    \n    # Case 4: Window to the right of the dead pixel\n    ans = max(ans, b * (a - x - 1))\n    \n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "16": "```python\ndef solve():\n    n = int(input())\n    C, T = map(float, input().split())\n    problems = []\n    for _ in range(n):\n        a, p = map(int, input().split())\n        problems.append((a, p))\n\n    def calculate_score(order, training_time):\n        s = 1.0 + C * training_time\n        time_spent = training_time\n        total_score = 0\n        \n        for problem_index in order:\n            a, p = problems[problem_index]\n            \n            time_spent += 10 \n            if time_spent > T:\n                return -1\n            \n            time_spent += a / s\n            if time_spent > T:\n                return -1\n            \n            total_score += p\n            s *= 0.9\n            \n        return total_score\n\n    import itertools\n    \n    max_score = 0\n    for order in itertools.permutations(range(n)):\n        \n        low = 0.0\n        high = T\n        \n        for _ in range(50):\n            mid = (low + high) / 2\n            score = calculate_score(order, mid)\n            \n            if score == -1:\n                high = mid\n            else:\n                low = mid\n        \n        max_score = max(max_score, calculate_score(order, low))\n\n    print(max_score)\n\ntc = int(input())\nfor _ in range(tc):\n    solve()\n```",
    "17": null,
    "18": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "19": null,
    "20": "```python\ndef solve():\n    n, m = map(int, input().split())\n    customers = []\n    for _ in range(n):\n        customers.append(list(map(int, input().split())))\n\n    low = m\n    high = m\n    prev_time = 0\n\n    for t, l, h in customers:\n        low -= (t - prev_time)\n        high += (t - prev_time)\n\n        if high < l or low > h:\n            print(\"NO\")\n            return\n        \n        low = max(low, l)\n        high = min(high, h)\n        prev_time = t\n\n    print(\"YES\")\n\n\n\nq = int(input())\nfor _ in range(q):\n    solve()\n\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    s = set(s)\n    \n    for k in range(1, 1025):\n        new_s = set()\n        for val in s:\n            new_s.add(val ^ k)\n        \n        if new_s == s:\n            print(k)\n            return\n    \n    print(\"-1\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "22": "```python\ndef minDigit(x):\n    s = str(x)\n    min_digit = 9\n    for digit in s:\n        min_digit = min(min_digit, int(digit))\n    return min_digit\n\ndef maxDigit(x):\n    s = str(x)\n    max_digit = 0\n    for digit in s:\n        max_digit = max(max_digit, int(digit))\n    return max_digit\n\nt = int(input())\nfor _ in range(t):\n    a1, K = map(int, input().split())\n    a = a1\n    for i in range(1, int(min(K, 1000))):\n        min_d = minDigit(a)\n        max_d = maxDigit(a)\n        if min_d == 0:\n            break\n        a = a + min_d * max_d\n    print(a)\n```",
    "23": null,
    "24": null,
    "25": "```python\ndef solve():\n    n = int(input())\n    triangles = []\n    for _ in range(n - 2):\n        triangles.append(list(map(int, input().split())))\n\n    def is_adjacent(arr, a, b):\n        for i in range(len(arr) - 1):\n            if (arr[i] == a and arr[i+1] == b) or (arr[i] == b and arr[i+1] == a):\n                return True\n        if (arr[0] == a and arr[-1] == b) or (arr[0] == b and arr[-1] == a):\n            return True\n        return False\n\n    def check_triangle(polygon, triangle):\n        a, b, c = triangle\n        \n        a_idx = -1\n        b_idx = -1\n        c_idx = -1\n        for i in range(len(polygon)):\n            if polygon[i] == a:\n                a_idx = i\n            elif polygon[i] == b:\n                b_idx = i\n            elif polygon[i] == c:\n                c_idx = i\n        \n        if a_idx == -1 or b_idx == -1 or c_idx == -1:\n            return False\n        \n        \n        if (a_idx + 1) % len(polygon) == b_idx and (a_idx - 1 + len(polygon)) % len(polygon) == c_idx:\n            return True\n        if (a_idx + 1) % len(polygon) == c_idx and (a_idx - 1 + len(polygon)) % len(polygon) == b_idx:\n            return True\n        \n        return False\n\n    import itertools\n    for perm in itertools.permutations(range(1, n + 1)):\n        \n        p = list(perm)\n        \n        \n        cutting_order = []\n        remaining_polygon = p[:]\n        \n        triangle_indices = list(range(n - 2))\n        \n        \n        \n        def find_cutting_order(polygon, available_triangles):\n            if not available_triangles:\n                return True\n            \n            for i in available_triangles:\n                triangle = triangles[i]\n                if check_triangle(polygon, triangle):\n                    cutting_order.append(i + 1)\n                    \n                    a,b,c = triangle\n                    \n                    a_idx = polygon.index(a)\n                    b_idx = polygon.index(b)\n                    c_idx = polygon.index(c)\n                    \n                    if (a_idx + 1) % len(polygon) == b_idx and (a_idx - 1 + len(polygon)) % len(polygon) == c_idx:\n                        \n                        new_polygon = polygon[:]\n                        new_polygon.pop(a_idx)\n                        \n                    elif (a_idx + 1) % len(polygon) == c_idx and (a_idx - 1 + len(polygon)) % len(polygon) == b_idx:\n                        new_polygon = polygon[:]\n                        new_polygon.pop(a_idx)\n                    else:\n                        return False\n                        \n                    remaining_triangles = available_triangles[:]\n                    remaining_triangles.remove(i)\n\n                    if find_cutting_order(new_polygon, remaining_triangles):\n                        return True\n                    else:\n                        cutting_order.pop()\n            return False\n        \n        if find_cutting_order(remaining_polygon, triangle_indices):\n            print(*p)\n            print(*cutting_order)\n            return\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "26": "```python\ndef solve():\n    n, m = map(int, input().split())\n    if (n == 1 and m >= 1) or (n >= 1 and m == 1) or (n == 2 and m == 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    moves = 0\n    seen = set()\n    \n    while True:\n        even_found = False\n        for x in a:\n            if x % 2 == 0:\n                even_found = True\n                break\n        \n        if not even_found:\n            break\n        \n        \n        \n        \n        \n        \n        \n        evens = set()\n        for x in a:\n            if x % 2 == 0:\n                evens.add(x)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        smallest_even = -1\n        for x in evens:\n                if smallest_even == -1 or x < smallest_even:\n                    smallest_even = x;\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        if smallest_even in seen:\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n             \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            print(\"error\")\n            return\n        seen.add(smallest_even)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
    "28": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    target = \"abacaba\"\n    \n    def count_occurrences(text):\n        count = 0\n        for i in range(len(text) - len(target) + 1):\n            if text[i:i+len(target)] == target:\n                count += 1\n        return count\n\n    def replace_and_check(start_index):\n        temp_s = list(s)\n        \n        for i in range(len(target)):\n            if temp_s[start_index + i] == '?':\n                temp_s[start_index + i] = target[i]\n            elif temp_s[start_index + i] != target[i]:\n                return None\n        \n        result_s = \"\".join(temp_s)\n        \n        final_s = list(result_s)\n        for i in range(len(final_s)):\n            if final_s[i] == '?':\n                final_s[i] = 'd'\n        \n        final_str = \"\".join(final_s)\n        \n        if count_occurrences(final_str) == 1:\n            return final_str\n        else:\n            return None\n\n    for i in range(n - len(target) + 1):\n        result = replace_and_check(i)\n        if result:\n            print(\"Yes\")\n            print(result)\n            return\n\n    print(\"No\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "29": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  ans = [-1] * n\n  \n  for k in range(1, n + 1):\n    amazing_num = -1\n    \n    candidates = set()\n    for i in range(n - k + 1):\n      subsegment = a[i:i+k]\n      \n      if i == 0:\n        candidates = set(subsegment)\n      else:\n        candidates = candidates.intersection(set(subsegment))\n\n    if candidates:\n      amazing_num = min(candidates)\n    \n    ans[k-1] = amazing_num\n\n  print(*ans)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```"
}