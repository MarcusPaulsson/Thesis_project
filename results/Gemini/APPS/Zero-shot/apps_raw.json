{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    max_len = -1\n    \n    for i in range(n):\n        if s[i] == '[':\n            for j in range(i + 1, n):\n                if s[j] == ']':\n                    for k in range(i + 1, j):\n                        if s[k] == ':':\n                            for l in range(k + 1, j):\n                                if s[l] == ':':\n                                    \n                                    count = 0\n                                    for m in range(k + 1, l):\n                                        if s[m] == '|':\n                                            count += 1\n                                    \n                                    curr_len = 4 + count\n                                    max_len = max(max_len, curr_len)\n    \n    print(max_len)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    s = str(x)\n    n = len(s)\n    \n    best_num = x\n    best_sum = sum(int(digit) for digit in s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num <= x:\n            current_sum = sum(int(digit) for digit in num_str)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_num = num\n            elif current_sum == best_sum and num > best_num:\n                best_num = num\n                \n    print(best_num)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n  n = int(input())\n  s = str(n)\n  l = len(s)\n  \n  first_digit = int(s[0])\n  \n  next_lucky = (first_digit + 1) * (10**(l-1))\n  \n  print(next_lucky - n)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    x = int(input())\n    hh, mm = map(int, input().split())\n\n    count = 0\n    while True:\n        h_str = str(hh).zfill(2)\n        m_str = str(mm).zfill(2)\n        \n        if '7' in h_str or '7' in m_str:\n            print(count)\n            return\n\n        mm -= x\n        if mm < 0:\n            mm += 60\n            hh -= 1\n            if hh < 0:\n                hh += 24\n        \n        count += 1\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n\n    if l == 1 and r == n:\n        print(0)\n        return\n\n    if l == 1:\n        print(abs(pos - r) + 1)\n        return\n\n    if r == n:\n        print(abs(pos - l) + 1)\n        return\n\n    print(min(abs(pos - l) + abs(r - l) + 2, abs(pos - r) + abs(r - l) + 2))\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_d = 0\n    for d, h in blows:\n        max_d = max(max_d, d)\n\n    if max_d > x:\n        print(1)\n        return\n\n    max_diff = float('-inf')\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_d\n    \n    ans = 1 + (remaining + max_diff - 1) // max_diff\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    day = 0\n    grains = n\n    \n    while True:\n        day += 1\n        grains += m\n        if grains > n:\n            grains = n\n        \n        grains -= day\n        \n        if grains <= 0:\n            print(day)\n            return\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa_idx):\n        count = 0\n        for i in range(d):\n            if i != sofa_idx:\n                x1_a, y1_a, x2_a, y2_a = sofas[sofa_idx]\n                x1_b, y1_b, x2_b, y2_b = sofas[i]\n                \n                min_x_a = min(y1_a, y2_a)\n                min_x_b = min(y1_b, y2_b)\n                \n                if min_x_a > min_x_b:\n                    count += 1\n        return count\n\n    def count_right(sofa_idx):\n        count = 0\n        for i in range(d):\n            if i != sofa_idx:\n                x1_a, y1_a, x2_a, y2_a = sofas[sofa_idx]\n                x1_b, y1_b, x2_b, y2_b = sofas[i]\n                \n                max_x_a = max(y1_a, y2_a)\n                max_x_b = max(y1_b, y2_b)\n                \n                if max_x_a < max_x_b:\n                    count += 1\n        return count\n\n    def count_top(sofa_idx):\n        count = 0\n        for i in range(d):\n            if i != sofa_idx:\n                x1_a, y1_a, x2_a, y2_a = sofas[sofa_idx]\n                x1_b, y1_b, x2_b, y2_b = sofas[i]\n                \n                min_y_a = min(x1_a, x2_a)\n                min_y_b = min(x1_b, x2_b)\n                \n                if min_y_a > min_y_b:\n                    count += 1\n        return count\n\n    def count_bottom(sofa_idx):\n        count = 0\n        for i in range(d):\n            if i != sofa_idx:\n                x1_a, y1_a, x2_a, y2_a = sofas[sofa_idx]\n                x1_b, y1_b, x2_b, y2_b = sofas[i]\n                \n                max_y_a = max(x1_a, x2_a)\n                max_y_b = max(x1_b, x2_b)\n                \n                if max_y_a < max_y_b:\n                    count += 1\n        return count\n\n    result = -1\n    for i in range(d):\n        l = count_left(i)\n        r = count_right(i)\n        t = count_top(i)\n        b = count_bottom(i)\n\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            result = i + 1\n            break\n\n    print(result)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n  n = int(input())\n  \n  min_days_off = (n // 7) * 2\n  max_days_off = (n // 7) * 2\n  \n  remaining_days = n % 7\n  \n  if remaining_days == 1:\n    min_days_off += 0\n    max_days_off += 1\n  elif remaining_days == 2:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 3:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 4:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 5:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 6:\n    min_days_off += 1\n    max_days_off += 2\n  \n  print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\nn, a, b, p, q = map(int, input().split())\n\nred_count = n // a\nblue_count = n // b\nboth_count = n // lcm(a, b)\n\nred_only = red_count - both_count\nblue_only = blue_count - both_count\n\ntotal_chocolates = red_only * p + blue_only * q\n\nif p > q:\n    total_chocolates += both_count * p\nelse:\n    total_chocolates += both_count * q\n\nprint(total_chocolates)\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i + 1] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n\n    order = []\n    count = 0\n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(\"-1\")\n        return\n\n    required = set(main_courses)\n    result = []\n    visited = [False] * (n + 1)\n\n    def dfs(course):\n        if visited[course]:\n            return\n        visited[course] = True\n        for dep in dependencies[course - 1]:\n            dfs(dep)\n        \n    for course in main_courses:\n        dfs(course)\n        \n    q = deque()\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n):\n        if visited[i+1]:\n            for dep in dependencies[i]:\n                if visited[dep]:\n                    adj[dep].append(i + 1)\n                    in_degree[i + 1] += 1\n\n    for i in range(1, n + 1):\n        if visited[i] and in_degree[i] == 0:\n            q.append(i)\n            \n    result = []\n    while q:\n        u = q.popleft()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n                \n    \n    main_courses_passed = 0\n    for course in main_courses:\n        if course in result:\n            main_courses_passed += 1\n            \n    if main_courses_passed != len(main_courses):\n        print(\"-1\")\n        return\n    \n    print(len(result))\n    print(*result)\n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = set(p)\n    remaining = []\n    for i in range(n, 0, -1):\n        if i not in used:\n            remaining.append(i)\n\n    p = p + remaining\n    \n    def is_stack_sortable(arr):\n        s = []\n        b = []\n        a = arr[:]\n        \n        i = 0\n        while i < 2 * n:\n            if len(a) > 0 and (len(s) == 0 or a[0] < (s[-1] if len(s) > 0 else float('inf'))):\n                s.append(a[0])\n                a = a[1:]\n            elif len(s) > 0:\n                b.append(s[-1])\n                s = s[:-1]\n            else:\n                return False\n            i += 1\n        \n        return all(b[i] <= b[i+1] for i in range(len(b)-1))\n\n    \n    def find_lexicographically_maximal_permutation(n, k, initial_p):\n        used = set(initial_p)\n        remaining = []\n        for i in range(n, 0, -1):\n            if i not in used:\n                remaining.append(i)\n\n        import itertools\n        \n        best_permutation = None\n        \n        for perm in itertools.permutations(remaining):\n            candidate_p = initial_p + list(perm)\n            \n            if is_stack_sortable(candidate_p):\n                if best_permutation is None:\n                    best_permutation = candidate_p\n                else:\n                    if candidate_p > best_permutation:\n                        best_permutation = candidate_p\n        \n        return best_permutation\n\n    result = find_lexicographically_maximal_permutation(n, k, p[:k])\n    \n    if result is None:\n        print(\"-1\")\n    else:\n        print(*result)\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n    \n    if cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    t = \"\"\n    u = \"\"\n    \n    suffix_min = [0] * (n + 1)\n    suffix_min[n] = 'z'\n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    i = 0\n    while i < n or len(t) > 0:\n        if i < n and (len(t) == 0 or suffix_min[i] <= t[-1]):\n            t += s[i]\n            i += 1\n        else:\n            u += t[-1]\n            t = t[:-1]\n            \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][1] - pairs[i-1][1] > pairs[i][0] - pairs[i-1][0]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n\n    ans = 0\n    while True:\n        hh_str = str(hh).zfill(2)\n        mm_str = str(mm).zfill(2)\n        \n        if hh_str == mm_str[::-1]:\n            print(ans)\n            return\n\n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        ans += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    pos_min = a.index(1)\n    pos_max = a.index(n)\n\n    ans = 0\n    \n    # Case 1: Swap with the first element\n    temp_a = a[:]\n    temp_a[0], temp_a[pos_min] = temp_a[pos_min], temp_a[0]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n    \n    temp_a = a[:]\n    temp_a[0], temp_a[pos_max] = temp_a[pos_max], temp_a[0]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n\n    # Case 2: Swap with the last element\n    temp_a = a[:]\n    temp_a[-1], temp_a[pos_min] = temp_a[pos_min], temp_a[-1]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n    \n    temp_a = a[:]\n    temp_a[-1], temp_a[pos_max] = temp_a[pos_max], temp_a[-1]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n\n    print(ans)\n\nsolve()\n```",
    "22": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    symmetric_chars = {'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p', 'o': 'o', 'x': 'x', 'X': 'X', 'H': 'H', 'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T', 'U': 'U', 'V': 'V', 'v': 'v', 'W': 'W', 'w': 'w', 'Y': 'Y', 'A': 'A', 'm':'m'}\n    \n    for i in range(n // 2):\n        if s[i] not in symmetric_chars or s[n - 1 - i] not in symmetric_chars:\n            print(\"NIE\")\n            return\n        \n        if symmetric_chars.get(s[i]) != s[n - 1 - i]:\n            print(\"NIE\")\n            return\n    \n    if n % 2 == 1:\n        if s[n // 2] not in symmetric_chars:\n            print(\"NIE\")\n            return\n    \n    print(\"TAK\")\n\nsolve()\n```",
    "23": "```python\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    def find_max(index, current_num, remaining_digits):\n        if index == len(a):\n            return current_num\n        \n        best_num = \"\"\n        \n        for i in range(len(remaining_digits)):\n            digit = remaining_digits[i]\n            \n            if current_num == \"\" and digit == '0':\n                continue\n            \n            new_num = current_num + digit\n            \n            if int(new_num) <= int(b[:len(new_num)]):\n                \n                remaining_digits_copy = remaining_digits[:i] + remaining_digits[i+1:]\n                \n                if len(new_num) == len(b):\n                    \n                    temp_num = new_num + \"\".join(sorted(remaining_digits_copy, reverse=True))\n                    \n                    if int(temp_num) <= int(b):\n                        if best_num == \"\" or int(temp_num) > int(best_num):\n                            best_num = temp_num\n                else:\n                    \n                    res = find_max(index + 1, new_num, remaining_digits_copy)\n                    if res != \"\":\n                        if best_num == \"\" or int(res) > int(best_num):\n                            best_num = res\n        \n        return best_num\n    \n    result = find_max(0, \"\", a_digits)\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(list(input()))\n\n    def check_win(board):\n        for i in range(10):\n            for j in range(10):\n                if board[i][j] == 'X':\n                    # Check horizontal\n                    if j <= 5:\n                        count = 0\n                        for k in range(5):\n                            if board[i][j+k] == 'X':\n                                count += 1\n                        if count == 5:\n                            return True\n\n                    # Check vertical\n                    if i <= 5:\n                        count = 0\n                        for k in range(5):\n                            if board[i+k][j] == 'X':\n                                count += 1\n                        if count == 5:\n                            return True\n\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 5 and j <= 5:\n                        count = 0\n                        for k in range(5):\n                            if board[i+k][j+k] == 'X':\n                                count += 1\n                        if count == 5:\n                            return True\n\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= 5 and j >= 4:\n                        count = 0\n                        for k in range(5):\n                            if board[i+k][j-k] == 'X':\n                                count += 1\n                        if count == 5:\n                            return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n                if check_win(board):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n            \n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n        \n    if k > 0:\n        print(\"-1\")\n        return\n    \n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\nimport math\n\nx, y, z = map(float, input().split())\n\na1 = y**z * math.log(x) if x > 0 else -float('inf')\na2 = z**y * math.log(x) if x > 0 else -float('inf')\na3 = y * z * math.log(x) if x > 0 else -float('inf')\na4 = z * y * math.log(x) if x > 0 else -float('inf')\na5 = x**z * math.log(y) if y > 0 else -float('inf')\na6 = z**x * math.log(y) if y > 0 else -float('inf')\na7 = x * z * math.log(y) if y > 0 else -float('inf')\na8 = z * x * math.log(y) if y > 0 else -float('inf')\na9 = x**y * math.log(z) if z > 0 else -float('inf')\na10 = y**x * math.log(z) if z > 0 else -float('inf')\na11 = x * y * math.log(z) if z > 0 else -float('inf')\na12 = y * x * math.log(z) if z > 0 else -float('inf')\n\nvalues = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\nmax_val = max(values)\nindex = values.index(max_val)\n\nif index == 0:\n    print(\"x^y^z\")\nelif index == 1:\n    print(\"x^z^y\")\nelif index == 2:\n    print(\"(x^y)^z\")\nelif index == 3:\n    print(\"(x^z)^y\")\nelif index == 4:\n    print(\"y^x^z\")\nelif index == 5:\n    print(\"y^z^x\")\nelif index == 6:\n    print(\"(y^x)^z\")\nelif index == 7:\n    print(\"(y^z)^x\")\nelif index == 8:\n    print(\"z^x^y\")\nelif index == 9:\n    print(\"z^y^x\")\nelif index == 10:\n    print(\"(z^x)^y\")\nelif index == 11:\n    print(\"(z^y)^x\")\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s[:2*i].startswith(prefix):\n            ans = min(ans, i + 1 + (n - 2*i))\n        \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n\n    e = len(examples)\n    \n    moves = []\n    \n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            moves.append((examples[i][0], str(i + 1)))\n    \n    # Move regular to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            moves.append((regular[i][0], str(e + i + 1)))\n\n    \n    conflicts = set()\n    for i in range(1, n + 1):\n        conflicts.add(str(i))\n    \n    temp_moves = []\n    \n    for i in range(len(moves)):\n        if moves[i][1] in conflicts:\n            temp_name = generate_temp_name(files)\n            temp_moves.append((moves[i][0], temp_name))\n            moves[i] = (temp_name, moves[i][1])\n            files.append([temp_name, 'temp'])\n            \n    \n    final_moves = []\n    for move in temp_moves:\n        final_moves.append(move)\n    for move in moves:\n        final_moves.append(move)\n    \n    print(len(final_moves))\n    for move in final_moves:\n        print(\"move\", move[0], move[1])\n\ndef generate_temp_name(files):\n    existing_names = set()\n    for file in files:\n        existing_names.add(file[0])\n    \n    i = 0\n    while True:\n        temp_name = \"temp\" + str(i)\n        if temp_name not in existing_names:\n            return temp_name\n        i += 1\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    digits = [int(c) for c in s]\n    \n    ans = 6\n    \n    for i in range(1000):\n        s1 = str(i).zfill(3)\n        sum1 = sum(int(c) for c in s1)\n        \n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            sum2 = sum(int(c) for c in s2)\n            \n            if sum1 == sum2:\n                \n                \n                temp_digits = [int(c) for c in s1 + s2]\n                \n                \n                diff = 0\n                for k in range(6):\n                    if digits[k] != temp_digits[k]:\n                        diff += 1\n                \n                ans = min(ans, diff)\n    \n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n > 63 and k > 1:\n        print(1, 1)\n        return\n\n    if k > (1 << n):\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    \n    for i in range(int(k)):\n        num = (num * ((1 << n) % mod - i % mod)) % mod\n        den = (den * ((1) % mod)) % mod\n\n    den = pow((1 << (n * k)) % mod, mod - 2, mod)\n    \n    prob_diff = (num * den) % mod\n    \n    a = (1 - prob_diff + mod) % mod\n    b = 1\n    \n    print(a, 1)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    distance = 0\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if distance == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if distance == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n        \n        if direction == \"South\":\n            distance += t\n        elif direction == \"North\":\n            distance -= t\n        \n        if distance < 0 or distance > 20000:\n            print(\"NO\")\n            return\n            \n    if distance == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\nimport math\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g, x, y = extended_gcd(a1, a2)\n\n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    x *= (b2 - b1) // g\n    y *= (b2 - b1) // g\n\n    lcm = (a1 * a2) // g\n\n    k = (x * a1 + b1)\n\n    \n    first = k\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        if i >= 1 and i < n:\n            x = a // i\n            y = b // (n - i)\n            if x > 0 and y > 0:\n                ans = max(ans, min(x, y))\n    print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n\n    if n == 0:\n        print(0, 0)\n        return\n\n    l, r = 0, 10**9\n    k = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if 3 * mid * (mid + 1) >= n:\n            k = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    n -= 3 * k * (k - 1)\n\n    x, y = 2 * k, 0\n\n    if n <= k:\n        x -= 2 * n\n    elif n <= 2 * k:\n        x -= 2 * k\n        x += 2 * (n - k)\n        y += 2 * (n - k)\n    elif n <= 3 * k:\n        x += 2 * (n - 2 * k)\n        y += 2 * k\n    elif n <= 4 * k:\n        x += 2 * k\n        x -= 2 * (n - 3 * k)\n        y += 2 * k\n        \n    elif n <= 5 * k:\n        x -= 2 * (n - 4 * k)\n        y += 2 * k\n        y -= 2 * (n - 4 * k)\n    else:\n        x -= 2 * k\n        y -= 2 * (n - 5 * k)\n        \n    print(x, y)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    for i in range(c // a + 1):\n        remaining_damage = c - i * a\n        if remaining_damage >= 0 and remaining_damage % b == 0:\n            print(\"Yes\")\n            return\n    \n    print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, L = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for shift in range(L):\n        shifted_sasha = [(x + shift) % L for x in sasha]\n        shifted_sasha.sort()\n        if shifted_sasha == kefa:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n  \"\"\"\n  Finds the distance to the nearest zero for each element in the array.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    A list of integers representing the distances to the nearest zero for each element.\n  \"\"\"\n\n  n = len(arr)\n  distances = [float('inf')] * n\n\n  # Forward pass: find distances to the nearest zero from the left\n  last_zero = float('-inf')\n  for i in range(n):\n    if arr[i] == 0:\n      last_zero = i\n      distances[i] = 0\n    elif last_zero != float('-inf'):\n      distances[i] = min(distances[i], i - last_zero)\n\n  # Backward pass: find distances to the nearest zero from the right\n  last_zero = float('inf')\n  for i in range(n - 1, -1, -1):\n    if arr[i] == 0:\n      last_zero = i\n      distances[i] = 0\n    elif last_zero != float('inf'):\n      distances[i] = min(distances[i], last_zero - i)\n\n  return distances\n\n\nif __name__ == \"__main__\":\n  n = int(input())\n  arr = list(map(int, input().split()))\n  result = nearest_zero(arr)\n  print(*result)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    seen = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        if binary_string in seen:\n            continue\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            \n            for j in range(n):\n                shifted_string = binary_string[j:] + binary_string[:j]\n                seen.add(shifted_string)\n    \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    def angle(v):\n        return math.atan2(v[1], v[0])\n\n    angles = []\n    for i in range(n):\n        angles.append(angle(vectors[i]))\n\n    min_angle_diff = float('inf')\n    best_pair = (0, 0)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle1 = angles[i]\n            angle2 = angles[j]\n            \n            diff = abs(angle1 - angle2)\n            diff = min(diff, 2 * math.pi - diff)\n\n            if diff < min_angle_diff:\n                min_angle_diff = diff\n                best_pair = (i + 1, j + 1)\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\nd, k, a, b, t = map(int, input().split())\n\nif d <= k:\n  print(d * a)\nelse:\n  cost = k * a\n  remaining = d - k\n  \n  if t + k * a < k * b:\n    num_breaks = remaining // k\n    cost += num_breaks * (t + k * a)\n    remaining %= k\n    \n    if t + remaining * a < remaining * b:\n      cost += t + remaining * a\n    else:\n      cost += remaining * b\n  else:\n    cost += remaining * b\n    \n  print(cost)\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, i)\n            if i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // i)\n\n    if best_gcd == 1 and k * (k + 1) // 2 > n:\n        print(-1)\n        return\n    \n    if best_gcd == 1 and n == 1 and k == 1:\n        print(1)\n        return\n\n    if best_gcd == 1 and n == 1 and k > 1:\n        print(-1)\n        return\n\n    \n    first_k_sum = k * (k + 1) // 2\n    remaining = n // best_gcd - first_k_sum\n    \n    if remaining < 0:\n        print(-1)\n        return\n\n    result = []\n    for i in range(1, k):\n        result.append(i * best_gcd)\n    result.append((k + remaining) * best_gcd)\n\n    print(*result)\n\nsolve()\n```",
    "46": "```python\nn, m = map(int, input().split())\ncount = 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if (i + j) % 5 == 0:\n            count += 1\nprint(count)\n```",
    "47": "```python\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_a = a[:]\n            for k in range(i, j):\n                temp_a[k] *= x\n\n            curr_max = 0\n            max_so_far = 0\n            for k in range(n):\n                curr_max += temp_a[k]\n                if curr_max < 0:\n                    curr_max = 0\n                max_so_far = max(max_so_far, curr_max)\n            ans = max(ans, max_so_far)\n    print(ans)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    low = 1\n    high = n * m\n    ans = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\ndigits = 1\ncount = 9\nwhile k > digits * count:\n    k -= digits * count\n    digits += 1\n    count *= 10\n\nnum = 10**(digits - 1) + (k - 1) // digits\nindex = (k - 1) % digits\n\nprint(str(num)[index])\n```",
    "50": "```python\ndef solve():\n    n = int(input())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    def get_path(start, end, adj):\n        q = [(start, [start])]\n        while q:\n            node, path = q.pop(0)\n            if node == end:\n                return path\n            for neighbor in adj[node]:\n                if neighbor not in path:\n                    q.append((neighbor, path + [neighbor]))\n        return None\n\n    def edges_in_path(path):\n        edge_set = set()\n        for i in range(len(path) - 1):\n            u, v = sorted((path[i], path[i+1]))\n            edge_set.add((u, v))\n        return edge_set\n\n    max_edges = 0\n    best_a, best_b, best_c = -1, -1, -1\n\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if a == b:\n                continue\n            for c in range(1, n + 1):\n                if a == c or b == c:\n                    continue\n\n                adj = {i: [] for i in range(1, n + 1)}\n                for u, v in edges:\n                    adj[u].append(v)\n                    adj[v].append(u)\n\n                path_ab = get_path(a, b, adj)\n                path_bc = get_path(b, c, adj)\n                path_ac = get_path(a, c, adj)\n\n                edges_ab = edges_in_path(path_ab)\n                edges_bc = edges_in_path(path_bc)\n                edges_ac = edges_in_path(path_ac)\n\n                union_edges = edges_ab.union(edges_bc).union(edges_ac)\n                num_edges = len(union_edges)\n\n                if num_edges > max_edges:\n                    max_edges = num_edges\n                    best_a, best_b, best_c = a, b, c\n\n    print(max_edges)\n    print(best_a, best_b, best_c)\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def get_dp(row_idx, rem):\n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n        \n        if row_idx == n:\n            if rem == 0:\n                return 0\n            else:\n                return float('-inf')\n        \n        max_sum = float('-inf')\n        \n        # Option 1: Don't pick any elements from this row\n        max_sum = max(max_sum, get_dp(row_idx + 1, rem))\n        \n        # Option 2: Pick some elements from this row\n        row = a[row_idx]\n        max_elements = m // 2\n        \n        for i in range(1 << m):\n            count = 0\n            current_sum = 0\n            elements = []\n            \n            for j in range(m):\n                if (i >> j) & 1:\n                    count += 1\n                    current_sum += row[j]\n                    elements.append(row[j])\n            \n            if count <= max_elements:\n                new_rem = (rem - (current_sum % k)) % k\n                max_sum = max(max_sum, current_sum + get_dp(row_idx + 1, new_rem))\n        \n        dp[(row_idx, rem)] = max_sum\n        return max_sum\n\n    print(get_dp(0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_sequence, remaining_arr, moves):\n            nonlocal max_len, best_moves\n\n            if len(current_sequence) > max_len:\n                max_len = len(current_sequence)\n                best_moves = moves\n\n            if not remaining_arr:\n                return\n\n            if not current_sequence:\n                # Take left\n                backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_val = current_sequence[-1]\n                \n                # Take left\n                if remaining_arr[0] > last_val:\n                    backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                if remaining_arr[-1] > last_val:\n                    backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n        backtrack([], a, \"\")\n        return max_len, best_moves\n\n    length, moves = find_longest_increasing_sequence(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    for d in range(101):\n        possible = True\n        \n        \n        first_val = None\n        \n        \n        for target in range(1, 101):\n            \n            valid_d = True\n            \n            \n            first_val_found = False\n            \n            for i in range(n):\n                \n                if a[i] == target:\n                    if not first_val_found:\n                        first_val_found = True\n                    continue\n                elif a[i] + d == target:\n                    if not first_val_found:\n                        first_val_found = True\n                    continue\n                elif a[i] - d == target:\n                    if not first_val_found:\n                        first_val_found = True\n                    continue\n                else:\n                    valid_d = False\n                    break\n            \n            if valid_d and first_val_found:\n                print(d)\n                return\n    \n    print(-1)\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n\n    def intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n        x_overlap = max(0, min(x2, x4) - max(x1, x3))\n        y_overlap = max(0, min(y2, y4) - max(y1, y3))\n        return x_overlap * y_overlap\n\n    intersection1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    intersection2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n\n    x7 = max(x3, x5)\n    y7 = max(y3, y5)\n    x8 = min(x4, x6)\n    y8 = min(y4, y6)\n    \n    intersection3 = intersection_area(x3, y3, x4, y4, x5, y5, x6, y6)\n    intersection12 = intersection_area(x1, y1, x2, y2, x7, y7, x8, y8)\n\n    covered_area = intersection1 + intersection2 - intersection12\n    \n    if white_area > covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    assigned = [False] * (n + 1)\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i]] = True\n\n    unassigned_givers = []\n    for i in range(n):\n        if f[i] == 0:\n            unassigned_givers.append(i)\n\n    unassigned_receivers = []\n    for i in range(1, n + 1):\n        if not assigned[i]:\n            unassigned_receivers.append(i)\n\n    for i in range(len(unassigned_givers)):\n        giver_index = unassigned_givers[i]\n        receiver = unassigned_receivers[i]\n        \n        if giver_index + 1 == receiver:\n            if i + 1 < len(unassigned_givers):\n                unassigned_receivers[i], unassigned_receivers[i+1] = unassigned_receivers[i+1], unassigned_receivers[i]\n            else:\n                \n                for j in range(len(unassigned_receivers)):\n                    if unassigned_receivers[j] != giver_index + 1 and unassigned_receivers[j] != unassigned_receivers[i]:\n                        unassigned_receivers[i], unassigned_receivers[j] = unassigned_receivers[j], unassigned_receivers[i]\n                        break\n                \n        f[giver_index] = unassigned_receivers[i]\n\n    print(*f)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    \n    a_list = list(map(int, list(a)))\n    \n    best_a = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a = a_list[:]\n            for k in range(i, j + 1):\n                temp_a[k] = f[temp_a[k] - 1]\n            \n            temp_a_str = \"\".join(map(str, temp_a))\n            \n            if temp_a_str > best_a:\n                best_a = temp_a_str\n    \n    print(best_a)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_abc = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_abc = (A, B, C)\n    \n    print(best_cost)\n    print(*best_abc)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c, i + 1))\n\n    schedule = [0] * n\n    exam_days = {}\n    for s, d, c, i in exams:\n        exam_days[d - 1] = i\n\n    for day in exam_days:\n        schedule[day] = m + 1\n\n    preparation_counts = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            best_exam = -1\n            for s, d, c, i in exams:\n                exam_index = i - 1\n                if s <= day + 1 < d and preparation_counts[exam_index] < c:\n                    if best_exam == -1:\n                        best_exam = i\n                    else:\n                        s_best, d_best, c_best, i_best = exams[best_exam - 1]\n                        if d < d_best:\n                            best_exam = i\n            \n            if best_exam != -1:\n                schedule[day] = best_exam\n                preparation_counts[best_exam - 1] += 1\n\n    possible = True\n    for i in range(m):\n        if preparation_counts[i] != exams[i][2]:\n            possible = False\n            break\n\n    if possible:\n        print(*schedule)\n    else:\n        print(-1)\n\nsolve()\n```",
    "65": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    if n == m:\n        print(0)\n        return\n    \n    if m % n != 0:\n        print(-1)\n        return\n    \n    diff = m // n\n    \n    count = 0\n    while diff % 2 == 0:\n        diff //= 2\n        count += 1\n    \n    while diff % 3 == 0:\n        diff //= 3\n        count += 1\n        \n    if diff != 1:\n        print(-1)\n    else:\n        print(count)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    if k == 1:\n        print(t)\n        return\n    \n    max_overlap = 0\n    for overlap in range(1, n):\n        if t[:n - overlap] == t[overlap:]:\n            max_overlap = n - overlap\n            break\n    \n    result = t\n    for _ in range(k - 1):\n        result += t[max_overlap:]\n    \n    print(result)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n    \n    counts = [0] * (n + 1)\n    for i in range(n + 1):\n        counts[i] = dp[n][i]\n        \n    \n    total_cost = 0\n    \n    for length in range(n, -1, -1):\n        if k > counts[length]:\n            total_cost += (n - length) * counts[length]\n            k -= counts[length]\n        else:\n            total_cost += (n - length) * k\n            k = 0\n            break\n            \n    if k > 0:\n        print(-1)\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    def check_degree(tree_edges):\n        degree = 0\n        for u, v in tree_edges:\n            if u == 1 or v == 1:\n                degree += 1\n        return degree\n\n    def is_connected(tree_edges):\n        if not tree_edges:\n            return False\n        \n        adj = [[] for _ in range(n + 1)]\n        for u, v in tree_edges:\n            adj[u].append(v)\n            adj[v].append(u)\n\n        visited = [False] * (n + 1)\n        q = [1]\n        visited[1] = True\n        count = 0\n\n        while q:\n            u = q.pop(0)\n            count += 1\n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    q.append(v)\n        \n        return count == n\n\n    def find_spanning_tree(edges, n, d):\n        from itertools import combinations\n\n        for r in range(n - 1, min(m + 1, n)):\n            for comb in combinations(edges, n - 1):\n                tree_edges = list(comb)\n                if is_connected(tree_edges) and check_degree(tree_edges) == d:\n                    return tree_edges\n        return None\n\n    spanning_tree = find_spanning_tree(edges, n, d)\n\n    if spanning_tree:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "70": "```python\nh1, m1 = map(int, input().replace(':', ' ').split())\nh2, m2 = map(int, input().replace(':', ' ').split())\n\nstart_minutes = h1 * 60 + m1\nend_minutes = h2 * 60 + m2\n\nmid_minutes = (start_minutes + end_minutes) // 2\n\nh3 = mid_minutes // 60\nm3 = mid_minutes % 60\n\nprint(f\"{h3:02d}:{m3:02d}\")\n```",
    "71": "```python\nimport math\n\na = int(input())\nif a == 1:\n    print(1)\nelse:\n    print(math.ceil(math.log(a, 2)))\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n    \n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n\n    counts = [0] * (n + 1)\n    for i in range(n + 1):\n        counts[i] = dp[n][i]\n\n    total_cost = 0\n    for length in range(n, -1, -1):\n        if k <= 0:\n            break\n        \n        take = min(k, counts[length])\n        total_cost += (n - length) * take\n        k -= take\n\n    if k > 0:\n        print(\"-1\")\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    week = [0, 1, 2, 0, 2, 1, 0]\n    \n    min_weeks = min(a // 3, b // 2, c // 2)\n    \n    a -= min_weeks * 3\n    b -= min_weeks * 2\n    c -= min_weeks * 2\n    \n    ans = min_weeks * 7\n    \n    max_days = 0\n    \n    for start_day in range(7):\n        temp_a, temp_b, temp_c = a, b, c\n        days = 0\n        curr_day = start_day\n        \n        while True:\n            food_type = week[curr_day % 7]\n            \n            if food_type == 0:\n                if temp_a > 0:\n                    temp_a -= 1\n                    days += 1\n                else:\n                    break\n            elif food_type == 1:\n                if temp_b > 0:\n                    temp_b -= 1\n                    days += 1\n                else:\n                    break\n            else:\n                if temp_c > 0:\n                    temp_c -= 1\n                    days += 1\n                else:\n                    break\n            \n            curr_day += 1\n        \n        max_days = max(max_days, days)\n    \n    print(ans + max_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile = []\n        tile.append(list(map(int, input().split())))\n        tile.append(list(map(int, input().split())))\n        tiles.append(tile)\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\nn = int(input())\ntotal_sum = n * (n + 1) // 2\nif total_sum % 2 == 0:\n    print(0)\nelse:\n    print(1)\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    \n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    def count_substring(seq, sub):\n        count = 0\n        for i in range(len(seq) - len(sub) + 1):\n            if seq[i:i+len(sub)] == sub:\n                count += 1\n        return count > 0\n    \n    count = 0\n    \n    def generate_sequences(length):\n        if length == 0:\n            yield \"\"\n        else:\n            for seq in generate_sequences(length - 1):\n                yield seq + \"(\"\n                yield seq + \")\"\n    \n    for seq in generate_sequences(2 * n):\n        if is_regular(seq) and count_substring(seq, s):\n            count += 1\n    \n    print(count % mod)\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    \n    ans = float('inf')\n    \n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        temp_n = list(n)\n        moves = 0\n        \n        # Find the last digit of the suffix\n        last_digit_idx = -1\n        for i in range(n_len - 1, -1, -1):\n            if temp_n[i] == suffix[1]:\n                last_digit_idx = i\n                break\n        \n        if last_digit_idx == -1:\n            continue\n        \n        # Move the last digit to the end\n        moves += (n_len - 1 - last_digit_idx)\n        temp_n.pop(last_digit_idx)\n        \n        # Find the second last digit of the suffix\n        second_last_digit_idx = -1\n        for i in range(len(temp_n) - 1, -1, -1):\n            if temp_n[i] == suffix[0]:\n                second_last_digit_idx = i\n                break\n        \n        if second_last_digit_idx == -1:\n            continue\n        \n        # Move the second last digit to the second last position\n        moves += (len(temp_n) - 1 - second_last_digit_idx)\n        temp_n.pop(second_last_digit_idx)\n        \n        # Remove leading zeros\n        leading_zeros = 0\n        for i in range(len(temp_n)):\n            if temp_n[i] == '0':\n                leading_zeros += 1\n            else:\n                break\n        \n        moves += leading_zeros\n        \n        if len(temp_n) > 0:\n            ans = min(ans, moves)\n    \n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def check(colors):\n        colored_string = [(s[i], colors[i]) for i in range(n)]\n        \n        def can_sort(arr):\n            arr = arr[:]\n            for i in range(n):\n                for j in range(n - i - 1):\n                    if arr[j][0] > arr[j+1][0] and arr[j][1] != arr[j+1][1]:\n                        arr[j], arr[j+1] = arr[j+1], arr[j]\n            \n            sorted_chars = [arr[i][0] for i in range(n)]\n            return sorted_chars == sorted(s)\n        \n        return can_sort(colored_string)\n    \n    for num_colors in range(1, n + 1):\n        for i in range(num_colors**n):\n            colors = []\n            temp = i\n            for _ in range(n):\n                colors.append(temp % num_colors + 1)\n                temp //= num_colors\n            \n            if check(colors):\n                print(num_colors)\n                print(*colors)\n                return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    import itertools\n    \n    for permutation in itertools.permutations(strings):\n        if check_order(list(permutation)):\n            print(\"YES\")\n            for s in permutation:\n                print(s)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    min_perimeter = float('inf')\n    \n    for h in range(1, int(total**0.5) + 2):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: a forms a rectangle\n            for h_a in range(1, int(a**0.5) + 2):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    if h_a <= h and w_a <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n            \n            # Case 2: b forms a rectangle\n            for h_b in range(1, int(b**0.5) + 2):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    if h_b <= h and w_b <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n    \n    print(min_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += \"1\"\n            else:\n                coloring += \"0\"\n\n        s0 = \"\"\n        s1 = \"\"\n        for j in range(n):\n            if coloring[j] == '0':\n                s0 += s[j]\n            else:\n                s1 += s[j]\n\n        s0 = \"\".join(sorted(s0))\n        s1 = \"\".join(sorted(s1))\n\n        merged = \"\"\n        idx0 = 0\n        idx1 = 0\n        for j in range(n):\n            if coloring[j] == '0':\n                merged += s0[idx0]\n                idx0 += 1\n            else:\n                merged += s1[idx1]\n                idx1 += 1\n\n        if \"\".join(sorted(s)) == merged:\n            print(\"YES\")\n            print(coloring)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n    \n    ans = -1\n    for price in range(1, 2001):\n        tax8 = price * 8 // 100\n        tax10 = price * 10 // 100\n        \n        if tax8 == a and tax10 == b:\n            ans = price\n            break\n    \n    print(ans)\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k == 1:\n        if n >= 1:\n            print(\"YES\")\n            print(n)\n        else:\n            print(\"NO\")\n        return\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [0] * k\n    for i in range(k):\n        a[i] = i + 1\n\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k - 1, -1, -1):\n        add = min(remaining, 2 * a[i] - a[i] - 1)\n        a[i] += add\n        remaining -= add\n\n    if remaining > 0:\n        print(\"NO\")\n        return\n\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "87": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(subset):\n        \n        pos_projects = []\n        neg_projects = []\n        for i in subset:\n            if projects[i][1] >= 0:\n                pos_projects.append(i)\n            else:\n                neg_projects.append(i)\n\n        \n        pos_projects.sort(key=lambda x: projects[x][0])\n        neg_projects.sort(key=lambda x: projects[x][0] + projects[x][1], reverse=True)\n\n        \n        current_rating = r\n        \n        for i in pos_projects:\n            if current_rating >= projects[i][0]:\n                current_rating += projects[i][1]\n            else:\n                return False\n\n        for i in neg_projects:\n            if current_rating >= projects[i][0]:\n                current_rating += projects[i][1]\n                if current_rating < 0:\n                    return False\n            else:\n                return False\n        \n        return True\n\n    max_size = 0\n    for i in range(1 << n):\n        subset = []\n        for j in range(n):\n            if (i >> j) & 1:\n                subset.append(j)\n        \n        if check(subset):\n            max_size = max(max_size, len(subset))\n\n    print(max_size)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def check_palindrome(mat):\n        for i in range(n):\n            for j in range(n):\n                if mat[i][j] != mat[n-1-i][j] or mat[i][j] != mat[i][n-1-j]:\n                    return False\n        return True\n    \n    def backtrack(row, col):\n        if row == n:\n            if check_palindrome(matrix):\n                print(\"YES\")\n                for r in matrix:\n                    print(*r)\n                return True\n            else:\n                return False\n        \n        next_row = row\n        next_col = col + 1\n        if next_col == n:\n            next_row = row + 1\n            next_col = 0\n            \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                matrix[row][col] = num\n                counts[num] -= 1\n                \n                if backtrack(next_row, next_col):\n                    return True\n                \n                matrix[row][col] = 0\n                counts[num] += 1\n        \n        return False\n    \n    if not backtrack(0, 0):\n        print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    min_empty = m - 1\n    max_empty = n - total_length\n    \n    if d * (m + 1) <= n + 1:\n        print(\"NO\")\n        return\n\n    arr = [0] * n\n    \n    pos = 0\n    for i in range(m):\n        \n        needed_space = min(d - 1, n - pos - total_length + sum(c[i:]))\n        \n        pos += needed_space\n        \n        for j in range(c[i]):\n            arr[pos] = i + 1\n            pos += 1\n    \n    print(\"YES\")\n    print(*arr)\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            \n            ti = 0\n            tsi = 0\n            \n            possible = True\n            while ti < m and tsi < len(temp_s):\n                if t[ti] == temp_s[tsi]:\n                    ti += 1\n                    tsi += 1\n                else:\n                    tsi += 1\n            \n            if ti == m:\n                ans = max(ans, j - i)\n                \n    print(ans)\n\nsolve()\n```",
    "92": "```python\nx = float(input())\na = int(x * 2.2)\nb = int(x * 2.2)\nif a > 10:\n  a = 10\nif b > 10:\n  b = 10\nif a < 1:\n  a = 1\nif b < 1:\n  b = 1\nprint(a, b)\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        if k < 2:\n            print(\"NO\")\n            return\n        if n > k:\n            print(\"NO\")\n            return\n    \n    if d > 1 and k == 1:\n        print(\"NO\")\n        return\n\n    edges = []\n    \n    # Create a path of length d\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n    \n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n    \n    available_nodes = list(range(1, n + 1))\n    \n    q = list(range(1, d + 2))\n    \n    idx = 0\n    while idx < len(q):\n        u = q[idx]\n        idx += 1\n        \n        for v in range(1, n + 1):\n            if len(edges) == n - 1:\n                break\n            if v not in available_nodes:\n                continue\n            if v in q:\n                continue\n            if degrees[u] < k:\n                edges.append((u, v))\n                degrees[u] += 1\n                degrees[v] += 1\n                q.append(v)\n                available_nodes.remove(v)\n    \n    if len(edges) == n - 1:\n        print(\"YES\")\n        for u, v in edges:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    s = \"\"\n    \n    if start == 0:\n        s += \"0\"\n        a -= 1\n    else:\n        s += \"1\"\n        b -= 1\n    \n    curr = 1 - start\n    \n    for _ in range(x - 1):\n        if curr == 0:\n            s += \"1\"\n            b -= 1\n        else:\n            s += \"0\"\n            a -= 1\n        curr = 1 - curr\n    \n    if curr == 0:\n        s += \"0\" * a\n        s += \"1\" * b\n    else:\n        s += \"1\" * b\n        s += \"0\" * a\n    \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    def check(res, s, t):\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                return False\n        return True\n\n    import itertools\n    \n    chars = ['a', 'b', 'c']\n    \n    def generate_strings(n):\n        counts = {'a': n, 'b': n, 'c': n}\n        res = []\n        \n        def backtrack(current_string):\n            if len(current_string) == 3 * n:\n                res.append(current_string)\n                return\n            \n            for char in chars:\n                if counts[char] > 0:\n                    counts[char] -= 1\n                    backtrack(current_string + char)\n                    counts[char] += 1\n        \n        backtrack(\"\")\n        return res\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n    \n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        \n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n        \n        if len(set(p)) != n:\n            continue\n        \n        all_numbers_present = True\n        for i in range(1, n + 1):\n            if i not in p:\n                all_numbers_present = False\n                break\n        \n        if all_numbers_present:\n            print(*p)\n            return\n    \n    print(-1)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    odd_count = 0\n    even_count = 0\n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    print(min(odd_count, even_count))\n\nsolve()\n```",
    "98": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    \n    best_moves = float('inf')\n    \n    for i in range(1, int(math.sqrt(n)) + 2):\n        if n % i == 0:\n            j = n // i\n            moves = (i - 1) + (j - 1)\n            best_moves = min(best_moves, moves)\n            \n    print(best_moves)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3 - a2) , a2 - (b2 + b1 - a3), a3 - (b3 + b2 - a1))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    \n    \n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}