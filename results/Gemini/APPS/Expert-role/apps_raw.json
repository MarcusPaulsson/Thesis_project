{
    "0": "```python\ndef solve():\n    n = int(input())\n    words = []\n    for _ in range(n):\n        words.append(input())\n\n    def check(reversed_indices):\n        modified_words = []\n        for i in range(n):\n            if i in reversed_indices:\n                modified_words.append(words[i][::-1])\n            else:\n                modified_words.append(words[i])\n        \n        if len(set(modified_words)) != n:\n            return False\n        \n        def can_arrange(arr):\n            if not arr:\n                return True\n            \n            import itertools\n            for perm in itertools.permutations(arr):\n                valid = True\n                for i in range(len(perm) - 1):\n                    if perm[i][-1] != perm[i+1][0]:\n                        valid = False\n                        break\n                if valid:\n                    return True\n            return False\n        \n        return can_arrange(modified_words)\n\n    for num_reversed in range(n + 1):\n        for reversed_indices in itertools.combinations(range(n), num_reversed):\n            if check(set(reversed_indices)):\n                print(num_reversed)\n                if num_reversed > 0:\n                    print(*(x + 1 for x in reversed_indices))\n                return\n\n    print(-1)\n\nimport itertools\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "1": "```python\ndef solve():\n    q = int(input())\n    for _ in range(q):\n        n, m, k = map(int, input().split())\n        \n        if n > k or m > k:\n            print(-1)\n            continue\n            \n        if n == m:\n            print(k)\n        else:\n            diff = abs(n - m)\n            if (k - max(n, m)) % 2 == 0:\n                print(k)\n            else:\n                print(k - 2)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    \n    p = [0] * n\n    \n    p[0] = a[0]\n    \n    for i in range(1, n):\n        if a[i] != p[i-1]:\n            p[i] = a[i]\n        elif b[i] != p[i-1]:\n            p[i] = b[i]\n        else:\n            p[i] = c[i]\n            \n    if p[n-1] == p[0]:\n        if a[n-1] != p[n-2] and a[n-1] != p[0]:\n            p[n-1] = a[n-1]\n        elif b[n-1] != p[n-2] and b[n-1] != p[0]:\n            p[n-1] = b[n-1]\n        else:\n            p[n-1] = c[n-1]\n    \n    print(*p)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "3": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    total_sum = sum(a)\n    \n    max_diff = 0\n    \n    sorted_a = sorted(a, reverse=True)\n    \n    max_diff = sum(sorted_a[:k+1])\n    \n    print(max_diff)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "4": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    result = \"\"\n    for m in range(1, n + 1):\n        is_beautiful = False\n        for l in range(n):\n            for r in range(l, n):\n                sub_array = p[l:r+1]\n                if len(sub_array) == m:\n                    nums = sorted(sub_array)\n                    if nums == list(range(1, m + 1)):\n                        is_beautiful = True\n                        break\n                elif len(sub_array) > m:\n                    nums = sorted(sub_array)\n                    if len(set(nums)) != len(nums):\n                      continue\n                    \n                    max_val = max(nums)\n                    if max_val > m:\n                      continue\n                    \n                    \n                    temp = [x for x in nums if x <= m]\n                    if len(temp) != len(set(temp)):\n                        continue\n                    \n                    \n                    if sorted(temp) == list(range(1,m+1)):\n                        is_beautiful = True\n                        break\n\n            if is_beautiful:\n                break\n        \n        if is_beautiful:\n            result += \"1\"\n        else:\n            result += \"0\"\n    \n    print(result)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "5": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    results = []\n    for l1 in range(1, n):\n        l2 = n - l1\n        p1 = a[:l1]\n        p2 = a[l1:]\n\n        def is_permutation(arr):\n            m = len(arr)\n            if len(set(arr)) != m:\n                return False\n            for i in range(1, m + 1):\n                if i not in arr:\n                    return False\n            return True\n\n        if is_permutation(p1) and is_permutation(p2):\n            results.append((l1, l2))\n\n    print(len(results))\n    for l1, l2 in results:\n        print(l1, l2)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "6": "```python\ndef solve():\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    for closed_spots_count in range(n + 1):\n        for i in range(1 << n):\n            if bin(i).count('1') != closed_spots_count:\n                continue\n\n            closed_spots = []\n            for j in range(n):\n                if (i >> j) & 1:\n                    closed_spots.append(j + 1)\n\n            \n            valid = True\n            \n            \n            adj = [[] for _ in range(n + 1)]\n            for u, v in edges:\n              if u not in closed_spots and v not in closed_spots:\n                adj[u].append(v)\n\n            \n            \n            def has_path_length_2_or_more(start_node):\n              \n              visited = set()\n              q = [(start_node, 0)] \n              \n              while q:\n                node, path_len = q.pop(0)\n                \n                if node in visited:\n                  continue\n                visited.add(node)\n                \n                if path_len >= 2:\n                  return True\n                \n                for neighbor in adj[node]:\n                  q.append((neighbor, path_len + 1))\n              return False\n            \n\n            \n            safe = True\n            for start_node in range(1, n + 1):\n                if start_node not in closed_spots:\n                    if has_path_length_2_or_more(start_node):\n                      safe = False\n                      break\n            \n            if safe:\n                if closed_spots_count <= (4/7) * n:\n                  print(len(closed_spots))\n                  print(*closed_spots)\n                  return\n            \nT = int(input())\nfor _ in range(T):\n    solve()\n```",
    "7": null,
    "8": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    def calculate_score(arr):\n        score = 0\n        for i in range(len(arr)):\n            if arr[i] == 'W':\n                if i == 0:\n                    score += 1\n                else:\n                    if arr[i-1] == 'W':\n                        score += 2\n                    else:\n                        score += 1\n        return score\n\n    \n    def get_max_score(curr_s, curr_k):\n        max_score = calculate_score(curr_s)\n        \n        for i in range(n):\n            temp_s = list(curr_s)\n            \n            temp_s[i] = 'W' if temp_s[i] == 'L' else 'L'\n            \n            if curr_k > 0:\n                if temp_s[i] != curr_s[i]:\n                  \n                    max_score = max(max_score, get_max_score(\"\".join(temp_s), curr_k - 1))\n        \n        return max_score if curr_k == 0 else calculate_score(curr_s)\n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "9": "```python\ndef solve():\n    s = input()\n    groups = []\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            groups.append((s[i-1], count))\n            count = 1\n    groups.append((s[-1], count))\n    \n    \n    while len(groups) > 0:\n        \n        best_move = -1\n        best_move_len = -1\n        \n        for i in range(len(groups)):\n            if groups[i][1] > best_move_len:\n                best_move = i\n                best_move_len = groups[i][1]\n        \n        alice_score = 0\n        if groups[best_move][0] == '1':\n            alice_score = groups[best_move][1]\n            \n        \n        \n        \n        \n        if best_move > 0 and best_move < len(groups) - 1 and groups[best_move - 1][0] == groups[best_move + 1][0]:\n            new_count = groups[best_move - 1][1] + groups[best_move + 1][1]\n            groups[best_move - 1] = (groups[best_move - 1][0], new_count)\n            groups.pop(best_move + 1)\n            groups.pop(best_move)\n           \n        else:\n            groups.pop(best_move)\n        \n        \n        \n        bob_best_move = -1\n        bob_best_move_len = -1\n        \n        if len(groups) > 0:\n            for i in range(len(groups)):\n                if groups[i][1] > bob_best_move_len:\n                    bob_best_move = i\n                    bob_best_move_len = groups[i][1]\n                    \n            if bob_best_move > 0 and bob_best_move < len(groups) - 1 and groups[bob_best_move - 1][0] == groups[bob_best_move + 1][0]:\n                new_count = groups[bob_best_move - 1][1] + groups[bob_best_move + 1][1]\n                groups[bob_best_move - 1] = (groups[bob_best_move - 1][0], new_count)\n                groups.pop(bob_best_move + 1)\n                groups.pop(bob_best_move)\n            else:\n                groups.pop(bob_best_move)\n                \n        yield alice_score\n    \n    \n\nt = int(input())\nfor _ in range(t):\n    ans = sum(solve())\n    print(ans)\n```",
    "10": null,
    "11": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    def calculate_grid_size(seq):\n        x, y = 0, 0\n        min_x, max_x = 0, 0\n        min_y, max_y = 0, 0\n        \n        for move in seq:\n            if move == 'W':\n                y -= 1\n            elif move == 'S':\n                y += 1\n            elif move == 'A':\n                x -= 1\n            elif move == 'D':\n                x += 1\n            \n            min_x = min(min_x, x)\n            max_x = max(max_x, x)\n            min_y = min(min_y, y)\n            max_y = max(max_y, y)\n        \n        return (max_x - min_x + 1, max_y - min_y + 1)\n    \n    best_area = float('inf')\n    \n    # Original string\n    width, height = calculate_grid_size(s)\n    best_area = min(best_area, width * height)\n    \n    # Try inserting each of the four moves at each position\n    for i in range(n + 1):\n        for move in ['W', 'A', 'S', 'D']:\n            new_s = s[:i] + move + s[i:]\n            width, height = calculate_grid_size(new_s)\n            best_area = min(best_area, width * height)\n    \n    print(best_area)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        \n        if a[i] < b[i]:\n            found_one = False\n            for j in range(0, i):\n                if a[j] == 1:\n                    found_one = True\n                    break\n            if not found_one:\n                print(\"NO\")\n                return\n        else:\n            found_minus_one = False\n            for j in range(0, i):\n                if a[j] == -1:\n                    found_minus_one = True\n                    break\n            if not found_minus_one:\n                print(\"NO\")\n                return\n\n    print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "13": "```python\ndef solve():\n    n, g, b = map(int, input().split())\n    \n    required_good = (n + 1) // 2\n    \n    full_cycles = required_good // g\n    remaining_good = required_good % g\n    \n    total_days = full_cycles * (g + b)\n    \n    if remaining_good > 0:\n      total_days += remaining_good\n    else:\n      total_days -=b\n\n    print(max(n, total_days))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "14": "```python\ndef solve():\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n\n    if (a1 == b1 + b2 and a2 == a1) or \\\n       (a1 == a2 + b2 and a2 == a1) or \\\n       (b1 == a2 + b2 and a2 == b1) or \\\n       (b1 == b2 + a2 and a2 == b1) or \\\n       (a1 == a2 + b2 == b1 + b2 and a1 == a1) or \\\n       (b1 == a2 + b2 and a1 == a2 + b2 and b1 == b1) or \\\n       (a1 == b1 + a2 and b1 == a1) or \\\n       (a1 == a2 + a2 and a2 == a1) or \\\n       (b1 == a2 + a2 and a2 == b1) or \\\n       (b1 == a1+a2 and a1 ==b1) or \\\n       (a1 == a2 + a2 and a2 == a1) or\\\n       (b1 == b2 + a2 and a1 == b2 + a2 and a1 == b1) or \\\n       (a1 == b2 + a2 and b1 == b2 + a2 and a1 == b1) or\\\n       (a1 == b2 + a2 and a1 == b1 and b1 == b2 + a2) or \\\n       (b1 == b2 + a2 and a1==b1 and a1==b2+a2):\n\n        print(\"YES\")\n\n    elif (a1 == b2 + a2 and a1 == b1) :\n        print(\"YES\")\n    elif (b1 == a2+b2 and a1==b1):\n        print(\"YES\")\n    elif (a1 == a2 + b2 and a1 == b1):\n        print(\"YES\")\n    elif (b1 == a2 + b2 and a1 ==b1):\n        print(\"YES\")\n    elif (a1 ==b1 and a1 == a2 + b2):\n        print(\"YES\")\n    elif (a1 == b1 and a1 == b2 + a2):\n        print(\"YES\")\n    elif (a1 == a2+b2 and a1 == b1):\n        print(\"YES\")\n    elif (b1 == a2 + b2 and a1 == b1):\n      print(\"YES\")\n\n    elif (a2 == a1 + b1 and a2 == b2):\n        print(\"YES\")\n    elif (b2 == a1 + b1 and b2 == a2):\n        print(\"YES\")\n    elif (a2 == b1 + a1 and a2 == b2):\n        print(\"YES\")\n    elif (b2 == b1 + a1 and b2 == a2):\n        print(\"YES\")\n    elif (a2 == a1 + b1 and a2 == b2):\n        print(\"YES\")\n    elif (b2 == a1 + b1 and a2 == b2):\n        print(\"YES\")\n    elif (a2 == b2 and a2 == a1+b1):\n        print(\"YES\")\n    elif (a2 == b2 and a2 == b1+a1):\n        print(\"YES\")\n    elif (a2 == b2 and b2 == a1+b1):\n        print(\"YES\")\n    elif (a2 == b2 and b2 == b1+a1):\n        print(\"YES\")\n    elif (a1 == b1 and a1 == a2 + b2):\n      print(\"YES\")\n    elif (a1 == b1 and a1 == a2 + b2):\n      print(\"YES\")\n    elif (a2 == b2 and a2 ==a1 + b1):\n        print(\"YES\")\n    elif (a2 == b2 and a2==b1+a1):\n        print(\"YES\")\n\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "15": "```python\ndef solve():\n  a, b, x, y = map(int, input().split())\n  \n  ans = 0\n  \n  # Case 1: Window is to the right of the dead pixel\n  width = a - x - 1\n  height = b\n  ans = max(ans, width * height)\n  \n  # Case 2: Window is to the left of the dead pixel\n  width = x\n  height = b\n  ans = max(ans, width * height)\n  \n  # Case 3: Window is below the dead pixel\n  width = a\n  height = y\n  ans = max(ans, width * height)\n  \n  # Case 4: Window is above the dead pixel\n  width = a\n  height = b - y - 1\n  ans = max(ans, width * height)\n  \n  print(ans)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "16": "```python\ndef solve():\n    n = int(input())\n    c, t = map(float, input().split())\n    problems = []\n    for _ in range(n):\n        a, p = map(int, input().split())\n        problems.append((a, p))\n\n    def calculate_score(order, training_time):\n        current_time = training_time\n        skill = 1.0 + c * training_time\n        score = 0\n        \n        for i in range(len(order)):\n            problem_index = order[i]\n            a, p = problems[problem_index]\n            \n            current_time += 10 \n            if current_time > t:\n                return -1 \n            \n            skill *= 0.9\n            \n            current_time += a / skill\n            if current_time > t:\n                return -1\n            \n            score += p\n        \n        return score\n\n    import itertools\n    \n    max_score = 0\n    for order in itertools.permutations(range(n)):\n        \n        low = 0.0\n        high = t\n        \n        for _ in range(50):\n            mid = (low + high) / 2\n            \n            score = calculate_score(order, mid)\n            if score == -1:\n                high = mid\n            else:\n                low = mid\n                \n        \n        best_training_time = low\n        score = calculate_score(order, best_training_time)\n        if score > max_score:\n            max_score = score\n\n    print(int(max_score))\n\ntc = int(input())\nfor _ in range(tc):\n    solve()\n```",
    "17": null,
    "18": "```python\nimport math\n\ndef solve():\n  n = int(input())\n  print(1 / math.tan(math.pi / (2 * n)))\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "19": "```python\ndef solve():\n    n, k, d = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    ans = float('inf')\n    for i in range(n - d + 1):\n        sub_array = a[i:i+d]\n        unique_shows = len(set(sub_array))\n        ans = min(ans, unique_shows)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    n, m = map(int, input().split())\n    customers = []\n    for _ in range(n):\n        customers.append(list(map(int, input().split())))\n\n    low = m\n    high = m\n    prev_time = 0\n\n    for t, l, h in customers:\n        low -= (t - prev_time)\n        high += (t - prev_time)\n\n        if high < l or low > h:\n            print(\"NO\")\n            return\n\n        low = max(low, l)\n        high = min(high, h)\n        prev_time = t\n\n    print(\"YES\")\n\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    s = set(s)\n    \n    for k in range(1, 1025):\n        new_s = set()\n        for val in s:\n            new_s.add(val ^ k)\n        \n        if new_s == s:\n            print(k)\n            return\n    \n    print(\"-1\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "22": "```python\ndef min_max_digit(n):\n    s = str(n)\n    min_digit = 9\n    max_digit = 0\n    for digit in s:\n        digit = int(digit)\n        min_digit = min(min_digit, digit)\n        max_digit = max(max_digit, digit)\n    return min_digit, max_digit\n\ndef solve():\n    a1, k = map(int, input().split())\n    a = a1\n    for i in range(1, min(k, 100001)):\n        min_digit, max_digit = min_max_digit(a)\n        if min_digit == 0:\n            break\n        a = a + min_digit * max_digit\n    print(a)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "23": null,
    "24": null,
    "25": "```python\ndef solve():\n    n = int(input())\n    triangles = []\n    for _ in range(n - 2):\n        triangles.append(list(map(int, input().split())))\n\n    def check_permutation(permutation, triangles_permutation):\n        for start_dir in [1, -1]:\n            for start_idx in range(n):\n                p = []\n                for i in range(n):\n                    p.append(permutation[(start_idx + i * start_dir) % n])\n\n                remaining_vertices = set(p)\n                \n                for triangle_idx in triangles_permutation:\n                    triangle = triangles[triangle_idx - 1]\n                    \n                    indices = []\n                    for v in triangle:\n                        try:\n                            indices.append(p.index(v))\n                        except ValueError:\n                            break\n                    else:\n                        indices.sort()\n                        \n                        if len(indices) != 3:\n                            break\n\n                        \n                        \n                        \n                        \n                        \n                        \n                        if (indices[1] - indices[0] == 1 and indices[2] - indices[1] == 1) or \\\n                           (indices[0] == 0 and indices[1] == n-1 and indices[2] == n-2) or \\\n                           (indices[0] == 0 and indices[1] == 1 and indices[2] == n-1) or \\\n                           (indices[1] - indices[0] == 1 and indices[2] == n-1 and indices[0] == 0) or\\\n                           (indices[1] - indices[0] == 1 and indices[2] == n-1 and indices[1] == n-2):\n                            \n                            \n                            \n                            new_p = []\n                            for i in range(len(p)):\n                                if i not in indices:\n                                    new_p.append(p[i])\n                            p = new_p\n\n                            for v in triangle:\n                                if v in remaining_vertices:\n                                    remaining_vertices.remove(v)\n                                    \n                            if n - len(p) >= n - 2:\n                                return p, triangles_permutation\n                            \n                        \n                        \n                        \n                        \n                        \n                        elif (indices[0] == 0 and indices[1] == (n-1) and indices[2] == (n-2)) or (indices[0] == 0 and indices[1] == 1 and indices[2] == (n-1)):\n                            new_p = []\n                            for i in range(len(p)):\n                                if i not in indices:\n                                    new_p.append(p[i])\n                            p = new_p\n\n                            for v in triangle:\n                                if v in remaining_vertices:\n                                    remaining_vertices.remove(v)\n                                    \n                            if n - len(p) >= n - 2:\n                                return p, triangles_permutation\n\n                            \n                        \n                        \n                        \n                        \n\n        return None, None\n\n    import itertools\n    \n    for permutation in itertools.permutations(range(1, n + 1)):\n        for triangles_permutation in itertools.permutations(range(1, n - 1)):\n            p, q = check_permutation(list(permutation), list(triangles_permutation))\n\n            if p is not None:\n                \n                \n                \n                \n                \n                permutation_result = []\n                \n                for start_dir in [1, -1]:\n                    for start_idx in range(n):\n                        p_temp = []\n                        for i in range(n):\n                            p_temp.append(permutation[(start_idx + i * start_dir) % n])\n                        \n                        \n                        permutation_result = p_temp\n                        \n                        print(*permutation_result)\n                        print(*q)\n                        \n                        return\n                \n    \n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "26": "```python\ndef solve():\n  n, m = map(int, input().split())\n  if (n == 1 and m > 0) or (m == 1 and n > 0):\n    print(\"YES\")\n  elif n == 2 and m == 2:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    s = set()\n    ans = 0\n    \n    for x in a:\n        while x % 2 == 0:\n            if x not in s:\n                s.add(x)\n                ans += 1\n            x //= 2\n    \n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    target = \"abacaba\"\n    \n    def check(modified_s):\n        count = 0\n        for i in range(len(modified_s) - len(target) + 1):\n            if modified_s[i:i+len(target)] == target:\n                count += 1\n        return count\n    \n    for i in range(n - len(target) + 1):\n        temp_s = list(s)\n        possible = True\n        for j in range(len(target)):\n            if temp_s[i+j] == '?':\n                temp_s[i+j] = target[j]\n            elif temp_s[i+j] != target[j]:\n                possible = False\n                break\n        \n        if possible:\n            modified_s = \"\".join(temp_s)\n            \n            final_s = list(modified_s)\n            for k in range(len(final_s)):\n                if final_s[k] == '?':\n                    final_s[k] = 'd'\n            final_s = \"\".join(final_s)\n            \n            if check(final_s) == 1:\n                print(\"Yes\")\n                print(final_s)\n                return\n    \n    print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "29": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def calculate_k_amazing_number(arr, k):\n        candidates = set()\n        for i in range(n - k + 1):\n            subsegment = arr[i:i+k]\n            if i == 0:\n                candidates = set(subsegment)\n            else:\n                candidates = candidates.intersection(set(subsegment))\n        \n        if not candidates:\n            return -1\n        else:\n            return min(candidates)\n    \n    result = []\n    for k in range(1, n + 1):\n        result.append(calculate_k_amazing_number(a, k))\n    \n    print(*result)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```"
}