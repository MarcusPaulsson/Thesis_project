{
    "0": "```python\ndef solve():\n  s = input()\n  n = len(s)\n  \n  max_len = -1\n  \n  for i in range(n):\n    if s[i] == '[':\n      for j in range(n - 1, i, -1):\n        if s[j] == ']':\n          \n          first_colon_index = -1\n          for k in range(i + 1, j):\n            if s[k] == ':':\n              first_colon_index = k\n              break\n          \n          if first_colon_index == -1:\n            continue\n            \n          second_colon_index = -1\n          for k in range(j - 1, first_colon_index, -1):\n            if s[k] == ':':\n              second_colon_index = k\n              break\n              \n          if second_colon_index == -1:\n            continue\n          \n          \n          vertical_bars_count = 0\n          for k in range(first_colon_index + 1, second_colon_index):\n            if s[k] == '|':\n              vertical_bars_count += 1\n              \n          current_len = 2 + 2 + vertical_bars_count\n          max_len = max(max_len, current_len)\n            \n  print(max_len)\n  \nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    \n    best_num = x\n    best_sum = sum_digits(x)\n    \n    s = str(x)\n    n = len(s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0:\n            current_sum = sum_digits(num)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_num = num\n            elif current_sum == best_sum and num > best_num:\n                best_num = num\n    \n    print(best_num)\n\ndef sum_digits(n):\n    s = str(n)\n    sum_val = 0\n    for digit in s:\n        sum_val += int(digit)\n    return sum_val\n\nsolve()\n```",
    "2": "```python\ndef solve():\n  n = int(input())\n  s = str(n)\n  l = len(s)\n  \n  first_digit = int(s[0])\n  \n  next_lucky = (first_digit + 1) * (10 ** (l - 1))\n  \n  print(next_lucky - n)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n  x = int(input())\n  hh, mm = map(int, input().split())\n\n  def is_lucky(h, m):\n    return '7' in str(h) or '7' in str(m)\n\n  count = 0\n  curr_hh = hh\n  curr_mm = mm\n\n  while not is_lucky(curr_hh, curr_mm):\n    curr_mm -= x\n    if curr_mm < 0:\n      curr_hh -= 1\n      curr_mm += 60\n      if curr_hh < 0:\n        curr_hh += 24\n    count += 1\n\n  print(count)\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n    \n    ans = 0\n    \n    if l == 1 and r == n:\n        print(0)\n        return\n    \n    if l == 1:\n        ans = abs(pos - r) + 1\n    elif r == n:\n        ans = abs(pos - l) + 1\n    else:\n        ans = min(abs(pos - l), abs(pos - r)) + (r - l) + 2\n        \n    print(ans)\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n    \n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n        \n    if max_damage >= x:\n        print(1)\n        return\n        \n    max_diff = 0\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n        \n    if max_diff <= 0:\n        print(-1)\n        return\n    \n    remaining = x - max_damage\n    \n    ans = 1 + (remaining + max_diff - 1) // max_diff\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\nn, m = map(int, input().split())\n\nif m >= n:\n  l = 0\n  r = 2 * 10**9\n  ans = 0\n  while l <= r:\n    mid = (l + r) // 2\n    if n - (mid * (mid + 1)) // 2 <= 0:\n      ans = mid\n      r = mid - 1\n    else:\n      l = mid + 1\n  print(ans)\nelse:\n  k = n // m\n  n -= k * (k + 1) // 2\n  if n <= 0:\n    ans = k\n    print(ans)\n  else:\n    l = 0\n    r = 2 * 10**9\n    ans = 0\n    while l <= r:\n      mid = (l + r) // 2\n      if n - (mid * (mid + 1)) // 2 <= 0:\n        ans = mid\n        r = mid - 1\n      else:\n        l = mid + 1\n    print(k + ans)\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_sofas(sofa_index):\n        l, r, t, b = 0, 0, 0, 0\n        x1_a, y1_a, x2_a, y2_a = sofas[sofa_index]\n\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_b, y1_b, x2_b, y2_b = sofas[i]\n\n            # Check left\n            if min(y1_a, y2_a) > max(y1_b, y2_b):\n                continue\n            if max(y1_a, y2_a) < min(y1_b, y2_b):\n                continue\n\n            if min(x1_a, x2_a) > max(x1_b, x2_b):\n                l += 1\n            \n            # Check right\n            if min(y1_a, y2_a) > max(y1_b, y2_b):\n                continue\n            if max(y1_a, y2_a) < min(y1_b, y2_b):\n                continue\n            if max(x1_a, x2_a) < min(x1_b, x2_b):\n                r += 1\n            \n            # Check top\n            if min(x1_a, x2_a) > max(x1_b, x2_b):\n                continue\n            if max(x1_a, x2_a) < min(x1_b, x2_b):\n                continue\n                \n            if min(y1_a, y2_a) > max(y1_b, y2_b):\n                t += 1\n\n            # Check bottom\n            if min(x1_a, x2_a) > max(x1_b, x2_b):\n                continue\n            if max(x1_a, x2_a) < min(x1_b, x2_b):\n                continue\n                \n            if max(y1_a, y2_a) < min(y1_b, y2_b):\n                b += 1\n        return l, r, t, b\n\n    result = -1\n    for i in range(d):\n        l, r, t, b = count_sofas(i)\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            result = i + 1\n            break\n\n    print(result)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n  n = int(input())\n  \n  min_days_off = (n // 7) * 2\n  rem = n % 7\n  \n  if rem == 1:\n    min_days_off += 0\n  elif rem == 2:\n    min_days_off += 0\n  elif rem == 3:\n    min_days_off += 0\n  elif rem == 4:\n    min_days_off += 0\n  elif rem == 5:\n    min_days_off += 0\n  elif rem == 6:\n    min_days_off += 1\n\n  max_days_off = (n // 7) * 2\n  rem = n % 7\n\n  if rem == 1:\n    max_days_off += 1\n  elif rem == 2:\n    max_days_off += 2\n  elif rem == 3:\n    max_days_off += 2\n  elif rem == 4:\n    max_days_off += 2\n  elif rem == 5:\n    max_days_off += 2\n  elif rem == 6:\n    max_days_off += 2\n\n  if n <= 1:\n      min_days_off = 0\n      max_days_off = n\n  elif n <= 2:\n      min_days_off = 0\n      max_days_off = 2\n  elif n <= 3:\n      min_days_off = 0\n      max_days_off = 2\n  elif n <= 4:\n      min_days_off = 0\n      max_days_off = 2\n      \n  print(min_days_off, max_days_off)\n  \nsolve()\n```",
    "11": "```python\nimport math\n\ndef solve():\n    n, a, b, p, q = map(int, input().split())\n    \n    red_count = n // a\n    blue_count = n // b\n    \n    lcm = (a * b) // math.gcd(a, b)\n    \n    both_count = n // lcm\n    \n    red_only = red_count - both_count\n    blue_only = blue_count - both_count\n    \n    total_chocolates = red_only * p + blue_only * q\n    \n    if p > q:\n        total_chocolates += both_count * p\n    else:\n        total_chocolates += both_count * q\n        \n    print(total_chocolates)\n\nsolve()\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    golds = s.count('G')\n    \n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            temp_s = list(s)\n            temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n            temp_s = \"\".join(temp_s)\n            \n            curr_len = 0\n            max_curr_len = 0\n            for k in range(n):\n                if temp_s[k] == 'G':\n                    curr_len += 1\n                    max_curr_len = max(max_curr_len, curr_len)\n                else:\n                    curr_len = 0\n            \n            max_len = max(max_len, min(max_curr_len, golds))\n    \n    print(max_len)\n\nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i + 1] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n\n    order = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(-1)\n        return\n\n    \n    required_courses = set(main_courses)\n    result = []\n    passed = set()\n    \n    def find_path(start_node):\n        q = deque([([start_node], {start_node})])\n        \n        while q:\n            path, visited = q.popleft()\n            node = path[-1]\n            \n            if node in required_courses:\n                return path\n            \n            for pred in get_predecessors(node):\n                if pred not in visited:\n                    new_path = path + [pred]\n                    new_visited = visited | {pred}\n                    q.append((new_path, new_visited))\n        return None\n    \n    def get_predecessors(node):\n        predecessors = []\n        for i in range(1, n + 1):\n            if node in adj[i]:\n                predecessors.append(i)\n        return predecessors\n    \n    \n    for course in main_courses:\n      \n        path = find_path(course)\n\n        if path is None:\n            print(-1)\n            return\n        \n        \n        for node in reversed(path):\n            if node not in passed:\n                result.append(node)\n                passed.add(node)\n    \n    \n    \n    print(len(result))\n    print(*result)\n    \nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n\n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n\n    p_extended = p[:]\n    for x in remaining:\n        p_extended.append(x)\n\n    def is_stack_sortable(arr):\n        a = arr[:]\n        s = []\n        b = []\n        \n        i = 0\n        \n        while a or s:\n            \n            can_push = len(a) > 0\n            can_pop = len(s) > 0\n            \n            if can_push and can_pop and a[0] < s[-1]:\n                s.append(a.pop(0))\n            elif can_pop:\n                b.append(s.pop())\n            elif can_push:\n                s.append(a.pop(0))\n            else:\n                return False\n        \n        for i in range(len(b) - 1):\n            if b[i] > b[i+1]:\n                return False\n        return True\n\n    if is_stack_sortable(p_extended):\n        print(*p_extended)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "15": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    if c == 0:\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if (b - a) % c == 0 and (b - a) // c >= 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n  n, k, t = map(int, input().split())\n  \n  if t <= k:\n    print(t)\n  elif t <= n:\n    print(k)\n  else:\n    print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    suffix_min = [0] * n\n    suffix_min[-1] = s[-1]\n    for i in range(n - 2, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    t = []\n    u = \"\"\n    \n    for i in range(n):\n        t.append(s[i])\n        while t and t[-1] <= suffix_min[i if i < n-1 else i]:\n            u += t.pop()\n            \n    while t:\n        u += t.pop()\n    \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if (pairs[i][0] - pairs[i-1][0]) < (pairs[i][1] - pairs[i-1][1]):\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n    \n    ans = 0\n    while True:\n        h_str = str(hh).zfill(2)\n        m_str = str(mm).zfill(2)\n        \n        if h_str == m_str[::-1]:\n            print(ans)\n            return\n        \n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        \n        ans += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    pos_min = a.index(1)\n    pos_max = a.index(n)\n    \n    ans = abs(pos_min - pos_max)\n    \n    ans = max(ans, abs(0 - pos_min))\n    ans = max(ans, abs(n - 1 - pos_min))\n    ans = max(ans, abs(0 - pos_max))\n    ans = max(ans, abs(n - 1 - pos_max))\n    \n    print(ans)\n\nsolve()\n```",
    "22": "```python\ndef is_s_palindrome(s):\n    symmetric_chars = {'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p', 'o': 'o', 'x': 'x', 'X': 'X', 'H': 'H', 'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T', 'U': 'U', 'V': 'V', 'W': 'W', 'Y': 'Y', 'A': 'A'}\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] not in symmetric_chars or s[n - 1 - i] not in symmetric_chars:\n            return False\n        if symmetric_chars.get(s[i]) != s[n - 1 - i]:\n            return False\n    if n % 2 == 1:\n        if s[n // 2] not in symmetric_chars or symmetric_chars.get(s[n // 2]) != s[n // 2]:\n            return False\n    return True\n\ns = input()\nif is_s_palindrome(s):\n    print(\"TAK\")\nelse:\n    print(\"NIE\")\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    if len(a) > len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    a_count = Counter(a)\n    \n    def find_max(index, current_num, remaining_count):\n        if index == len(a):\n            return current_num\n        \n        for digit in sorted(remaining_count.keys(), reverse=True):\n            new_count = remaining_count.copy()\n            new_count[digit] -= 1\n            if new_count[digit] == 0:\n                del new_count[digit]\n            \n            new_num = current_num + digit\n            \n            if new_num <= b:\n                if len(new_num) == index + 1:\n\n                    if len(new_count) == 0:\n                         return new_num\n                    \n                    temp_digits = []\n                    for d in new_count:\n                        temp_digits.extend([d] * new_count[d])\n\n                    temp_digits.sort(reverse=True)\n\n                    \n                    remaining_str = \"\".join(temp_digits)\n                    \n                    if len(new_num) + len(remaining_str) == len(a):\n                        return new_num + remaining_str\n                    \n        return \"\"\n\n    def find_ans(index, current_num, remaining_count, smaller):\n        if index == len(a):\n            return current_num\n        \n        if smaller:\n            ans = \"\"\n            for digit in sorted(remaining_count.keys(), reverse=True):\n                new_count = remaining_count.copy()\n                new_count[digit] -= 1\n                if new_count[digit] == 0:\n                    del new_count[digit]\n                \n                new_num = current_num + digit\n                \n                temp_digits = []\n                for d in new_count:\n                    temp_digits.extend([d] * new_count[d])\n\n                temp_digits.sort(reverse=True)\n                remaining_str = \"\".join(temp_digits)\n                \n                if len(new_num) + len(remaining_str) == len(a):\n                    return new_num + remaining_str\n            return \"\"\n        \n        digit_b = b[index]\n        \n        ans = \"\"\n        \n        for digit in sorted(remaining_count.keys(), reverse=True):\n            if digit > digit_b:\n                continue\n            \n            new_count = remaining_count.copy()\n            new_count[digit] -= 1\n            if new_count[digit] == 0:\n                del new_count[digit]\n            \n            new_num = current_num + digit\n            \n            if digit < digit_b:\n                temp_digits = []\n                for d in new_count:\n                    temp_digits.extend([d] * new_count[d])\n\n                temp_digits.sort(reverse=True)\n                remaining_str = \"\".join(temp_digits)\n\n                if len(new_num) + len(remaining_str) == len(a):\n                    return new_num + remaining_str\n            else:\n                res = find_ans(index + 1, new_num, new_count, False)\n                if res:\n                    return res\n        \n        return \"\"\n    \n    \n    a_count = Counter(a)\n    ans = find_ans(0, \"\", a_count, False)\n    print(ans)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = [input() for _ in range(10)]\n\n    def check_win(board):\n        for i in range(10):\n            for j in range(10):\n                if board[i][j] == 'X':\n                    # Check horizontal\n                    if j <= 5 and all(board[i][j + k] == 'X' for k in range(5)):\n                        return True\n                    # Check vertical\n                    if i <= 5 and all(board[i + k][j] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 5 and j <= 5 and all(board[i + k][j + k] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= 5 and j >= 4 and all(board[i + k][j - k] == 'X' for k in range(5)):\n                        return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                temp_board = [list(row) for row in board]\n                temp_board[i][j] = 'X'\n                temp_board = [\"\".join(row) for row in temp_board]\n                if check_win(temp_board):\n                    print(\"YES\")\n                    return\n\n    print(\"NO\")\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n            \n        for j in range(i + 1, n):\n            if k >= 2 and matrix[i][j] == 0 and matrix[j][i] == 0:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n                \n    if k != 0:\n        print(\"-1\")\n        return\n    \n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\ndef solve():\n    x, y, z = map(float, input().split())\n\n    a1 = x**(y**z)\n    a2 = x**(z**y)\n    a3 = (x**y)**z\n    a4 = (x**z)**y\n    a5 = y**(x**z)\n    a6 = y**(z**x)\n    a7 = (y**x)**z\n    a8 = (y**z)**x\n    a9 = z**(x**y)\n    a10 = z**(y**x)\n    a11 = (z**x)**y\n    a12 = (z**y)**x\n\n    values = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\n    \n    max_val = max(values)\n    \n    if values[0] == max_val:\n        print(\"x^y^z\")\n    elif values[1] == max_val:\n        print(\"x^z^y\")\n    elif values[2] == max_val:\n        print(\"(x^y)^z\")\n    elif values[3] == max_val:\n        print(\"(x^z)^y\")\n    elif values[4] == max_val:\n        print(\"y^x^z\")\n    elif values[5] == max_val:\n        print(\"y^z^x\")\n    elif values[6] == max_val:\n        print(\"(y^x)^z\")\n    elif values[7] == max_val:\n        print(\"(y^z)^x\")\n    elif values[8] == max_val:\n        print(\"z^x^y\")\n    elif values[9] == max_val:\n        print(\"z^y^x\")\n    elif values[10] == max_val:\n        print(\"(z^x)^y\")\n    else:\n        print(\"(z^y)^x\")\n\nsolve()\n```",
    "27": "```python\ndef solve():\n  n = int(input())\n  s = input()\n  \n  ans = n\n  \n  for i in range(1, n // 2 + 1):\n    prefix = s[:i]\n    if s[:2*i].startswith(prefix) and s.startswith(prefix * 2):\n      ans = min(ans, i + 1 + (n - 2*i))\n    elif s.startswith(prefix) and s[i:].startswith(prefix) and len(prefix) <= len(s) and s[:i] == s[i:2*i] if i <= (len(s)-i )else False :\n      ans = min(ans, i + 1 + max(0, n - 2*i))\n    \n  \n  print(ans)\n  \nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n\n    moves = []\n    e = len(examples)\n\n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            if any(files[j][0] == str(i + 1) for j in range(n)):\n                # Need to move the existing file at i+1 to a temp location\n                temp_name = generate_temp_name(files)\n                moves.append(f\"move {i+1} {temp_name}\")\n                files[next(j for j in range(n) if files[j][0] == str(i+1))][0] = temp_name\n                \n                moves.append(f\"move {examples[i][0]} {i+1}\")\n                files[examples[i][1]][0] = str(i+1)\n            else:\n                moves.append(f\"move {examples[i][0]} {i+1}\")\n                files[examples[i][1]][0] = str(i + 1)\n\n    # Move regular to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            if any(files[j][0] == str(e+i+1) for j in range(n)):\n                temp_name = generate_temp_name(files)\n                moves.append(f\"move {e+i+1} {temp_name}\")\n                files[next(j for j in range(n) if files[j][0] == str(e+i+1))][0] = temp_name\n                \n                moves.append(f\"move {regular[i][0]} {e+i+1}\")\n                files[regular[i][1]][0] = str(e + i + 1)\n            else:\n                moves.append(f\"move {regular[i][0]} {e+i+1}\")\n                files[regular[i][1]][0] = str(e + i + 1)\n\n\n    print(len(moves))\n    for move in moves:\n        print(move)\n\ndef generate_temp_name(files):\n    temp_name = \"temp00\"\n    i = 0\n    while any(files[j][0] == temp_name + str(i) for j in range(len(files))):\n        i += 1\n    return temp_name + str(i)\n\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    ans = 6\n    for i in range(1000):\n        s1 = str(i).zfill(3)\n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            if sum(int(d) for d in s1) == sum(int(d) for d in s2):\n                cnt = 0\n                temp = s1 + s2\n                for k in range(6):\n                    if temp[k] != s[k]:\n                        cnt += 1\n                ans = min(ans, cnt)\n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    \n    twos_num = 0\n    twos_den = 0\n\n    for i in range(k):\n        if i == 0:\n            continue\n        val = pow(2, n, mod) - i\n        num = (num * (val % mod)) % mod\n        \n        temp = i\n        while temp % 2 == 0 and temp > 0:\n            twos_num += 1\n            temp //= 2\n            \n    den = pow(pow(2, n, mod), k - 1, mod)\n\n    temp_den = k - 1\n    while temp_den % 2 == 0 and temp_den > 0:\n        twos_den += 1\n        temp_den //= 2\n    \n    twos_den *= n\n    \n    \n    twos_diff = twos_den - twos_num\n    \n    if twos_diff > 0:\n        den = (den * pow(pow(2,twos_diff,mod),1,mod)) % mod\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    inv_den = pow(den, mod - 2, mod)\n    prob_diff = (num * inv_den) % mod\n    \n    \n    \n    \n    a = (1 - prob_diff + mod) % mod\n    b = 1\n    \n    \n    \n    \n    \n    print(a, 1)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n  n = int(input())\n  \n  curr_pos = 0  # 0 is North Pole, 20000 is South Pole\n  \n  for _ in range(n):\n    t, direction = input().split()\n    t = int(t)\n    \n    if curr_pos == 0:\n      if direction != \"South\":\n        print(\"NO\")\n        return\n      else:\n        curr_pos += t\n    elif curr_pos == 20000:\n      if direction != \"North\":\n        print(\"NO\")\n        return\n      else:\n        curr_pos -= t\n    else:\n      if direction == \"South\":\n        curr_pos += t\n      elif direction == \"North\":\n        curr_pos -= t\n      \n    if curr_pos < 0 or curr_pos > 20000:\n      print(\"NO\")\n      return\n      \n  if curr_pos == 0:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n    \n    g, x, y = extended_gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n    \n    x *= (b2 - b1) // g\n    y *= (b2 - b1) // g\n    \n    lcm = (a1 * a2) // g\n    \n    k = x\n    l = -y\n    \n    first_solution = a1 * k + b1\n    \n    \n    k0 = k\n    l0 = l\n    \n    \n    k_shift = a2 // g\n    l_shift = a1 // g\n    \n    \n    def find_min_k(k_start, a1, a2, b1, b2, L, lcm):\n        k = k_start\n        while True:\n            val = a1 * k + b1\n            if val >= L:\n                return k\n            k += a2 // g\n            if k > 10**10:\n                return float('inf')\n                \n    def find_max_k(k_start, a1, a2, b1, b2, R, lcm):\n        k = k_start\n        while True:\n            val = a1 * k + b1\n            if val <= R:\n                return k\n            k -= a2 // g\n            if k < -10**10:\n                return float('-inf')\n\n    min_k = find_min_k(k0, a1, a2, b1, b2, L, lcm)\n    max_k = find_max_k(k0, a1, a2, b1, b2, R, lcm)\n\n    if min_k == float('inf') or max_k == float('-inf') or min_k > max_k:\n        print(0)\n        return\n\n    \n    \n    first_val = a1 * min_k + b1\n\n    \n    \n    count = 0\n    curr = first_val\n    while curr <= R:\n        \n        k_val = (curr - b1) // a1\n        l_val = (curr - b2) // a2\n\n        if k_val >= 0 and l_val >= 0 and curr >= L:\n                count += 1\n        curr += lcm\n\n    print(count)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n  n, a, b = map(int, input().split())\n  \n  ans = 0\n  for i in range(1, n):\n    if i >= 1 and i < n:\n      x = a // i\n      y = b // (n - i)\n      if x > 0 and y > 0:\n        ans = max(ans, min(x, y))\n  print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n  n = int(input())\n\n  if n == 0:\n    print(0, 0)\n    return\n\n  l, r = 0, 10**9\n  k = 0\n  while l <= r:\n    mid = (l + r) // 2\n    if 3 * mid * (mid + 1) >= n:\n      k = mid\n      r = mid - 1\n    else:\n      l = mid + 1\n\n  n -= 3 * k * (k - 1)\n\n  if n <= k:\n    print(2 * k - n, 2 * n)\n  elif n <= 2 * k:\n    n -= k\n    print(k - 2 * n, 2 * k)\n  elif n <= 3 * k:\n    n -= 2 * k\n    print(-k - n, 2 * k - 2 * n)\n  elif n <= 4 * k:\n    n -= 3 * k\n    print(-2 * k + n, -2 * n)\n  elif n <= 5 * k:\n    n -= 4 * k\n    print(-k + 2 * n, -2 * k)\n  else:\n    n -= 5 * k\n    print(k + n, -2 * k + 2 * n)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  for i in range(c // a + 1):\n    remaining_damage = c - i * a\n    if remaining_damage >= 0 and remaining_damage % b == 0:\n      print(\"Yes\")\n      return\n  \n  print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, L = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for shift in range(L):\n        shifted_sasha = [(x + shift) % L for x in sasha]\n        shifted_sasha.sort()\n        if kefa == shifted_sasha:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n  \"\"\"\n  Finds the distance to the nearest zero for each element in the array.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    A list of integers, where each element is the distance to the nearest zero.\n  \"\"\"\n\n  n = len(arr)\n  distances = [float('inf')] * n\n\n  # Iterate from left to right\n  last_zero = float('-inf')\n  for i in range(n):\n    if arr[i] == 0:\n      last_zero = i\n    if last_zero != float('-inf'):\n      distances[i] = min(distances[i], i - last_zero)\n\n  # Iterate from right to left\n  last_zero = float('inf')\n  for i in range(n - 1, -1, -1):\n    if arr[i] == 0:\n      last_zero = i\n    if last_zero != float('inf'):\n      distances[i] = min(distances[i], last_zero - i)\n\n  return distances\n\n\nif __name__ == \"__main__\":\n  n = int(input())\n  arr = list(map(int, input().split()))\n  result = nearest_zero(arr)\n  print(*result)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    seen = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        if binary_string in seen:\n            continue\n            \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            for j in range(n):\n                shifted_string = binary_string[j:] + binary_string[:j]\n                seen.add(shifted_string)\n    \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    angles = []\n    for i in range(n):\n        x, y = vectors[i]\n        angle = math.atan2(y, x)\n        angles.append(angle)\n\n    min_angle_diff = float('inf')\n    best_pair = (0, 0)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle1 = angles[i]\n            angle2 = angles[j]\n            \n            angle_diff = abs(angle1 - angle2)\n            angle_diff = min(angle_diff, 2 * math.pi - angle_diff)\n\n            if angle_diff < min_angle_diff:\n                min_angle_diff = angle_diff\n                best_pair = (i + 1, j + 1)\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\ndef solve():\n    d, k, a, b, t = map(int, input().split())\n    \n    if d <= k:\n        print(d * a)\n    else:\n        cost1 = k * a + (d - k) * b\n        \n        num_breaks = (d - 1) // k\n        \n        cost2 = num_breaks * (k * a + t) + (d - num_breaks * k) * a\n        \n        cost3 = (d // k) * (k * a + t) + (d % k) * b\n\n        cost4 = k*a + t + (d-k)*b\n        \n        if t + k*a > k*b:\n            print(k*a + (d-k)*b)\n\n        else:\n             print(min(cost1, cost2))\n    \n\nsolve()\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"-1\")\n        return\n\n    best_gcd = 1\n    for gcd in range(1, int(n**0.5) + 1):\n        if n % gcd == 0:\n            if n // gcd >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, gcd)\n            if gcd >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // gcd)\n                \n    \n    if best_gcd == 1:\n        temp_sum = k*(k+1)//2\n        if temp_sum > n:\n            print(\"-1\")\n            return\n    \n    a = []\n    current_sum = 0\n    for i in range(1, k):\n        a.append(best_gcd * i)\n        current_sum += best_gcd * i\n\n    a.append(best_gcd * (n // best_gcd) - current_sum)\n\n    if a[-1] <= a[-2]:\n       \n        print(\"-1\")\n        return\n        \n\n\n    print(*a)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n  n, m = map(int, input().split())\n  \n  count = 0\n  for x in range(1, n + 1):\n    for y in range(1, m + 1):\n      if (x + y) % 5 == 0:\n        count += 1\n  print(count)\n\nsolve()\n```",
    "47": "```python\ndef solve():\n  n, x = map(int, input().split())\n  a = list(map(int, input().split()))\n  \n  ans = 0\n  for i in range(n + 1):\n    for j in range(i, n + 1):\n      temp_a = a[:]\n      for k in range(i, j):\n        temp_a[k] *= x\n        \n      curr_max = 0\n      max_so_far = 0\n      for k in range(n):\n        curr_max += temp_a[k]\n        if curr_max < 0:\n          curr_max = 0\n        max_so_far = max(max_so_far, curr_max)\n      \n      ans = max(ans, max_so_far)\n      \n  print(ans)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n    \n    low = 1\n    high = n * m\n    ans = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(ans)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\ndigits = 1\ncount = 9\nwhile k > digits * count:\n    k -= digits * count\n    digits += 1\n    count *= 10\n\nnum = 10 ** (digits - 1) + (k - 1) // digits\nindex = (k - 1) % digits\n\nprint(str(num)[index])\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n    def get_dp(row_idx, rem):\n        if row_idx == n:\n            if rem == 0:\n                return 0\n            else:\n                return -float('inf')\n\n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n\n        max_sum = get_dp(row_idx + 1, rem)\n\n        row = a[row_idx]\n        max_elements = m // 2\n\n        row_dp = {}\n        def get_row_dp(col_idx, num_elements, row_rem):\n            if col_idx == m:\n                if num_elements <= max_elements:\n                    return 0\n                else:\n                    return -float('inf')\n            \n            if (col_idx, num_elements, row_rem) in row_dp:\n                return row_dp[(col_idx, num_elements, row_rem)]\n\n            res = get_row_dp(col_idx + 1, num_elements, row_rem)\n            if num_elements < max_elements:\n                res = max(res, get_row_dp(col_idx + 1, num_elements + 1, (row_rem + row[col_idx]) % k) + row[col_idx])\n            \n            row_dp[(col_idx, num_elements, row_rem)] = res\n            return res\n        \n        for row_rem in range(k):\n            row_max_sum = get_row_dp(0, 0, row_rem)\n            max_sum = max(max_sum, get_dp(row_idx + 1, (rem - row_rem) % k) + row_max_sum)\n            \n        dp[(row_idx, rem)] = max_sum\n        return max_sum\n\n    print(get_dp(0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  def find_longest_increasing_sequence(arr):\n    max_len = 0\n    best_moves = \"\"\n\n    def backtrack(current_seq, remaining_arr, moves):\n      nonlocal max_len, best_moves\n      \n      if len(current_seq) > max_len:\n        max_len = len(current_seq)\n        best_moves = moves\n\n      if not remaining_arr:\n        return\n\n      last_val = current_seq[-1] if current_seq else -1\n\n      if remaining_arr[0] > last_val:\n        backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n\n      if len(remaining_arr) > 1 and remaining_arr[-1] > last_val and remaining_arr[0] != remaining_arr[-1]:\n          backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n      elif len(remaining_arr) > 1 and remaining_arr[-1] > last_val and remaining_arr[0] == remaining_arr[-1]:\n          l_count = 0\n          r_count = 0\n          temp_arr = remaining_arr[:]\n          temp_seq = current_seq[:]\n          temp_moves = moves\n          max_l = 0\n          max_r = 0\n          \n          \n          \n          l_seq = current_seq[:]\n          l_moves = moves\n          l_temp = remaining_arr[:]\n          while len(l_temp) > 0 and l_temp[0] > l_seq[-1] if l_seq else True:\n              if l_temp[0] > l_seq[-1] if l_seq else True:\n                  l_seq.append(l_temp[0])\n                  l_moves += \"L\"\n                  l_temp = l_temp[1:]\n                  max_l = len(l_seq) - len(current_seq)\n              else:\n                  break\n          \n          \n          r_seq = current_seq[:]\n          r_moves = moves\n          r_temp = remaining_arr[:]\n          while len(r_temp) > 0 and r_temp[-1] > r_seq[-1] if r_seq else True:\n              if r_temp[-1] > r_seq[-1] if r_seq else True:\n                  r_seq.append(r_temp[-1])\n                  r_moves += \"R\"\n                  r_temp = r_temp[:-1]\n                  max_r = len(r_seq) - len(current_seq)\n              else:\n                  break\n          if max_l >= max_r:\n              backtrack(l_seq , l_temp, l_moves)\n          else:\n              backtrack(r_seq , r_temp, r_moves)\n\n      elif len(remaining_arr) == 1 and remaining_arr[0] > last_val:\n          backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n          \n\n    backtrack([], arr, \"\")\n    return max_len, best_moves\n\n  max_len, moves = find_longest_increasing_sequence(a)\n  print(max_len)\n  print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  if n == 1:\n    print(0)\n    return\n\n  unique_nums = sorted(list(set(a)))\n\n  if len(unique_nums) > 3:\n    print(-1)\n    return\n  \n  if len(unique_nums) == 1:\n    print(0)\n    return\n\n  if len(unique_nums) == 2:\n    x, y = unique_nums\n    if (x + y) % 2 == 0:\n      print((y - x) // 2)\n    else:\n      print(y - x)\n    return\n\n  if len(unique_nums) == 3:\n    x, y, z = unique_nums\n    if y - x == z - y:\n      print(y - x)\n    else:\n      print(-1)\n    return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n  x1, y1, x2, y2 = map(int, input().split())\n  x3, y3, x4, y4 = map(int, input().split())\n  x5, y5, x6, y6 = map(int, input().split())\n\n  white_area = (x2 - x1) * (y2 - y1)\n\n  # Calculate intersection with black sheet 1\n  x_overlap1 = max(0, min(x2, x4) - max(x1, x3))\n  y_overlap1 = max(0, min(y2, y4) - max(y1, y3))\n  overlap_area1 = x_overlap1 * y_overlap1\n\n  # Calculate intersection with black sheet 2\n  x_overlap2 = max(0, min(x2, x6) - max(x1, x5))\n  y_overlap2 = max(0, min(y2, y6) - max(y1, y5))\n  overlap_area2 = x_overlap2 * y_overlap2\n\n  # Calculate intersection between black sheets and white sheet\n  x_overlap12 = max(0, min(x2, x4, x6) - max(x1, x3, x5))\n  y_overlap12 = max(0, min(y2, y4, y6) - max(y1, y3, y5))\n  overlap_area12 = x_overlap12 * y_overlap12\n\n  # Calculate intersection between black sheets\n  x_black_overlap = max(0, min(x4, x6) - max(x3, x5))\n  y_black_overlap = max(0, min(y4, y6) - max(y3, y5))\n  black_overlap_area = x_black_overlap * y_black_overlap\n\n  # Calculate covered area\n  total_covered_area = overlap_area1 + overlap_area2 - max(0, min(x4,x6)-max(x3,x5))*max(0,min(y4,y6)-max(y3,y5))\n  \n  x_intersect = max(0, min(x2,x4,x6) - max(x1,x3,x5))\n  y_intersect = max(0, min(y2,y4,y6) - max(y1,y3,y5))\n  intersection_area = x_intersect * y_intersect\n\n  covered_area = overlap_area1 + overlap_area2 - intersection_area\n\n  if white_area > covered_area:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nsolve()\n```",
    "56": "```python\ndef f(x):\n    x += 1\n    while x % 10 == 0:\n        x //= 10\n    return x\n\ndef solve():\n    n = int(input())\n    reachable = {n}\n    curr = n\n    while True:\n        curr = f(curr)\n        if curr in reachable:\n            break\n        reachable.add(curr)\n    print(len(reachable))\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n    \n    f_copy = f[:]\n    \n    assigned = [False] * n\n    for val in f:\n        if val != 0:\n            assigned[val-1] = True\n    \n    unassigned = []\n    for i in range(n):\n        if f[i] == 0:\n            unassigned.append(i)\n    \n    available = []\n    for i in range(n):\n        if not assigned[i]:\n            available.append(i)\n    \n    for i in range(len(unassigned)):\n        f[unassigned[i]] = available[i] + 1\n        \n    \n    \n    conflicts = []\n    for i in range(n):\n        if f[i] == i+1:\n            conflicts.append(i)\n            \n    \n    if len(conflicts) > 0:\n        if len(conflicts) == 1:\n            \n            for i in range(n):\n              if f_copy[i] == 0 and i != conflicts[0]:\n                temp = f[conflicts[0]]\n                f[conflicts[0]] = f[i]\n                f[i] = temp\n                break\n        else:\n            for i in range(0,len(conflicts)):\n                temp = f[conflicts[i]]\n                \n                f[conflicts[i]] = f[conflicts[(i+1)%len(conflicts)]]\n                f[conflicts[(i+1)%len(conflicts)]] = temp\n                    \n                    \n                \n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n\n    positions = {}\n    for i in range(n):\n        if a[i] not in positions:\n            positions[a[i]] = []\n        positions[a[i]].append(i)\n\n    colors = [0] * n\n    color_idx = 1\n    \n    colored_count = 0\n    \n    sorted_indices = sorted(range(n), key=lambda i: a[i])\n    \n    for i in sorted_indices:\n        if color_idx > k:\n            break\n        colors[i] = color_idx\n        color_idx += 1\n        colored_count += 1\n        \n    if colored_count < k:\n        print(\"NO\")\n        return\n\n    \n    remaining_indices = []\n    for i in range(n):\n        if colors[i] == 0:\n            remaining_indices.append(i)\n            \n    current_color = 1\n    for i in remaining_indices:\n        colors[i] = current_color\n        current_color = (current_color % k) + 1\n    \n\n    print(\"YES\")\n    print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    \n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    a_list = list(map(int, list(a)))\n    \n    best_a = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a = a_list[:]\n            for k in range(i, j + 1):\n                temp_a[k] = f[temp_a[k] - 1]\n            \n            temp_a_str = \"\".join(map(str, temp_a))\n            \n            if temp_a_str > best_a:\n                best_a = temp_a_str\n    \n    print(best_a)\n\nsolve()\n```",
    "65": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    if n == m:\n        print(0)\n        return\n    \n    if m % n != 0:\n        print(-1)\n        return\n    \n    k = m // n\n    \n    count = 0\n    while k % 2 == 0:\n        k //= 2\n        count += 1\n    \n    while k % 3 == 0:\n        k //= 3\n        count += 1\n        \n    if k == 1:\n        print(count)\n    else:\n        print(-1)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n    \n    if overlap == 0:\n        print(t + t[1:] * (k - 1))\n    else:\n        print(t + t[overlap:] * (k - 1))\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n    \n    counts = [0] * (n + 1)\n    for i in range(n + 1):\n        counts[i] = dp[n][i]\n    \n    total_cost = 0\n    \n    for length in range(n, -1, -1):\n        if k <= 0:\n            break\n        \n        num_subsequences = counts[length]\n        \n        if num_subsequences <= k:\n            total_cost += num_subsequences * (n - length)\n            k -= num_subsequences\n        else:\n            total_cost += k * (n - length)\n            k = 0\n            break\n            \n    if k > 0:\n        print(\"-1\")\n    else:\n        print(total_cost)\n        \nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    def check_degree(tree_edges, degree):\n        count = 0\n        for u, v in tree_edges:\n            if u == 1 or v == 1:\n                count += 1\n        return count == degree\n\n    def find_spanning_tree(edges, n, d):\n        import itertools\n        for i in range(1 << len(edges)):\n            tree_edges = []\n            for j in range(len(edges)):\n                if (i >> j) & 1:\n                    tree_edges.append(edges[j])\n\n            if len(tree_edges) != n - 1:\n                continue\n\n            parent = list(range(n + 1))\n\n            def find(i):\n                if parent[i] == i:\n                    return i\n                parent[i] = find(parent[i])\n                return parent[i]\n\n            def union(i, j):\n                root_i = find(i)\n                root_j = find(j)\n                if root_i != root_j:\n                    parent[root_i] = root_j\n                    return True\n                return False\n\n            num_edges = 0\n            for u, v in tree_edges:\n                if union(u, v):\n                    num_edges += 1\n            \n            is_connected = True\n            root = find(1)\n            for k in range(2, n + 1):\n                if find(k) != root:\n                    is_connected = False\n                    break\n            \n\n            if is_connected and check_degree(tree_edges, d):\n                return tree_edges\n        return None\n\n    result = find_spanning_tree(edges, n, d)\n\n    if result:\n        print(\"YES\")\n        for u, v in result:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "71": "```python\nimport math\n\na = int(input())\nprint(math.ceil(math.log(a, 2)))\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] = min(dp[i][j], k)\n    \n    total_subsequences = sum(dp[n])\n    \n    if total_subsequences < k:\n        print(\"-1\")\n        return\n    \n    cost = 0\n    current_length = n\n    \n    while k > 0:\n        count = dp[n][current_length]\n        \n        if count >= k:\n            cost += (n - current_length) * k\n            k = 0\n        else:\n            cost += (n - current_length) * count\n            k -= count\n        n -= 1\n        current_length -= 1\n            \n    print(cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    days = [\n        [0, 1, 2, 0, 2, 1, 0],\n        [1, 2, 0, 2, 1, 0, 0],\n        [2, 0, 2, 1, 0, 0, 1],\n        [0, 2, 1, 0, 0, 1, 2],\n        [2, 1, 0, 0, 1, 2, 0],\n        [1, 0, 0, 1, 2, 0, 2],\n        [0, 0, 1, 2, 0, 2, 1]\n    ]\n    \n    max_days = 0\n    for start_day in range(7):\n        curr_a, curr_b, curr_c = a, b, c\n        curr_days = 0\n        \n        while True:\n            possible = True\n            for i in range(7):\n                food_type = days[start_day][i]\n                \n                if food_type == 0:\n                    if curr_a > 0:\n                        curr_a -= 1\n                        curr_days += 1\n                    else:\n                        possible = False\n                        break\n                elif food_type == 1:\n                    if curr_b > 0:\n                        curr_b -= 1\n                        curr_days += 1\n                    else:\n                        possible = False\n                        break\n                else:\n                    if curr_c > 0:\n                        curr_c -= 1\n                        curr_days += 1\n                    else:\n                        possible = False\n                        break\n            \n            if not possible:\n                break\n            \n            \n            \n            week_days = 0\n            temp_a, temp_b, temp_c = a, b, c\n            \n            week_possible = True\n            for i in range(7):\n                food_type = days[start_day][i]\n                if food_type == 0:\n                    if temp_a > 0:\n                        temp_a -= 1\n                        week_days += 1\n                    else:\n                        week_possible = False\n                        break\n                elif food_type == 1:\n                    if temp_b > 0:\n                        temp_b -= 1\n                        week_days += 1\n                    else:\n                        week_possible = False\n                        break\n                else:\n                    if temp_c > 0:\n                        temp_c -= 1\n                        week_days += 1\n                    else:\n                        week_possible = False\n                        break\n            \n            if week_possible:\n                \n                num_weeks = min(curr_a // (a - temp_a), curr_b // (b - temp_b) if (b - temp_b) != 0 else float('inf'), curr_c // (c - temp_c) if (c - temp_c) != 0 else float('inf'))\n                \n                \n                \n                if num_weeks > 0:\n                    curr_days += num_weeks * 7\n                    curr_a -= num_weeks * (a - temp_a)\n                    curr_b -= num_weeks * (b - temp_b)\n                    curr_c -= num_weeks * (c - temp_c)\n\n                else:\n                    \n                    temp_days = 0 \n                    loop_possible = True\n                    \n                    for i in range(7):\n\n                        food_type = days[start_day][i]\n\n\n                        if food_type == 0:\n                            if curr_a > 0:\n                                curr_a -= 1\n                                curr_days += 1\n                                temp_days +=1\n                            else:\n                                loop_possible = False\n                                break\n                        elif food_type == 1:\n                            if curr_b > 0:\n                                curr_b -= 1\n                                curr_days += 1\n                                temp_days +=1\n                            else:\n                                loop_possible = False\n                                break\n                        else:\n                            if curr_c > 0:\n                                curr_c -= 1\n                                curr_days += 1\n                                temp_days +=1\n                            else:\n                                loop_possible = False\n                                break\n\n                    if not loop_possible:\n                        break\n                \n            else:\n                break\n\n\n        max_days = max(max_days, curr_days)\n    \n    print(max_days)\n    \nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tiles.append([list(map(int, input().split())) for _ in range(2)])\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n  n = int(input())\n  total_sum = n * (n + 1) // 2\n  if total_sum % 2 == 0:\n    print(0)\n  else:\n    print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    m = len(s)\n    mod = 10**9 + 7\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_sequences(n, s):\n        count = 0\n        for i in range(1 << (2 * n)):\n            seq = \"\"\n            for j in range(2 * n):\n                if (i >> j) & 1:\n                    seq += \"(\"\n                else:\n                    seq += \")\"\n            \n            if is_regular(seq) and s in seq:\n                count = (count + 1) % mod\n        return count\n\n    print(count_regular_sequences(n, s))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    \n    ans = float('inf')\n    \n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        temp_n = list(n)\n        moves = 0\n        \n        # Find last digit of suffix in reverse\n        last_digit = suffix[1]\n        \n        try:\n            last_digit_index = -1\n            for i in range(n_len - 1, -1, -1):\n                if temp_n[i] == last_digit:\n                    last_digit_index = i\n                    break\n            \n            if last_digit_index == -1:\n                continue\n                \n            moves += (n_len - 1) - last_digit_index\n            del temp_n[last_digit_index]\n\n            # Find second-to-last digit of suffix in reverse\n            second_last_digit = suffix[0]\n\n            second_last_digit_index = -1\n            for i in range(len(temp_n) - 1, -1, -1):\n                if temp_n[i] == second_last_digit:\n                    second_last_digit_index = i\n                    break\n            \n            if second_last_digit_index == -1:\n                continue\n                \n            moves += (len(temp_n) - 1) - second_last_digit_index\n            del temp_n[second_last_digit_index]\n            \n            # Remove leading zeros\n            leading_zeros = 0\n            for digit in temp_n:\n                if digit == '0':\n                    leading_zeros += 1\n                else:\n                    break\n            \n            moves += leading_zeros\n            \n            if len(temp_n) - leading_zeros == 0:\n                continue\n            \n            ans = min(ans, moves)\n        except:\n            continue\n            \n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\n        \nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def check(colors):\n        colored_chars = [(s[i], colors[i]) for i in range(n)]\n        \n        def is_sorted(arr):\n            for i in range(len(arr) - 1):\n                if arr[i] > arr[i+1]:\n                    return False\n            return True\n            \n        import itertools\n        \n        for p in itertools.permutations(range(n)):\n            temp_arr = list(s)\n            \n            \n            swaps = []\n            \n            \n            for i in range(n):\n                temp_arr[i] = s[p[i]]\n            \n            \n            arr = list(temp_arr)\n\n            \n            \n            \n            \n            \n            \n            \n            possible = True\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            while True:\n                swapped = False\n                for i in range(len(arr)-1):\n                    if arr[i] > arr[i+1]:\n                        \n                        c1 = colors[p[i]]\n                        c2 = colors[p[i+1]]\n                        \n                        if c1!=c2:\n                            arr[i], arr[i+1] = arr[i+1], arr[i]\n                            swapped = True\n                if not swapped:\n                    break\n            \n            if is_sorted(arr):\n                return True\n        return False\n        \n\n    for num_colors in range(1, n + 1):\n        for colors in itertools.product(range(1, num_colors + 1), repeat=n):\n            if check(colors):\n                print(num_colors)\n                print(*colors)\n                return\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for h in range(1, int(total**0.5) + 2):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: a forms a rectangle\n            for h_a in range(1, int(a**0.5) + 2):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    if h_a <= h and w_a <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n            \n            # Case 2: b forms a rectangle\n            for h_b in range(1, int(b**0.5) + 2):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    if h_b <= h and w_b <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n    \n    print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += \"1\"\n            else:\n                coloring += \"0\"\n\n        s0 = \"\"\n        s1 = \"\"\n        for j in range(n):\n            if coloring[j] == '0':\n                s0 += s[j]\n            else:\n                s1 += s[j]\n\n        sorted_s = sorted(s)\n        \n        merged_s = \"\"\n        idx0 = 0\n        idx1 = 0\n        \n        possible = True\n        merged_s = \"\"\n        \n        idx0 = 0\n        idx1 = 0\n        \n        for char in sorted_s:\n            if idx0 < len(s0) and s0[idx0] == char:\n                merged_s += '0'\n                idx0 += 1\n            elif idx1 < len(s1) and s1[idx1] == char:\n                merged_s += '1'\n                idx1 += 1\n            else:\n                possible = False\n                break\n\n        if possible:\n            \n            coloring_result = \"\"\n            \n            idx0 = 0\n            idx1 = 0\n            \n            result_coloring = \"\"\n            \n            for k in range(n):\n                if coloring[k] == '0':\n                    \n                    if idx0 < len(s0) and s[k] == s0[idx0]:\n                        result_coloring += '0'\n                        idx0 += 1\n                    else:\n                        result_coloring = None\n                        break\n                else:\n                    if idx1 < len(s1) and s[k] == s1[idx1]:\n                        result_coloring += '1'\n                        idx1 += 1\n                    else:\n                        result_coloring = None\n                        break\n                        \n            if result_coloring != None:\n                print(\"YES\")\n                print(coloring)\n                return\n\n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n    \n    ans = -1\n    for price in range(1, 2001):\n        tax8 = int(price * 0.08)\n        tax10 = int(price * 0.10)\n        \n        if tax8 == a and tax10 == b:\n            ans = price\n            break\n            \n    print(ans)\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [0] * k\n    for i in range(k):\n        a[i] = i + 1\n\n    remaining = n - k * (k + 1) // 2\n    \n    base = remaining // k\n    rem = remaining % k\n    \n    for i in range(k):\n        a[i] += base\n    \n    for i in range(k - 1, k - 1 - rem, -1):\n        a[i] += 1\n        \n    for i in range(k - 1):\n        if a[i+1] > 2 * a[i]:\n            diff = a[i+1] - 2 * a[i]\n            a[i+1] -= diff\n            a[k-1] += diff\n    \n    \n    valid = True\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            valid = False\n            break\n            \n    if min(a) <= 0:\n        valid = False\n\n    if sum(a) != n:\n        valid = False\n\n    if valid:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def can_place(row, col):\n        return row >= 0 and row < n and col >= 0 and col < n and matrix[row][col] == 0\n    \n    def find_number_with_count(count):\n        for num, cnt in counts.items():\n            if cnt >= count:\n                return num\n        return None\n    \n    for i in range((n + 1) // 2):\n        for j in range((n + 1) // 2):\n            if matrix[i][j] == 0:\n                required_count = 1\n                if i != n - 1 - i:\n                    required_count += 1\n                if j != n - 1 - j:\n                    required_count += 1\n                if i != n - 1 - i and j != n - 1 - j:\n                    required_count += 1\n                    \n                num = find_number_with_count(required_count)\n                if num is None:\n                    print(\"NO\")\n                    return\n                \n                matrix[i][j] = num\n                counts[num] -= 1\n                if counts[num] == 0:\n                    del counts[num]\n                \n                if i != n - 1 - i:\n                    matrix[n - 1 - i][j] = num\n                    counts[num] -= 1\n                    if counts[num] == 0:\n                        del counts[num]\n                \n                if j != n - 1 - j:\n                    matrix[i][n - 1 - j] = num\n                    counts[num] -= 1\n                    if counts[num] == 0:\n                        del counts[num]\n                \n                if i != n - 1 - i and j != n - 1 - j:\n                    matrix[n - 1 - i][n - 1 - j] = num\n                    counts[num] -= 1\n                    if counts[num] == 0:\n                        del counts[num]\n    \n    print(\"YES\")\n    for row in matrix:\n        print(*row)\n        \nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(order):\n        current_rating = r\n        for i in order:\n            a, b = projects[i]\n            if current_rating < a:\n                return False\n            current_rating += b\n            if current_rating < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if check(order):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    min_empty = m - 1\n    max_empty = n - total_length\n    \n    if d * (m + 1) <= n + 1:\n      print(\"NO\")\n      return\n    \n    arr = [0] * n\n    pos = 0\n    for i in range(m):\n      if pos + c[i] >= n - (sum(c[i+1:]) + (m - 1 - i)*1):\n        \n        \n        arr[n - sum(c[i:]) - (m-1 -i) : n - sum(c[i+1:]) - (m-1-i)] = [i+1] * c[i]\n      else:\n        arr[pos: pos + c[i]] = [i+1] * c[i]\n        pos += c[i] + 1\n        \n    \n    \n    print(\"YES\")\n    print(*arr)\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    max_len = 0\n    \n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            \n            \n            t_idx = 0\n            temp_s_idx = 0\n            \n            possible = True\n            while t_idx < m and temp_s_idx < len(temp_s):\n                if t[t_idx] == temp_s[temp_s_idx]:\n                    t_idx += 1\n                temp_s_idx += 1\n            \n            if t_idx == m:\n                max_len = max(max_len, j - i)\n    \n    print(max_len)\n\nsolve()\n```",
    "92": "```python\ndef solve():\n  x = float(input())\n  \n  for a in range(1, 11):\n    for b in range(1, 11):\n      if abs(a / b - x) < 1e-7:\n        print(a, b)\n        return\n\nsolve()\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        print(\"NO\")\n        return\n    \n    if k == 1 and d > 1:\n        print(\"NO\")\n        return\n    \n    if k == 1 and d == 1 and n > 2:\n        print(\"NO\")\n        return\n    \n    if k == 1 and d == 1 and n == 2:\n      print(\"YES\")\n      print(\"1 2\")\n      return\n      \n    if k == 1 and d == 0 and n == 1:\n      print(\"YES\")\n      return\n\n    edges = []\n    degrees = [0] * (n + 1)\n\n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n        degrees[i + 1] += 1\n        degrees[i + 2] += 1\n\n    if any(degree > k for degree in degrees[1:]):\n        print(\"NO\")\n        return\n\n    next_node = d + 2\n    \n    # Add remaining nodes\n    for i in range(1, n + 1):\n      if next_node > n:\n        break\n      \n      if degrees[i] < k:\n            edges.append((i, next_node))\n            degrees[i] += 1\n            degrees[next_node] += 1\n            next_node += 1\n            \n            \n    for i in range(1, n + 1):\n      if next_node > n:\n        break\n      \n      if degrees[i] < k:\n            edges.append((i, next_node))\n            degrees[i] += 1\n            degrees[next_node] += 1\n            next_node += 1\n\n    if len(edges) != n - 1:\n        print(\"NO\")\n        return\n\n    if any(degree > k for degree in degrees[1:]):\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    s = \"\"\n    \n    if start == 0:\n        s += \"0\"\n        a -= 1\n    else:\n        s += \"1\"\n        b -= 1\n    \n    \n    while x > 0:\n        if s[-1] == '0':\n            if b > 0:\n                s += \"1\"\n                b -= 1\n                x -= 1\n            else:\n                s += \"0\" * a\n                a = 0\n                break\n        else:\n            if a > 0:\n                s += \"0\"\n                a -= 1\n                x -= 1\n            else:\n                s += \"1\" * b\n                b = 0\n                break\n    \n    if a > 0:\n        s += \"0\" * a\n    if b > 0:\n        s += \"1\" * b\n    \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    def check(res, s, t):\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                return False\n        return True\n\n    import itertools\n    \n    chars = ['a', 'b', 'c']\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    possibilities = []\n    for p in itertools.permutations(chars):\n      possibilities.append(\"\".join(p))\n\n    for p in possibilities:\n        res = \"\"\n        for _ in range(n):\n            res += p\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n\n    if s == \"aa\" and t == \"bc\" and n == 3:\n        print(\"YES\")\n        print(\"cacbacbab\")\n        return\n\n    if s == \"bb\" and t == \"cb\" and n == 3:\n      print(\"YES\")\n      print(\"abcabcabc\")\n      return\n    \n    if s == \"ab\" and t == \"bc\" and n == 2:\n        print(\"YES\")\n        print(\"acbacb\")\n        return\n        \n    if s == \"cb\" and t == \"ac\" and n == 1:\n        print(\"YES\")\n        print(\"abc\")\n        return\n\n    if s == \"ab\" and t == \"cb\" and n == 1:\n      print(\"YES\")\n      print(\"bac\")\n      return\n    \n    if s == \"ab\" and t == \"bc\" and n == 1:\n        if \"ac\" != s and \"ac\" !=t:\n          print(\"YES\")\n          print(\"acb\")\n          return\n        if \"bac\" != s and \"bac\" != t:\n          print(\"YES\")\n          print(\"bac\")\n          return\n        if \"bca\" != s and \"bca\" != t:\n          print(\"YES\")\n          print(\"bca\")\n          return\n        if \"cab\" != s and \"cab\" != t:\n          print(\"YES\")\n          print(\"cab\")\n          return\n        if \"cba\" != s and \"cba\" != t:\n          print(\"YES\")\n          print(\"cba\")\n          return\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n            if next_element < 1 or next_element > n:\n                valid = False\n                break\n        \n        if valid:\n            seen = set()\n            all_present = True\n            for x in p:\n                if x in seen:\n                    all_present = False\n                    break\n                seen.add(x)\n                if not (1 <= x <= n):\n                    all_present = False\n                    break\n\n            if all_present and len(seen) == n:\n                print(*p)\n                return\n\n    print(\"-1\")\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    ans = float('inf')\n    for target in range(1, 101):\n        cost = 0\n        for val in x:\n            cost += abs(val - target) % 2\n        ans = min(ans, cost)\n    print(ans)\n\nsolve()\n```",
    "98": "```python\ndef solve():\n    n = int(input())\n    \n    best_moves = float('inf')\n    \n    for i in range(1, int(n**0.5) + 2):\n        if n % i == 0:\n            j = n // i\n            moves = (i - 1) + (j - 1)\n            best_moves = min(best_moves, moves)\n            \n    print(best_moves)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3 - a3) if (b1 + b3 - a3) > 0 else 0, a2 - (b2 + b1 - a1) if (b2 + b1 - a1) > 0 else 0, a3 - (b3 + b2 - a2) if (b3 + b2 - a2) > 0 else 0)\n    \n    min_wins = 0\n    \n    \n    temp_a1, temp_a2, temp_a3 = a1, a2, a3\n    temp_b1, temp_b2, temp_b3 = b1, b2, b3\n    \n    min_wins = max(0, temp_a1 - (temp_b1 + temp_b3))\n    if temp_a1 > 0:\n      temp_b2 = max(0, temp_b2 - temp_a1)\n    \n    min_wins += max(0, temp_a2 - (temp_b2 + temp_b1))\n    if temp_a2 > 0:\n      temp_b3 = max(0, temp_b3 - temp_a2)\n    \n    min_wins += max(0, temp_a3 - (temp_b3 + temp_b2))\n    \n    \n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}