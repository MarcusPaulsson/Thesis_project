{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    max_len = -1\n    \n    for i in range(n):\n        if s[i] == '[':\n            for j in range(i + 1, n):\n                if s[j] == ']':\n                    \n                    first_colon_index = -1\n                    for k in range(i + 1, j):\n                        if s[k] == ':':\n                            first_colon_index = k\n                            break\n                    \n                    if first_colon_index == -1:\n                        continue\n                    \n                    second_colon_index = -1\n                    for k in range(first_colon_index + 1, j):\n                        if s[k] == ':':\n                            second_colon_index = k\n                    \n                    if second_colon_index == -1:\n                        continue\n                            \n                    vertical_bars = 0\n                    for k in range(first_colon_index + 1, second_colon_index):\n                        if s[k] == '|':\n                            vertical_bars += 1\n                    \n                    current_len = 2 + 2 + vertical_bars\n                    max_len = max(max_len, current_len)\n    print(max_len)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    \n    best_num = x\n    max_sum = sum_digits(x)\n    \n    s = str(x)\n    n = len(s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num <= 0:\n            continue\n        \n        current_sum = sum_digits(num)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            best_num = num\n        elif current_sum == max_sum and num > best_num:\n            best_num = num\n            \n    print(best_num)\n\ndef sum_digits(n):\n    s = str(n)\n    sum_val = 0\n    for digit in s:\n        sum_val += int(digit)\n    return sum_val\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    l = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10**(l-1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n\n    if l == 1 and r == n:\n        print(0)\n        return\n\n    if l == 1:\n        print(abs(pos - r) + 1)\n        return\n    \n    if r == n:\n        print(abs(pos - l) + 1)\n        return\n    \n    \n    if pos < l:\n        print(abs(pos - l) + 1 + abs(r - l) + 1)\n    elif pos > r:\n        print(abs(pos - r) + 1 + abs(r - l) + 1)\n    else:\n        print(min(abs(pos - l) + 1 + abs(r - l) + 1, abs(pos - r) + 1 + abs(r - l) + 1))\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(tuple(map(int, input().split())))\n\n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n    \n    if max_damage >= x:\n        print(1)\n        return\n\n    max_diff = 0\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0:\n        print(-1)\n        return\n    \n    remaining = x - max_damage\n    \n    num_blows = (remaining + max_diff - 1) // max_diff\n    \n    print(num_blows + 1)\n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\nn, m = map(int, input().split())\n\nleft = 0\nright = 2 * 10**9\n\nwhile left <= right:\n    mid = (left + right) // 2\n    \n    total_sparrows = mid * (mid + 1) // 2\n    \n    if n + mid * m >= total_sparrows:\n        left = mid + 1\n    else:\n        right = mid - 1\n\nprint(left)\n```",
    "8": "```python\ndef solve():\n    tiles = input().split()\n    \n    def check_mentsu(hand):\n        # Check for koutsu\n        for i in range(len(hand)):\n            count = 0\n            for j in range(len(hand)):\n                if hand[i] == hand[j]:\n                    count += 1\n            if count >= 3:\n                return True\n        \n        # Check for shuntsu\n        for i in range(len(hand)):\n            for j in range(i + 1, len(hand)):\n                for k in range(j + 1, len(hand)):\n                    t1 = hand[i]\n                    t2 = hand[j]\n                    t3 = hand[k]\n                    \n                    if t1[1] == t2[1] == t3[1]:\n                        nums = sorted([int(t1[0]), int(t2[0]), int(t3[0])])\n                        if nums[1] == nums[0] + 1 and nums[2] == nums[1] + 1:\n                            return True\n        \n        return False\n    \n    if check_mentsu(tiles):\n        print(0)\n        return\n    \n    # Try adding one tile\n    for i in range(1, 10):\n        for suit in ['m', 'p', 's']:\n            new_tile = str(i) + suit\n            new_hand = tiles + [new_tile]\n            if check_mentsu(new_hand):\n                print(1)\n                return\n    \n    # Try adding two tiles\n    print(2)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa, sofas_list):\n        count = 0\n        x1, y1, x2, y2 = sofa\n        for other_sofa in sofas_list:\n            if sofa == other_sofa:\n                continue\n            ox1, oy1, ox2, oy2 = other_sofa\n            \n            if min(y1, y2) > max(oy1, oy2):\n                count += 1\n            elif max(y1,y2) < min(oy1, oy2):\n                continue\n            else:\n                \n                 if min(y1, y2) == min(oy1, oy2) and max(y1, y2) == max(oy1, oy2):\n                   if min(x1,x2) < min(ox1,ox2):\n                       count +=1\n                 else:\n                   if min(x1,x2) < min(ox1,ox2) or min(x1,x2) < max(ox1,ox2) :\n                       count +=1\n\n        return count\n\n    def count_right(sofa, sofas_list):\n        count = 0\n        x1, y1, x2, y2 = sofa\n        for other_sofa in sofas_list:\n            if sofa == other_sofa:\n                continue\n            ox1, oy1, ox2, oy2 = other_sofa\n            \n            if min(y1, y2) > max(oy1, oy2):\n                continue\n            elif max(y1,y2) < min(oy1, oy2):\n                count += 1\n            else:\n                if min(y1, y2) == min(oy1, oy2) and max(y1, y2) == max(oy1, oy2):\n                   if max(x1,x2) > max(ox1,ox2):\n                       count +=1\n                else:\n                   if max(x1,x2) > min(ox1,ox2) or max(x1,x2) > max(ox1,ox2) :\n                       count +=1\n\n        return count\n\n    def count_top(sofa, sofas_list):\n        count = 0\n        x1, y1, x2, y2 = sofa\n        for other_sofa in sofas_list:\n            if sofa == other_sofa:\n                continue\n            ox1, oy1, ox2, oy2 = other_sofa\n            \n            if min(x1, x2) > max(ox1, ox2):\n                count += 1\n            elif max(x1,x2) < min(ox1, ox2):\n                continue\n            else:\n                if min(x1, x2) == min(ox1, ox2) and max(x1, x2) == max(ox1, ox2):\n                    if min(y1,y2) < min(oy1,oy2):\n                       count +=1\n                else:\n                    if min(y1,y2) < min(oy1,oy2) or min(y1,y2) < max(oy1,oy2) :\n                       count +=1\n\n        return count\n\n    def count_bottom(sofa, sofas_list):\n        count = 0\n        x1, y1, x2, y2 = sofa\n        for other_sofa in sofas_list:\n            if sofa == other_sofa:\n                continue\n            ox1, oy1, ox2, oy2 = other_sofa\n            \n            if min(x1, x2) > max(ox1, ox2):\n                continue\n            elif max(x1,x2) < min(ox1, ox2):\n                count += 1\n            else:\n                if min(x1, x2) == min(ox1, ox2) and max(x1, x2) == max(ox1, ox2):\n                    if max(y1,y2) > max(oy1,oy2):\n                       count +=1\n                else:\n                    if max(y1,y2) > min(oy1,oy2) or max(y1,y2) > max(oy1,oy2) :\n                       count +=1\n        return count\n\n    for i in range(d):\n        sofa = sofas[i]\n        l = count_left(sofa, sofas)\n        r = count_right(sofa, sofas)\n        t = count_top(sofa, sofas)\n        b = count_bottom(sofa, sofas)\n\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n  n = int(input())\n  \n  min_days_off = (n // 7) * 2\n  rem = n % 7\n  \n  if rem == 1:\n      min_days_off += 0\n  elif rem == 2:\n      min_days_off += 0\n  elif rem == 3:\n      min_days_off += 0\n  elif rem == 4:\n      min_days_off += 0\n  elif rem == 5:\n      min_days_off += 0\n  elif rem == 6:\n      min_days_off += 1\n  \n  \n  max_days_off = (n // 7) * 2\n  rem = n % 7\n  \n  if rem == 1:\n      max_days_off += 1\n  elif rem == 2:\n      max_days_off += 2\n  elif rem == 3:\n      max_days_off += 2\n  elif rem == 4:\n      max_days_off += 2\n  elif rem == 5:\n      max_days_off += 2\n  elif rem == 6:\n      max_days_off += 2\n      \n  print(min_days_off, max_days_off)\n  \nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\nn, a, b, p, q = map(int, input().split())\n\nred_count = n // a\nblue_count = n // b\nboth_count = n // lcm(a, b)\n\nred_only = red_count - both_count\nblue_only = blue_count - both_count\n\ntotal_chocolates = red_only * p + blue_only * q\n\nif p > q:\n    total_chocolates += both_count * p\nelse:\n    total_chocolates += both_count * q\n\nprint(total_chocolates)\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    gold_count = s.count('G')\n    \n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            temp_s = list(s)\n            temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n            temp_s = \"\".join(temp_s)\n            \n            current_len = 0\n            max_current_len = 0\n            for k in range(n):\n                if temp_s[k] == 'G':\n                    current_len += 1\n                else:\n                    max_current_len = max(max_current_len, current_len)\n                    current_len = 0\n            max_current_len = max(max_current_len, current_len)\n            \n            max_len = max(max_len, min(max_current_len, gold_count))\n    \n    print(max_len)\n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = set(p)\n    remaining = []\n    for i in range(n, 0, -1):\n        if i not in used:\n            remaining.append(i)\n\n    p += remaining\n\n    def is_stack_sortable(arr):\n        s = []\n        b = []\n        i = 0\n        j = 0\n        while i < len(arr) or len(s) > 0:\n            if len(s) > 0 and s[-1] == min(arr[i:] + s):\n                b.append(s[-1])\n                s.pop()\n            elif i < len(arr):\n                s.append(arr[i])\n                i += 1\n            else:\n                return False\n        \n        return all(b[i] <= b[i+1] for i in range(len(b)-1))\n\n    if is_stack_sortable(p):\n        print(*p)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "15": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  if c == 0:\n    if a == b:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n  else:\n    if (b - a) % c == 0 and (b - a) / c >= 0:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n  n, k, t = map(int, input().split())\n  \n  if t <= k:\n    print(t)\n  elif t <= n:\n    print(k)\n  else:\n    print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    suffix_min = [0] * n\n    suffix_min[-1] = s[-1]\n    for i in range(n - 2, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    t = []\n    u = \"\"\n    \n    for i in range(n):\n        t.append(s[i])\n        while len(t) > 0 and t[-1] <= suffix_min[i] if i < n - 1 else len(t) > 0:\n            u += t[-1]\n            t.pop()\n            \n    while len(t) > 0:\n        u += t[-1]\n        t.pop()\n        \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n    \n    ans = 0\n    while True:\n        hh_str = str(hh).zfill(2)\n        mm_str = str(mm).zfill(2)\n        \n        if hh_str == mm_str[::-1]:\n            print(ans)\n            return\n        \n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        \n        ans += 1\n\nsolve()\n```",
    "22": "```python\ndef is_s_palindrome(s):\n  \"\"\"\n  Checks if a string is an \"s-palindrome\".\n\n  Args:\n    s: The string to check.\n\n  Returns:\n    \"TAK\" if the string is an \"s-palindrome\", \"NIE\" otherwise.\n  \"\"\"\n\n  symmetric_chars = {\n      'b': 'd',\n      'd': 'b',\n      'o': 'o',\n      'p': 'q',\n      'q': 'p',\n      'v': 'v',\n      'w': 'w',\n      'x': 'x',\n      'A': 'A',\n      'H': 'H',\n      'I': 'I',\n      'M': 'M',\n      'O': 'O',\n      'T': 'T',\n      'U': 'U',\n      'V': 'V',\n      'W': 'W',\n      'X': 'X',\n      'Y': 'Y'\n  }\n\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] not in symmetric_chars or s[n - 1 - i] not in symmetric_chars:\n      return \"NIE\"\n    if symmetric_chars.get(s[i]) != s[n - 1 - i]:\n      return \"NIE\"\n\n  if n % 2 == 1:\n      if s[n // 2] not in symmetric_chars or symmetric_chars.get(s[n // 2]) != s[n // 2]:\n          return \"NIE\"\n      \n  return \"TAK\"\n\n\nif __name__ == \"__main__\":\n  s = input()\n  print(is_s_palindrome(s))\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    def find_max_permutation(index, current_num, remaining_digits):\n        if index == len(a):\n            return current_num\n        \n        best_num = \"\"\n        \n        for digit in sorted(remaining_digits.keys(), reverse=True):\n            if remaining_digits[digit] > 0:\n                temp_remaining_digits = remaining_digits.copy()\n                temp_remaining_digits[digit] -= 1\n                if temp_remaining_digits[digit] == 0:\n                    del temp_remaining_digits[digit]\n                \n                new_num = current_num + digit\n                \n                if int(new_num) <= int(b[:len(new_num)]):\n                    if len(new_num) == len(b[:len(new_num)]):\n                         if int(new_num) <= int(b[:len(new_num)]):\n                            possible_num = find_max_permutation(index + 1, new_num, temp_remaining_digits)\n                            if possible_num != \"\" and (best_num == \"\" or int(possible_num) > int(best_num)):\n                                best_num = possible_num\n                    else:\n                        possible_num = find_max_permutation(index + 1, new_num, temp_remaining_digits)\n                        if possible_num != \"\" and (best_num == \"\" or int(possible_num) > int(best_num)):\n                            best_num = possible_num\n                    \n        return best_num\n\n    \n    a_counts = Counter(list(a))\n    result = find_max_permutation(0, \"\", a_counts)\n    print(result)\n    \nsolve()\n```",
    "24": "```python\ndef solve():\n  board = []\n  for _ in range(10):\n    board.append(list(input()))\n\n  def check_win(board_state):\n    for i in range(10):\n      for j in range(10):\n        if board_state[i][j] == 'X':\n          # Check horizontal\n          if j <= 5:\n            count = 0\n            for k in range(5):\n              if board_state[i][j+k] == 'X':\n                count += 1\n            if count == 5:\n              return True\n\n          # Check vertical\n          if i <= 5:\n            count = 0\n            for k in range(5):\n              if board_state[i+k][j] == 'X':\n                count += 1\n            if count == 5:\n              return True\n\n          # Check diagonal (top-left to bottom-right)\n          if i <= 5 and j <= 5:\n            count = 0\n            for k in range(5):\n              if board_state[i+k][j+k] == 'X':\n                count += 1\n            if count == 5:\n              return True\n\n          # Check diagonal (top-right to bottom-left)\n          if i <= 5 and j >= 4:\n            count = 0\n            for k in range(5):\n              if board_state[i+k][j-k] == 'X':\n                count += 1\n            if count == 5:\n              return True\n    return False\n  \n  for i in range(10):\n    for j in range(10):\n      if board[i][j] == '.':\n        board[i][j] = 'X'\n        if check_win(board):\n          print(\"YES\")\n          return\n        board[i][j] = '.'\n  \n  print(\"NO\")\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n            \n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n                \n    if k != 0:\n      print(\"-1\")\n      return\n    \n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s[:2*i] == prefix + prefix:\n            ans = min(ans, i + 1 + (n - 2*i))\n        elif s[:i] == s[i:2*i] and 2*i <= n:\n            ans = min(ans, i + 1 + (n-2*i))\n            \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if n >= 2*i and s[:i] == s[i:2*i]:\n            ans = min(ans, i+1+(n-2*i))\n\n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n    \n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n            \n    moves = []\n    \n    e = len(examples)\n    \n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            \n            # If there's a collision with a target filename, move it to a temp name\n            if any(f[0] == str(i+1) for f in files):\n                \n                 #find the file that has the name str(i+1) and its index\n                colliding_file_index = next(index for index, file in enumerate(files) if file[0] == str(i+1))\n                \n                temp_name = \"temp\" + str(i+1)\n                while any(f[0] == temp_name for f in files):\n                    temp_name = \"temp\" + temp_name\n                \n                moves.append(f\"move {str(i+1)} {temp_name}\")\n                files[colliding_file_index][0] = temp_name\n                \n                \n            moves.append(f\"move {examples[i][0]} {str(i + 1)}\")\n            files[examples[i][1]][0] = str(i+1)\n            \n            \n    # Move regular tests to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            \n            # If there's a collision with a target filename, move it to a temp name\n            if any(f[0] == str(e+i+1) for f in files):\n                #find the file that has the name str(e+i+1) and its index\n                colliding_file_index = next(index for index, file in enumerate(files) if file[0] == str(e+i+1))\n                \n                temp_name = \"temp\" + str(e+i+1)\n                while any(f[0] == temp_name for f in files):\n                    temp_name = \"temp\" + temp_name\n                \n                moves.append(f\"move {str(e+i+1)} {temp_name}\")\n                files[colliding_file_index][0] = temp_name\n            \n            \n            moves.append(f\"move {regular[i][0]} {str(e + i + 1)}\")\n            files[regular[i][1]][0] = str(e+i+1)\n    \n    print(len(moves))\n    for move in moves:\n        print(move)\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    ans = 6\n    for i in range(1000):\n        s1 = str(i).zfill(3)\n        sum1 = sum(int(c) for c in s1)\n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            sum2 = sum(int(c) for c in s2)\n            \n            if sum1 == sum2:\n                \n                diff = 0\n                \n                temp_s = list(s)\n                \n                \n                for k in range(3):\n                    if temp_s[k] != s1[k]:\n                        diff +=1\n                for k in range(3):\n                    if temp_s[k+3] != s2[k]:\n                        diff +=1\n                        \n                \n                \n                \n                temp_diff = 0\n                \n                \n                \n                \n                \n                \n                temp_s_list = list(s)\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                temp_diff = 0\n\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                ans = min(ans, diff)\n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    twos_num = 0\n    twos_den = 0\n\n    for i in range(k):\n        if i == 0:\n            continue\n        \n        val = pow(2,n,mod) - i\n        \n        num = (num * (val % mod)) % mod\n\n        twos = 0\n        temp = i\n        while temp > 0 and temp % 2 == 0:\n            twos += 1\n            temp //= 2\n        twos_num += twos\n        \n\n    den = pow(pow(2,n,mod),k-1,mod)\n    \n\n    twos_den = 0\n    temp = den\n    count = 0\n\n    twos_den = (n * (k-1))\n    \n    if twos_num > twos_den:\n        num = 0\n        den = 1\n    elif twos_num == twos_den:\n        pass\n    else:\n        twos_diff = twos_den - twos_num\n        num = num\n        den = den * pow(pow(2, twos_num, mod),mod - 2, mod) % mod\n        num = num * pow(pow(2, twos_num, mod),mod - 2, mod) % mod\n    \n        \n    a = (den - num) % mod\n    b = den % mod\n\n    print(a, b)\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    d, x, y = extended_gcd(a1, a2)\n    x *= (b2 - b1) // d\n    y *= (b2 - b1) // d\n\n    lcm = (a1 * a2) // g\n\n    x0 = x % (a2 // g)\n    x0 = (x0 + (a2 // g)) % (a2 // g)  # Ensure x0 is positive\n\n    n1 = a1 * x0 + b1\n    \n    \n    first = n1\n    \n    if first < L:\n        k = (L - first + lcm - 1) // lcm\n        first += k * lcm\n    \n    if first > R:\n        print(0)\n        return\n\n    count = (R - first) // lcm + 1\n    print(count)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        if i >= 1 and i < n:\n            x = a // i\n            y = b // (n - i)\n            if x > 0 and y > 0:\n                ans = max(ans, min(x, y))\n    print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n  n = int(input())\n  \n  if n == 0:\n    print(0, 0)\n    return\n  \n  l, r = 0, 2000000000\n  k = 0\n  while l <= r:\n    mid = (l + r) // 2\n    if 3 * mid * (mid + 1) <= n:\n      k = mid\n      l = mid + 1\n    else:\n      r = mid - 1\n      \n  rem = n - 3 * k * (k + 1)\n  \n  if rem <= k + 1:\n    x = 2 * (rem - (k + 1))\n    y = 2 * k\n  elif rem <= 2 * (k + 1):\n    x = -2 * (k + 1) + (rem - (k + 1)) * 2\n    y = 2 * k - 2 * (rem - (k + 1))\n  elif rem <= 3 * (k + 1):\n    x = -2 * (rem - 2 * (k + 1))\n    y = -2 * k + 2 * (rem - 2 * (k + 1))\n  elif rem <= 4 * (k + 1):\n    x = 2 * (rem - 3 * (k + 1))\n    y = -2 * k\n  elif rem <= 5 * (k + 1):\n    x = 2 * (k + 1) - 2 * (rem - 4 * (k + 1))\n    y = -2 * k + 2 * (rem - 4 * (k + 1))\n  else:\n    x = 2 * (k + 1) - 2 * (rem - 5 * (k + 1))\n    y = 2 * k - 2 * (rem - 5 * (k + 1))\n  \n  print(x, y)\n  \nsolve()\n```",
    "38": "```python\ndef solve():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for shift in range(l):\n        shifted_sasha = [(x + shift) % l for x in sasha]\n        shifted_sasha.sort()\n        if shifted_sasha == kefa:\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n  \"\"\"\n  Calculates the distance to the nearest zero for each element in an array.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    A list of integers representing the distances to the nearest zero for each element.\n  \"\"\"\n\n  n = len(arr)\n  distances = [float('inf')] * n\n\n  # Forward pass: find distances to the nearest zero from the left\n  last_zero = float('-inf')\n  for i in range(n):\n    if arr[i] == 0:\n      last_zero = i\n    if last_zero != float('-inf'):\n      distances[i] = min(distances[i], i - last_zero)\n\n  # Backward pass: find distances to the nearest zero from the right\n  last_zero = float('inf')\n  for i in range(n - 1, -1, -1):\n    if arr[i] == 0:\n      last_zero = i\n    if last_zero != float('inf'):\n      distances[i] = min(distances[i], last_zero - i)\n\n  return distances\n\n\nif __name__ == \"__main__\":\n  n = int(input())\n  arr = list(map(int, input().split()))\n\n  distances = nearest_zero(arr)\n  print(*distances)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    distinct_strings = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            if binary_string not in distinct_strings:\n                count += 1\n                distinct_strings.add(binary_string)\n                \n    print(count)\n    \nsolve()\n```",
    "44": "```python\ndef solve():\n    d, k, a, b, t = map(int, input().split())\n\n    if d <= k:\n        print(d * a)\n    else:\n        ans = k * a\n        d -= k\n        \n        if t + k * a < k * b:\n            num_breaks = d // k\n            ans += num_breaks * (t + k * a)\n            d -= num_breaks * k\n            \n            if d > 0:\n                ans += min(t + d * a, d * b)\n        else:\n            ans += d * b\n        print(ans)\n\nsolve()\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"-1\")\n        return\n\n    best_gcd = 0\n    best_seq = []\n\n    for gcd in range(int(n**0.5), 0, -1):\n        if n % gcd == 0:\n            q = n // gcd\n            if q >= k * (k + 1) // 2:\n                \n                seq = [gcd * i for i in range(1, k)]\n                last = n - sum(seq)\n                if last > seq[-1]:\n                   \n                    best_gcd = gcd\n                    best_seq = seq + [last]\n                    break\n            q = gcd\n            gcd = n // gcd\n            if q >= k * (k + 1) // 2:\n                \n                seq = [gcd * i for i in range(1, k)]\n                last = n - sum(seq)\n                if last > seq[-1]:\n                    \n                    best_gcd = gcd\n                    best_seq = seq + [last]\n                    break\n\n    if best_gcd == 0:\n        if n == 1 and k == 1:\n            print(1)\n        else:\n            print(\"-1\")\n    else:\n        print(*best_seq)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n  n, m = map(int, input().split())\n  count = 0\n  for x in range(1, n + 1):\n    for y in range(1, m + 1):\n      if (x + y) % 5 == 0:\n        count += 1\n  print(count)\n\nsolve()\n```",
    "47": "```python\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_a = a[:]\n            for k in range(i, j):\n                temp_a[k] *= x\n\n            curr_max = 0\n            max_so_far = 0\n            for k in range(n):\n                curr_max += temp_a[k]\n                if curr_max < 0:\n                    curr_max = 0\n                max_so_far = max(max_so_far, curr_max)\n            ans = max(ans, max_so_far)\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\ndigits = 1\ncount = 9\nwhile k > digits * count:\n    k -= digits * count\n    digits += 1\n    count *= 10\n\nnum = 10**(digits - 1) + (k - 1) // digits\nindex = (k - 1) % digits\n\nprint(str(num)[index])\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n    \n    def get_dp(row_idx, current_sum):\n        if row_idx == n:\n            if current_sum % k == 0:\n                return 0\n            else:\n                return float('-inf')\n        \n        if (row_idx, current_sum) in dp:\n            return dp[(row_idx, current_sum)]\n        \n        max_sum = float('-inf')\n        \n        # Iterate through all possible combinations of elements in the current row\n        max_elements = m // 2\n        for i in range(1 << m):\n            elements = []\n            count = 0\n            row_sum = 0\n            \n            for j in range(m):\n                if (i >> j) & 1:\n                    elements.append(a[row_idx][j])\n                    count += 1\n                    row_sum += a[row_idx][j]\n                    \n            if count <= max_elements:\n                max_sum = max(max_sum, row_sum + get_dp(row_idx + 1, current_sum + row_sum))\n                \n        dp[(row_idx, current_sum)] = max_sum\n        return max_sum\n\n    result = get_dp(0, 0)\n    print(result)\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_seq, remaining_arr, moves):\n            nonlocal max_len, best_moves\n\n            if not remaining_arr:\n                if len(current_seq) > max_len:\n                    max_len = len(current_seq)\n                    best_moves = moves\n                return\n\n            if not current_seq:\n                # Choose left\n                backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Choose right\n                backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_val = current_seq[-1]\n                \n                # Choose left\n                if remaining_arr[0] > last_val:\n                    backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                \n                # Choose right\n                if remaining_arr[-1] > last_val:\n                    backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n        backtrack([], a, \"\")\n        return max_len, best_moves\n\n    def find_longest_increasing_sequence_optimized(arr):\n        n = len(arr)\n        max_len = 0\n        best_moves = \"\"\n\n        def solve_recursive(left, right, last, moves):\n            nonlocal max_len, best_moves\n\n            if left > right:\n                if len(moves) > max_len:\n                    max_len = len(moves)\n                    best_moves = moves\n                return\n\n            if arr[left] > last and arr[right] > last:\n                if arr[left] < arr[right]:\n                    solve_recursive(left + 1, right, arr[left], moves + \"L\")\n                elif arr[left] > arr[right]:\n                    solve_recursive(left, right - 1, arr[right], moves + \"R\")\n                else:\n                    len_left = 0\n                    len_right = 0\n                    \n                    temp_left = left + 1\n                    while temp_left <= right and arr[temp_left] > arr[left]:\n                        len_left += 1\n                        temp_left += 1\n                    \n                    temp_right = right - 1\n                    while temp_right >= left and arr[temp_right] > arr[right]:\n                        len_right += 1\n                        temp_right -= 1\n\n                    if len_left > len_right:\n                        solve_recursive(left + 1, right, arr[left], moves + \"L\")\n                    else:\n                        solve_recursive(left, right - 1, arr[right], moves + \"R\")\n\n            elif arr[left] > last:\n                solve_recursive(left + 1, right, arr[left], moves + \"L\")\n\n            elif arr[right] > last:\n                solve_recursive(left, right - 1, arr[right], moves + \"R\")\n            \n            else:\n                if len(moves) > max_len:\n                    max_len = len(moves)\n                    best_moves = moves\n                return\n\n        solve_recursive(0, n - 1, 0, \"\")\n        return max_len, best_moves\n    \n    length, moves = find_longest_increasing_sequence_optimized(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    for d in range(101):\n        possible = False\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        for target in set(a):\n            \n            valid = True\n            for val in a:\n                if abs(val - target) > d:\n                    valid = False\n                    break\n                if val + d != target and val - d != target and val != target:\n                    valid = False\n                    break\n            if valid:\n                possible = True\n                break\n\n        if possible:\n            print(d)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "55": "```python\ndef solve():\n  x1, y1, x2, y2 = map(int, input().split())\n  x3, y3, x4, y4 = map(int, input().split())\n  x5, y5, x6, y6 = map(int, input().split())\n\n  white_area = (x2 - x1) * (y2 - y1)\n  \n  # Calculate overlap between white and black1\n  x_overlap1 = max(0, min(x2, x4) - max(x1, x3))\n  y_overlap1 = max(0, min(y2, y4) - max(y1, y3))\n  overlap_area1 = x_overlap1 * y_overlap1\n\n  # Calculate overlap between white and black2\n  x_overlap2 = max(0, min(x2, x6) - max(x1, x5))\n  y_overlap2 = max(0, min(y2, y6) - max(y1, y5))\n  overlap_area2 = x_overlap2 * y_overlap2\n\n  # Calculate overlap between all three rectangles (white, black1, black2)\n  x_overlap_all = max(0, min(x2, x4, x6) - max(x1, x3, x5))\n  y_overlap_all = max(0, min(y2, y4, y6) - max(y1, y3, y5))\n  overlap_area_all = x_overlap_all * y_overlap_all\n\n  # Calculate overlap between black1 and black2\n  x_overlap_blacks = max(0, min(x4, x6) - max(x3, x5))\n  y_overlap_blacks = max(0, min(y4, y6) - max(y3, y5))\n  overlap_area_blacks = x_overlap_blacks * y_overlap_blacks\n\n  # Calculate area of union of black sheets within the white sheet\n  union_area = overlap_area1 + overlap_area2 - overlap_area_all\n  \n  if white_area > union_area:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nsolve()\n```",
    "56": "```python\ndef f(x):\n  x += 1\n  while x % 10 == 0:\n    x //= 10\n  return x\n\ndef solve():\n  n = int(input())\n  reachable = {n}\n  curr = n\n  while True:\n    curr = f(curr)\n    if curr in reachable:\n      break\n    reachable.add(curr)\n  print(len(reachable))\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    assigned = [False] * (n + 1)\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i]] = True\n    \n    unassigned_givers = []\n    for i in range(n):\n        if f[i] == 0:\n            unassigned_givers.append(i)\n    \n    unassigned_receivers = []\n    for i in range(1, n + 1):\n        if not assigned[i]:\n            unassigned_receivers.append(i)\n    \n    for i in range(len(unassigned_givers)):\n        giver_index = unassigned_givers[i]\n        \n        receiver = unassigned_receivers[i]\n        \n        if receiver == giver_index + 1:\n            if i + 1 < len(unassigned_givers):\n                next_receiver = unassigned_receivers[i+1]\n                unassigned_receivers[i] = next_receiver\n                unassigned_receivers[i+1] = receiver\n                receiver = unassigned_receivers[i]\n            else:\n                \n                for j in range(len(unassigned_receivers)):\n                    if unassigned_receivers[j] != giver_index+1 and unassigned_receivers[j] != receiver:\n                        \n                        unassigned_receivers[i] = unassigned_receivers[j]\n                        unassigned_receivers[j] = receiver\n                        receiver = unassigned_receivers[i]\n                        break\n        \n        f[giver_index] = receiver\n\n    print(*f)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c))\n\n    schedule = [0] * n\n    exam_days = {}\n    for i in range(m):\n        s, d, c = exams[i]\n        exam_days[d - 1] = i + 1\n        schedule[d - 1] = m + 1\n\n    exam_preparations = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            best_exam = -1\n            for i in range(m):\n                s, d, c = exams[i]\n                if s - 1 <= day < d - 1 and exam_preparations[i] < c:\n                    if best_exam == -1:\n                        best_exam = i\n                    else:\n                        s_best, d_best, c_best = exams[best_exam]\n                        if d < d_best:\n                            best_exam = i\n            \n            if best_exam != -1:\n                schedule[day] = best_exam + 1\n                exam_preparations[best_exam] += 1\n    \n    possible = True\n    for i in range(m):\n        s, d, c = exams[i]\n        if exam_preparations[i] != c:\n            possible = False\n            break\n\n    if possible:\n        print(*schedule)\n    else:\n        print(-1)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    if k == 1:\n        print(t)\n        return\n    \n    max_overlap = 0\n    for overlap in range(n - 1, 0, -1):\n        if t[:overlap] == t[n-overlap:]:\n            max_overlap = overlap\n            break\n    \n    result = t\n    for _ in range(k - 1):\n        result += t[max_overlap:]\n    \n    print(result)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n\n    \n    counts = []\n    for i in range(n + 1):\n        counts.append(dp[n][i])\n    \n    \n    total_cost = 0\n    \n    for length in range(n, -1, -1):\n        \n        take = min(k, counts[length])\n        \n        total_cost += (n - length) * take\n        k -= take\n        \n        if k == 0:\n            print(total_cost)\n            return\n    \n    print(\"-1\")\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n\n    def find_spanning_tree(graph_edges, num_nodes, required_degree):\n        adj = [[] for _ in range(num_nodes + 1)]\n        for u, v in graph_edges:\n            adj[u].append(v)\n            adj[v].append(u)\n\n        def bfs(start_node, all_edges):\n            visited = [False] * (num_nodes + 1)\n            q = [start_node]\n            visited[start_node] = True\n            spanning_tree_edges = []\n            \n            while q:\n                u = q.pop(0)\n                for v in adj[u]:\n                    if not visited[v]:\n                        edge = (min(u, v), max(u, v))\n                        if edge in [tuple(sorted(e)) for e in graph_edges]:\n                                spanning_tree_edges.append((u, v))\n                                visited[v] = True\n                                q.append(v)\n            \n            for i in range(1, num_nodes + 1):\n                if not visited[i]:\n                    return None\n            return spanning_tree_edges\n\n        spanning_tree = bfs(1, edges)\n\n        if spanning_tree is None:\n            return None\n\n        degree_of_one = 0\n        for u, v in spanning_tree:\n            if u == 1 or v == 1:\n                degree_of_one += 1\n\n        if degree_of_one == required_degree:\n            return spanning_tree\n        else:\n            return None\n        \n\n    result = find_spanning_tree(edges, n, d)\n\n    if result:\n        print(\"YES\")\n        for u, v in result:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "70": "```python\ndef solve():\n    h1, m1 = map(int, input().replace(':', ' ').split())\n    h2, m2 = map(int, input().replace(':', ' ').split())\n\n    start_minutes = h1 * 60 + m1\n    end_minutes = h2 * 60 + m2\n\n    mid_minutes = (start_minutes + end_minutes) // 2\n\n    h3 = mid_minutes // 60\n    m3 = mid_minutes % 60\n\n    print(f\"{h3:02d}:{m3:02d}\")\n\nsolve()\n```",
    "71": "```python\nimport math\n\na = int(input())\nif a == 1:\n    print(1)\nelse:\n    print(math.ceil(math.log(a, 2)))\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    counts = {}\n    for char in s:\n        counts[char] = counts.get(char, 0) + 1\n    \n    distinct_chars = len(set(s))\n    \n    if distinct_chars == 1:\n        total_subsequences = 0\n        for i in range(n + 1):\n            total_subsequences += 1\n        if k > total_subsequences:\n            print(\"-1\")\n            return\n        \n        cost = 0\n        length = 0\n        while k > 0:\n            length += 1\n            cost += min(k, 1) * (n - length)\n            k -= min(k, 1)\n        print(cost)\n        return\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n    \n    total_subsequences = 0\n    for i in range(n + 1):\n        total_subsequences += dp[n][i]\n\n    if k > total_subsequences:\n        print(\"-1\")\n        return\n    \n    ans = 0\n    curr_len = n\n    \n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n    \n    ans = 0\n    curr_len = n\n    \n    used = [False] * n\n    \n    for i in range(n):\n        for char_code in range(ord('a'), ord(s[i]) + 1):\n            char = chr(char_code)\n            \n            count = 0\n            for j in range(i):\n                if not used[j] and s[j] == char:\n                    count += 1\n            \n            if count > 0:\n                continue\n                \n            temp_k = 0\n            for length in range(0, n - i):\n                temp_dp = [[0] * (n + 1) for _ in range(n + 1)]\n                temp_dp[0][0] = 1\n                \n                for row in range(1, n - i):\n                    for col in range(row + 1):\n                        temp_dp[row][col] = temp_dp[row - 1][col]\n                        if col > 0:\n                            temp_dp[row][col] += temp_dp[row - 1][col - 1]\n                \n                temp_k += temp_dp[n-i-1][length]\n            \n            if k > temp_k:\n                k -= temp_k\n                ans += temp_k * (n - (n - i))\n            else:\n                ans += k * (n - (n - i))\n                k = 0\n                break\n        if k == 0:\n            break\n        used[i] = True\n            \n    print(ans)\n    \nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile = []\n        tile.append(list(map(int, input().split())))\n        tile.append(list(map(int, input().split())))\n        tiles.append(tile)\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n    n = int(input())\n    total_sum = n * (n + 1) // 2\n    if total_sum % 2 == 0:\n        print(0)\n    else:\n        print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    len_s = len(s)\n    mod = 10**9 + 7\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_sequences(n, s):\n        count = 0\n        for i in range(1 << (2 * n)):\n            seq = \"\"\n            for j in range(2 * n):\n                if (i >> j) & 1:\n                    seq += \"(\"\n                else:\n                    seq += \")\"\n\n            if is_regular(seq) and s in seq:\n                count += 1\n        return count % mod\n\n    print(count_regular_sequences(n, s))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    \n    ans = float('inf')\n    \n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        temp_n = list(n)\n        moves = 0\n        \n        # Find the last digit of the suffix\n        last_digit_idx = -1\n        for i in range(n_len - 1, -1, -1):\n            if temp_n[i] == suffix[1]:\n                last_digit_idx = i\n                break\n        \n        if last_digit_idx == -1:\n            continue\n        \n        moves += (n_len - 1 - last_digit_idx)\n        temp_n.pop(last_digit_idx)\n        \n        # Find the first digit of the suffix\n        first_digit_idx = -1\n        for i in range(n_len - 2, -1, -1):\n            if temp_n[i] == suffix[0]:\n                first_digit_idx = i\n                break\n        \n        if first_digit_idx == -1:\n            continue\n        \n        moves += (n_len - 2 - first_digit_idx)\n        temp_n.pop(first_digit_idx)\n        \n        # Remove leading zeros\n        leading_zeros = 0\n        for i in range(len(temp_n)):\n            if temp_n[i] == '0':\n                leading_zeros += 1\n            else:\n                break\n        \n        moves += leading_zeros\n        \n        ans = min(ans, moves)\n        \n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\n        \nsolve()\n```",
    "80": "```python\ndef solve():\n  n = int(input())\n  s = input()\n  \n  colors = [0] * n\n  \n  def check(num_colors):\n    \n    def is_sortable(arr, color_assignment):\n      \n      def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n      \n      arr_copy = list(arr)\n      color_assignment_copy = list(color_assignment)\n      \n      \n      for _ in range(n * (n - 1) // 2):\n        swapped = False\n        for i in range(n - 1):\n          if arr_copy[i] > arr_copy[i+1] and color_assignment_copy[i] != color_assignment_copy[i+1]:\n            swap(arr_copy, i, i+1)\n            swap(color_assignment_copy, i, i+1)\n            swapped = True\n        if not swapped:\n          break\n      \n      return arr_copy == sorted(arr)\n\n    \n    import itertools\n    \n    for color_assignment in itertools.product(range(1, num_colors + 1), repeat=n):\n      if is_sortable(list(s), list(color_assignment)):\n          return True, list(color_assignment)\n    return False, None\n  \n  for num_colors in range(1, n + 1):\n    possible, assignment = check(num_colors)\n    if possible:\n      print(num_colors)\n      print(*assignment)\n      return\n\nsolve()\n```",
    "82": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    l = 0\n    r = n - 1\n    count = 0\n    \n    while l <= r:\n        if a[l] <= k:\n            count += 1\n            l += 1\n        elif a[r] <= k:\n            count += 1\n            r -= 1\n        else:\n            break\n            \n        if l > r:\n            break\n        \n        can_solve_left = a[l] <= k if l <= r else False\n        can_solve_right = a[r] <=k if l <= r else False\n        \n        if not can_solve_left and not can_solve_right:\n            break\n        \n\n    print(count)\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    min_perimeter = float('inf')\n    \n    for h in range(1, int(total**0.5) + 2):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: a forms a rectangle\n            for h_a in range(1, int(a**0.5) + 2):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    if h_a <= h and w_a <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n            \n            # Case 2: b forms a rectangle\n            for h_b in range(1, int(b**0.5) + 2):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    if h_b <= h and w_b <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n    \n    print(min_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n  n = int(input())\n  s = input()\n\n  for i in range(1 << n):\n    coloring = \"\"\n    for j in range(n):\n      if (i >> j) & 1:\n        coloring += \"1\"\n      else:\n        coloring += \"0\"\n\n    s0 = \"\"\n    s1 = \"\"\n    for j in range(n):\n      if coloring[j] == '0':\n        s0 += s[j]\n      else:\n        s1 += s[j]\n\n    sorted_s0 = \"\".join(sorted(s0))\n    sorted_s1 = \"\".join(sorted(s1))\n\n    merged = \"\"\n    idx0 = 0\n    idx1 = 0\n    for j in range(n):\n      if coloring[j] == '0':\n        merged += sorted_s0[idx0]\n        idx0 += 1\n      else:\n        merged += sorted_s1[idx1]\n        idx1 += 1\n\n    if \"\".join(sorted(s)) == merged:\n      print(\"YES\")\n      print(coloring)\n      return\n\n  print(\"NO\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n  n, k = map(int, input().split())\n\n  if k * (k + 1) // 2 > n:\n    print(\"NO\")\n    return\n\n  a = [i + 1 for i in range(k)]\n  remaining = n - k * (k + 1) // 2\n\n  for i in range(k):\n    a[i] += remaining // k\n\n  remaining %= k\n\n  for i in range(k - 1, k - 1 - remaining, -1):\n    a[i] += 1\n\n  for i in range(k - 1):\n    if a[i + 1] > 2 * a[i]:\n      diff = a[i + 1] - 2 * a[i]\n      a[i + 1] -= diff\n      a[k - 1] += diff\n      if a[i+1] <= a[i]:\n          print(\"NO\")\n          return\n\n  for i in range(k-1):\n    if not (a[i] < a[i+1] and a[i+1] <= 2*a[i]):\n        \n        \n        if a[i] >= a[i+1]:\n          print(\"NO\")\n          return\n        if a[i+1] > 2*a[i]:\n          print(\"NO\")\n          return\n\n  if min(a) <= 0:\n      print(\"NO\")\n      return\n  \n  print(\"YES\")\n  print(*a)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def is_valid(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    return False\n        return True\n    \n    def is_palindromic(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[n-1-i][j] or matrix[i][j] != matrix[i][n-1-j]:\n                    return False\n        return True\n    \n    def can_fill(row, col):\n        if row >= (n + 1) // 2:\n            return True\n        \n        if col >= (n + 1) // 2:\n            return can_fill(row + 1, 0)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                counts[num] -= 1\n                matrix[row][col] = num\n                matrix[n-1-row][col] = num\n                matrix[row][n-1-col] = num\n                matrix[n-1-row][n-1-col] = num\n                \n                if can_fill(row, col + 1):\n                    return True\n                \n                counts[num] += 1\n                matrix[row][col] = 0\n                matrix[n-1-row][col] = 0\n                matrix[row][n-1-col] = 0\n                matrix[n-1-row][n-1-col] = 0\n        \n        return False\n    \n    if can_fill(0, 0):\n        if is_valid(matrix) and is_palindromic(matrix):\n            print(\"YES\")\n            for row in matrix:\n                print(*row)\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    min_spaces = m - 1\n    max_spaces = (m + 1) * (d - 1)\n\n    remaining_space = n - total_length\n    \n    if remaining_space > max_spaces:\n        print(\"NO\")\n        return\n\n    arr = [0] * n\n    \n    curr_pos = 0\n    \n    for i in range(m):\n        \n        \n        space_needed = min(remaining_space, d - 1)\n        \n        \n        for j in range(space_needed):\n            arr[curr_pos] = 0\n            curr_pos += 1\n        remaining_space -= space_needed\n\n        for j in range(c[i]):\n            arr[curr_pos] = i + 1\n            curr_pos += 1\n\n    \n    for i in range(remaining_space):\n        arr[curr_pos] = 0\n        curr_pos += 1\n\n    \n    print(\"YES\")\n    print(*arr)\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    max_len = 0\n    \n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            k = 0\n            l = 0\n            \n            while k < len(temp_s) and l < m:\n                if temp_s[k] == t[l]:\n                    l += 1\n                k += 1\n            \n            if l == m:\n                max_len = max(max_len, j - i)\n    \n    print(max_len)\n\nsolve()\n```",
    "92": "```python\nx = float(input())\na = int(x * 2.2360679775) + 1\nb = int(x * 2.2360679775) + 2\nprint(a, b)\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n    \n    if d == 1 and n > 2:\n        print(\"NO\")\n        return\n\n    if k == 1 and n > 2:\n        print(\"NO\")\n        return\n    \n    if d > n - 1:\n       print(\"NO\")\n       return\n\n    edges = []\n    \n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n    \n    remaining_nodes = list(range(d + 2, n + 1))\n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n        \n    if any(degree > k for degree in degrees[1:]):\n        print(\"NO\")\n        return\n\n    # Add nodes to the diameter path\n    current_node = d + 2\n    \n    for i in range(1, d + 2):\n        while degrees[i] < k and remaining_nodes:\n            edges.append((i, remaining_nodes[0]))\n            degrees[i] += 1\n            degrees[remaining_nodes[0]] += 1\n            remaining_nodes.pop(0)\n            \n    if remaining_nodes:\n        print(\"NO\")\n        return\n\n    if any(degree > k for degree in degrees[1:]):\n        print(\"NO\")\n        return\n\n    if len(edges) != n - 1:\n        print(\"NO\")\n        return\n    \n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    s = \"\"\n    \n    if start == 0:\n        s += \"0\"\n        a -= 1\n    else:\n        s += \"1\"\n        b -= 1\n    \n    for i in range(x):\n        if s[-1] == '0':\n            s += \"1\"\n            b -= 1\n        else:\n            s += \"0\"\n            a -= 1\n            \n    if s[-1] == '0':\n        s += \"0\" * a\n        s += \"1\" * b\n    else:\n        s += \"1\" * b\n        s += \"0\" * a\n        \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    def check(res, s, t):\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                return False\n        return True\n\n    import itertools\n    \n    chars = ['a'] * n + ['b'] * n + ['c'] * n\n    \n    for p in itertools.permutations(chars):\n        res = \"\".join(p)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        \n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            if not (1 <= next_element <= n):\n                valid = False\n                break\n            p.append(next_element)\n            \n        if not valid:\n            continue\n            \n        if len(set(p)) == n:\n            print(*p)\n            return\n\n    print(\"-1\")\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    ans = float('inf')\n    for target in range(1, 101):\n        cost = 0\n        for i in range(n):\n            cost += abs(x[i] - target) % 2\n        ans = min(ans, cost)\n    \n    print(ans)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3 - a2) - b2, a2 - (b2 + b1 - a3) - b3, a3 - (b3 + b2 - a1) - b1)\n\n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    zero_wins = max(0, min(a1, b1), min(a2, b2), min(a3, b3))\n\n    min_wins = 0\n    \n    \n    \n    # Calculate minimum wins\n    rem_a1 = a1 - min(a1,b1)\n    rem_a2 = a2 - min(a2,b2)\n    rem_a3 = a3 - min(a3,b3)\n    \n    rem_b1 = b1 - min(a1,b1)\n    rem_b2 = b2 - min(a2,b2)\n    rem_b3 = b3 - min(a3,b3)\n    \n    min_wins = max(0, a1 - (b1 + b3), a2 - (b2 + b1), a3 - (b3 + b2))\n    \n    def calculate_min_wins():\n        wins = 0\n        \n        #Alice: rock, Bob: scissors\n        x = min(a1, b2)\n        wins += x\n        a1 -= x\n        b2 -= x\n\n        #Alice: scissors, Bob: paper\n        x = min(a2, b3)\n        wins += x\n        a2 -= x\n        b3 -= x\n        \n        #Alice: paper, Bob: rock\n        x = min(a3, b1)\n        wins += x\n        a3 -= x\n        b1 -= x\n        \n        return wins\n    \n    def calculate_max_wins():\n    \n        wins = 0\n\n        #Alice: rock, Bob: scissors\n        x = min(a1, b2)\n        wins += x\n\n        #Alice: scissors, Bob: paper\n        x = min(a2, b3)\n        wins += x\n\n        #Alice: paper, Bob: rock\n        x = min(a3, b1)\n        wins += x\n        \n        return wins\n    \n    max_wins = calculate_max_wins()\n\n    \n    \n    \n    \n    \n    \n    print(min_wins, max_wins)\n\nsolve()\n```"
}