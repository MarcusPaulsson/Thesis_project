{
    "0": "```python\ndef solve():\n    n = int(input())\n    words = []\n    for _ in range(n):\n        words.append(input())\n\n    def reverse_word(word):\n        return word[::-1]\n\n    def check(reversed_indices):\n        modified_words = []\n        for i in range(n):\n            if i in reversed_indices:\n                modified_words.append(reverse_word(words[i]))\n            else:\n                modified_words.append(words[i])\n        \n        if len(set(modified_words)) != n:\n            return False\n\n        def can_arrange(arr):\n            if not arr:\n                return True\n            \n            import itertools\n            \n            for p in itertools.permutations(arr):\n                valid = True\n                for i in range(len(p) - 1):\n                    if p[i][-1] != p[i+1][0]:\n                        valid = False\n                        break\n                if valid:\n                    return True\n            return False\n        \n        return can_arrange(modified_words)\n\n    \n    min_reversed = float('inf')\n    best_reversed_indices = []\n\n    for i in range(1 << n):\n        reversed_indices = []\n        for j in range(n):\n            if (i >> j) & 1:\n                reversed_indices.append(j)\n        \n        if check(reversed_indices):\n            if len(reversed_indices) < min_reversed:\n                min_reversed = len(reversed_indices)\n                best_reversed_indices = reversed_indices\n    \n    if min_reversed == float('inf'):\n        print(\"-1\")\n    else:\n        print(min_reversed)\n        if min_reversed > 0:\n            print(*(x + 1 for x in best_reversed_indices))\n        \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "1": "```python\ndef solve():\n    q = int(input())\n    for _ in range(q):\n        n, m, k = map(int, input().split())\n        \n        if n > k or m > k:\n            print(-1)\n            continue\n        \n        if n == m:\n            print(k)\n        else:\n            if (k - max(n, m)) % 2 == 0:\n                print(k)\n            else:\n                print(k - 2)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    p = [0] * n\n    p[0] = a[0]\n\n    for i in range(1, n):\n        if a[i] != p[i-1]:\n            p[i] = a[i]\n        elif b[i] != p[i-1]:\n            p[i] = b[i]\n        else:\n            p[i] = c[i]\n\n    if p[n-1] == p[0]:\n        if a[n-1] != p[n-2] and a[n-1] != p[0]:\n          p[n-1] = a[n-1]\n        elif b[n-1] != p[n-2] and b[n-1] != p[0]:\n          p[n-1] = b[n-1]\n        else:\n          p[n-1] = c[n-1]\n    print(*p)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "3": "```python\ndef solve():\n  n, k = map(int, input().split())\n  a = list(map(int, input().split()))\n  \n  total_sum = sum(a)\n  \n  max_diff = 0\n  \n  \n  max_diff = 0\n  \n  \n  \n  \n  max_diff = 0\n  \n  sorted_a = sorted(a, reverse=True)\n  \n  \n  \n  \n  \n  \n  \n  max_sum = sum(sorted_a[:k+1])\n  \n  \n  print(max_sum)\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "4": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    ans = \"\"\n    for m in range(1, n + 1):\n        beautiful = False\n        for l in range(n):\n            for r in range(l, n):\n                sub_array = p[l:r+1]\n                sub_array.sort()\n                \n                if len(sub_array) == m:\n                    is_permutation = True\n                    for i in range(m):\n                        if sub_array[i] != i + 1:\n                            is_permutation = False\n                            break\n                    if is_permutation:\n                        beautiful = True\n                        break\n            if beautiful:\n                break\n        \n        if beautiful:\n            ans += \"1\"\n        else:\n            ans += \"0\"\n    \n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "5": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    results = []\n    \n    for l1 in range(1, n):\n        l2 = n - l1\n        p1 = a[:l1]\n        p2 = a[l1:]\n        \n        m1 = max(p1)\n        m2 = max(p2)\n        \n        if all(1 <= x <= m1 for x in p1) and all(1 <= x <= m2 for x in p2):\n            if len(set(p1)) == l1 and len(set(p2)) == l2 and m1 == l1 and m2 == l2:\n                results.append((l1, l2))\n    \n    print(len(results))\n    for l1, l2 in results:\n        print(l1, l2)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "6": "```python\ndef solve():\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n\n    def is_safe(closed_spots):\n        adj = {}\n        for i in range(1, n + 1):\n            adj[i] = []\n        \n        for u, v in edges:\n            if u not in closed_spots and v not in closed_spots:\n                adj[u].append(v)\n\n        for start_node in range(1, n + 1):\n            if start_node in closed_spots:\n                continue\n            \n            q = [(start_node, [start_node])]\n            \n            while q:\n                curr_node, path = q.pop(0)\n                \n                if len(path) > 1:\n                    return False\n                \n                for neighbor in adj[curr_node]:\n                    q.append((neighbor, path + [neighbor]))\n\n        return True\n\n    for i in range(1 << n):\n        closed_spots = []\n        for j in range(n):\n            if (i >> j) & 1:\n                closed_spots.append(j + 1)\n        \n        if len(closed_spots) <= (4/7) * n:\n            if is_safe(closed_spots):\n                print(len(closed_spots))\n                print(*closed_spots)\n                return\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": null,
    "8": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    def calculate_score(s):\n        score = 0\n        for i in range(len(s)):\n            if s[i] == 'W':\n                if i == 0:\n                    score += 1\n                elif s[i-1] == 'W':\n                    score += 2\n                else:\n                    score += 1\n        return score\n    \n    max_score = 0\n    for i in range(1 << n):\n        temp_s = list(s)\n        changes = 0\n        for j in range(n):\n            if (i >> j) & 1:\n                if temp_s[j] == 'W':\n                    temp_s[j] = 'L'\n                else:\n                    temp_s[j] = 'W'\n                changes += 1\n        \n        if changes <= k:\n            max_score = max(max_score, calculate_score(\"\".join(temp_s)))\n\n    \n    \n    initial_wins = s.count('W')\n    if initial_wins + k >= n:\n        print(2 * n - 1)\n        return\n\n    \n    wins = 0\n    for i in range(n):\n        if s[i] == 'W':\n            wins += 1\n    \n    if wins == 0:\n        if k == 0:\n            print(0)\n        else:\n            print(2 * k - 1)\n        return\n    \n\n    gaps = []\n    start = -1\n    end = -1\n    \n    first_win = -1\n    last_win = -1\n    \n    for i in range(n):\n        if s[i] == 'W':\n            if first_win == -1:\n                first_win = i\n            last_win = i\n    \n    i = 0\n    while i < n:\n        if s[i] == 'L':\n            start = i\n            while i < n and s[i] == 'L':\n                i += 1\n            end = i - 1\n            gaps.append((start, end))\n        else:\n            i += 1\n    \n    gaps.sort(key=lambda x: x[1] - x[0] + 1)\n    \n    new_s = list(s)\n    \n    for start, end in gaps:\n        length = end - start + 1\n        if k >= length:\n            for i in range(start, end + 1):\n                new_s[i] = 'W'\n            k -= length\n    \n    \n    \n    if k > 0:\n        for i in range(n):\n            if new_s[i] == 'L' and k > 0:\n                new_s[i] = 'W'\n                k -= 1\n    \n    \n\n    print(calculate_score(\"\".join(new_s)))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "9": "```python\ndef solve():\n  s = input()\n  groups = []\n  i = 0\n  while i < len(s):\n    j = i\n    while j < len(s) and s[j] == s[i]:\n      j += 1\n    groups.append(s[i])\n    i = j\n  \n  alice_score = 0\n  \n  while len(groups) > 0:\n    max_len = 0\n    max_index = -1\n    \n    curr_len = 1\n    for i in range(1, len(groups)):\n      if groups[i] == groups[i-1]:\n        curr_len+=1\n      else:\n        if curr_len > max_len:\n          max_len = curr_len\n          max_index = i-1\n        curr_len = 1\n    if curr_len > max_len:\n        max_len = curr_len\n        max_index = len(groups)-1\n    \n    \n    if max_index != -1:\n        \n        start_index = max_index\n        while start_index >= 0 and groups[start_index] == groups[max_index]:\n            start_index -= 1\n            \n        start_index+=1\n        \n        end_index = max_index\n        \n        while end_index < len(groups) and groups[end_index] == groups[max_index]:\n          end_index+=1\n        \n        end_index-=1\n        \n        \n        count_ones = 0\n        for i in range(start_index, end_index+1):\n          if groups[i] == '1':\n            count_ones+=1\n        \n        alice_score+=count_ones\n        \n        \n        new_groups = []\n        for i in range(0, start_index):\n            new_groups.append(groups[i])\n        \n        for i in range(end_index+1, len(groups)):\n            new_groups.append(groups[i])\n            \n        groups = new_groups\n        \n        \n        \n        \n    else:\n        count_ones = 0\n        for i in range(0, len(groups)):\n          if groups[i] == '1':\n            count_ones+=1\n        \n        alice_score+=count_ones\n        groups = []\n        \n        \n        \n        \n        \n        \n    \n    if len(groups) == 0:\n        break\n    \n    \n    max_len = 0\n    max_index = -1\n    \n    curr_len = 1\n    for i in range(1, len(groups)):\n      if groups[i] == groups[i-1]:\n        curr_len+=1\n      else:\n        if curr_len > max_len:\n          max_len = curr_len\n          max_index = i-1\n        curr_len = 1\n    if curr_len > max_len:\n        max_len = curr_len\n        max_index = len(groups)-1\n    \n    \n    if max_index != -1:\n        \n        start_index = max_index\n        while start_index >= 0 and groups[start_index] == groups[max_index]:\n            start_index -= 1\n            \n        start_index+=1\n        \n        end_index = max_index\n        \n        while end_index < len(groups) and groups[end_index] == groups[max_index]:\n          end_index+=1\n        \n        end_index-=1\n        \n        \n        \n        \n        new_groups = []\n        for i in range(0, start_index):\n            new_groups.append(groups[i])\n        \n        for i in range(end_index+1, len(groups)):\n            new_groups.append(groups[i])\n            \n        groups = new_groups\n        \n        \n        \n        \n    else:\n        groups = []\n    \n        \n  print(alice_score)\n  \nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "10": null,
    "11": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    def calculate_grid_area(seq):\n        x, y = 0, 0\n        min_x, max_x = 0, 0\n        min_y, max_y = 0, 0\n        \n        for move in seq:\n            if move == 'W':\n                y -= 1\n            elif move == 'S':\n                y += 1\n            elif move == 'A':\n                x -= 1\n            elif move == 'D':\n                x += 1\n            \n            min_x = min(min_x, x)\n            max_x = max(max_x, x)\n            min_y = min(min_y, y)\n            max_y = max(max_y, y)\n        \n        width = max_x - min_x + 1\n        height = max_y - min_y + 1\n        return width * height\n    \n    best_area = calculate_grid_area(s)\n    \n    for i in range(n + 1):\n        for extra_move in ['W', 'A', 'S', 'D']:\n            temp_s = s[:i] + extra_move + s[i:]\n            best_area = min(best_area, calculate_grid_area(temp_s))\n            \n    print(best_area)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    possible = True\n    \n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        \n        if a[i] < b[i]:\n            found_positive = False\n            for j in range(i):\n                if a[j] == 1:\n                    found_positive = True\n                    break\n            if not found_positive:\n                possible = False\n                break\n        else:\n            found_negative = False\n            for j in range(i):\n                if a[j] == -1:\n                    found_negative = True\n                    break\n            if not found_negative:\n                possible = False\n                break\n    \n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "13": "```python\ndef solve():\n    n, g, b = map(int, input().split())\n    \n    required_good = (n + 1) // 2\n    \n    cycles = (required_good + g - 1) // g\n    \n    total_days = (cycles - 1) * (g + b) + required_good\n    \n    print(max(total_days, n))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "14": "```python\ndef solve():\n  a1, b1 = map(int, input().split())\n  a2, b2 = map(int, input().split())\n\n  if a1 == a2 and a1 + b1 == b2:\n    print(\"YES\")\n  elif a1 == b2 and a1 + b1 == a2:\n    print(\"YES\")\n  elif b1 == a2 and b1 + a1 == b2:\n    print(\"YES\")\n  elif b1 == b2 and b1 + a1 == a2:\n    print(\"YES\")\n  elif a1 == a2 and a1 + b2 == b1:\n    print(\"YES\")\n  elif a1 == b2 and a1 + a2 == b1:\n    print(\"YES\")\n  elif b1 == a2 and b1 + b2 == a1:\n    print(\"YES\")\n  elif b1 == b2 and b1 + a2 == a1:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "15": "```python\ndef solve():\n    a, b, x, y = map(int, input().split())\n    \n    ans = 0\n    \n    # Case 1: Window above the dead pixel\n    ans = max(ans, a * y)\n    \n    # Case 2: Window below the dead pixel\n    ans = max(ans, a * (b - y - 1))\n    \n    # Case 3: Window to the left of the dead pixel\n    ans = max(ans, b * x)\n    \n    # Case 4: Window to the right of the dead pixel\n    ans = max(ans, b * (a - x - 1))\n    \n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "16": "```python\ndef solve():\n    n = int(input())\n    C, T = map(float, input().split())\n    problems = []\n    for _ in range(n):\n        a, p = map(int, input().split())\n        problems.append((a, p))\n    \n    max_score = 0\n    \n    import itertools\n    for perm in itertools.permutations(problems):\n        for train_time in range(int(T * 1000) + 1):\n            train_time /= 1000.0\n            \n            if train_time > T:\n                continue\n            \n            current_time = train_time\n            current_skill = 1.0 + C * train_time\n            current_score = 0\n            \n            for a, p in perm:\n                if current_time + 10 > T:\n                    break\n                current_time += 10\n                current_skill *= 0.9\n                \n                solve_time = a / current_skill\n                if current_time + solve_time > T:\n                    break\n                current_time += solve_time\n                current_score += p\n            \n            max_score = max(max_score, current_score)\n    \n    print(int(max_score))\n\ntc = int(input())\nfor _ in range(tc):\n    solve()\n```",
    "17": null,
    "18": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    ans = 1 / math.tan(math.pi / (2 * n))\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "19": "```python\ndef solve():\n    n, k, d = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    min_shows = float('inf')\n\n    for i in range(n - d + 1):\n        segment = a[i:i+d]\n        unique_shows = len(set(segment))\n        min_shows = min(min_shows, unique_shows)\n\n    print(min_shows)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n  n, m = map(int, input().split())\n  customers = []\n  for _ in range(n):\n    customers.append(list(map(int, input().split())))\n\n  low = m\n  high = m\n  prev_time = 0\n\n  for t, l, h in customers:\n    time_diff = t - prev_time\n    low -= time_diff\n    high += time_diff\n\n    if high < l or low > h:\n      print(\"NO\")\n      return\n\n    low = max(low, l)\n    high = min(high, h)\n    prev_time = t\n\n  print(\"YES\")\n\n\nq = int(input())\nfor _ in range(q):\n  solve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n\n    for k in range(1, 1024):\n        new_s = sorted([x ^ k for x in s])\n        if new_s == s:\n            print(k)\n            return\n\n    print(-1)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "22": "```python\ndef minDigit(x):\n    s = str(x)\n    min_digit = 9\n    for digit in s:\n        min_digit = min(min_digit, int(digit))\n    return min_digit\n\ndef maxDigit(x):\n    s = str(x)\n    max_digit = 0\n    for digit in s:\n        max_digit = max(max_digit, int(digit))\n    return max_digit\n\ndef solve():\n    a1, k = map(int, input().split())\n    a = a1\n    for i in range(1, int(min(k, 100001))):\n        min_d = minDigit(a)\n        max_d = maxDigit(a)\n        if min_d == 0:\n            break\n        a = a + min_d * max_d\n    print(a)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "23": null,
    "24": "```python\nimport math\n\ndef solve():\n    d = int(input())\n    \n    delta = d * d - 4 * d\n    \n    if delta < 0:\n        print(\"N\")\n    else:\n        sqrt_delta = math.sqrt(delta)\n        a = (d + sqrt_delta) / 2\n        b = (d - sqrt_delta) / 2\n        \n        print(\"Y\", a, b)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "25": "```python\ndef solve():\n    n = int(input())\n    triangles = []\n    for _ in range(n - 2):\n        triangles.append(list(map(int, input().split())))\n\n    def check_permutation(permutation, triangle_order):\n        adj = [[] for _ in range(n + 1)]\n        for i in range(n):\n            adj[permutation[i]].append(permutation[(i + 1) % n])\n            adj[permutation[(i + 1) % n]].append(permutation[i])\n\n        for triangle_index in triangle_order:\n            a, b, c = triangles[triangle_index - 1]\n            \n            a_index = permutation.index(a)\n            b_index = permutation.index(b)\n            c_index = permutation.index(c)\n            \n            indices = sorted([a_index, b_index, c_index])\n\n            if indices[1] - indices[0] == 1 and indices[2] - indices[1] == 1:\n                \n                new_adj = [[] for _ in range(n + 1)]\n                for i in range(n):\n                    if permutation[i] not in [a,b,c]:\n                        new_adj[permutation[i]].append(permutation[(i + 1) % n])\n                        new_adj[permutation[(i + 1) % n]].append(permutation[i])\n                \n                \n                \n                if a in adj[b] and b in adj[a]:\n                    adj[a].remove(b)\n                    adj[b].remove(a)\n                if a in adj[c] and c in adj[a]:\n                    adj[a].remove(c)\n                    adj[c].remove(a)\n                if b in adj[c] and c in adj[b]:\n                    adj[b].remove(c)\n                    adj[c].remove(b)\n                    \n               \n                \n                continue\n            elif indices[0] == 0 and indices[1] == 1 and indices[2] == n-1:\n                \n                new_adj = [[] for _ in range(n + 1)]\n                for i in range(n):\n                    if permutation[i] not in [a,b,c]:\n                        new_adj[permutation[i]].append(permutation[(i + 1) % n])\n                        new_adj[permutation[(i + 1) % n]].append(permutation[i])\n                \n                if a in adj[b] and b in adj[a]:\n                    adj[a].remove(b)\n                    adj[b].remove(a)\n                if a in adj[c] and c in adj[a]:\n                    adj[a].remove(c)\n                    adj[c].remove(a)\n                if b in adj[c] and c in adj[b]:\n                    adj[b].remove(c)\n                    adj[c].remove(b)\n                    \n                \n                continue\n            else:\n                \n                return False\n        return True\n\n    import itertools\n    for permutation in itertools.permutations(range(1, n + 1)):\n        permutation = list(permutation)\n        \n        for triangle_order in itertools.permutations(range(1, n - 1 + 1)):\n            triangle_order = list(triangle_order)\n            \n            if check_permutation(permutation, triangle_order):\n                print(*permutation)\n                print(*triangle_order)\n                return\n\n    for permutation in itertools.permutations(range(1, n + 1)):\n        permutation = list(permutation)\n        permutation = permutation[::-1]\n\n        for triangle_order in itertools.permutations(range(1, n - 1 + 1)):\n            triangle_order = list(triangle_order)\n            \n            if check_permutation(permutation, triangle_order):\n                print(*permutation)\n                print(*triangle_order)\n                return\n\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "26": "```python\ndef solve():\n    n, m = map(int, input().split())\n    if (n == 1 and m > 0) or (m == 1 and n > 0):\n        print(\"YES\")\n    elif n == 2 and m == 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    moves = 0\n    seen = set()\n    \n    while True:\n        all_odd = True\n        for x in a:\n            if x % 2 == 0:\n                all_odd = False\n                break\n        \n        if all_odd:\n            break\n        \n        even_nums = set()\n        for x in a:\n            if x % 2 == 0:\n                even_nums.add(x)\n        \n        if not even_nums:\n            break\n            \n        c = min(even_nums)\n        if c in seen:\n            \n            even_nums.remove(c)\n            if not even_nums:\n                break\n            c = min(even_nums)\n        \n        \n        if c in seen:\n            break\n                \n        seen.add(c)\n        \n        for i in range(n):\n            if a[i] == c:\n                a[i] //= 2\n        moves += 1\n    \n    print(moves)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    target = \"abacaba\"\n    \n    def check(modified_s):\n        count = 0\n        for i in range(n - 6):\n            if modified_s[i:i+7] == target:\n                count += 1\n        return count\n    \n    def replace_all(modified_s):\n        result = \"\"\n        for char in modified_s:\n            if char == '?':\n                result += 'd'\n            else:\n                result += char\n        return result\n    \n    for i in range(n - 6):\n        temp_s = list(s)\n        possible = True\n        for j in range(7):\n            if temp_s[i+j] == '?':\n                temp_s[i+j] = target[j]\n            elif temp_s[i+j] != target[j]:\n                possible = False\n                break\n        \n        if possible:\n            modified_s = \"\".join(temp_s)\n            \n            final_s = replace_all(modified_s)\n            \n            if check(final_s) == 1:\n                print(\"Yes\")\n                print(final_s)\n                return\n    \n    print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "29": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    results = []\n    for k in range(1, n + 1):\n        amazing_number = -1\n        \n        candidates = set()\n        for i in range(n - k + 1):\n            subsegment = a[i:i+k]\n            if i == 0:\n                candidates = set(subsegment)\n            else:\n                candidates = candidates.intersection(set(subsegment))\n        \n        if candidates:\n            amazing_number = min(candidates)\n\n        results.append(amazing_number)\n\n    print(*results)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```"
}