{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    best_len = -1\n    \n    for i in range(n):\n        if s[i] == '[':\n            for j in range(i + 1, n):\n                if s[j] == ':':\n                    for k in range(j + 1, n):\n                        for l in range(k, n):\n                            if s[l] == ':':\n                                for m in range(l + 1, n):\n                                    if s[m] == ']':\n                                        \n                                        sub = s[i:m+1]\n                                        \n                                        \n                                        first_bracket = -1\n                                        first_colon = -1\n                                        second_colon = -1\n                                        second_bracket = -1\n                                        \n                                        \n                                        for idx in range(len(sub)):\n                                            if sub[idx] == '[':\n                                                first_bracket = idx\n                                                break\n                                                \n                                        for idx in range(first_bracket + 1, len(sub)):\n                                            if sub[idx] == ':':\n                                                first_colon = idx\n                                                break\n                                                \n                                        for idx in range(len(sub) - 1, first_colon, -1):\n                                            if sub[idx] == ']':\n                                                second_bracket = idx\n                                                break\n                                                \n                                        if second_bracket == -1:\n                                            continue\n                                        \n                                        for idx in range(second_bracket - 1, first_colon, -1):\n                                            if sub[idx] == ':':\n                                                second_colon = idx\n                                                break\n                                                \n                                        if first_bracket != 0 or first_colon == -1 or second_colon == -1 or second_bracket != len(sub) -1:\n                                            continue\n                                        \n                                        \n                                        num_pipes = 0\n                                        for idx in range(first_colon + 1, second_colon):\n                                            if sub[idx] == '|':\n                                                num_pipes += 1\n                                        \n                                        curr_len = 2 + 2 + num_pipes\n                                        \n                                        best_len = max(best_len, curr_len)\n                                        \n    print(best_len)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n  x = int(input())\n  s = str(x)\n  n = len(s)\n  \n  best_num = x\n  best_sum = sum(int(digit) for digit in s)\n  \n  for i in range(n):\n    if s[i] == '0':\n      continue\n      \n    num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n    num = int(num_str)\n    \n    if num <= 0:\n        continue\n    \n    curr_sum = sum(int(digit) for digit in num_str)\n    \n    if curr_sum > best_sum:\n      best_sum = curr_sum\n      best_num = num\n    elif curr_sum == best_sum and num > best_num:\n      best_num = num\n      \n  print(best_num)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n  n = int(input())\n  s = str(n)\n  l = len(s)\n  first_digit = int(s[0])\n  \n  next_lucky = (first_digit + 1) * (10 ** (l - 1))\n  \n  print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n, q = map(int, input().split())\n    painters = []\n    for _ in range(q):\n        l, r = map(int, input().split())\n        painters.append((l, r))\n\n    max_painted = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            remaining_painters = []\n            for k in range(q):\n                if k != i and k != j:\n                    remaining_painters.append(painters[k])\n\n            painted_sections = [0] * n\n            for l, r in remaining_painters:\n                for section in range(l - 1, r):\n                    painted_sections[section] = 1\n\n            max_painted = max(max_painted, sum(painted_sections))\n\n    print(max_painted)\n\nsolve()\n```",
    "4": "```python\nx = int(input())\nhh, mm = map(int, input().split())\n\ncount = 0\nwhile True:\n    h_str = str(hh).zfill(2)\n    m_str = str(mm).zfill(2)\n    \n    if '7' in h_str or '7' in m_str:\n        print(count)\n        break\n    \n    mm -= x\n    if mm < 0:\n        mm += 60\n        hh -= 1\n        if hh < 0:\n            hh += 24\n    \n    count += 1\n```",
    "5": null,
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    ans = float('inf')\n\n    for i in range(n):\n        if blows[i][0] >= x:\n            ans = min(ans, 1)\n            \n    if ans == 1:\n        print(1)\n        return\n        \n    \n    max_diff = 0\n    max_damage = 0\n    \n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n        max_damage = max(max_damage, d)\n        \n    if max_diff <= 0:\n        if max_damage >= x:\n            print(1)\n        else:\n            print(-1)\n        return\n\n    \n    remaining = x - max_damage\n    \n    if remaining <= 0:\n        print(1)\n        return\n    \n    \n    num_blows = (remaining + max_diff - 1) // max_diff\n    \n    print(num_blows + 1)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n  n, m = map(int, input().split())\n  \n  grains = n\n  day = 0\n  \n  while True:\n    day += 1\n    \n    grains += m\n    grains = min(n, grains)\n    \n    grains -= day\n    \n    if grains <= 0:\n      print(day)\n      return\n\nsolve()\n```",
    "8": null,
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for i in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    for i in range(d):\n        l, r, t, b = 0, 0, 0, 0\n        for j in range(d):\n            if i == j:\n                continue\n\n            x1_i, y1_i, x2_i, y2_i = sofas[i]\n            x1_j, y1_j, x2_j, y2_j = sofas[j]\n\n            min_x_i = min(x1_i, x2_i)\n            max_x_i = max(x1_i, x2_i)\n            min_y_i = min(y1_i, y2_i)\n            max_y_i = max(y1_i, y2_i)\n\n            min_x_j = min(x1_j, x2_j)\n            max_x_j = max(x1_j, x2_j)\n            min_y_j = min(y1_j, y2_j)\n            max_y_j = max(y1_j, y2_j)\n            \n            if min_x_i > max_x_j:\n                l += 1\n            if max_x_i < min_x_j:\n                r += 1\n            if min_y_i > max_y_j:\n                t += 1\n            if max_y_i < min_y_j:\n                b += 1\n\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n  n = int(input())\n  \n  min_days_off = (n // 7) * 2\n  max_days_off = (n // 7) * 2\n  \n  remaining_days = n % 7\n  \n  if remaining_days == 1:\n    min_days_off += 0\n    max_days_off += 1\n  elif remaining_days == 2:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 3:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 4:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 5:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 6:\n    min_days_off += 1\n    max_days_off += 2\n  \n  print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```cpp\n#include <iostream>\n\nlong long gcd(long long a, long long b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nlong long lcm(long long a, long long b) {\n    return (a * b) / gcd(a, b);\n}\n\nint main() {\n    long long n, a, b, p, q;\n    std::cin >> n >> a >> b >> p >> q;\n    \n    long long red_count = n / a;\n    long long blue_count = n / b;\n    long long common_count = n / lcm(a, b);\n    \n    long long total_chocolates;\n    \n    if (p > q) {\n        total_chocolates = red_count * p + (blue_count - common_count) * q;\n    } else {\n        total_chocolates = blue_count * q + (red_count - common_count) * p;\n    }\n    \n    std::cout << total_chocolates << std::endl;\n    \n    return 0;\n}\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    golds = s.count('G')\n    \n    if golds == 0:\n        print(0)\n        return\n    \n    if golds == n:\n        print(n)\n        return\n    \n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            temp_s = list(s)\n            temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n            temp_s = \"\".join(temp_s)\n            \n            curr_len = 0\n            max_curr_len = 0\n            for k in range(n):\n                if temp_s[k] == 'G':\n                    curr_len += 1\n                    max_curr_len = max(max_curr_len, curr_len)\n                else:\n                    curr_len = 0\n            \n            max_len = max(max_len, min(max_curr_len, golds))\n    \n    print(max_len)\n\nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = set(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    indegree = [0] * n\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep - 1].append(i)\n            indegree[i] += 1\n\n    q = deque()\n    for i in range(n):\n        if indegree[i] == 0:\n            q.append(i)\n    \n    result = []\n    visited = [False] * n\n    main_courses_reached = set()\n\n    while q:\n        u = q.popleft()\n        result.append(u + 1)\n        visited[u] = True\n\n        if u + 1 in main_courses:\n            main_courses_reached.add(u + 1)\n\n        for v in adj[u]:\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                q.append(v)\n\n    if len(result) != n:\n        print(\"-1\")\n        return\n\n    \n    required_courses = set()\n    q = deque()\n    for course in main_courses:\n        q.append(course - 1)\n        required_courses.add(course - 1)\n\n    while q:\n        u = q.popleft()\n        for dep in dependencies[u]:\n            if dep - 1 not in required_courses:\n                required_courses.add(dep - 1)\n                q.append(dep - 1)\n                \n\n    \n    ans = []\n    indegree = [0] * n\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n       \n        for dep in dependencies[i]:\n            if (i in required_courses) and (dep-1 in required_courses):\n                adj[dep - 1].append(i)\n                indegree[i] += 1\n    \n    q = deque()\n    for i in range(n):\n        if indegree[i] == 0 and (i in required_courses):\n            q.append(i)\n    \n    while q:\n        u = q.popleft()\n        ans.append(u + 1)\n        \n        for v in adj[u]:\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                q.append(v)\n                \n    if len(ans) != len(required_courses):\n        print(\"-1\")\n        return\n    \n    print(len(ans))\n    print(*ans)\n    \n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = set(p)\n    remaining = []\n    for i in range(n, 0, -1):\n        if i not in used:\n            remaining.append(i)\n\n    p += remaining\n\n    def is_stack_sortable(arr):\n        s = []\n        b = []\n        i = 0\n        while i < len(arr) or len(s) > 0:\n            if len(s) > 0 and s[-1] == min(arr[i:] + s):\n                b.append(s.pop())\n            elif i < len(arr):\n                s.append(arr[i])\n                i += 1\n            else:\n                return False\n        \n        for i in range(len(b) - 1):\n            if b[i] > b[i+1]:\n                return False\n        return True\n\n    if is_stack_sortable(p):\n        print(*p)\n    else:\n        print(-1)\n\nsolve()\n```",
    "15": null,
    "16": "```python\ncnt1 = int(input())\ncnt2 = int(input())\ncnt3 = int(input())\ncnt4 = int(input())\n\nif cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n    if cnt1 > 0 or cnt2 > 0 or cnt3 > 0 or cnt4 > 0:\n      print(1)\n    else:\n      print(1)\nelse:\n    print(0)\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ns = input()\nn = len(s)\nmin_suffix = [''] * (n + 1)\nmin_suffix[n] = 'z'\nfor i in range(n - 1, -1, -1):\n    min_suffix[i] = min(s[i], min_suffix[i + 1])\n\nt = []\nu = ''\nfor i in range(n):\n    t.append(s[i])\n    while t and t[-1] <= min_suffix[i + 1]:\n        u += t.pop()\nprint(u + ''.join(reversed(t)))\n```",
    "19": "```python\ndef solve():\n  n = int(input())\n  stats = []\n  for _ in range(n):\n    stats.append(list(map(int, input().split())))\n\n  possible = True\n  for i in range(n):\n    if stats[i][1] > stats[i][0]:\n      possible = False\n      break\n    if i > 0:\n      if stats[i][0] < stats[i-1][0] or stats[i][1] < stats[i-1][1]:\n        possible = False\n        break\n      if stats[i][1] - stats[i-1][1] > stats[i][0] - stats[i-1][0]:\n        possible = False\n        break\n\n  if possible:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "20": "```python\ndef is_palindrome(time):\n  return time[0] == time[4] and time[1] == time[3]\n\ndef solve():\n  time_str = input()\n  hh = int(time_str[:2])\n  mm = int(time_str[3:])\n\n  minutes_slept = 0\n  while True:\n    if is_palindrome(f\"{hh:02}:{mm:02}\"):\n      print(minutes_slept)\n      return\n\n    mm += 1\n    if mm == 60:\n      mm = 0\n      hh += 1\n      if hh == 24:\n        hh = 0\n    \n    minutes_slept += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  pos_1 = a.index(1)\n  pos_n = a.index(n)\n\n  ans = 0\n  \n  # Case 1: Swap 1 with the first element\n  temp_a = a[:]\n  temp_a[0], temp_a[pos_1] = temp_a[pos_1], temp_a[0]\n  ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n\n  # Case 2: Swap 1 with the last element\n  temp_a = a[:]\n  temp_a[n-1], temp_a[pos_1] = temp_a[pos_1], temp_a[n-1]\n  ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n\n  # Case 3: Swap n with the first element\n  temp_a = a[:]\n  temp_a[0], temp_a[pos_n] = temp_a[pos_n], temp_a[0]\n  ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n\n  # Case 4: Swap n with the last element\n  temp_a = a[:]\n  temp_a[n-1], temp_a[pos_n] = temp_a[pos_n], temp_a[n-1]\n  ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n  \n  print(ans)\n\nsolve()\n```",
    "22": "```python\ns = input()\nn = len(s)\nsymmetric = {'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p', 'o': 'o', 'x': 'x', 'X': 'X', 'H': 'H', 'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T', 'U': 'U', 'V': 'V', 'v': 'v', 'W': 'W', 'w': 'w', 'Y': 'Y', 'A': 'A'}\nflag = True\nfor i in range(n // 2):\n    if s[i] not in symmetric or symmetric[s[i]] != s[n - i - 1]:\n        flag = False\n        break\nif n % 2 == 1 and s[n // 2] not in symmetric:\n    flag = False\nif flag:\n    print(\"TAK\")\nelse:\n    print(\"NIE\")\n```",
    "23": "```python\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    if len(a) > len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    \n    \n    def find_max_permutation(digits, target, index, current):\n        if index == len(target):\n            return current if current <= target else \"\"\n        \n        best_result = \"\"\n        \n        for i in range(len(digits)):\n            new_digits = digits[:i] + digits[i+1:]\n            new_current = current + digits[i]\n            \n            if new_current[:index] == target[:index] and digits[i] <= target[index]:\n                result = find_max_permutation(new_digits, target, index + 1, new_current)\n                if result != \"\":\n                    if best_result == \"\" or result > best_result:\n                        best_result = result\n        \n        return best_result\n\n    \n    digits = sorted(list(a), reverse=True)\n    target = b\n    result = find_max_permutation(digits, target, 0, \"\")\n    \n    if result == \"\":\n        print(\"\".join(sorted(list(a), reverse=True)))\n    else:\n        print(result)\n        \nsolve()\n```",
    "24": "```python\ndef solve():\n  grid = []\n  for _ in range(10):\n    grid.append(list(input()))\n\n  def check_win(grid):\n    # Check horizontal\n    for row in range(10):\n      for col in range(6):\n        if all(grid[row][col + i] == 'X' for i in range(5)):\n          return True\n\n    # Check vertical\n    for col in range(10):\n      for row in range(6):\n        if all(grid[row + i][col] == 'X' for i in range(5)):\n          return True\n\n    # Check diagonal (top-left to bottom-right)\n    for row in range(6):\n      for col in range(6):\n        if all(grid[row + i][col + i] == 'X' for i in range(5)):\n          return True\n\n    # Check diagonal (top-right to bottom-left)\n    for row in range(6):\n      for col in range(4, 10):\n        if all(grid[row + i][col - i] == 'X' for i in range(5)):\n          return True\n\n    return False\n\n  for row in range(10):\n    for col in range(10):\n      if grid[row][col] == '.':\n        grid[row][col] = 'X'\n        if check_win(grid):\n          print('YES')\n          return\n        grid[row][col] = '.'\n\n  print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n\n    matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n\n        for j in range(i + 1, n):\n            if k >= 2 and matrix[i][j] == 0 and matrix[j][i] == 0:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n    \n    if k > 0:\n      print(\"-1\")\n      return\n\n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\nx, y, z = map(float, input().split())\n\na1 = y**z * (x > 1) + z**y * (x <= 1)\na2 = z**y * (x > 1) + y**z * (x <= 1)\na3 = y * z\na4 = z * y\na5 = x**z * (y > 1) + z**x * (y <= 1)\na6 = z**x * (y > 1) + x**z * (y <= 1)\na7 = x * z\na8 = z * x\na9 = x**y * (z > 1) + y**x * (z <= 1)\na10 = y**x * (z > 1) + x**y * (z <= 1)\na11 = x * y\na12 = y * x\n\nvals = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\nresults = [\"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"]\n\nmax_val = -float('inf')\nmax_index = -1\n\nfor i in range(12):\n  if x > 0 and y > 0 and z > 0:\n    if i < 2:\n      val = x ** vals[i]\n    elif i < 4:\n      val = x ** vals[i]\n    elif i < 6:\n      val = y ** vals[i]\n    elif i < 8:\n      val = y ** vals[i]\n    elif i < 10:\n      val = z ** vals[i]\n    else:\n      val = z ** vals[i]\n\n    if val > max_val:\n      max_val = val\n      max_index = i\n\nprint(results[max_index])\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s[:2*i].startswith(prefix) and s.startswith(prefix * 2):\n            \n            \n            \n            ops = i + 1 + (n - 2*i)\n            ans = min(ans, ops)\n        elif s[:i] == s[i:2*i] and  2*i <= n:\n            ops = i + 1 + (n-2*i)\n            ans = min(ans, ops)\n            \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n  n = int(input())\n  files = []\n  for _ in range(n):\n    files.append(input().split())\n  \n  examples = []\n  regular = []\n  for i in range(n):\n    if files[i][1] == '1':\n      examples.append((files[i][0], i))\n    else:\n      regular.append((files[i][0], i))\n      \n  moves = []\n  \n  e = len(examples)\n  \n  temp_files = []\n  \n  for i in range(e):\n    if examples[i][0] != str(i + 1):\n      temp_files.append((examples[i][0], str(i + 1)))\n      \n  for i in range(len(regular)):\n    if regular[i][0] != str(e + i + 1):\n      temp_files.append((regular[i][0], str(e + i + 1)))\n  \n  \n  \n  \n  conflicts = {}\n  for i in range(e):\n      if examples[i][0] != str(i+1):\n          if str(i+1) in [x[0] for x in examples] or str(i+1) in [x[0] for x in regular]:\n              continue\n          else:\n              moves.append(f\"move {examples[i][0]} {str(i+1)}\")\n              \n  for i in range(len(regular)):\n    if regular[i][0] != str(e + i + 1):\n      if str(e+i+1) in [x[0] for x in examples] or str(e+i+1) in [x[0] for x in regular]:\n              continue\n      else:\n          moves.append(f\"move {regular[i][0]} {str(e + i + 1)}\")\n          \n  examples_left = []\n  for i in range(e):\n      if examples[i][0] != str(i+1):\n          examples_left.append((examples[i][0], str(i+1)))\n  \n  regular_left = []\n  for i in range(len(regular)):\n    if regular[i][0] != str(e + i + 1):\n        regular_left.append((regular[i][0], str(e + i + 1)))\n  \n  temp_names = []\n  for i in range(len(examples_left) + len(regular_left)):\n      temp_names.append(\"tmp\" + str(i+1))\n  \n  temp_idx = 0\n  for i in range(len(examples_left)):\n      moves.append(f\"move {examples_left[i][0]} {temp_names[temp_idx]}\")\n      temp_idx += 1\n  \n  for i in range(len(regular_left)):\n      moves.append(f\"move {regular_left[i][0]} {temp_names[temp_idx]}\")\n      temp_idx += 1\n  \n  temp_idx = 0\n  for i in range(len(examples_left)):\n      moves.append(f\"move {temp_names[temp_idx]} {examples_left[i][1]}\")\n      temp_idx += 1\n      \n  for i in range(len(regular_left)):\n      moves.append(f\"move {temp_names[temp_idx]} {regular_left[i][1]}\")\n      temp_idx += 1\n  \n  print(len(moves))\n  for move in moves:\n    print(move)\n    \nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    digits = [int(c) for c in s]\n    \n    ans = 6\n    \n    for i in range(1000):\n        \n        s1 = str(i).zfill(3)\n        digits1 = [int(c) for c in s1]\n        \n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            digits2 = [int(c) for c in s2]\n            \n            if sum(digits1) == sum(digits2):\n                \n                temp_ans = 0\n                \n                if digits[0] != digits1[0]:\n                    temp_ans += 1\n                if digits[1] != digits1[1]:\n                    temp_ans += 1\n                if digits[2] != digits1[2]:\n                    temp_ans += 1\n                if digits[3] != digits2[0]:\n                    temp_ans += 1\n                if digits[4] != digits2[1]:\n                    temp_ans += 1\n                if digits[5] != digits2[2]:\n                    temp_ans += 1\n                    \n                ans = min(ans, temp_ans)\n    \n    print(ans)\n    \nsolve()\n```",
    "30": "```python\nimport math\n\ndef solve():\n  m, x = map(int, input().split())\n  print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n    \n    if k > 2**n:\n        print(1, 1)\n        return\n    \n    num = 1\n    den = 1\n    \n    for i in range(int(k)):\n        num = (num * (pow(2, n, mod) - i)) % mod\n        den = (den * pow(2, n, mod)) % mod\n    \n    gcd = 1\n    \n    inv_den = pow(den, mod - 2, mod)\n    \n    p_diff = (num * inv_den) % mod\n    \n    a = (1 - p_diff + mod) % mod\n    b = 1\n    \n    print(a, 1)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 is North Pole, 20000 is South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0:\n            if direction != \"South\":\n                print(\"NO\")\n                return\n            current_pos += t\n            if current_pos > 20000:\n                print(\"NO\")\n                return\n        elif current_pos == 20000:\n            if direction != \"North\":\n                print(\"NO\")\n                return\n            current_pos -= t\n            if current_pos < 0:\n                print(\"NO\")\n                return\n        else:\n            if direction == \"North\":\n                current_pos -= t\n                if current_pos < 0:\n                    print(\"NO\")\n                    return\n            elif direction == \"South\":\n                current_pos += t\n                if current_pos > 20000:\n                    print(\"NO\")\n                    return\n            else:\n                pass \n                \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef extended_gcd(a, b):\n  if a == 0:\n    return b, 0, 1\n  d, x1, y1 = extended_gcd(b % a, a)\n  x = y1 - (b // a) * x1\n  y = x1\n  return d, x, y\n\n\ndef crt(a1, m1, a2, m2):\n  g, x, y = extended_gcd(m1, m2)\n  if (a2 - a1) % g != 0:\n    return None, None\n  else:\n    lcm = m1 * m2 // g\n    result = (a1 + (a2 - a1) // g * x % (m2 // g) * m1) % lcm\n    return result, lcm\n\n\na1, b1, a2, b2, L, R = map(int, input().split())\n\nresult, lcm = crt(b1 % a1, a1, b2 % a2, a2)\n\nif result is None:\n  print(0)\nelse:\n  lcm_val = lcm\n  first_val = result\n  \n  start = max(L, max(b1, b2))\n  \n  if first_val < start:\n    k = (start - first_val + lcm_val - 1) // lcm_val\n    first_val += k * lcm_val\n    \n  if first_val > R:\n    print(0)\n  else:\n    count = (R - first_val) // lcm_val + 1\n    print(count)\n```",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        if i > a or n - i > b:\n            continue\n        \n        x1 = a // i\n        x2 = b // (n - i)\n        \n        ans = max(ans, min(x1, x2))\n    \n    print(ans)\n    \nsolve()\n```",
    "35": null,
    "36": "```python\ndef solve():\n    n = int(input())\n    \n    if n == 0:\n        print(0, 0)\n        return\n    \n    l, r = 0, 10**9\n    k = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if 3 * mid * (mid + 1) <= n:\n            k = mid\n            l = mid + 1\n        else:\n            r = mid - 1\n    \n    rem = n - 3 * k * (k + 1)\n    \n    x, y = 2 * k, 0\n    \n    if rem == 0:\n        print(x, y)\n        return\n    \n    if rem <= k:\n        x -= rem * 2\n        print(x, y)\n        return\n    \n    rem -= k\n    x -= k * 2\n    x -= rem\n    y += rem * 2\n    \n    if rem == 0:\n        print(x, y)\n        return\n    \n    if rem <= k:\n        print(x, y)\n        return\n    \n    rem -= k\n    x -= k\n    y += k * 2\n\n    x += rem * 2\n    \n    if rem == 0:\n        print(x, y)\n        return\n\n    if rem <= k:\n        print(x, y)\n        return\n    \n    rem -= k\n    \n    x += k * 2\n    x += rem\n    y -= rem * 2\n\n    if rem == 0:\n        print(x, y)\n        return\n    \n    if rem <= k:\n        print(x, y)\n        return\n    \n    rem -= k\n    x += k\n    y -= k * 2\n    x -= rem * 2\n\n    if rem == 0:\n        print(x, y)\n        return\n    \n    if rem <= k:\n        print(x, y)\n        return\n    \n    rem -= k\n    x -= k * 2\n    x -= rem\n    y += rem * 2\n\n    print(x,y)\nsolve()\n```",
    "37": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    for i in range(c // a + 1):\n        remaining_damage = c - i * a\n        if remaining_damage >= 0 and remaining_damage % b == 0:\n            print(\"Yes\")\n            return\n    \n    print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n    \n    for shift in range(l):\n        shifted_sasha = [(x + shift) % l for x in sasha]\n        shifted_sasha.sort()\n        \n        if kefa == shifted_sasha:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "39": null,
    "40": null,
    "41": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    distances = []\n    \n    for i in range(n):\n        min_dist = float('inf')\n        for j in range(n):\n            if a[j] == 0:\n                dist = abs(i - j)\n                min_dist = min(min_dist, dist)\n        distances.append(min_dist)\n    \n    print(*distances)\n\nsolve()\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    distinct_strings = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            if binary_string not in distinct_strings:\n                count += 1\n                distinct_strings.add(binary_string)\n    \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    angles = []\n    for x, y in vectors:\n        angles.append(math.atan2(y, x))\n\n    min_angle = float('inf')\n    best_pair = (0, 0)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle1 = angles[i]\n            angle2 = angles[j]\n            \n            diff = abs(angle1 - angle2)\n            angle = min(diff, 2 * math.pi - diff)\n\n            if angle < min_angle:\n                min_angle = angle\n                best_pair = (i + 1, j + 1)\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\nd, k, a, b, t = map(int, input().split())\n\nif d <= k:\n  print(d * a)\nelse:\n  if a * k + t >= b * k:\n    print(k * a + (d - k) * b)\n  else:\n    num_breaks = (d // k)\n    remaining = d % k\n    \n    time = num_breaks * (a * k + t)\n    \n    if remaining > 0:\n      time += min(remaining * a, remaining * b + t)\n    else:\n      time -= t\n\n    print(time)\n```",
    "45": "```python\nimport math\n\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"-1\")\n        return\n\n    best_gcd = 0\n    for gcd in range(1, int(math.sqrt(n)) + 1):\n        if n % gcd == 0:\n            if n // gcd >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, gcd)\n            if gcd >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // gcd)\n    \n    if best_gcd == 0:\n        print(\"-1\")\n        return\n\n    seq = []\n    sum_so_far = 0\n    for i in range(1, k):\n        seq.append(best_gcd * i)\n        sum_so_far += best_gcd * i\n    \n    seq.append(n - sum_so_far)\n    \n    if seq[-1] <= seq[-2]:\n        print(\"-1\")\n        return\n\n    print(*seq)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n  n, m = map(int, input().split())\n  count = 0\n  for x in range(1, n + 1):\n    for y in range(1, m + 1):\n      if (x + y) % 5 == 0:\n        count += 1\n  print(count)\n\nsolve()\n```",
    "47": "```python\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_a = a[:]\n            for k in range(i, j):\n                temp_a[k] *= x\n            \n            curr_max = 0\n            max_so_far = 0\n            for k in range(n):\n                curr_max += temp_a[k]\n                if curr_max < 0:\n                    curr_max = 0\n                max_so_far = max(max_so_far, curr_max)\n            \n            ans = max(ans, max_so_far)\n            \n    print(ans)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    \n    low = 1\n    high = n * m\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, mid // i)\n        \n        if count >= k:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    print(low)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\nlength = 1\ncount = 9\nwhile k > length * count:\n    k -= length * count\n    length += 1\n    count *= 10\n\nnum = 10**(length - 1) + (k - 1) // length\nindex = (k - 1) % length\n\nprint(str(num)[index])\n```",
    "50": null,
    "51": null,
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n    def get_dp(row_idx, rem):\n        if row_idx == n:\n            return 0 if rem == 0 else -float('inf')\n        \n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n\n        max_sum = -float('inf')\n        \n        # Option 1: Don't choose any element from the current row\n        max_sum = max(max_sum, get_dp(row_idx + 1, rem))\n\n        # Option 2: Choose some elements from the current row\n        row = a[row_idx]\n        max_elements = m // 2\n        \n        row_dp = {}\n        def get_row_dp(col_idx, count, row_rem):\n            if col_idx == m:\n                return 0 if count <= max_elements else -float('inf')\n            \n            if (col_idx, count, row_rem) in row_dp:\n                return row_dp[(col_idx, count, row_rem)]\n            \n            # Option 1: Don't choose the current element\n            current_max = get_row_dp(col_idx + 1, count, row_rem)\n            \n            # Option 2: Choose the current element\n            current_max = max(current_max, row[col_idx] + get_row_dp(col_idx + 1, count + 1, (row_rem - row[col_idx]) % k))\n            \n            row_dp[(col_idx, count, row_rem)] = current_max\n            return current_max\n        \n        row_result = get_row_dp(0, 0, rem)\n        max_sum = max(max_sum, row_result + get_dp(row_idx + 1, rem))\n\n        dp[(row_idx, rem)] = max_sum\n        return max_sum\n\n    print(get_dp(0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_sequence, remaining_arr, moves):\n            nonlocal max_len, best_moves\n            \n            if not remaining_arr:\n                if len(current_sequence) > max_len:\n                    max_len = len(current_sequence)\n                    best_moves = moves\n                return\n\n            if not current_sequence:\n                # Choose left\n                backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Choose right\n                backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_elem = current_sequence[-1]\n                \n                # Choose left\n                if remaining_arr[0] > last_elem:\n                    backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                \n                # Choose right\n                if remaining_arr[-1] > last_elem:\n                    backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n        \n        backtrack([], arr, \"\")\n        return max_len, best_moves\n    \n    length, moves = find_longest_increasing_sequence(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    unique_values = sorted(list(set(a)))\n\n    if len(unique_values) > 3:\n        print(-1)\n        return\n\n    if len(unique_values) == 1:\n        print(0)\n        return\n\n    if len(unique_values) == 2:\n        x, y = unique_values\n        d = abs(x - y)\n        if d % 2 == 0:\n            print(d // 2)\n        else:\n            print(d)\n        return\n\n    if len(unique_values) == 3:\n        x, y, z = unique_values\n        if y - x == z - y:\n            print(y - x)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n    \n    def intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n        x_overlap = max(0, min(x2, x4) - max(x1, x3))\n        y_overlap = max(0, min(y2, y4) - max(y1, y3))\n        return x_overlap * y_overlap\n    \n    intersection1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    intersection2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n    intersection12 = intersection_area(x3, y3, x4, y4, x5, y5, x6, y6)\n    intersection_white_black12 = intersection_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n    \n    union_area = intersection1 + intersection2 - intersection_white_black12\n    \n    if white_area - union_area > 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nsolve()\n```",
    "56": "```python\ndef f(x):\n    x += 1\n    while x % 10 == 0:\n        x //= 10\n    return x\n\ndef solve():\n    n = int(input())\n    reachable = {n}\n    q = [n]\n    \n    while q:\n        curr = q.pop(0)\n        next_val = f(curr)\n        if next_val not in reachable:\n            reachable.add(next_val)\n            q.append(next_val)\n            \n    print(len(reachable))\n\nsolve()\n```",
    "57": "```python\ndef solve():\n  n = int(input())\n  f = list(map(int, input().split()))\n\n  assigned = [False] * (n + 1)\n  for i in range(n):\n    if f[i] != 0:\n      assigned[f[i]] = True\n\n  unassigned_givers = []\n  unassigned_receivers = []\n  for i in range(n):\n    if f[i] == 0:\n      unassigned_givers.append(i)\n\n  for i in range(1, n + 1):\n    if not assigned[i]:\n      unassigned_receivers.append(i)\n\n  for i in range(len(unassigned_givers)):\n    giver_idx = unassigned_givers[i]\n    receiver = unassigned_receivers[i]\n    \n    if giver_idx + 1 == receiver:\n      if i + 1 < len(unassigned_givers):\n        unassigned_receivers[i], unassigned_receivers[i+1] = unassigned_receivers[i+1], unassigned_receivers[i]\n      else:\n        for j in range(len(unassigned_givers)):\n            if unassigned_givers[j] + 1 != unassigned_receivers[0] and j != i:\n                unassigned_receivers[0], unassigned_receivers[i] = unassigned_receivers[i], unassigned_receivers[0]\n                break\n\n\n  for i in range(len(unassigned_givers)):\n    f[unassigned_givers[i]] = unassigned_receivers[i]\n\n  print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    if any(counts[x] > k for x in counts):\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    colors = [0] * n\n    color_assignment = {}\n    color_idx = 1\n\n    for i in range(n):\n        num = a[i]\n        if num not in color_assignment:\n            color_assignment[num] = []\n        \n        if len(color_assignment[num]) < k:\n            colors[i] = len(color_assignment[num]) + 1\n            color_assignment[num].append(i)\n        \n\n    used_colors = set()\n    \n    for i in range(n):\n       used_colors.add(colors[i])\n   \n    \n    if len(used_colors) < k:\n      indices_to_recolor = []\n      for i in range(n):\n          if colors[i] == 0:\n              indices_to_recolor.append(i)\n\n      \n      available_colors = set(range(1,k+1))\n      for color in used_colors:\n          if color in available_colors:\n              available_colors.remove(color)\n      \n      available_colors = list(available_colors)\n      \n      \n      for i in indices_to_recolor:\n        if len(available_colors) > 0 :\n          colors[i] = available_colors[0]\n          available_colors.pop(0)\n        else:\n          colors[i] = 1\n          \n          \n    \n    \n    used_colors = set()\n    for i in range(n):\n        used_colors.add(colors[i])\n\n    \n    if len(used_colors) < k:\n        \n      \n        empty_color_indices = []\n\n        for i in range(1, k+1):\n            found = False\n            for j in range(n):\n                if colors[j] == i:\n                    found = True\n                    break\n            if not found:\n                empty_color_indices.append(i)\n        \n        \n        if len(empty_color_indices) > 0:\n          print(\"NO\")\n          return\n\n    print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "60": null,
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    best_a = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a = list(a)\n            for k in range(i, j + 1):\n                digit = int(a[k])\n                temp_a[k] = str(f[digit - 1])\n            \n            temp_a_str = \"\".join(temp_a)\n            \n            if temp_a_str > best_a:\n                best_a = temp_a_str\n    \n    print(best_a)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n                    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "63": null,
    "64": null,
    "65": "```python\ndef solve():\n  n, m = map(int, input().split())\n\n  if n == m:\n    print(0)\n    return\n\n  if m % n != 0:\n    print(-1)\n    return\n\n  diff = m // n\n  \n  count = 0\n  while diff % 2 == 0:\n    diff //= 2\n    count += 1\n  while diff % 3 == 0:\n    diff //= 3\n    count += 1\n\n  if diff == 1:\n    print(count)\n  else:\n    print(-1)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    max_overlap = 0\n    for overlap in range(1, n):\n        if t[:n-overlap] == t[overlap:]:\n            max_overlap = n - overlap\n            break\n            \n    if max_overlap == 0:\n        print(t + t * (k - 1))\n    else:\n        print(t + t[max_overlap:] * (k - 1))\n\nsolve()\n```",
    "67": null,
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    subsequence_counts = [dp[n][i] for i in range(n + 1)]\n\n    unique_subsequence_counts = [0] * (n + 1)\n    last_occurrence = {}\n\n    for i in range(n):\n        char = s[i]\n        if char in last_occurrence:\n            index = last_occurrence[char]\n            for j in range(1, i + 1):\n                unique_subsequence_counts[j] = unique_subsequence_counts[j] + dp[i][j] - dp[index][j - 1]\n        else:\n            for j in range(1, i + 1):\n                unique_subsequence_counts[j] = unique_subsequence_counts[j] + dp[i][j]\n        unique_subsequence_counts[0] += 1\n        last_occurrence[char] = i\n\n    total_cost = 0\n    remaining_k = k\n    \n    for length in range(n, -1, -1):\n        count = min(remaining_k, unique_subsequence_counts[length])\n        total_cost += count * (n - length)\n        remaining_k -= count\n        \n        if remaining_k == 0:\n            print(total_cost)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n\n    def build_graph(edge_list):\n        graph = {i: [] for i in range(1, n + 1)}\n        for u, v in edge_list:\n            graph[u].append(v)\n            graph[v].append(u)\n        return graph\n\n    def is_connected(edge_list):\n        if not edge_list:\n            return False if n > 1 else True\n        \n        graph = build_graph(edge_list)\n        visited = set()\n        \n        def dfs(node):\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    dfs(neighbor)\n        \n        dfs(edge_list[0][0])\n        return len(visited) == n\n\n    def find_spanning_tree(edges, d):\n        import itertools\n        for i in itertools.combinations(edges, n - 1):\n            spanning_tree_edges = list(i)\n            if is_connected(spanning_tree_edges):\n                degree = 0\n                for u, v in spanning_tree_edges:\n                    if u == 1 or v == 1:\n                        degree += (u == 1) + (v == 1)\n                \n                degree = sum(1 for u, v in spanning_tree_edges if u == 1 or v == 1)\n                \n                count = 0\n                for u, v in spanning_tree_edges:\n                    if u == 1 or v == 1:\n                        count+=1\n                \n                first_node_degree = 0\n                graph = build_graph(spanning_tree_edges)\n                first_node_degree = len(graph[1])\n                \n                if first_node_degree == d:\n                    return spanning_tree_edges\n        return None\n\n    spanning_tree = find_spanning_tree(edges, d)\n\n    if spanning_tree:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\nsolve()\n```",
    "70": "```python\nh1, m1 = map(int, input().replace(':', ' ').split())\nh2, m2 = map(int, input().replace(':', ' ').split())\n\nstart_minutes = h1 * 60 + m1\nend_minutes = h2 * 60 + m2\n\nmid_minutes = (start_minutes + end_minutes) // 2\n\nh3 = mid_minutes // 60\nm3 = mid_minutes % 60\n\nprint(f\"{h3:02d}:{m3:02d}\")\n```",
    "71": "```python\nimport math\n\na = int(input())\nprint(int(math.ceil(math.log(a, 2))))\n```",
    "72": null,
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n  n, k = map(int, input().split())\n  s = input()\n\n  dp = [[0] * (n + 1) for _ in range(n + 1)]\n  dp[0][0] = 1\n\n  for i in range(1, n + 1):\n    for j in range(i + 1):\n      dp[i][j] = dp[i - 1][j]\n      if j > 0:\n        dp[i][j] += dp[i - 1][j - 1]\n\n  \n  counts = [0] * (n + 1)\n  for i in range(n + 1):\n    counts[i] = dp[n][i]\n    \n  total_cost = 0\n  current_size = 0\n  \n  for i in range(n, -1, -1):\n      \n      if current_size + counts[i] <= k:\n          current_size += counts[i]\n          total_cost += (n - i) * counts[i]\n      else:\n          total_cost += (n-i) * (k - current_size)\n          current_size = k\n          break\n\n  if current_size < k:\n      print(\"-1\")\n  else:\n      print(total_cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    weekly_schedule = [0, 1, 2, 0, 2, 1, 0] \n    \n    best_days = 0\n    \n    for start_day in range(7):\n        days = 0\n        temp_a = a\n        temp_b = b\n        temp_c = c\n        \n        current_day = start_day\n        \n        while True:\n            food_type = weekly_schedule[current_day % 7]\n            \n            if food_type == 0:\n                if temp_a > 0:\n                    temp_a -= 1\n                    days += 1\n                else:\n                    break\n            elif food_type == 1:\n                if temp_b > 0:\n                    temp_b -= 1\n                    days += 1\n                else:\n                    break\n            else:\n                if temp_c > 0:\n                    temp_c -= 1\n                    days += 1\n                else:\n                    break\n            \n            current_day += 1\n        \n        best_days = max(best_days, days)\n    \n    print(best_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tiles.append([list(map(int, input().split())) for _ in range(2)])\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n    n = int(input())\n    total_sum = n * (n + 1) // 2\n    \n    if total_sum % 2 == 0:\n        print(0)\n    else:\n        print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    \n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_sequences(n, s):\n        count = 0\n        \n        def generate_sequences(current_seq, open_count, close_count):\n            nonlocal count\n            if len(current_seq) == 2 * n:\n                if is_regular(current_seq) and s in current_seq:\n                    count = (count + 1) % mod\n                return\n            \n            if open_count < n:\n                generate_sequences(current_seq + '(', open_count + 1, close_count)\n            if close_count < open_count:\n                generate_sequences(current_seq + ')', open_count, close_count + 1)\n\n        generate_sequences(\"\", 0, 0)\n        return count\n\n    print(count_regular_sequences(n, s))\n    \nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    \n    ans = float('inf')\n    \n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        \n        temp_n = list(n)\n        moves = 0\n        \n        # Find the last digit of the suffix\n        last_digit_idx = -1\n        for i in range(n_len - 1, -1, -1):\n            if temp_n[i] == suffix[1]:\n                last_digit_idx = i\n                break\n        \n        if last_digit_idx == -1:\n            continue\n        \n        moves += (n_len - 1 - last_digit_idx)\n        temp_n.pop(last_digit_idx)\n        \n        # Find the first digit of the suffix\n        first_digit_idx = -1\n        for i in range(len(temp_n) - 1, -1, -1):\n            if temp_n[i] == suffix[0]:\n                first_digit_idx = i\n                break\n        \n        if first_digit_idx == -1:\n            continue\n        \n        moves += (len(temp_n) - 1 - first_digit_idx)\n        temp_n.pop(first_digit_idx)\n        \n        # Remove trailing zeroes\n        trailing_zeroes = 0\n        for i in range(0, len(temp_n)):\n            if temp_n[i] == '0':\n                trailing_zeroes += 1\n            else:\n                break\n                \n        moves += trailing_zeroes\n        \n        \n        ans = min(ans, moves)\n        \n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def check(colors):\n        colored_string = \"\"\n        color_arr = []\n        for i in range(n):\n            color_arr.append(0)\n        \n        for i in range(n):\n            color_arr[i] = colors[i]\n            colored_string += s[i]\n        \n        \n        \n        def can_sort(arr, colors):\n            \n            n = len(arr)\n            \n            \n            \n            def bubble_sort(arr, colors):\n                \n                \n                swapped = True\n                while swapped:\n                    swapped = False\n                    for i in range(n - 1):\n                        if arr[i] > arr[i + 1] and colors[i] != colors[i + 1]:\n                            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                            colors[i], colors[i + 1] = colors[i + 1], colors[i]\n                            swapped = True\n                return arr\n                \n            sorted_arr = bubble_sort(list(arr), list(colors))\n\n            return sorted_arr == sorted(arr)\n\n        return can_sort(list(s), color_arr), color_arr\n    \n    for num_colors in range(1, n + 1):\n        \n        import itertools\n        \n        for colors_tuple in itertools.product(range(1,num_colors+1), repeat=n):\n            colors = list(colors_tuple)\n            can_be_sorted, color_arr = check(colors)\n            \n            if can_be_sorted:\n                print(num_colors)\n                print(*color_arr)\n                return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    def is_substring(a, b):\n        return a in b\n\n    import itertools\n    \n    for perm in itertools.permutations(strings):\n        valid = True\n        for i in range(1, len(perm)):\n            for j in range(i):\n                if not is_substring(perm[j], perm[i]):\n                    valid = False\n                    break\n            if not valid:\n                break\n        \n        if valid:\n            print(\"YES\")\n            for s in perm:\n                print(s)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "82": null,
    "83": "```python\nimport math\n\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for h in range(1, int(math.sqrt(total)) + 2):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: Red forms a rectangle\n            for h_a in range(1, int(math.sqrt(a)) + 2):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    if h_a <= h and w_a <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n            \n            # Case 2: Blue forms a rectangle\n            for h_b in range(1, int(math.sqrt(b)) + 2):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    if h_b <= h and w_b <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n                        \n    print(best_perimeter)\n    \nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += '1'\n            else:\n                coloring += '0'\n\n        s0 = \"\"\n        s1 = \"\"\n        for j in range(n):\n            if coloring[j] == '0':\n                s0 += s[j]\n            else:\n                s1 += s[j]\n\n        s0 = \"\".join(sorted(s0))\n        s1 = \"\".join(sorted(s1))\n\n        merged = \"\"\n        idx0 = 0\n        idx1 = 0\n        for j in range(n):\n            if coloring[j] == '0':\n                merged += s0[idx0]\n                idx0 += 1\n            else:\n                merged += s1[idx1]\n                idx1 += 1\n        \n        if \"\".join(sorted(s)) == \"\".join(sorted(merged)):\n          \n            is_sorted = True\n            for k in range(n - 1):\n                if merged[k] > merged[k + 1]:\n                    is_sorted = False\n                    break\n            \n            if is_sorted:\n                print(\"YES\")\n                print(coloring)\n                return\n\n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n    \n    for price in range(1, 10**5 + 1):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.10)\n        \n        if tax_8 == a and tax_10 == b:\n            print(price)\n            return\n    \n    print(\"-1\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    current_sum = sum(a)\n    diff = n - current_sum\n\n    if diff == 0:\n        print(\"YES\")\n        print(*a)\n        return\n\n    add = diff // k\n    rem = diff % k\n\n    for i in range(k):\n        a[i] += add\n\n    for i in range(k - 1, k - 1 - rem, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            \n            found = False\n            for start in range(k):\n                temp_a = [i + 1 for i in range(k)]\n                current_sum = sum(temp_a)\n                diff = n - current_sum\n\n                add = diff // k\n                rem = diff % k\n                \n                for i in range(k):\n                    temp_a[i] += add\n                    \n                for i in range(k - 1, k - 1 - rem, -1):\n                    temp_a[i] += 1\n                \n                valid = True\n                for i in range(k - 1):\n                    if not (temp_a[i] < temp_a[i+1] <= 2 * temp_a[i]):\n                        valid = False\n                        break\n                \n                if valid:\n                    print(\"YES\")\n                    print(*temp_a)\n                    return\n                \n                \n            print(\"NO\")\n            return\n            \n\n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "87": null,
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def is_palindromic(mat):\n        rows = len(mat)\n        cols = len(mat[0])\n        \n        # Check rows\n        for i in range(rows):\n            for j in range(cols):\n                if mat[i][j] != mat[rows - 1 - i][j]:\n                    return False\n        \n        # Check columns\n        for i in range(rows):\n            for j in range(cols):\n                if mat[i][j] != mat[i][cols - 1 - j]:\n                    return False\n        \n        return True\n    \n    def can_fill(row, col):\n        return row >= 0 and row < n and col >= 0 and col < n and matrix[row][col] == 0\n    \n    def solve_recursive(row, col):\n        if row >= (n + 1) // 2:\n            return is_palindromic(matrix)\n        \n        if col >= (n + 1) // 2:\n            return solve_recursive(row + 1, 0)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                \n                def fill_cells(r, c, val):\n                    matrix[r][c] = val\n                    if r != n - 1 - r:\n                        matrix[n - 1 - r][c] = val\n                    if c != n - 1 - c:\n                        matrix[r][n - 1 - c] = val\n                    if r != n - 1 - r and c != n - 1 - c:\n                        matrix[n - 1 - r][n - 1 - c] = val\n                \n                def get_num_filled_cells(r, c):\n                    count = 1\n                    if r != n - 1 - r:\n                        count += 1\n                    if c != n - 1 - c:\n                        count += 1\n                    if r != n - 1 - r and c != n - 1 - c:\n                        count += 1\n                    return count\n                    \n                \n                num_filled_cells = get_num_filled_cells(row, col)\n                \n                if counts[num] >= num_filled_cells:\n                    \n                    counts[num] -= num_filled_cells\n                    fill_cells(row, col, num)\n                    \n                    if solve_recursive(row, col + 1):\n                        return True\n                    \n                    counts[num] += num_filled_cells\n                    fill_cells(row, col, 0)\n        \n        return False\n    \n    if solve_recursive(0, 0):\n        print(\"YES\")\n        for row in matrix:\n            print(*row)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(order):\n        current_rating = r\n        for i in order:\n            a, b = projects[i]\n            if current_rating < a:\n                return False\n            current_rating += b\n            if current_rating < 0:\n                return False\n        return True\n\n    import itertools\n    for perm in itertools.permutations(range(n)):\n        if check(perm):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n    \n    total_length = sum(c)\n    empty_space = n - total_length\n    \n    a = [0] * n\n    \n    pos = 0\n    start = 0\n    for i in range(m):\n        \n        needed_space = min(empty_space, d - 1)\n        \n        start += needed_space\n        empty_space -= needed_space\n        \n        for j in range(c[i]):\n            a[start + j] = i + 1\n        \n        start += c[i]\n    \n    \n    \n    \n    \n    reachable = [False] * (n + 2)\n    reachable[0] = True\n    \n    \n    \n    for i in range(n + 1):\n        if reachable[i]:\n            for j in range(i + 1, min(i + d + 1, n + 2)):\n                if j == n + 1 or (j <= n and a[j-1] != 0):\n                    reachable[j] = True\n    \n    if reachable[n+1]:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\nsolve()\n```",
    "91": "```python\ns = input()\nt = input()\nn = len(s)\nm = len(t)\nans = 0\nfor i in range(n + 1):\n    for j in range(i, n + 1):\n        temp = \"\"\n        if i > 0:\n            temp += s[:i]\n        if j < n:\n            temp += s[j:]\n        \n        ti = 0\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        while ti < m and len(temp) > 0:\n            if t[ti] == temp[0]:\n                ti += 1\n                temp = temp[1:]\n            else:\n                temp = temp[1:]\n                \n        if ti == m:\n            ans = max(ans, j - i)\n\nprint(ans)\n```",
    "92": "```python\nx = float(input())\na = int((x * 10) // 1)\nb = int((x * 10) % 1 * 10)\nprint(a, b)\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        if k < 2:\n            print(\"NO\")\n            return\n        \n    if d > 1 and k == 1:\n        print(\"NO\")\n        return\n    \n    if d > 1 and k == 2 and n > d+1:\n        print(\"NO\")\n        return\n\n    edges = []\n    \n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n    \n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n\n    available_nodes = list(range(1, n + 1))\n    \n    # Remove nodes used in the diameter\n    diameter_nodes = set(range(1, d + 2))\n    remaining_nodes = []\n    for node in available_nodes:\n        if node not in diameter_nodes:\n            remaining_nodes.append(node)\n    \n    # Add nodes to the diameter path\n    current_diameter_node_index = 1\n    for node in remaining_nodes:\n        while degrees[current_diameter_node_index] >= k:\n            current_diameter_node_index += 1\n            if current_diameter_node_index > d + 1:\n                print(\"NO\")\n                return\n\n        edges.append((current_diameter_node_index, node))\n        degrees[current_diameter_node_index] += 1\n        degrees[node] += 1\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    s = \"\"\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    \n    \n    diffs = 0\n    \n    \n    if start == 0:\n        s += \"0\"\n        a -= 1\n    else:\n        s += \"1\"\n        b -= 1\n        \n    \n    \n    \n    \n    while diffs < x - 1:\n        if s[-1] == '0':\n            if b > 0:\n                s += '1'\n                b -=1\n                diffs += 1\n            else:\n                s += '0'\n                a -= 1\n                diffs += 1\n        else:\n            if a > 0:\n                s += '0'\n                a -= 1\n                diffs += 1\n            else:\n                s += '1'\n                b -= 1\n                diffs += 1\n    \n    if s[-1] == '0':\n        s += '0' * a\n        s += '1' * b\n    else:\n        s += '1'*b\n        s += '0'*a\n    \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n  n = int(input())\n  s = input()\n  t = input()\n\n  def check(res, s, t):\n    for i in range(len(res) - 1):\n      if res[i:i+2] == s or res[i:i+2] == t:\n        return False\n    return True\n  \n  def find_string(n, s, t):\n    chars = ['a', 'b', 'c']\n    import itertools\n    \n    for perm in itertools.permutations(chars):\n      res1 = perm[0] * n + perm[1] * n + perm[2] * n\n      if check(res1, s, t):\n        return res1\n        \n      res2 = perm[0] * n + perm[2] * n + perm[1] * n\n      if check(res2, s, t):\n        return res2\n\n    return None\n\n  res = find_string(n, s, t)\n\n  if res:\n    print(\"YES\")\n    print(res)\n  else:\n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    def check_permutation(p):\n        if len(p) != n:\n            return False\n        if len(set(p)) != n:\n            return False\n        for x in p:\n            if x < 1 or x > n:\n                return False\n        return True\n\n    def generate_permutation(first_element):\n        p = [first_element]\n        for i in range(n - 1):\n            p.append(p[-1] + q[i])\n        \n        if check_permutation(p):\n            return p\n        else:\n            return None\n\n    for first_element in range(1, n + 1):\n        permutation = generate_permutation(first_element)\n        if permutation:\n            print(*permutation)\n            return\n    \n    print(-1)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    odd_count = 0\n    even_count = 0\n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    print(min(odd_count, even_count))\n\nsolve()\n```",
    "98": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    \n    best_moves = float('inf')\n    \n    for i in range(1, int(math.sqrt(n)) + 2):\n        if n % i == 0:\n            j = n // i\n            moves = (i - 1) + (j - 1)\n            best_moves = min(best_moves, moves)\n            \n    print(best_moves)\n    \nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    min_wins = max(0, a1 - (b1 + b3)) + max(0, a2 - (b2 + b1)) + max(0, a3 - (b3 + b2))\n    \n    print(n - (min(a1, b1) + min(a2, b2) + min(a3, b3) + min(a1, b3) + min(a2, b1) + min(a3, b2)), max_wins)\n    \n\nsolve()\n```"
}