{
    "30": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    def calculate_operations(target):\n        groups = 0\n        in_group = False\n        for i in range(n):\n            if s[i] != target[i % 2]:\n                if not in_group:\n                    groups += 1\n                    in_group = True\n            else:\n                in_group = False\n        return groups\n\n    target1 = \"\"\n    target2 = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            target1 += \"0\"\n            target2 += \"1\"\n        else:\n            target1 += \"1\"\n            target2 += \"0\"\n\n    print(min(calculate_operations(target1), calculate_operations(target2)))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "31": "```python\ndef solve():\n  s = input()\n  n = len(s)\n  x, y = 0, 0\n  visited = set()\n  total_time = 0\n  \n  for move in s:\n    nx, ny = x, y\n    if move == 'N':\n      ny += 1\n    elif move == 'S':\n      ny -= 1\n    elif move == 'W':\n      nx -= 1\n    else:\n      nx += 1\n    \n    segment = tuple(sorted([(x, y), (nx, ny)]))\n    \n    if segment in visited:\n      total_time += 1\n    else:\n      total_time += 5\n      visited.add(segment)\n      \n    x, y = nx, ny\n    \n  print(total_time)\n  \n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    chanek_coins = 0\n    turn = True  # True for Chanek, False for opponent\n    \n    while n > 0:\n        if n % 2 == 0:\n            if n == 2:\n                move = 1\n            else:\n                if (n // 2) % 2 == 0 or (n // 2) == 1:\n                    move = n // 2\n                else:\n                    move = 1\n        else:\n            move = 1\n            \n        if turn:\n            chanek_coins += move\n        \n        n -= move\n        turn = not turn\n        \n    print(chanek_coins)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "33": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    nums = list(range(1, n + 1))\n    \n    for _ in range(n - 2):\n        a = nums.pop()\n        b = nums.pop()\n        new_num = math.ceil((a + b) / 2)\n        print(a, b)\n        nums.append(new_num)\n    \n    a = nums.pop()\n    b = nums.pop()\n    new_num = math.ceil((a + b) / 2)\n    print(a, b)\n    print(new_num)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "34": "```python\ndef solve():\n    n = int(input())\n    \n    if n % 2 == 0:\n        print('1' * (n // 2))\n    else:\n        print('7' + '1' * ((n - 3) // 2))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "35": "```python\ndef solve():\n    n = int(input())\n    e = list(map(int, input().split()))\n    e.sort()\n    \n    groups = 0\n    current_group_size = 0\n    \n    for inexperience in e:\n        current_group_size += 1\n        if current_group_size >= inexperience:\n            groups += 1\n            current_group_size = 0\n    \n    print(groups)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    q = list(map(int, input().split()))\n\n    prefix_sums = [0] * (n + 1)\n    for i in range(n):\n        prefix_sums[i+1] = prefix_sums[i] + a[i]\n    \n    for query in q:\n        for i in range(1, n + 1):\n            if query <= prefix_sums[i]:\n                print(i)\n                break\n\nsolve()\n```",
    "37": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    def get_decomposition(p):\n        marked = [False] * n\n        l = []\n        for i in range(n):\n            if not marked[i]:\n                reachable = []\n                curr = i\n                while not marked[curr]:\n                    reachable.append(curr)\n                    marked[curr] = True\n                    curr = p[curr] - 1\n                \n                max_val = 0\n                max_idx = -1\n                for j in range(len(reachable)):\n                    if p[reachable[j]] > max_val:\n                        max_val = p[reachable[j]]\n                        max_idx = j\n                \n                shifted_reachable = reachable[max_idx:] + reachable[:max_idx]\n                \n                l.append([p[x] for x in shifted_reachable])\n        return l\n    \n    def new_year_transformation(p):\n        decomposition = get_decomposition(p)\n        decomposition.sort(key=lambda x: x[0])\n        \n        result = []\n        for sublist in decomposition:\n            result.extend(sublist)\n        return result\n    \n    def is_good(p):\n        return new_year_transformation(p) == p\n    \n    def generate_permutations(n):\n        import itertools\n        perms = []\n        for p in itertools.permutations(range(1, n + 1)):\n            perms.append(list(p))\n        return perms\n    \n    good_permutations = []\n    for p in generate_permutations(n):\n        if is_good(p):\n            good_permutations.append(p)\n    \n    good_permutations.sort()\n    \n    if len(good_permutations) < k:\n        print(-1)\n    else:\n        print(*good_permutations[k - 1])\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "38": "```python\ndef solve():\n    n, k1, k2 = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    max_a = max(a)\n    max_b = max(b)\n    \n    if max_a > max_b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "39": "```python\ndef solve():\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n    \n    cost = 0\n    last_change = n - 1\n    \n    for i in range(n - 2, -1, -1):\n        if s[i] != s[i+1]:\n            if s[i+1] == 'A':\n                cost += a\n            else:\n                cost += b\n            last_change = i + 1\n            \n        if cost > p:\n            print(last_change + 1)\n            return\n    \n    print(1)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "40": null,
    "41": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = list(input())\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def find_substring(arr, start, target_char):\n        for i in range(start, len(arr)):\n            if arr[i] == target_char:\n                return i\n        return -1\n\n    def reverse_substring(arr, l, r):\n        arr[l-1:r] = arr[l-1:r][::-1]\n\n    operations = []\n\n    # Step 1: Create a regular sequence of (n/2) '(' followed by (n/2) ')'\n    target = ['('] * (n // 2) + [')'] * (n // 2)\n    \n    for i in range(n):\n        if s[i] != target[i]:\n            idx = find_substring(s, i, target[i])\n            reverse_substring(s, i+1, idx+1)\n            operations.append((i+1, idx+1))\n            \n    # Step 2: Convert the first k-1 \"()\" into \"((\" and \"))\"\n    for i in range(1, k):\n        reverse_substring(s, 2*i, 2*i+1)\n        operations.append((2*i, 2*i+1))\n\n    print(len(operations))\n    for l, r in operations:\n        print(l, r)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "42": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            length = j - i + 1\n            decimal = int(sub, 2)\n            if length == decimal:\n                count += 1\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "43": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    min_time = float('inf')\n\n    for i in range(1 << n):\n        delivery_times = []\n        pickup_times = 0\n        \n        for j in range(n):\n            if (i >> j) & 1:\n                delivery_times.append(a[j])\n            else:\n                pickup_times += b[j]\n        \n        max_delivery_time = 0\n        if delivery_times:\n            max_delivery_time = max(delivery_times)\n        \n        min_time = min(min_time, max(max_delivery_time, pickup_times))\n\n    print(min_time)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "44": "```python\ndef solve():\n    n = int(input())\n    result = []\n    start = 2 * 1\n    for i in range(n):\n        result.append(start)\n        start += 2\n    print(*result)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "45": "```python\ndef solve():\n    x = int(input())\n    \n    staircases = []\n    n = 1\n    while True:\n        cells_needed = n * (n + 1) // 2\n        if cells_needed > x:\n            break\n        staircases.append(cells_needed)\n        n += 1\n    \n    nice_staircases = []\n    n = 1\n    while True:\n        cells_needed = n * (n + 1) // 2\n        if cells_needed > x:\n            break\n        if is_nice(n):\n            nice_staircases.append(cells_needed)\n        n += 1\n        \n    count = 0\n    remaining_cells = x\n    \n    \n    n = 1\n    cells_used = 0\n    while True:\n        cells_needed = n * (n + 1) // 2\n        if cells_needed > x:\n            break\n        if is_nice(n):\n            if remaining_cells >= cells_needed:\n                remaining_cells -= cells_needed\n                count += 1\n        n+=1\n    \n    print(count)\n    \n\ndef is_nice(n):\n    if n == 1:\n        return True\n    if n == 3:\n        return True\n    \n    k = 1\n    while True:\n        val = (2**k) - 1\n        if val > n:\n            break\n        if val == n:\n            return True\n        k += 1\n    \n    return False\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "46": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    r_count = s.count('R')\n    s_count = s.count('S')\n    p_count = s.count('P')\n    \n    if r_count >= s_count and r_count >= p_count:\n        print('P' * n)\n    elif s_count >= r_count and s_count >= p_count:\n        print('R' * n)\n    else:\n        print('S' * n)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "47": null,
    "48": "```python\ndef solve():\n  x, y, k = map(int, input().split())\n  \n  # We need k sticks and k coal.\n  # Let's calculate how many sticks we need to buy k coal.\n  sticks_needed_for_coal = k * y\n  \n  # Total sticks needed = k + sticks_needed_for_coal\n  total_sticks_needed = k + sticks_needed_for_coal\n  \n  # We start with 1 stick.\n  sticks_to_buy = total_sticks_needed - 1\n  \n  # Number of stick trades.\n  stick_trades = (sticks_to_buy + x - 2) // (x - 1)\n  \n  # Total trades = coal trades (k) + stick trades\n  total_trades = k + stick_trades\n  \n  print(total_trades)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "49": "```python\ndef solve():\n    def count_classy(n):\n        s = str(n)\n        length = len(s)\n        dp = {}\n\n        def recurse(index, non_zero_count, tight):\n            if index == length:\n                return 1\n            \n            if (index, non_zero_count, tight) in dp:\n                return dp[(index, non_zero_count, tight)]\n            \n            upper_bound = int(s[index]) if tight else 9\n            count = 0\n            \n            for digit in range(upper_bound + 1):\n                new_non_zero_count = non_zero_count + (digit != 0)\n                new_tight = tight and (digit == upper_bound)\n                \n                if new_non_zero_count <= 3:\n                    count += recurse(index + 1, new_non_zero_count, new_tight)\n            \n            dp[(index, non_zero_count, tight)] = count\n            return count\n\n        return recurse(0, 0, True)\n\n    t = int(input())\n    for _ in range(t):\n        l, r = map(int, input().split())\n        print(count_classy(r) - count_classy(l - 1))\n\nsolve()\n```",
    "50": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = float('inf')\n\n    for left_eaten in range(n + 1):\n        for right_eaten in range(n + 1):\n            \n            temp_a = a[:]\n            \n            left_start = n - 1\n            right_start = n\n            \n            strawberry_count = 0\n            blueberry_count = 0\n            \n            for i in range(left_start - left_eaten + 1, left_start + 1):\n                if 0 <= i < 2 * n:\n                    if temp_a[i] == 1:\n                        strawberry_count += 1\n                    else:\n                        blueberry_count += 1\n            \n            for i in range(right_start, right_start + right_eaten):\n                if 0 <= i < 2 * n:\n                    if temp_a[i] == 1:\n                        strawberry_count += 1\n                    else:\n                        blueberry_count += 1\n\n            \n            remaining_strawberry = 0\n            remaining_blueberry = 0\n            \n            for i in range(2 * n):\n                if i < n - left_eaten or i >= n + right_eaten:\n                    if temp_a[i] == 1:\n                        remaining_strawberry += 1\n                    else:\n                        remaining_blueberry += 1\n                        \n            if remaining_strawberry == remaining_blueberry:\n                ans = min(ans, left_eaten + right_eaten)\n\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "51": "```python\ndef solve():\n    n, k, d1, d2 = map(int, input().split())\n\n    for s1 in [-1, 1]:\n        for s2 in [-1, 1]:\n            x = (k - s1 * d1 - s2 * d2) / 3\n            if x < 0 or int(x) != x:\n                continue\n            \n            w1 = x + s1 * d1\n            w2 = x\n            w3 = x + s2 * d2\n            \n            if w1 < 0 or w2 < 0 or w3 < 0:\n                continue\n            \n            max_wins = max(w1, w2, w3)\n            \n            rem1 = max_wins - w1\n            rem2 = max_wins - w2\n            rem3 = max_wins - w3\n            \n            remaining_games = n // 3 * 3 - k\n            \n            if rem1 + rem2 + rem3 <= remaining_games and (remaining_games - (rem1 + rem2 + rem3)) % 3 == 0:\n                if n % 3 == 0:\n                  print(\"yes\")\n                  return\n                else:\n                  \n                  print(\"no\")\n                  return\n\n    print(\"no\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "52": null,
    "53": null,
    "54": "```python\ndef solve():\n  q = int(input())\n  for _ in range(q):\n    n = int(input())\n    s = list(map(int, input().split()))\n    \n    total_sum = 0\n    for x in s:\n      total_sum += x\n    \n    if total_sum >= 2048:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    n = int(input())\n    print((n + 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "56": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    grid = [[0] * n for _ in range(n)]\n    \n    row = 0\n    col = 0\n    \n    for _ in range(k):\n        grid[row][col] = 1\n        row = (row + 1) % n\n        col = (col + 1) % n\n        if grid[row][col] == 1:\n            col = (col + 1) % n\n\n    \n    rows_sums = [sum(row) for row in grid]\n    cols_sums = [sum(grid[i][j] for i in range(n)) for j in range(n)]\n    \n    f_a = (max(rows_sums) - min(rows_sums))**2 + (max(cols_sums) - min(cols_sums))**2\n    \n    print(f_a)\n    for row in grid:\n        print(\"\".join(map(str, row)))\n    \n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def can_reduce(arr):\n        if len(arr) == 1:\n            return True\n        \n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i+1]:\n                arr1 = arr[:i] + arr[i+1:]\n                if can_reduce(arr1):\n                    return True\n                arr2 = arr[:i+1] + arr[i+2:]\n                if can_reduce(arr2):\n                    return True\n        return False\n\n    if can_reduce(a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "58": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    dp = {}\n\n    def calculate_cost(rows, cols, target):\n        if (rows, cols, target) in dp:\n            return dp[(rows, cols, target)]\n\n        if target == 0:\n            return 0\n        if target == rows * cols:\n            return 0\n        if target < 0 or target > rows * cols:\n            return float('inf')\n\n        min_cost = float('inf')\n\n        # Horizontal breaks\n        for i in range(1, rows):\n            cost = cols * cols\n            for j in range(target + 1):\n                min_cost = min(min_cost, cost + calculate_cost(i, cols, j) + calculate_cost(rows - i, cols, target - j))\n\n        # Vertical breaks\n        for i in range(1, cols):\n            cost = rows * rows\n            for j in range(target + 1):\n                min_cost = min(min_cost, cost + calculate_cost(rows, i, j) + calculate_cost(rows, cols - i, target - j))\n\n        dp[(rows, cols, target)] = min_cost\n        return min_cost\n\n    print(calculate_cost(n, m, k))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "59": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    mn = float('inf')\n    mx = float('-inf')\n\n    for i in range(n):\n        if a[i] == -1:\n            if i > 0 and a[i-1] != -1:\n                mn = min(mn, a[i-1])\n                mx = max(mx, a[i-1])\n            if i < n - 1 and a[i+1] != -1:\n                mn = min(mn, a[i+1])\n                mx = max(mx, a[i+1])\n\n    if mn == float('inf'):\n        k = 0\n    else:\n        k = (mn + mx) // 2\n\n    b = []\n    for x in a:\n        if x == -1:\n            b.append(k)\n        else:\n            b.append(x)\n\n    m = 0\n    for i in range(n - 1):\n        m = max(m, abs(b[i] - b[i+1]))\n\n    print(m, k)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "60": "```python\ndef solve():\n    a, b = map(int, input().split())\n    print(a ^ b)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if p[i] < p[j] and p[j] > p[k]:\n                    print(\"YES\")\n                    print(i + 1, j + 1, k + 1)\n                    return\n    print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "62": "```python\ndef solve():\n    s = input()\n    adj = {}\n    for char in s:\n        adj[char] = set()\n    \n    for i in range(len(s) - 1):\n        adj[s[i]].add(s[i+1])\n        adj[s[i+1]].add(s[i])\n    \n    for char in adj:\n        if len(adj[char]) > 2:\n            print(\"NO\")\n            return\n    \n    used = set()\n    layout = \"\"\n    \n    for char in s:\n        if char not in used:\n            start = char\n            break\n    else:\n        print(\"YES\")\n        print(\"abcdefghijklmnopqrstuvwxyz\")\n        return\n    \n    curr = start\n    used.add(curr)\n    layout += curr\n    \n    while True:\n        next_char = None\n        for neighbor in adj[curr]:\n            if neighbor not in used:\n                next_char = neighbor\n                break\n        \n        if next_char is None:\n            break\n        \n        curr = next_char\n        used.add(curr)\n        layout += curr\n    \n    remaining = \"\"\n    for char in \"abcdefghijklmnopqrstuvwxyz\":\n        if char not in used:\n            remaining += char\n    \n    layout += remaining\n    \n    if len(layout) != 26:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(layout)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "63": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n\n    a.sort()\n    w.sort()\n\n    happiness = 0\n    \n    # Assign largest numbers to friends with w[i] == 1\n    l = n - 1\n    for i in range(k):\n        if w[i] == 1:\n            happiness += 2 * a[l]\n            l -= 1\n    \n    # Assign smallest numbers to friends with w[i] > 1\n    r = 0\n    for i in range(k - 1, -1, -1):\n        if w[i] > 1:\n            happiness += a[l] + a[r]\n            l -= 1\n            r += w[i] - 1\n    \n    print(happiness)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n    n, l = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    pos1 = 0\n    pos2 = l\n    speed1 = 1\n    speed2 = 1\n    time = 0\n\n    i = 0\n    j = n - 1\n\n    while True:\n        time1 = float('inf')\n        time2 = float('inf')\n\n        if i <= n - 1:\n            time1 = (a[i] - pos1) / speed1\n        else:\n            time1 = (pos2 - pos1) / (speed1 + speed2)\n            \n        if j >= 0:\n            time2 = (pos2 - a[j]) / speed2\n        else:\n            time2 = (pos2 - pos1) / (speed1 + speed2)\n        \n        if time1 < time2:\n            time += time1\n            pos1 += time1 * speed1\n            pos2 -= time1 * speed2\n            speed1 += 1\n            i += 1\n        elif time2 < time1:\n            time += time2\n            pos1 += time2 * speed1\n            pos2 -= time2 * speed2\n            speed2 += 1\n            j -= 1\n        else:\n            if i <= n - 1 and j >= 0:\n                time += time1\n                pos1 += time1 * speed1\n                pos2 -= time1 * speed2\n                speed1 += 1\n                speed2 += 1\n                i += 1\n                j -= 1\n            else:\n                time += (pos2 - pos1) / (speed1 + speed2)\n                break\n        \n        if i > n - 1 and j < 0:\n            break\n        \n        if pos1 >= pos2:\n            break\n\n    print(time)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "65": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    dp = {}\n\n    def calculate_min_skips(index, turn):\n        if index == n:\n            return 0\n\n        if (index, turn) in dp:\n            return dp[(index, turn)]\n\n        if turn == 0:  # Friend's turn\n            ans = float('inf')\n            \n            # Kill 1 boss\n            skips = a[index]\n            ans = min(ans, skips + calculate_min_skips(index + 1, 1))\n\n            # Kill 2 bosses if possible\n            if index + 1 < n:\n                skips = a[index] + a[index+1]\n                ans = min(ans, skips + calculate_min_skips(index + 2, 1))\n            \n            dp[(index, turn)] = ans\n            return ans\n\n        else:  # Your turn\n            ans = float('inf')\n\n            # Kill 1 boss\n            ans = min(ans, calculate_min_skips(index + 1, 0))\n\n            # Kill 2 bosses if possible\n            if index + 1 < n:\n                ans = min(ans, calculate_min_skips(index + 2, 0))\n                \n            dp[(index, turn)] = ans\n            return ans\n\n    print(calculate_min_skips(0, 0))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "66": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    print(*a)\n    print(*b)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "67": "```python\ndef solve():\n    n = int(input())\n    s = list(input())\n    t = list(input())\n\n    ops = []\n    for i in range(n):\n        if s[i] == t[i]:\n            continue\n        \n        found = False\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                ops.append((j + 1, i + 1))\n                s[j], t[i] = t[i], s[j]\n                found = True\n                break\n        \n        if found:\n            continue\n        \n        for j in range(i + 1, n):\n            if s[i] == t[j]:\n                ops.append((i + 1, j + 1))\n                s[i], t[j] = t[j], s[i]\n                \n                ops.append((j + 1, j + 1))\n                s[j], t[j] = t[j], s[j]\n                found = True\n                break\n        \n        if not found:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n    print(len(ops))\n    for op in ops:\n        print(op[0], op[1])\n\nk = int(input())\nfor _ in range(k):\n    solve()\n```",
    "68": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def calculate_operations(string):\n        count = 0\n        while string:\n            max_ops = 0\n            best_string = \"\"\n            \n            for i in range(len(string)):\n                temp_string = string[:i] + string[i+1:]\n                \n                if temp_string:\n                    first_char = temp_string[0]\n                    prefix_len = 0\n                    for j in range(len(temp_string)):\n                        if temp_string[j] == first_char:\n                            prefix_len += 1\n                        else:\n                            break\n                    \n                    new_string = temp_string[prefix_len:]\n                else:\n                    new_string = \"\"\n                \n                \n                if len(string) > 0:\n                  \n                  if len(new_string) > len(best_string):\n                    best_string = new_string\n                    \n                  elif len(new_string) == len(best_string) and len(best_string) > 0 :\n                    if new_string < best_string:\n                      best_string = new_string\n                  elif len(best_string) == 0:\n                      best_string = new_string\n\n            string = best_string\n            count += 1\n        return count\n\n    print(calculate_operations(s))\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "69": "```python\ndef solve():\n    a, b = map(int, input().split())\n    s = input()\n    n = len(s)\n    \n    gaps = []\n    \n    first = -1\n    last = -1\n    \n    for i in range(n):\n        if s[i] == '1':\n            if first == -1:\n                first = i\n            last = i\n            \n    if first == -1:\n        print(0)\n        return\n    \n    \n    \n    \n    prev = first\n    for i in range(first + 1, last + 1):\n        if s[i] == '1':\n            if i - prev - 1 > 0:\n                gaps.append(i - prev - 1)\n            prev = i\n    \n    \n    cost = a\n    \n    for gap in gaps:\n        cost += min(a, gap * b)\n    \n    print(cost)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "70": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    ans = 0\n    for i in range(k // 2):\n        counts = {}\n        for j in range(0, n, k):\n            char1 = s[i + j]\n            char2 = s[k - 1 - i + j]\n            \n            if char1 not in counts:\n                counts[char1] = 0\n            if char2 not in counts:\n                counts[char2] = 0\n                \n            counts[char1] += 1\n            counts[char2] += 1\n            \n        total = 0\n        max_count = 0\n        for char in counts:\n            total += counts[char]\n            max_count = max(max_count, counts[char])\n        \n        ans += (total - max_count)\n\n    if k % 2 == 1:\n        counts = {}\n        mid = k // 2\n        for j in range(0, n, k):\n            char = s[mid + j]\n            if char not in counts:\n                counts[char] = 0\n            counts[char] += 1\n            \n        total = 0\n        max_count = 0\n        for char in counts:\n            total += counts[char]\n            max_count = max(max_count, counts[char])\n            \n        ans += (total - max_count)\n\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "71": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    coins = 0\n    balance = 0\n    for i in range(n):\n        balance += a[i]\n        if balance < 0:\n            coins += abs(balance)\n\n    print(coins)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "72": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    distinct_elements = sorted(list(set(a)))\n    if len(distinct_elements) > k:\n        print(-1)\n        return\n\n    b = distinct_elements + [1] * (k - len(distinct_elements))\n    \n    print(n * k)\n    print(*(b * n))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ops = []\n    \n    def get_mex(arr):\n        s = set(arr)\n        mex = 0\n        while mex in s:\n            mex += 1\n        return mex\n\n    for _ in range(2 * n):\n        if all(a[i] <= a[i+1] for i in range(n-1)):\n            break\n        \n        mex = get_mex(a)\n        \n        if mex < n:\n            idx = -1\n            for i in range(n):\n                if a[i] == mex:\n                    idx = i\n                    break\n            if idx != -1:\n                a[idx] = mex\n                ops.append(idx + 1)\n            else:\n                for i in range(n):\n                    if a[i] != i:\n                        a[i] = mex\n                        ops.append(i+1)\n                        break\n\n        else:\n            for i in range(n-1):\n                if a[i] > a[i+1]:\n                    a[i] = mex\n                    ops.append(i+1)\n                    break\n\n    print(len(ops))\n    print(*ops)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    minions = []\n    for _ in range(n):\n        minions.append(list(map(int, input().split())))\n\n    best_actions = []\n    max_power = -1\n\n    import itertools\n    for r in range(n + 1):\n        for summoned_indices in itertools.permutations(range(n), r):\n            if r > 0:\n                for kept_indices_set in itertools.combinations(summoned_indices, min(k, r)):\n                    \n                    actions = []\n                    power = 0\n                    army = {}\n                    \n                    for i in summoned_indices:\n                        actions.append(i + 1)\n                        army[i] = minions[i][0] \n                        \n                        for j in army:\n                            if j != i:\n                                army[j] += minions[i][1]\n                    \n                    current_army = list(army.keys())\n                    \n                    for minion_index in current_army:\n                        if minion_index not in kept_indices_set:\n                            actions.append(-(minion_index + 1))\n                            del army[minion_index]\n                    \n                    current_power = sum(army.values())\n                    \n                    if current_power > max_power:\n                        max_power = current_power\n                        best_actions = actions\n\n    print(len(best_actions))\n    print(*best_actions)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "75": null,
    "76": "```python\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n % 4 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolve()\n```",
    "77": "```python\ndef solve():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        boards = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            boards.append((a, b))\n\n        dp = [[float('inf')] * 3 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = boards[0][1]\n        dp[0][2] = 2 * boards[0][1]\n\n        for i in range(1, n):\n            for j in range(3):\n                for k in range(3):\n                    if boards[i-1][0] + k != boards[i][0] + j:\n                        dp[i][j] = min(dp[i][j], dp[i-1][k] + j * boards[i][1])\n\n        print(min(dp[n-1]))\n\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n\n    def check_cross(x, y):\n        for i in range(n):\n            if grid[i][y] == '.':\n                return False\n        for j in range(m):\n            if grid[x][j] == '.':\n                return False\n        return True\n\n    def calculate_cost(x, y):\n        cost = 0\n        for i in range(n):\n            if grid[i][y] == '.':\n                cost += 1\n        for j in range(m):\n            if grid[x][j] == '.':\n                cost += 1\n        return cost\n\n    min_cost = float('inf')\n    for x in range(n):\n        for y in range(m):\n            cost = calculate_cost(x, y)\n            min_cost = min(min_cost, cost)\n\n    print(min_cost)\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "79": "```python\nimport math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve():\n    n = int(input())\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i != n:\n                divisors.append(n // i)\n    divisors.append(n)\n    divisors.sort()\n\n    import itertools\n    \n    best_order = None\n    min_moves = float('inf')\n\n    for order in itertools.permutations(divisors):\n        moves = 0\n        \n        current_list = list(order)\n        \n        is_decrypted = False\n        \n        while not is_decrypted:\n            is_decrypted = True\n            new_list = []\n            for i in range(len(current_list)):\n                new_list.append(current_list[i])\n                \n                \n                if gcd(current_list[i], current_list[(i+1) % len(current_list)]) == 1:\n                    is_decrypted = False\n                    lcm = (current_list[i] * current_list[(i+1) % len(current_list)]) // gcd(current_list[i], current_list[(i+1) % len(current_list)])\n                    new_list.append(lcm)\n                    moves += 1\n            current_list = new_list\n        \n        if moves < min_moves:\n            min_moves = moves\n            best_order = order\n\n    print(*best_order)\n    print(min_moves)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "80": "```python\ndef solve():\n    l, r = map(int, input().split())\n    \n    count = 0\n    for a in range(l, r + 1):\n        for b in range(l, r + 1):\n            if a + b == (a ^ b):\n                count += 1\n    print(count)\n\ndef solve_efficient():\n    l, r = map(int, input().split())\n    range_size = r - l + 1\n    count = 0\n    \n    for a in range(l, r + 1):\n        count += (a & (r - a + a)) == a\n    \n    total = r - l + 1\n    \n    \n    \n    \n    count = 0\n    for a in range(l, r + 1):\n      for b in range(l, r + 1):\n        if (a + b) == (a ^ b):\n          count += 1\n          \n    print(count)\n    \ndef solve_even_more_efficient():\n  l, r = map(int, input().split())\n  \n  count = 0\n  for a in range(l, r + 1):\n    for b in range(l, r + 1):\n      if (a & b) == 0:\n        count += 1\n  \n  print(count)\n\ndef solve_final():\n  l, r = map(int, input().split())\n  n = r - l + 1\n  ans = 0\n  \n  for a in range(l, r + 1):\n    for b in range(l, r + 1):\n      if (a & b) == 0:\n        ans += 1\n  print(ans)\n\ndef solve_final_correct():\n    l, r = map(int, input().split())\n    \n    count = 0\n    for a in range(l, r + 1):\n        for b in range(l, r + 1):\n            if (a & b) == 0:\n                count += 1\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve_final_correct()\n```",
    "81": null,
    "82": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    if n == 2:\n        print(p[1], p[0])\n    else:\n        print(*p[::-1])\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "83": "```python\ndef solve():\n  x, y, a, b = map(int, input().split())\n  \n  if a + b == 0:\n    if x == y:\n      print(0)\n    else:\n      print(-1)\n    return\n  \n  if (y - x) % (a + b) == 0:\n    print((y - x) // (a + b))\n  else:\n    print(-1)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "84": null,
    "85": "```python\ndef solve():\n    s = input()\n    x = int(input())\n    n = len(s)\n    w = [''] * n\n    \n    for i in range(n):\n        w[i] = '1'\n\n    for i in range(n):\n        if s[i] == '0':\n            if i - x >= 0:\n                w[i - x] = '0'\n            if i + x < n:\n                w[i + x] = '0'\n    \n    \n    new_s = [''] * n\n    for i in range(n):\n        new_s[i] = '0'\n        if i - x >= 0 and w[i - x] == '1':\n            new_s[i] = '1'\n        if i + x < n and w[i + x] == '1':\n            new_s[i] = '1'\n            \n    if \"\".join(new_s) == s:\n        print(\"\".join(w))\n    else:\n        print(\"-1\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "86": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    zeros = a.count(0)\n    ones = a.count(1)\n\n    if zeros >= n // 2:\n        print(zeros)\n        print(*([0] * zeros))\n    else:\n        if ones % 2 == 0:\n            print(ones)\n            print(*([1] * ones))\n        else:\n            print(ones - 1)\n            print(*([1] * (ones - 1)))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "87": "```python\nimport math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve():\n    m, d, w = map(int, input().split())\n    \n    w = w // gcd(d - 1, w)\n    \n    mn = min(m, d)\n    \n    k = mn // w\n    \n    ans = mn * k - w * (k * (k + 1) // 2)\n    \n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "88": "```python\ndef solve():\n    t = int(input())\n    x = list(map(int, input().split()))\n\n    for target in x:\n        if target < 14:\n            print(\"NO\")\n            continue\n        \n        remaining = target - 14\n        \n        if remaining % 7 == 0:\n            print(\"YES\")\n        else:\n            print(\"YES\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  depth = [0] * n\n  parents = [0] * n\n  \n  q = [a[0]]\n  idx = 1\n  \n  while q:\n    curr = q.pop(0)\n    children = []\n    \n    while idx < n:\n      children.append(a[idx])\n      idx += 1\n      if idx < n and any(a[idx] < x for x in children):\n        idx -= 1\n        children.pop()\n        break\n\n    for child in children:\n      parents[child - 1] = curr\n      depth[child - 1] = depth[curr - 1] + 1\n      q.append(child)\n  \n  print(max(depth))\n    \n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "90": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n\n    unlocked_values = []\n    unlocked_indices = []\n    for i in range(n):\n        if l[i] == 0:\n            unlocked_values.append(a[i])\n            unlocked_indices.append(i)\n\n    unlocked_values.sort()\n\n    new_a = a[:]\n    for i in range(len(unlocked_indices)):\n        new_a[unlocked_indices[i]] = unlocked_values[i]\n\n    print(*new_a)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "91": null,
    "92": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    \n    s_chars = set(s)\n    t_chars = set(t)\n    \n    if any(c in s_chars for c in t_chars):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "93": null,
    "94": "```python\ndef solve():\n  n, T = map(int, input().split())\n  a = list(map(int, input().split()))\n\n  colors = [0] * n\n  \n  \n  for i in range(n):\n    if a[i] * 2 < T:\n      colors[i] = 0\n    elif a[i] * 2 > T:\n      colors[i] = 1\n    else:\n      \n      colors[i] = i % 2\n  \n  print(*colors)\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    if n == 1:\n        print(\"-1\")\n        return\n    \n    s = \"\"\n    for i in range(n):\n        s += \"2\"\n    print(s)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "96": "```python\ndef solve():\n    n, T, a, b = map(int, input().split())\n    types = list(map(int, input().split()))\n    times = list(map(int, input().split()))\n\n    problems = []\n    for i in range(n):\n        problems.append((times[i], types[i]))\n\n    max_points = 0\n    for leave_time in range(T + 1):\n        solved_count = 0\n        valid = True\n        \n        \n        sorted_problems = sorted(enumerate(problems), key=lambda x: x[1][0])\n        \n        solved = [False] * n\n        \n        time_spent = 0\n        \n        for i, (time, problem_type) in sorted_problems:\n            if time[0] <= leave_time:\n                if problem_type == 0:\n                    if time_spent + a <= leave_time:\n                        time_spent += a\n                        solved_count += 1\n                        solved[i] = True\n                    else:\n                        valid = False\n                        break\n                else:\n                    if time_spent + b <= leave_time:\n                        time_spent += b\n                        solved_count += 1\n                        solved[i] = True\n                    else:\n                        valid = False\n                        break\n                        \n        if valid:\n            \n            remaining_problems = []\n            for i in range(n):\n                if not solved[i]:\n                    remaining_problems.append((times[i], types[i]))\n                    \n            \n            remaining_problems_sorted = sorted(enumerate(remaining_problems), key=lambda x: x[1][0])\n            \n            \n            for i, (time, problem_type) in remaining_problems_sorted:\n                if problem_type == 0:\n                    if time_spent + a <= leave_time:\n                        time_spent += a\n                        solved_count += 1\n                    else:\n                        break\n                else:\n                    if time_spent + b <= leave_time:\n                        time_spent += b\n                        solved_count += 1\n                    else:\n                        break\n            \n            \n            \n            \n            \n            \n            mandatory_solved = True\n            for i in range(n):\n                if times[i] <= leave_time:\n                    \n                    if (i not in [idx for idx, _ in sorted_problems]) or not solved[i]:\n                        mandatory_solved = False\n                        break\n                    \n            if mandatory_solved:\n                max_points = max(max_points, solved_count)\n            else:\n                pass \n        \n\n    print(max_points)\n\nm = int(input())\nfor _ in range(m):\n    solve()\n```",
    "97": "```python\ndef solve():\n    s, c = input().split()\n    n = len(s)\n\n    if s < c:\n        print(s)\n        return\n    \n    best_s = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            temp_s = list(s)\n            temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n            temp_s = \"\".join(temp_s)\n            \n            if temp_s < c:\n                if best_s is None or temp_s < best_s:\n                    best_s = temp_s\n    \n    if best_s is not None:\n        print(best_s)\n    else:\n        print(\"---\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "98": "```python\ndef solve():\n  c, m, x = map(int, input().split())\n  \n  low = 0\n  high = min(c, m, x)\n  ans = 0\n  \n  while low <= high:\n    mid = (low + high) // 2\n    \n    if c >= mid and m >= mid and x >= mid:\n      ans = mid\n      low = mid + 1\n    else:\n      high = mid - 1\n      \n  \n  remaining_c = c - ans\n  remaining_m = m - ans\n  remaining_x = x - ans\n  \n  \n  \n  \n  \n  ans += min(remaining_c, remaining_m, (remaining_c + remaining_m) // 3)\n  \n  print(ans)\n\nq = int(input())\nfor _ in range(q):\n  solve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    s_list = list(s)\n    \n    indices_to_remove = []\n    \n    i = 0\n    while i < len(s_list) - 1:\n        if s_list[i] == '1' and s_list[i+1] == '0':\n            indices_to_remove.append(i)\n            i += 2\n        else:\n            i += 1\n    \n    \n    \n    def get_string(removed_indices):\n        temp_s_list = s_list[:]\n        removed_indices = sorted(removed_indices, reverse=True)\n        for index in removed_indices:\n            del temp_s_list[index]\n        return \"\".join(temp_s_list)\n\n    \n    import itertools\n    \n    cleanest_string = s\n    \n    for r in range(len(indices_to_remove) + 1):\n        for combination in itertools.combinations(indices_to_remove, r):\n            \n            \n            temp_s_list = s_list[:]\n            removed_indices = []\n            \n            \n            for index in combination:\n                \n                if index+1 < len(temp_s_list) and temp_s_list[index] == '1' and temp_s_list[index+1] == '0':\n                    removed_indices.append(index)\n                elif index-1 >=0 and temp_s_list[index-1] == '1' and temp_s_list[index] == '0':\n                    removed_indices.append(index)\n                \n            \n            \n            \n            string_1 = \"\"\n            string_2 = \"\"\n            \n            \n            \n            temp_s_list_1 = s_list[:]\n            \n            \n            \n            removed_indices_1 = []\n            \n            \n            for index in combination:\n                \n                if index+1 < len(temp_s_list_1) and temp_s_list_1[index] == '1' and temp_s_list_1[index+1] == '0':\n                    removed_indices_1.append(index)\n                \n                \n            \n            string_1 = get_string(removed_indices_1)\n            \n            \n            \n            temp_s_list_2 = s_list[:]\n            removed_indices_2 = []\n            \n            \n            for index in combination:\n                \n                valid = False\n                \n                if index+1 < len(s_list) and s_list[index] == '1' and s_list[index+1] == '0':\n                    valid = True\n                \n                \n                \n                if index-1 >=0 and s_list[index-1] == '1' and s_list[index] == '0':\n                    valid = True\n                \n                \n                if valid:\n                    \n                    \n                    if index+1 < len(temp_s_list_2) and temp_s_list_2[index] == '1' and temp_s_list_2[index+1] == '0':\n                        removed_indices_2.append(index+1)\n                    elif index-1 >=0 and temp_s_list_2[index-1] == '1' and temp_s_list_2[index] == '0':\n                        removed_indices_2.append(index)\n            \n            \n            string_2 = get_string(removed_indices_2)\n            \n            \n            \n            \n            current_string = min(string_1, string_2)\n            \n            \n            \n            if len(current_string) < len(cleanest_string):\n                cleanest_string = current_string\n            elif len(current_string) == len(cleanest_string) and current_string < cleanest_string:\n                cleanest_string = current_string\n            \n            \n    print(cleanest_string)\n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```"
}