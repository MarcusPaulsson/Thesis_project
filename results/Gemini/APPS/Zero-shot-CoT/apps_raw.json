{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    max_len = -1\n    \n    for i in range(n):\n        if s[i] == '[':\n            for j in range(i + 1, n):\n                if s[j] == ']':\n                    for k in range(i + 1, j):\n                        if s[k] == ':':\n                            for l in range(k + 1, j):\n                                if s[l] == ':':\n                                    \n                                    \n                                    vertical_bars = 0\n                                    for m in range(k + 1, l):\n                                        if s[m] == '|':\n                                            vertical_bars += 1\n                                    \n                                    current_len = 4 + vertical_bars\n                                    max_len = max(max_len, current_len)\n    \n    print(max_len)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    \n    best_num = x\n    max_sum = sum_digits(x)\n    \n    s = str(x)\n    n = len(s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n            \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0 and num <= x:\n            current_sum = sum_digits(num)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                best_num = num\n            elif current_sum == max_sum and num > best_num:\n                best_num = num\n                \n    print(best_num)\n\ndef sum_digits(n):\n    s = str(n)\n    sum_val = 0\n    for digit in s:\n        sum_val += int(digit)\n    return sum_val\n\nsolve()\n```",
    "2": "```python\ndef solve():\n  n = int(input())\n  s = str(n)\n  l = len(s)\n  \n  first_digit = int(s[0])\n  \n  next_lucky = (first_digit + 1) * (10**(l-1))\n  \n  print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n  n, q = map(int, input().split())\n  painters = []\n  for _ in range(q):\n    painters.append(list(map(int, input().split())))\n\n  def calculate_painted_sections(selected_painters):\n    painted = [0] * n\n    for l, r in selected_painters:\n      for i in range(l - 1, r):\n        painted[i] = 1\n    return sum(painted)\n\n  max_painted = 0\n  for i in range(q):\n    for j in range(i + 1, q):\n      selected_painters = []\n      for k in range(q):\n        if k != i and k != j:\n          selected_painters.append(painters[k])\n      max_painted = max(max_painted, calculate_painted_sections(selected_painters))\n\n  print(max_painted)\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n    \n    if l == 1 and r == n:\n        print(0)\n        return\n    \n    if l == 1:\n        print(abs(pos - r) + 1)\n        return\n    \n    if r == n:\n        print(abs(pos - l) + 1)\n        return\n    \n    \n    ans1 = abs(pos - l) + 1 + abs(r - l) + 1\n    ans2 = abs(pos - r) + 1 + abs(r - l) + 1\n    \n    print(min(ans1, ans2))\n\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_diff = float('-inf')\n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n        max_diff = max(max_diff, d - h)\n\n    if max_damage >= x:\n        print(1)\n        return\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_damage\n    \n    ans = 1 + (remaining + max_diff - 1) // max_diff\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\nn, m = map(int, input().split())\n\nleft = 0\nright = 2 * 10**9\n\nwhile left <= right:\n    mid = (left + right) // 2\n    \n    total_sparrows = (mid * (mid + 1)) // 2\n    \n    if total_sparrows >= n + mid * m:\n        right = mid - 1\n    else:\n        left = mid + 1\n\nprint(left)\n```",
    "8": "```python\ndef solve():\n    tiles = input().split()\n    \n    def check_mentsu(arr):\n        if len(arr) < 3:\n            return False\n        \n        # Check for koutsu\n        for i in range(len(arr) - 2):\n            if arr[i] == arr[i+1] and arr[i] == arr[i+2]:\n                return True\n        \n        # Check for shuntsu\n        nums = []\n        suits = []\n        for tile in arr:\n            nums.append(int(tile[0]))\n            suits.append(tile[1])\n        \n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    if suits[i] == suits[j] and suits[i] == suits[k]:\n                        vals = sorted([nums[i], nums[j], nums[k]])\n                        if vals[1] == vals[0] + 1 and vals[2] == vals[1] + 1:\n                            return True\n        \n        return False\n\n    if check_mentsu(tiles):\n        print(0)\n        return\n\n    nums = []\n    suits = []\n    for tile in tiles:\n        nums.append(int(tile[0]))\n        suits.append(tile[1])\n    \n    # Check if adding one tile can form a mentsu\n    for num in range(1, 10):\n        for suit in ['m', 'p', 's']:\n            new_tile = str(num) + suit\n            new_tiles = tiles + [new_tile]\n            if check_mentsu(new_tiles):\n                print(1)\n                return\n\n    # Check if adding two tiles can form a mentsu\n    for num1 in range(1, 10):\n        for suit1 in ['m', 'p', 's']:\n            new_tile1 = str(num1) + suit1\n            for num2 in range(1, 10):\n                for suit2 in ['m', 'p', 's']:\n                    new_tile2 = str(num2) + suit2\n                    new_tiles = tiles + [new_tile1, new_tile2]\n                    if check_mentsu(new_tiles):\n                        print(2)\n                        return\n    \n    print(2)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            ox1, oy1, ox2, oy2 = sofas[i]\n            \n            min_x = min(x1, x2)\n            min_ox = min(ox1, ox2)\n            \n            if min_ox < min_x:\n                count += 1\n        return count\n\n    def count_right(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            ox1, oy1, ox2, oy2 = sofas[i]\n            \n            max_x = max(x1, x2)\n            max_ox = max(ox1, ox2)\n            \n            if max_ox > max_x:\n                count += 1\n        return count\n\n    def count_top(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            ox1, oy1, ox2, oy2 = sofas[i]\n            \n            min_y = min(y1, y2)\n            min_oy = min(oy1, oy2)\n            \n            if min_oy < min_y:\n                count += 1\n        return count\n\n    def count_bottom(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            ox1, oy1, ox2, oy2 = sofas[i]\n            \n            max_y = max(y1, y2)\n            max_oy = max(oy1, oy2)\n            \n            if max_oy > max_y:\n                count += 1\n        return count\n\n    for i in range(d):\n        l = count_left(i)\n        r = count_right(i)\n        t = count_top(i)\n        b = count_bottom(i)\n        \n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n    n = int(input())\n    \n    min_days_off = (n // 7) * 2\n    rem = n % 7\n    \n    if rem == 1:\n        min_days_off += 0\n    elif rem == 2:\n        min_days_off += 0\n    elif rem == 3:\n        min_days_off += 0\n    elif rem == 4:\n        min_days_off += 0\n    elif rem == 5:\n        min_days_off += 0\n    elif rem == 6:\n        min_days_off += 1\n\n    max_days_off = (n // 7) * 2\n    rem = n % 7\n    \n    if rem == 1:\n        max_days_off += 1\n    elif rem == 2:\n        max_days_off += 2\n    elif rem == 3:\n        max_days_off += 2\n    elif rem == 4:\n        max_days_off += 2\n    elif rem == 5:\n        max_days_off += 2\n    elif rem == 6:\n        max_days_off += 2\n    \n\n    print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)\n\ndef lcm(a, b):\n  return (a * b) // gcd(a, b)\n\nn, a, b, p, q = map(int, input().split())\n\nred_count = n // a\nblue_count = n // b\ncommon_count = n // lcm(a, b)\n\nred_only = red_count - common_count\nblue_only = blue_count - common_count\n\ntotal_chocolates = red_only * p + blue_only * q\n\nif p > q:\n  total_chocolates += common_count * p\nelse:\n  total_chocolates += common_count * q\n\nprint(total_chocolates)\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    \n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i+1] += 1\n            \n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n            \n    count = 0\n    order = []\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n        \n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n    \n    if count != n:\n        print(\"-1\")\n        return\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n    \n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n    \n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n    \n    p += remaining\n    \n    def is_stack_sortable(arr):\n        s = []\n        b = []\n        a = arr[:]\n        \n        def can_sort(a, s, b):\n            if not a and not s:\n                for i in range(len(b) - 1):\n                    if b[i] > b[i+1]:\n                        return False\n                return True\n            \n            if a:\n                s_new = s[:]\n                s_new.append(a[0])\n                if can_sort(a[1:], s_new, b[:]):\n                    return True\n            \n            if s:\n                b_new = b[:]\n                b_new.append(s[-1])\n                if can_sort(a[:], s[:-1], b_new[:]):\n                    return True\n            \n            return False\n        \n        return can_sort(a, s, b)\n    \n    \n    if is_stack_sortable(p):\n        print(*p)\n    else:\n        print(-1)\n\nsolve()\n```",
    "15": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n\n    if c == 0:\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        return\n\n    if (b - a) % c == 0 and (b - a) // c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\nn, k, t = map(int, input().split())\n\nif t <= k:\n    print(t)\nelif t > n:\n    print(k - (t - n))\nelse:\n    print(k)\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    t = \"\"\n    u = \"\"\n    \n    min_suffix = [\"\"] * (n + 1)\n    min_suffix[n] = \"\"\n    for i in range(n - 1, -1, -1):\n        if min_suffix[i+1] == \"\":\n            min_suffix[i] = s[i]\n        else:\n            if s[i] <= min_suffix[i+1][0]:\n                min_suffix[i] = s[i] + min_suffix[i+1]\n            else:\n                min_suffix[i] = min_suffix[i+1]\n    \n    for i in range(n):\n        t += s[0]\n        s = s[1:]\n        \n        while len(t) > 0 and t[-1] <= min_suffix[i+1][0] if i+1 < n else len(t) > 0:\n            u += t[-1]\n            t = t[:-1]\n    \n    u += t[::-1]\n    print(u)\n    \n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n    \n    ans = float('inf')\n    \n    for i in range(24 * 60):\n        cur_hh = hh\n        cur_mm = mm\n        \n        time_str = \"{:02d}:{:02d}\".format(cur_hh, cur_mm)\n        \n        if time_str == time_str[::-1]:\n            ans = 0\n            break\n        \n        \n        \n        \n        \n        \n        next_mm = (mm + 1) % 60\n        next_hh = hh\n        if next_mm == 0:\n            next_hh = (hh + 1) % 24\n        \n        \n        \n        \n        next_time_str = \"{:02d}:{:02d}\".format(next_hh, next_mm)\n        \n        if next_time_str == next_time_str[::-1]:\n            ans = 1\n            break\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        minutes = 0\n        \n        \n        \n        temp_hh = hh\n        temp_mm = mm\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
    "22": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    symmetric_chars = {'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p', 'o': 'o', 'x': 'x', 'X': 'X', 'H': 'H', 'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T', 'U': 'U', 'V': 'V', 'W': 'W', 'Y': 'Y'}\n    \n    is_s_palindrome = True\n    for i in range((n + 1) // 2):\n        if s[i] not in symmetric_chars or s[n - 1 - i] not in symmetric_chars:\n            is_s_palindrome = False\n            break\n        \n        if symmetric_chars.get(s[i]) != s[n - 1 - i]:\n            is_s_palindrome = False\n            break\n            \n    if is_s_palindrome:\n        print(\"TAK\")\n    else:\n        print(\"NIE\")\n\nsolve()\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_len = len(a)\n    b_len = len(b)\n    \n    if a_len > b_len:\n        print(\"\".join(sorted(a, reverse=True)))\n        return\n    \n    a_counts = Counter(a)\n    \n    def find_max(index, current_num, remaining_counts, is_smaller):\n        if index == a_len:\n            return current_num\n        \n        best_num = \"\"\n        \n        possible_digits = sorted(remaining_counts.keys(), reverse=True)\n        \n        for digit in possible_digits:\n            if is_smaller or digit <= b[index]:\n                new_counts = remaining_counts.copy()\n                new_counts[digit] -= 1\n                if new_counts[digit] == 0:\n                    del new_counts[digit]\n                \n                new_is_smaller = is_smaller or digit < b[index]\n                \n                temp_num = find_max(index + 1, current_num + digit, new_counts, new_is_smaller)\n                \n                if len(temp_num) == a_len and (best_num == \"\" or temp_num > best_num):\n                    best_num = temp_num\n        \n        return best_num\n    \n    result = find_max(0, \"\", a_counts, False)\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(list(input()))\n\n    def check_win(board):\n        # Check horizontal\n        for row in board:\n            for i in range(len(row) - 4):\n                if row[i] == 'X' and row[i+1] == 'X' and row[i+2] == 'X' and row[i+3] == 'X' and row[i+4] == 'X':\n                    return True\n\n        # Check vertical\n        for col in range(10):\n            for i in range(10 - 4):\n                if board[i][col] == 'X' and board[i+1][col] == 'X' and board[i+2][col] == 'X' and board[i+3][col] == 'X' and board[i+4][col] == 'X':\n                    return True\n\n        # Check diagonal (top-left to bottom-right)\n        for i in range(10 - 4):\n            for j in range(10 - 4):\n                if board[i][j] == 'X' and board[i+1][j+1] == 'X' and board[i+2][j+2] == 'X' and board[i+3][j+3] == 'X' and board[i+4][j+4] == 'X':\n                    return True\n\n        # Check diagonal (top-right to bottom-left)\n        for i in range(10 - 4):\n            for j in range(4, 10):\n                if board[i][j] == 'X' and board[i+1][j-1] == 'X' and board[i+2][j-2] == 'X' and board[i+3][j-3] == 'X' and board[i+4][j-4] == 'X':\n                    return True\n\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n                if check_win(board):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n    \n    if k > 0:\n        print(\"-1\")\n        return\n    \n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\nimport math\n\nx, y, z = map(float, input().split())\n\na1 = x ** (y ** z)\na2 = x ** (z ** y)\na3 = (x ** y) ** z\na4 = (x ** z) ** y\na5 = y ** (x ** z)\na6 = y ** (z ** x)\na7 = (y ** x) ** z\na8 = (y ** z) ** x\na9 = z ** (x ** y)\na10 = z ** (y ** x)\na11 = (z ** x) ** y\na12 = (z ** y) ** x\n\nvalues = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\nexpressions = [\"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"]\n\nmax_value = max(values)\nindex = values.index(max_value)\n\nprint(expressions[index])\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s[:2*i] == prefix + prefix:\n            ans = min(ans, i + 1 + (n - 2*i))\n        elif s[:i] == s[i:2*i] and n > 2*i:\n            ans = min(ans, i + 1 + (n- (i+i)))\n\n    print(ans)\n    \nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n    \n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n            \n    e = len(examples)\n    \n    moves = []\n    \n    # Move examples to the first e positions\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            if str(i + 1) in [f[0] for f in examples] or str(i+1) in [f[0] for f in regular]:\n              \n              temp_name = \"temp\" + str(i+1)\n              while temp_name in [f[0] for f in examples] or temp_name in [f[0] for f in regular]:\n                  temp_name = \"temp\" + temp_name\n                  \n              moves.append(f\"move {examples[i][0]} {temp_name}\")\n              moves.append(f\"move {str(i+1)} {examples[i][0]}\")\n              moves.append(f\"move {temp_name} {str(i+1)}\")\n            else:\n                moves.append(f\"move {examples[i][0]} {str(i + 1)}\")\n    \n    # Move regular tests to the remaining positions\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n          if str(e + i + 1) in [f[0] for f in examples] or str(e + i + 1) in [f[0] for f in regular]:\n              \n              temp_name = \"temp\" + str(e + i + 1)\n              while temp_name in [f[0] for f in examples] or temp_name in [f[0] for f in regular]:\n                  temp_name = \"temp\" + temp_name\n                  \n              moves.append(f\"move {regular[i][0]} {temp_name}\")\n              moves.append(f\"move {str(e+i+1)} {regular[i][0]}\")\n              moves.append(f\"move {temp_name} {str(e+i+1)}\")\n          else:\n            moves.append(f\"move {regular[i][0]} {str(e + i + 1)}\")\n    \n    print(len(moves))\n    for move in moves:\n        print(move)\n\nsolve()\n```",
    "29": "```python\ns = input()\nans = 6\nfor i in range(1000):\n    x = str(i).zfill(3)\n    for j in range(1000):\n        y = str(j).zfill(3)\n        if sum(map(int, x)) == sum(map(int, y)):\n            cnt = 0\n            for k in range(3):\n                if s[k] != x[k]:\n                    cnt += 1\n            for k in range(3):\n                if s[k + 3] != y[k]:\n                    cnt += 1\n            ans = min(ans, cnt)\nprint(ans)\n```",
    "30": "```python\ndef solve():\n  m, x = map(int, input().split())\n  print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    twos = 0\n\n    for i in range(k):\n        if i == 0:\n            continue\n\n        val = pow(2, n, mod) - i\n        if val < 0:\n            val += mod\n\n        num = (num * val) % mod\n        \n        temp = i\n        while temp > 0 and temp % 2 == 0:\n            twos += 1\n            temp //= 2\n\n    \n    twos_in_den = min(n * (k - 1), twos)\n    \n    den = pow(pow(2, n, mod), k - 1, mod)\n    twos_in_num = twos\n    \n    num_twos_removed = 0\n    den_twos_removed = 0\n\n    while num != 0 and num % 2 == 0:\n      num //= 2\n      num_twos_removed += 1\n    while den != 0 and den % 2 == 0:\n      den //= 2\n      den_twos_removed += 1\n    \n    inv_den = pow(den, mod - 2, mod)\n    \n    prob_diff = (num * inv_den) % mod\n\n    ans = (1 - prob_diff + mod) % mod\n\n    print(ans, 1)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0 \n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if current_pos == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n        \n        if direction == \"North\":\n            current_pos -= t\n            if current_pos < 0:\n                current_pos = 0\n        elif direction == \"South\":\n            current_pos += t\n            if current_pos > 20000:\n                current_pos = 20000\n                \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\nimport math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    lcm = (a1 * a2) // g\n\n    d, x, y = extended_gcd(a1, a2)\n    x *= (b2 - b1) // g\n    y *= (b2 - b1) // g\n\n    x0 = x\n    y0 = y\n\n    k = math.ceil(-x0 / (a2 // g))\n    x0 += k * (a2 // g)\n    y0 -= k * (a1 // g)\n\n    first_val = a1 * x0 + b1\n    \n    if first_val < min(b1, b2):\n        k = math.ceil((min(b1, b2) - first_val) / lcm)\n        first_val += k * lcm\n\n    \n    if first_val < L:\n        k = math.ceil((L - first_val) / lcm)\n        first_val += k * lcm\n    \n\n    if first_val > R:\n        print(0)\n        return\n\n    count = (R - first_val) // lcm + 1\n    if count < 0:\n        print(0)\n        return\n    \n    \n    \n    k_min = 0\n    if (first_val - b1) % a1 != 0:\n        print(0)\n        return\n    k_min = (first_val - b1) // a1\n\n    if k_min < 0:\n        \n        k_add = math.ceil(-k_min / (lcm // a1))\n        first_val += k_add * lcm\n        if first_val > R:\n          print(0)\n          return\n        count = (R - first_val) // lcm + 1\n        if count < 0:\n          print(0)\n          return\n        \n\n    k_min2 = 0\n    if (first_val - b2) % a2 != 0:\n        print(0)\n        return\n    k_min2 = (first_val - b2) // a2\n    \n    if k_min2 < 0:\n        k_add = math.ceil(-k_min2 / (lcm // a2))\n        first_val += k_add * lcm\n        if first_val > R:\n          print(0)\n          return\n        count = (R - first_val) // lcm + 1\n        if count < 0:\n          print(0)\n          return\n    \n    print(count)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n  n, a, b = map(int, input().split())\n  \n  ans = 0\n  for i in range(1, n):\n    if i >= 1 and i < n:\n      plate_a = i\n      plate_b = n - i\n      \n      x = min(a // plate_a, b // plate_b)\n      ans = max(ans, x)\n  print(ans)\n  \nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n\n    if n == 0:\n        print(0, 0)\n        return\n\n    l, r = 0, 10**9\n    k = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if 3 * mid * (mid + 1) >= n:\n            k = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    n -= 3 * k * (k - 1)\n    k -= 1\n    k += 1\n    \n    if n <= k:\n        print(2 * k - n, 2 * n)\n    elif n <= 2 * k:\n        n -= k\n        print(k - 2 * n, 2 * k)\n    elif n <= 3 * k:\n        n -= 2 * k\n        print(-k - n, 2 * k - 2 * n)\n    elif n <= 4 * k:\n        n -= 3 * k\n        print(-2 * k + n, -2 * n)\n    elif n <= 5 * k:\n        n -= 4 * k\n        print(-k + 2 * n, -2 * k)\n    else:\n        n -= 5 * k\n        print(k + n, -2 * k + 2 * n)\n\nsolve()\n```",
    "38": "```python\ndef solve():\n  n, l = map(int, input().split())\n  kefa = list(map(int, input().split()))\n  sasha = list(map(int, input().split()))\n\n  for start in range(l):\n    temp = []\n    for i in range(n):\n      temp.append((sasha[i] + start) % l)\n    temp.sort()\n    if temp == kefa:\n      print(\"YES\")\n      return\n  \n  print(\"NO\")\n\nsolve()\n```",
    "39": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sub != sub[::-1]:\n                max_len = max(max_len, len(sub))\n    \n    print(max_len)\n\nsolve()\n```",
    "41": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    distances = []\n    for i in range(n):\n        min_dist = float('inf')\n        for j in range(n):\n            if a[j] == 0:\n                dist = abs(i - j)\n                min_dist = min(min_dist, dist)\n        distances.append(min_dist)\n    \n    print(*distances)\n\nsolve()\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    distinct_strings = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        if binary_string in distinct_strings:\n            continue\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            \n            for j in range(n):\n                shifted_string = binary_string[j:] + binary_string[:j]\n                distinct_strings.add(shifted_string)\n                \n    print(count)\n\nsolve()\n```",
    "44": "```python\nd, k, a, b, t = map(int, input().split())\n\nif d <= k:\n  print(d * a)\nelse:\n  if a * k + t >= b * k:\n    print(k * a + (d - k) * b)\n  else:\n    num_breaks = (d - 1) // k\n    \n    if num_breaks * t + d * a < k * a + (num_breaks * k) * a + (d - num_breaks * k) * b:\n        print(num_breaks * t + d * a)\n    else:\n        print(k * a + (num_breaks * t) + (d - k - num_breaks * (k - k)) * b)\n    \n    \n    if (d // k) >= 1:\n        \n        if (d // k) * k != d:\n            print((d // k) * (k * a + t) + (d % k) * a if (d // k) * (k * a + t) + (d % k) * a < (k * a) + (t * (d // k -1 + 1)) + ((d - (k + (d // k - 1 + 1) * (k-k)))) * b else (k * a) + (t * (d // k -1 + 1)) + ((d - (k + (d // k - 1 + 1) * (k-k)))) * b)\n            \n        else:\n            print((d // k-1) * (k * a + t) + (k * a) if (d // k-1) * (k * a + t) + (k * a) < (k * a) + (t * (d // k -1)) + ((d - (k + (d // k - 1) * (k-k)))) * b else (k * a) + (t * (d // k -1)) + ((d - (k + (d // k - 1) * (k-k)))) * b)\n\n    else:\n            print(d * a)\n\n    if k * a + t > k * b:\n      print(k * a + (d-k) * b)\n    \n    else:\n        num_k = d // k\n        rem = d % k\n        \n        print(k*a*num_k + t*(num_k-1) + rem*a) if num_k != 0 else print(d*a)\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k * (k + 1) // 2 > n:\n        print(\"-1\")\n        return\n\n    best_gcd = 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, i)\n            if i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // i)\n    \n    if best_gcd == 1 and k * (k+1) // 2 > n:\n      print(\"-1\")\n      return\n    \n    seq = []\n    sum_so_far = 0\n    for i in range(1, k):\n        seq.append(best_gcd * i)\n        sum_so_far += best_gcd * i\n    \n    seq.append(n - sum_so_far)\n    \n    if seq[-1] <= seq[-2]:\n      print(\"-1\")\n      return\n    \n    print(*seq)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n  n, m = map(int, input().split())\n  \n  count = 0\n  for x in range(1, n + 1):\n    for y in range(1, m + 1):\n      if (x + y) % 5 == 0:\n        count += 1\n  print(count)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\nlength = 1\ncount = 9\n\nwhile k > length * count:\n  k -= length * count\n  length += 1\n  count *= 10\n\nnumber = 10**(length - 1) + (k - 1) // length\nindex = (k - 1) % length\n\nprint(str(number)[index])\n```",
    "51": "```python\ndef solve():\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    divisors.sort()\n    x = divisors[-1]\n    \n    divisors_x = []\n    for i in range(1, int(x**0.5) + 1):\n        if x % i == 0:\n            divisors_x.append(i)\n            if i * i != x:\n                divisors_x.append(x // i)\n    divisors_x.sort()\n\n    temp_divisors = divisors[:]\n    for val in divisors_x:\n        if val in temp_divisors:\n            temp_divisors.remove(val)\n\n    y = 1\n    if len(temp_divisors) > 0:\n        y = temp_divisors[-1]\n    \n    divisors_y = []\n    for i in range(1, int(y**0.5) + 1):\n        if y % i == 0:\n            divisors_y.append(i)\n            if i * i != y:\n                divisors_y.append(y // i)\n    divisors_y.sort()\n\n    merged_divisors = divisors_x + divisors_y\n    merged_divisors.sort()\n    divisors.sort()\n\n    if merged_divisors == divisors:\n        print(x, y)\n    else:\n        print(\"Error\")\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def get_dp(row_idx, rem):\n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n        \n        if row_idx == n:\n            if rem == 0:\n                return 0\n            else:\n                return float('-inf')\n        \n        max_sum = float('-inf')\n        \n        # Option 1: Don't take any elements from this row\n        max_sum = max(max_sum, get_dp(row_idx + 1, rem))\n        \n        # Option 2: Take elements from this row\n        row = a[row_idx]\n        max_elements = m // 2\n        \n        row_dp = {}\n        \n        def get_row_dp(col_idx, num_elements, row_rem):\n            if (col_idx, num_elements, row_rem) in row_dp:\n                return row_dp[(col_idx, num_elements, row_rem)]\n            \n            if col_idx == m:\n                if num_elements <= max_elements:\n                    return 0\n                else:\n                    return float('-inf')\n            \n            res = float('-inf')\n            \n            # Option 1: Don't take this element\n            res = max(res, get_row_dp(col_idx + 1, num_elements, row_rem))\n            \n            # Option 2: Take this element\n            res = max(res, row[col_idx] + get_row_dp(col_idx + 1, num_elements + 1, (row_rem + row[col_idx]) % k))\n            \n            row_dp[(col_idx, num_elements, row_rem)] = res\n            return res\n        \n        for row_rem in range(k):\n            row_res = get_row_dp(0, 0, row_rem)\n            max_sum = max(max_sum, row_res + get_dp(row_idx + 1, (rem - row_rem) % k))\n        \n        dp[(row_idx, rem)] = max_sum\n        return max_sum\n\n    print(get_dp(0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  def find_longest_increasing_sequence(arr):\n    max_len = 0\n    best_moves = \"\"\n\n    def backtrack(current_sequence, remaining_arr, moves):\n      nonlocal max_len, best_moves\n\n      if len(current_sequence) > max_len:\n        max_len = len(current_sequence)\n        best_moves = moves\n\n      if not remaining_arr:\n        return\n\n      if not current_sequence:\n        \n        backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n        backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n      else:\n        last_element = current_sequence[-1]\n        \n        if remaining_arr[0] > last_element:\n          backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n          \n        if remaining_arr[-1] > last_element and remaining_arr[-1] != remaining_arr[0] or len(remaining_arr) == 1 and remaining_arr[-1] > last_element:\n          backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n    backtrack([], a, \"\")\n    return max_len, best_moves\n\n  length, moves = find_longest_increasing_sequence(a)\n  print(length)\n  print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    unique_vals = sorted(list(set(a)))\n\n    if len(unique_vals) > 3:\n        print(-1)\n        return\n\n    if len(unique_vals) == 1:\n        print(0)\n        return\n\n    if len(unique_vals) == 2:\n        d = unique_vals[1] - unique_vals[0]\n        if d % 2 == 0:\n            print(d // 2)\n        else:\n            print(d)\n        return\n\n    if len(unique_vals) == 3:\n        if unique_vals[1] - unique_vals[0] == unique_vals[2] - unique_vals[1]:\n            print(unique_vals[1] - unique_vals[0])\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n  x1, y1, x2, y2 = map(int, input().split())\n  x3, y3, x4, y4 = map(int, input().split())\n  x5, y5, x6, y6 = map(int, input().split())\n\n  white_area = (x2 - x1) * (y2 - y1)\n\n  # Intersection of white and black 1\n  x_overlap1 = max(0, min(x2, x4) - max(x1, x3))\n  y_overlap1 = max(0, min(y2, y4) - max(y1, y3))\n  intersection_area1 = x_overlap1 * y_overlap1\n\n  # Intersection of white and black 2\n  x_overlap2 = max(0, min(x2, x6) - max(x1, x5))\n  y_overlap2 = max(0, min(y2, y6) - max(y1, y5))\n  intersection_area2 = x_overlap2 * y_overlap2\n\n  # Intersection of white, black 1, and black 2\n  x_overlap12 = max(0, min(x2, x4, x6) - max(x1, x3, x5))\n  y_overlap12 = max(0, min(y2, y4, y6) - max(y1, y3, y5))\n  intersection_area12 = x_overlap12 * y_overlap12\n\n  # Area of white covered by black 1 or black 2\n  covered_area = intersection_area1 + intersection_area2 - intersection_area12\n\n  if white_area > covered_area:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nsolve()\n```",
    "56": "```python\ndef f(x):\n    x += 1\n    while x % 10 == 0:\n        x //= 10\n    return x\n\ndef solve():\n    n = int(input())\n    reachable = {n}\n    curr = n\n    while True:\n        curr = f(curr)\n        if curr in reachable:\n            break\n        reachable.add(curr)\n    print(len(reachable))\n\nsolve()\n```",
    "57": "```python\ndef solve():\n  n = int(input())\n  f = list(map(int, input().split()))\n  \n  givers = [i + 1 for i in range(n)]\n  receivers = [i + 1 for i in range(n)]\n  \n  given = set()\n  \n  for i in range(n):\n    if f[i] != 0:\n      given.add(f[i])\n  \n  not_given = []\n  for i in range(1, n + 1):\n    if i not in given:\n      not_given.append(i)\n      \n  zeros = []\n  for i in range(n):\n    if f[i] == 0:\n      zeros.append(i)\n  \n  \n  for i in range(len(zeros)):\n    idx = zeros[i]\n    \n    candidates = []\n    for val in not_given:\n      if val != idx + 1:\n        candidates.append(val)\n    \n    if not candidates:\n      print(\"Error: No candidates\")\n      return\n    \n    best_candidate = candidates[0]\n    \n    f[idx] = best_candidate\n    not_given.remove(best_candidate)\n  \n  \n  \n  print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n    \n    indices = {}\n    for i in range(n):\n        if a[i] not in indices:\n            indices[a[i]] = []\n        indices[a[i]].append(i)\n    \n    colors = [0] * n\n    color_idx = 1\n    \n    for val in indices:\n        for idx in indices[val]:\n            colors[idx] = color_idx\n            color_idx = (color_idx % k) + 1\n            \n    print(\"YES\")\n    print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    \n    max_num = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a = list(a)\n            for k in range(i, j + 1):\n                digit = int(a[k])\n                temp_a[k] = str(f[digit - 1])\n            \n            new_num = \"\".join(temp_a)\n            if new_num > max_num:\n                max_num = new_num\n                \n    print(max_num)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n                    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n  n, m = map(int, input().split())\n  exams = []\n  for i in range(m):\n    s, d, c = map(int, input().split())\n    exams.append((s, d, c, i + 1))\n  \n  schedule = [0] * n\n  exam_days = {}\n  for s, d, c, i in exams:\n    exam_days[d - 1] = i + m\n\n  for day in exam_days:\n    schedule[day] = exam_days[day]\n\n  preparation_counts = [0] * m\n  \n  for day in range(n):\n    if schedule[day] != 0:\n      continue\n\n    best_exam = -1\n    for i, (s, d, c, exam_num) in enumerate(exams):\n      if s - 1 <= day < d - 1 and preparation_counts[i] < c:\n          if best_exam == -1:\n              best_exam = i\n          else:\n              s_best, d_best, c_best, exam_num_best = exams[best_exam]\n              if d > d_best:\n                  best_exam = i\n\n    if best_exam != -1:\n      schedule[day] = exams[best_exam][3]\n      preparation_counts[best_exam] += 1\n\n  for i in range(m):\n    if exams[i][2] != preparation_counts[i]:\n      print(-1)\n      return\n  \n  print(*schedule)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n  n, k = map(int, input().split())\n  t = input()\n  \n  if k == 1:\n    print(t)\n    return\n  \n  max_overlap = 0\n  for i in range(1, n):\n    if t[:n-i] == t[i:]:\n      max_overlap = n - i\n      break\n  \n  s = t\n  for _ in range(k - 1):\n    s += t[max_overlap:]\n  \n  print(s)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        \n        counts = {}\n        for l in range(i):\n          if s[l] in counts:\n            counts[s[l]] +=1\n          else:\n            counts[s[l]] = 1\n    \n    \n    counts = {}\n    \n    \n    combinations = [[0] * (n + 1) for _ in range(n + 1)]\n    combinations[0][0] = 1\n    \n    for i in range(1, n + 1):\n      for j in range(i + 1):\n        combinations[i][0] = 1\n        if j > 0:\n          combinations[i][j] = combinations[i-1][j] + combinations[i-1][j-1]\n          \n    \n    subsequence_counts = [0] * (n + 1)\n    \n    combinations = [[0] * (n + 1) for _ in range(n + 1)]\n    combinations[0][0] = 1\n    \n    for i in range(1, n + 1):\n      for j in range(i + 1):\n        combinations[i][0] = 1\n        if j > 0:\n          combinations[i][j] = combinations[i-1][j] + combinations[i-1][j-1]\n    \n    \n    subsequence_counts = [0] * (n + 1)\n    \n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    \n    subsequence_counts = [0] * (n + 1)\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        counts = {}\n        for char in s[:i]:\n            counts[char] = counts.get(char, 0) + 1\n        \n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n                if s[i-1] in counts and counts[s[i-1]] > 1:\n                   \n                    first_occurrence = -1\n                    for l in range(i-1):\n                        if s[l] == s[i-1]:\n                            first_occurrence = l\n                            break\n                   \n                    if first_occurrence != -1:\n                        dp[i][j] -= dp[first_occurrence][j-1]\n                        if dp[i][j] < 0:\n                            dp[i][j] = max(0, dp[i][j])\n\n    total_cost = 0\n    \n    for length in range(n, -1, -1):\n        if dp[n][length] <= k:\n            total_cost += (n - length) * dp[n][length]\n            k -= dp[n][length]\n        else:\n            total_cost += (n - length) * k\n            k = 0\n            break\n\n    if k > 0:\n      print(\"-1\")\n    else:\n      print(total_cost)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n\n    def check_degree(tree):\n        degree = 0\n        for u, v in tree:\n            if u == 1 or v == 1:\n                degree += 1\n        return degree\n\n    def is_connected(tree, num_nodes):\n        if not tree:\n            return False if num_nodes > 1 else True\n        \n        adj = [[] for _ in range(num_nodes + 1)]\n        for u, v in tree:\n            adj[u].append(v)\n            adj[v].append(u)\n        \n        visited = [False] * (num_nodes + 1)\n        \n        def dfs(node):\n            visited[node] = True\n            for neighbor in adj[node]:\n                if not visited[neighbor]:\n                    dfs(neighbor)\n        \n        dfs(1)\n        \n        for i in range(1, num_nodes + 1):\n            if not visited[i]:\n                return False\n        return True\n\n    import itertools\n    \n    for i in itertools.combinations(edges, n - 1):\n        tree = list(i)\n        if is_connected(tree, n) and check_degree(tree) == d:\n            print(\"YES\")\n            for u, v in tree:\n                print(u, v)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "71": "```python\nimport math\n\na = int(input())\n\nif a == 1:\n  print(1)\nelse:\n  print(math.ceil(math.log(a, 2)))\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n  n, k = map(int, input().split())\n  s = input()\n\n  dp = [[0] * (n + 1) for _ in range(n + 1)]\n  dp[0][0] = 1\n\n  for i in range(1, n + 1):\n    for j in range(i + 1):\n      dp[i][j] = dp[i - 1][j]\n      if j > 0:\n        dp[i][j] += dp[i - 1][j - 1]\n\n  subsequences_counts = [dp[n][i] for i in range(n + 1)]\n\n  total_cost = 0\n  for length in range(n, -1, -1):\n    count = subsequences_counts[length]\n    \n    if k > count:\n      total_cost += count * (n - length)\n      k -= count\n    else:\n      total_cost += k * (n - length)\n      k = 0\n      break\n\n  if k > 0:\n    print(-1)\n  else:\n    print(total_cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    week = [0, 1, 2, 0, 2, 1, 0]\n    \n    best_days = 0\n    \n    for start_day in range(7):\n        \n        days = 0\n        a_temp = a\n        b_temp = b\n        c_temp = c\n        \n        current_day = start_day\n        \n        while True:\n            \n            food_type = week[current_day % 7]\n            \n            if food_type == 0:\n                if a_temp > 0:\n                    a_temp -= 1\n                    days += 1\n                else:\n                    break\n            elif food_type == 1:\n                if b_temp > 0:\n                    b_temp -= 1\n                    days += 1\n                else:\n                    break\n            else:\n                if c_temp > 0:\n                    c_temp -= 1\n                    days += 1\n                else:\n                    break\n            \n            current_day += 1\n        \n        best_days = max(best_days, days)\n        \n    print(best_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile = []\n        tile.append(list(map(int, input().split())))\n        tile.append(list(map(int, input().split())))\n        tiles.append(tile)\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n    \n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\nn = int(input())\ntotal_sum = n * (n + 1) // 2\nif total_sum % 2 == 0:\n    print(0)\nelse:\n    print(1)\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    \n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    def count_substring(seq, sub):\n        count = 0\n        for i in range(len(seq) - len(sub) + 1):\n            if seq[i:i+len(sub)] == sub:\n                count += 1\n        return count > 0\n\n    count = 0\n    \n    def generate_sequences(current_seq, remaining_length):\n        nonlocal count\n        \n        if remaining_length == 0:\n            if is_regular(current_seq) and count_substring(current_seq, s):\n                count = (count + 1) % mod\n            return\n        \n        generate_sequences(current_seq + '(', remaining_length - 1)\n        generate_sequences(current_seq + ')', remaining_length - 1)\n    \n    generate_sequences(\"\", 2 * n)\n    print(count)\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    \n    ans = float('inf')\n    \n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        temp_n = list(n)\n        moves = 0\n        \n        # Find the last digit of the suffix\n        last_digit_index = -1\n        for i in range(n_len - 1, -1, -1):\n            if temp_n[i] == suffix[1]:\n                last_digit_index = i\n                break\n        \n        if last_digit_index == -1:\n            continue\n            \n        moves += n_len - 1 - last_digit_index\n        temp_n.pop(last_digit_index)\n        \n        # Find the first digit of the suffix\n        first_digit_index = -1\n        for i in range(len(temp_n) - 1, -1, -1):\n            if temp_n[i] == suffix[0]:\n                first_digit_index = i\n                break\n        \n        if first_digit_index == -1:\n            continue\n\n        moves += len(temp_n) - 1 - first_digit_index\n        temp_n.pop(first_digit_index)\n        \n        # Remove leading zeroes\n        leading_zeroes = 0\n        for i in range(len(temp_n)):\n            if temp_n[i] == '0':\n                leading_zeroes += 1\n            else:\n                break\n        \n        if leading_zeroes == len(temp_n):\n            continue\n            \n        moves += leading_zeroes\n        \n        ans = min(ans, moves)\n    \n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def check(colors):\n        colored_string = list(zip(s, colors))\n        \n        def sortable(arr):\n            n = len(arr)\n            for i in range(n):\n                for j in range(0, n-i-1):\n                    if arr[j][0] > arr[j+1][0] and arr[j][1] != arr[j+1][1]:\n                        arr[j], arr[j+1] = arr[j+1], arr[j]\n            \n            sorted_chars = [char for char, _ in arr]\n            return sorted_chars == sorted(s)\n        \n        return sortable(colored_string)\n\n    for num_colors in range(1, n + 1):\n        for i in range(num_colors**n):\n            colors = []\n            temp = i\n            for _ in range(n):\n                colors.append(temp % num_colors + 1)\n                temp //= num_colors\n            \n            if check(colors):\n                print(num_colors)\n                print(*colors)\n                return\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = [input() for _ in range(n)]\n    \n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    import itertools\n    \n    for perm in itertools.permutations(strings):\n        if check_order(list(perm)):\n            print(\"YES\")\n            for s in perm:\n                print(s)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "83": "```python\nimport math\n\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    min_perimeter = float('inf')\n    \n    for h in range(1, int(math.sqrt(total)) + 2):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: a forms a rectangle\n            for h_a in range(1, int(math.sqrt(a)) + 2):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    \n                    if h_a <= h and w_a <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n                        \n            # Case 2: b forms a rectangle\n            for h_b in range(1, int(math.sqrt(b)) + 2):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    \n                    if h_b <= h and w_b <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n    \n    print(min_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n  n = int(input())\n  s = input()\n\n  for i in range(1 << n):\n    coloring = \"\"\n    s1 = \"\"\n    s2 = \"\"\n    for j in range(n):\n      if (i >> j) & 1:\n        coloring += \"1\"\n        s2 += s[j]\n      else:\n        coloring += \"0\"\n        s1 += s[j]\n\n    s1_sorted = \"\".join(sorted(s1))\n    s2_sorted = \"\".join(sorted(s2))\n\n    merged = \"\"\n    i1 = 0\n    i2 = 0\n    \n    possible = True\n    \n    for k in range(n):\n      if coloring[k] == '0':\n        if i1 < len(s1_sorted):\n          merged += s1_sorted[i1]\n          i1 += 1\n        else:\n          possible = False\n          break\n          \n      else:\n        if i2 < len(s2_sorted):\n          merged += s2_sorted[i2]\n          i2 += 1\n        else:\n          possible = False\n          break\n    \n    if not possible:\n        continue\n    \n    \n    \n    if \"\".join(sorted(s)) == merged:\n      print(\"YES\")\n      print(coloring)\n      return\n\n  print(\"NO\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - k * (k + 1) // 2\n\n    add = remaining // k\n    rem = remaining % k\n\n    for i in range(k):\n        a[i] += add\n\n    for i in range(k - 1, k - 1 - rem, -1):\n        a[i] += 1\n\n    \n    possible = True\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            possible = False\n            break\n    \n    if possible:\n        print(\"YES\")\n        print(*a)\n    else:\n        \n        a = [i + 1 for i in range(k)]\n        \n        \n        if k > 1:\n            diff = a[1] - a[0]\n            while diff < 1 or a[1]> 2 * a[0]:\n                a[0] -= 1\n                a[1] += 1\n                if a[0] <=0:\n                    possible = False\n                    break\n                diff = a[1] - a[0]\n            \n            if possible:\n                total_sum = sum(a)\n                remaining = n - total_sum\n                \n                add = remaining // k\n                rem = remaining % k\n                \n                for i in range(k):\n                    a[i] += add\n                \n                for i in range(k - 1, k - 1 - rem, -1):\n                    a[i] += 1\n                    \n                possible = True\n                for i in range(k - 1):\n                    if not (a[i] < a[i+1] <= 2 * a[i]):\n                        possible = False\n                        break\n                if possible:\n                    print(\"YES\")\n                    print(*a)\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n        else:\n            if n > 0:\n                print(\"YES\")\n                print(n)\n            else:\n                print(\"NO\")\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def can_place(r, c):\n        return r >= 0 and r < n and c >= 0 and c < n and matrix[r][c] == 0\n    \n    def find_solution():\n        for r in range((n + 1) // 2):\n            for c in range((n + 1) // 2):\n                if matrix[r][c] == 0:\n                    found = False\n                    for num in list(counts.keys()):\n                        if counts[num] >= 1:\n                            \n                            needed = 1\n                            if r != n - 1 - r:\n                                needed += 1\n                            if c != n - 1 - c:\n                                needed += 1\n                            if r != n - 1 - r and c != n - 1 - c:\n                                needed += 1\n                                \n                            if counts[num] >= needed:\n                                \n                                matrix[r][c] = num\n                                matrix[n - 1 - r][c] = num\n                                matrix[r][n - 1 - c] = num\n                                matrix[n - 1 - r][n - 1 - c] = num\n                                \n                                counts[num] -= needed\n                                \n                                if counts[num] == 0:\n                                    del counts[num]\n                                \n                                found = True\n                                break\n                    if not found:\n                        return False\n        return True\n    \n    if find_solution():\n        print(\"YES\")\n        for row in matrix:\n            print(*row)\n    else:\n        print(\"NO\")\n        \n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(order):\n        curr_r = r\n        for i in order:\n            a, b = projects[i]\n            if curr_r < a:\n                return False\n            curr_r += b\n            if curr_r < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if check(order):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n    \n    total_length = sum(c)\n    \n    if d >= n + 1:\n        arr = [0] * n\n        arr[n - c[0]:] = [1] * c[0]\n        print(\"YES\")\n        print(*arr)\n        return\n    \n    arr = [0] * n\n    \n    pos = 0\n    for i in range(m):\n        arr[pos:pos + c[i]] = [i + 1] * c[i]\n        pos += c[i]\n    \n    \n    def check_reachable(arrangement):\n        curr = 0\n        while curr < n + 1:\n            \n            possible_next = []\n            for j in range(1, d + 1):\n                if curr + j <= n:\n                    possible_next.append(curr + j)\n                elif curr + j == n + 1:\n                    return True\n                \n            \n            next_pos = -1\n            for p in possible_next:\n                if p <= n and arrangement[p-1] != 0:\n                    next_pos = p\n                    break\n            \n            if next_pos == -1:\n                return False\n            curr = next_pos\n        return False\n\n    \n    def find_arrangement():\n        unused_space = n - sum(c)\n        arrangement = [0] * n\n\n        start_positions = []\n        curr_pos = 0\n        for i in range(m):\n            start_positions.append(curr_pos)\n            curr_pos += c[i]\n\n        \n        def backtrack(k, curr_arrangement):\n            if k == m:\n                if check_reachable(curr_arrangement):\n                    return curr_arrangement\n                else:\n                    return None\n            \n            max_start = n - sum(c[k:])\n            for start in range(0, unused_space + 1):\n                new_arrangement = curr_arrangement[:]\n                \n                curr_index = 0\n                for i in range(k):\n                    while curr_index < len(new_arrangement) and new_arrangement[curr_index] != 0:\n                        curr_index += 1\n\n                \n                platform_start = 0\n                if k == 0:\n                  platform_start = start\n                else:\n                  platform_start = sum(c[:k]) + start\n                \n                \n                for i in range(c[k]):\n                    new_arrangement[platform_start + i] = k + 1\n\n                \n                result = backtrack(k + 1, new_arrangement)\n                if result != None:\n                    return result\n            \n            return None\n\n        initial_arrangement = [0] * n\n        final_arrangement = backtrack(0, initial_arrangement)\n\n        return final_arrangement\n    \n    final_arr = find_arrangement()\n    \n    if final_arr:\n        print(\"YES\")\n        print(*final_arr)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    max_len = 0\n    \n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            \n            k = 0\n            l = 0\n            \n            while k < len(temp_s) and l < m:\n                if temp_s[k] == t[l]:\n                    l += 1\n                k += 1\n            \n            if l == m:\n                max_len = max(max_len, j - i)\n                \n    print(max_len)\n\nsolve()\n```",
    "92": "```python\nx = float(input())\n\na = int(x * 2.0) + 1\nb = int((x + 1.0) * 2.0) // 2 + 1\n\nprint(a, b)\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        if k <= 1:\n            print(\"NO\")\n            return\n    if d == 1 and n == 2 and k < 1:\n        print(\"NO\")\n        return\n\n    if d > 1 and k == 1:\n        print(\"NO\")\n        return\n\n    edges = []\n    \n    # Create a path of length d\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n\n    remaining_nodes = n - (d + 1)\n    \n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n    \n    available_nodes = list(range(1, n + 1))\n    \n    def find_node_with_degree_less_than_k():\n        for node in available_nodes:\n            if degrees[node] < k:\n                return node\n        return None\n    \n    current_node_index = 1\n    \n    for _ in range(remaining_nodes):\n        node_to_connect = find_node_with_degree_less_than_k()\n        if node_to_connect is None:\n            print(\"NO\")\n            return\n        \n        new_node = len(degrees)\n        while new_node in available_nodes:\n          new_node += 1\n        \n        \n        if new_node > n:\n          \n          new_node = 0\n          for i in range(1, n+1):\n            \n            if i not in [node[0] for node in edges]:\n                \n                new_node = i\n                break\n          \n          if new_node == 0:\n            print(\"NO\")\n            return\n\n        edges.append((node_to_connect, current_node_index + d +1))\n        degrees[node_to_connect] += 1\n        degrees[current_node_index + d + 1] = 1\n        current_node_index += 1\n    \n    if any(degree > k for degree in degrees[1:]):\n        print(\"NO\")\n        return\n    \n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = '0'\n        a -= 1\n    else:\n        start = '1'\n        b -= 1\n    \n    s = start\n    \n    for i in range(x - 1):\n        if start == '0':\n            if len(s) % 2 == 1:\n                s += '1'\n                b -= 1\n            else:\n                s += '0'\n                a -= 1\n        else:\n            if len(s) % 2 == 1:\n                s += '0'\n                a -= 1\n            else:\n                s += '1'\n                b -= 1\n                \n        start = s[-1]\n    \n    if start == '0':\n        s += '0' * a\n        s += '1' * b\n    else:\n        s += '1' * b\n        s += '0' * a\n        \n    print(s)\n    \nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    def check(res, s, t):\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                return False\n        return True\n\n    import itertools\n    \n    chars = ['a', 'b', 'c']\n    \n    possible_strings = []\n    \n    \n    counts = {'a': n, 'b': n, 'c': n}\n    \n    def generate_strings(current_string, remaining_counts):\n        if len(current_string) == 3 * n:\n            possible_strings.append(current_string)\n            return\n        \n        for char in chars:\n            if remaining_counts[char] > 0:\n                new_counts = remaining_counts.copy()\n                new_counts[char] -= 1\n                generate_strings(current_string + char, new_counts)\n    \n    \n    generate_strings(\"\", counts)\n    \n    for res in possible_strings:\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n            if next_element < 1 or next_element > n:\n                valid = False\n                break\n\n        if valid:\n            seen = set()\n            all_present = True\n            for x in p:\n                if x in seen:\n                    all_present = False\n                    break\n                seen.add(x)\n            \n            if all_present and len(seen) == n:\n                print(*p)\n                return\n\n    print(-1)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    odd_count = 0\n    even_count = 0\n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    print(min(odd_count, even_count))\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    min_wins = max(0, a1 - (b1 + b3)) + max(0, a2 - (b2 + b1)) + max(0, a3 - (b3+b2))\n    \n    print(n - (min(a1, b1) + min(a2, b2) + min(a3, b3) + min(a1, b3) + min(a2, b1) + min(a3, b2)), max_wins)\n\nsolve()\n```"
}