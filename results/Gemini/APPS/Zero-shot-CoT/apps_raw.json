{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n    \n    if first_bracket == -1:\n        print(-1)\n        return\n    \n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n            \n    if last_bracket == -1 or last_bracket <= first_bracket:\n        print(-1)\n        return\n    \n    first_colon = -1\n    for i in range(first_bracket + 1, last_bracket):\n        if s[i] == ':':\n            first_colon = i\n            break\n            \n    if first_colon == -1:\n        print(-1)\n        return\n    \n    second_colon = -1\n    for i in range(last_bracket - 1, first_colon, -1):\n        if s[i] == ':':\n            second_colon = i\n            break\n            \n    if second_colon == -1 or second_colon <= first_colon:\n        print(-1)\n        return\n    \n    count = 0\n    for i in range(first_colon + 1, second_colon):\n        if s[i] == '|':\n            count += 1\n            \n    print(4 + count)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    \n    best_num = x\n    best_sum = sum_digits(x)\n    \n    s = str(x)\n    n = len(s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0:\n            current_sum = sum_digits(num)\n            \n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_num = num\n            elif current_sum == best_sum and num > best_num:\n                best_num = num\n    \n    print(best_num)\n\ndef sum_digits(n):\n    s = str(n)\n    sum_val = 0\n    for digit in s:\n        sum_val += int(digit)\n    return sum_val\n\nsolve()\n```",
    "2": "```python\ndef solve():\n  n = int(input())\n  s = str(n)\n  l = len(s)\n  first_digit = int(s[0])\n  next_lucky = (first_digit + 1) * (10 ** (l - 1))\n  \n  print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n, q = map(int, input().split())\n    painters = []\n    for _ in range(q):\n        painters.append(list(map(int, input().split())))\n\n    def calculate_painted(selected_painters):\n        painted = [0] * n\n        for l, r in selected_painters:\n            for i in range(l - 1, r):\n                painted[i] = 1\n        return sum(painted)\n\n    max_painted = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            selected_painters = []\n            for k in range(q):\n                if k != i and k != j:\n                    selected_painters.append(painters[k])\n            max_painted = max(max_painted, calculate_painted(selected_painters))\n\n    print(max_painted)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n  x = int(input())\n  hh, mm = map(int, input().split())\n\n  def is_lucky(h, m):\n    return '7' in str(h) or '7' in str(m)\n\n  count = 0\n  while True:\n    if is_lucky(hh, mm):\n      print(count)\n      return\n    \n    mm -= x\n    if mm < 0:\n      mm += 60\n      hh -= 1\n      if hh < 0:\n        hh += 24\n    \n    count += 1\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_diff = 0\n    max_damage = 0\n\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n        max_diff = max(max_diff, d - h)\n\n    if max_damage >= x:\n        print(1)\n        return\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_damage\n    \n    \n    blows_needed = (remaining + max_diff - 1) // max_diff\n    \n    print(blows_needed + 1)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\nn, m = map(int, input().split())\n\nleft = 0\nright = 2 * 10**9\n\nans = right\n\nwhile left <= right:\n  mid = (left + right) // 2\n  \n  total_sparrows = mid * (mid + 1) // 2\n  \n  full_barns = total_sparrows // n\n  \n  remaining_sparrows = total_sparrows % n\n  \n  \n  \n  grains_added = mid * m\n  \n  \n  total_grains = n + grains_added\n  \n  \n  grains_eaten = total_sparrows\n  \n  \n  if n + grains_added <= grains_eaten:\n    ans = mid\n    right = mid - 1\n  else:\n    \n    \n    \n    if n + (mid * m) - (mid * (mid + 1) // 2) <= 0:\n      ans = mid\n      right = mid - 1\n    else:\n      left = mid + 1\n\nprint(ans)\n```",
    "8": "```python\ndef solve():\n  tiles = input().split()\n  \n  def check_mentsu(hand):\n    # Check for koutsu\n    for i in range(len(hand)):\n      count = 0\n      for j in range(len(hand)):\n        if hand[i] == hand[j]:\n          count += 1\n      if count >= 3:\n        return True\n\n    # Check for shuntsu\n    for i in range(len(hand)):\n      for j in range(i + 1, len(hand)):\n        for k in range(j + 1, len(hand)):\n          t1 = hand[i]\n          t2 = hand[j]\n          t3 = hand[k]\n          \n          if t1[1] == t2[1] == t3[1]:\n            nums = sorted([int(t1[0]), int(t2[0]), int(t3[0])])\n            if nums[1] == nums[0] + 1 and nums[2] == nums[1] + 1:\n              return True\n    \n    return False\n\n  if check_mentsu(tiles):\n    print(0)\n    return\n\n  # Check if one tile is enough\n  for num in range(1, 10):\n    for suit in ['m', 'p', 's']:\n      new_tile = str(num) + suit\n      new_hand = tiles + [new_tile]\n      if check_mentsu(new_hand):\n        print(1)\n        return\n\n  # Otherwise, two tiles are needed\n  print(2)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa_idx):\n        count = 0\n        for i in range(d):\n            if i != sofa_idx:\n                x1_a, y1_a, x2_a, y2_a = sofas[sofa_idx]\n                x1_b, y1_b, x2_b, y2_b = sofas[i]\n                \n                min_x_a = min(y1_a, y2_a)\n                min_x_b = min(y1_b, y2_b)\n\n                if min_x_a > min_x_b:\n                    count += 1\n        return count\n\n    def count_right(sofa_idx):\n        count = 0\n        for i in range(d):\n            if i != sofa_idx:\n                x1_a, y1_a, x2_a, y2_a = sofas[sofa_idx]\n                x1_b, y1_b, x2_b, y2_b = sofas[i]\n                \n                max_x_a = max(y1_a, y2_a)\n                max_x_b = max(y1_b, y2_b)\n\n                if max_x_a < max_x_b:\n                    count += 1\n        return count\n\n    def count_top(sofa_idx):\n        count = 0\n        for i in range(d):\n            if i != sofa_idx:\n                x1_a, y1_a, x2_a, y2_a = sofas[sofa_idx]\n                x1_b, y1_b, x2_b, y2_b = sofas[i]\n                \n                min_y_a = min(x1_a, x2_a)\n                min_y_b = min(x1_b, x2_b)\n\n                if min_y_a > min_y_b:\n                    count += 1\n        return count\n\n    def count_bottom(sofa_idx):\n        count = 0\n        for i in range(d):\n            if i != sofa_idx:\n                x1_a, y1_a, x2_a, y2_a = sofas[sofa_idx]\n                x1_b, y1_b, x2_b, y2_b = sofas[i]\n                \n                max_y_a = max(x1_a, x2_a)\n                max_y_b = max(x1_b, x2_b)\n\n                if max_y_a < max_y_b:\n                    count += 1\n        return count\n\n    for i in range(d):\n        l = count_left(i)\n        r = count_right(i)\n        t = count_top(i)\n        b = count_bottom(i)\n\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\nn = int(input())\n\nmin_days_off = n // 7 * 2\nif n % 7 == 1:\n    pass\nelif n % 7 == 2:\n    pass\nelif n % 7 == 3:\n    pass\nelif n % 7 == 4:\n    pass\nelif n % 7 == 5:\n    pass\nelif n % 7 == 6:\n    min_days_off += 0\n\nmax_days_off = n // 7 * 2\nif n % 7 == 1:\n    max_days_off += 1\nelif n % 7 == 2:\n    max_days_off += 2\nelif n % 7 == 3:\n    max_days_off += 2\nelif n % 7 == 4:\n    max_days_off += 2\nelif n % 7 == 5:\n    max_days_off += 2\nelif n % 7 == 6:\n    max_days_off += 2\n\nif n % 7 == 6:\n    min_days_off = n // 7 * 2 + 1\n    if n % 7 > 0:\n      if n % 7 >= 6:\n        min_days_off = n // 7 * 2 + (n % 7) - 5 if (n//7 * 2 + (n%7) -5 ) > n//7 * 2 else n//7 *2\n      else:\n        min_days_off = n//7*2\nelif n % 7 == 5:\n    min_days_off = n // 7 * 2 + 0\nelif n % 7 == 4:\n  min_days_off = n // 7 * 2 + 0\nelif n % 7 == 3:\n  min_days_off = n // 7 * 2 + 0\nelif n % 7 == 2:\n  min_days_off = n // 7 * 2 + 0\nelif n % 7 == 1:\n  min_days_off = n // 7 * 2 + 0\n\nif n <= 2:\n  min_days_off = 0\n  max_days_off = n\nelif n <= 6:\n  min_days_off = 0\n\nprint(min_days_off, max_days_off)\n```",
    "11": "```python\ndef gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)\n\ndef lcm(a, b):\n  return (a * b) // gcd(a, b)\n\nn, a, b, p, q = map(int, input().split())\n\nred_count = n // a\nblue_count = n // b\ncommon_count = n // lcm(a, b)\n\nred_only = red_count - common_count\nblue_only = blue_count - common_count\n\ntotal_chocolates = 0\n\nif p > q:\n  total_chocolates += red_only * p\n  total_chocolates += common_count * p\n  total_chocolates += blue_only * q\nelse:\n  total_chocolates += blue_only * q\n  total_chocolates += common_count * q\n  total_chocolates += red_only * p\n\nprint(total_chocolates)\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    golds = s.count('G')\n    \n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            temp_s = list(s)\n            temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n            temp_s = \"\".join(temp_s)\n            \n            current_len = 0\n            max_current_len = 0\n            for k in range(n):\n                if temp_s[k] == 'G':\n                    current_len += 1\n                    max_current_len = max(max_current_len, current_len)\n                else:\n                    current_len = 0\n            \n            max_len = max(max_len, max_current_len)\n            \n    \n    \n    \n    \n    original_len = 0\n    max_original_len = 0\n    current_original_len = 0\n    for k in range(n):\n        if s[k] == 'G':\n            current_original_len += 1\n            max_original_len = max(max_original_len, current_original_len)\n        else:\n            current_original_len = 0\n\n    if golds == 0:\n        print(0)\n    elif golds == n:\n        print(n)\n    else:\n        \n        \n        max_len = 0\n        for i in range(n):\n            temp_s = list(s)\n\n            if temp_s[i] == 'S':\n                \n                \n                for j in range(n):\n                    if s[j] == 'G':\n                        temp_s2 = list(s)\n                        temp_s2[i], temp_s2[j] = temp_s2[j], temp_s2[i]\n                        temp_s2 = \"\".join(temp_s2)\n                        \n                        current_len = 0\n                        max_current_len = 0\n                        for k in range(n):\n                            if temp_s2[k] == 'G':\n                                current_len += 1\n                                max_current_len = max(max_current_len, current_len)\n                            else:\n                                current_len = 0\n                        max_len = max(max_len, max_current_len)\n        \n        \n        if max_len == 0:\n            \n            \n            current_len = 0\n            max_current_len = 0\n            for k in range(n):\n                if s[k] == 'G':\n                    current_len += 1\n                    max_current_len = max(max_current_len, current_len)\n                else:\n                    current_len = 0\n            print(max_current_len)\n        else:\n            print(min(max_len, golds))\n            \nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        dependencies.append(list(map(int, input().split()))[1:])\n\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    \n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i+1] += 1\n            \n    q = deque()\n    for i in range(1, n+1):\n        if in_degree[i] == 0:\n            q.append(i)\n    \n    order = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n        \n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n            \n    if count != n:\n        print(\"-1\")\n        return\n    \n    \n    \n    \n    \n    def find_path(start_nodes, adj, n):\n        q = deque(start_nodes)\n        visited = [False] * (n + 1)\n        path = []\n        \n        for node in start_nodes:\n            visited[node] = True\n            \n        while q:\n            u = q.popleft()\n            path.append(u)\n            \n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    q.append(v)\n        \n        return path, visited\n    \n    \n    \n    \n    start_nodes = []\n    for i in range(1, n+1):\n        indegree_count = 0\n        for j in range(1, n+1):\n            if i in adj[j]:\n                indegree_count += 1\n        if indegree_count == 0:\n            start_nodes.append(i)\n    \n    \n    \n    \n    \n    required_courses = set(main_courses)\n    \n    \n    \n    def get_dependencies(course, dependencies):\n        deps = []\n        for dep in dependencies[course-1]:\n            deps.append(dep)\n        return deps\n    \n   \n    \n    \n    def check_if_all_main_courses_present(path, main_courses):\n        for course in main_courses:\n            if course not in path:\n                return False\n        return True\n    \n            \n    \n    \n    \n    q = deque()\n    \n    for i in range(1, n+1):\n        if i in main_courses:\n            q.append([i, [i]])\n            \n    \n    \n    \n    best_path = []\n    min_len = float('inf')\n    \n    \n    \n    \n    \n    def find_min_courses(start_courses, adj, n, main_courses):\n        q = deque()\n        visited = [False] * (n + 1)\n        \n        for course in start_courses:\n            q.append([course, [course]])\n            visited[course] = True\n        \n        min_len = float('inf')\n        best_path = []\n        \n        while q:\n            curr_course, curr_path = q.popleft()\n            \n            main_courses_present = 0\n            for main_course in main_courses:\n                if main_course in curr_path:\n                    main_courses_present += 1\n            \n            if main_courses_present == len(main_courses):\n                if len(curr_path) < min_len:\n                    min_len = len(curr_path)\n                    best_path = curr_path\n                continue\n            \n            \n            for neighbor in range(1, n+1):\n                if curr_course in dependencies[neighbor-1]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        q.append([neighbor, curr_path + [neighbor]])\n        \n        return best_path, min_len\n    \n    \n    \n    \n    \n    \n    best_path, min_len = find_min_courses(main_courses, adj, n, main_courses)\n    \n    \n    \n    \n    if len(best_path) == 0:\n        print(\"-1\")\n        return\n        \n    \n    \n    \n    \n    \n    passed_courses = []\n    \n    \n    \n    q = deque()\n    \n    for i in range(1, n+1):\n        if in_degree[i] == 0:\n            q.append(i)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    visited = [False] * (n+1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    print(len(best_path))\n    print(*best_path)\n    \nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n\n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n\n    p_full = p[:]\n    for x in remaining:\n        p_full.append(x)\n\n    def is_stack_sortable(arr):\n        s = []\n        b = []\n        a = arr[:]\n        \n        i = 0\n        while i < 2 * n:\n            if len(a) > 0 and (len(s) == 0 or a[0] < s[-1]):\n                s.append(a[0])\n                a.pop(0)\n            elif len(s) > 0:\n                b.append(s[-1])\n                s.pop()\n            else:\n                return False\n            i += 1\n\n        for i in range(len(b) - 1):\n            if b[i] > b[i+1]:\n                return False\n        return True\n\n    if not is_stack_sortable(p_full):\n        print(\"-1\")\n        return\n\n    \n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n    \n    p_full = p[:]\n    \n    def find_lexicographically_largest(current_permutation, remaining_numbers):\n      if len(current_permutation) == n:\n        if is_stack_sortable(current_permutation):\n          return current_permutation\n        else:\n          return None\n      \n      best_permutation = None\n      for i in range(len(remaining_numbers) - 1, -1, -1):\n        new_permutation = current_permutation + [remaining_numbers[i]]\n        new_remaining = remaining_numbers[:i] + remaining_numbers[i+1:]\n        \n        \n        potential_permutation = find_lexicographically_largest(new_permutation, new_remaining)\n        \n        if potential_permutation is not None:\n          if best_permutation is None or potential_permutation > best_permutation:\n            best_permutation = potential_permutation\n      return best_permutation\n    \n    result = find_lexicographically_largest(p, remaining)\n    \n    if result is None:\n      print(\"-1\")\n    else:\n      print(*result)\n\nsolve()\n```",
    "15": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n\n    if c == 0:\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        return\n\n    if (b - a) % c == 0 and (b - a) / c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    t = []\n    u = []\n    \n    min_suffix = [''] * (n + 1)\n    min_suffix[n] = chr(123) \n    \n    for i in range(n - 1, -1, -1):\n        min_suffix[i] = min(s[i], min_suffix[i+1])\n    \n    i = 0\n    while i < n:\n        if len(t) == 0:\n            t.append(s[i])\n            i += 1\n        elif min_suffix[i] < t[-1]:\n            t.append(s[i])\n            i += 1\n        else:\n            u.append(t.pop())\n    \n    while len(t) > 0:\n        u.append(t.pop())\n        \n    print(\"\".join(u))\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[0:2])\n    mm = int(s[3:5])\n\n    def is_palindrome(h, m):\n        h_str = str(h).zfill(2)\n        m_str = str(m).zfill(2)\n        return h_str == m_str[::-1]\n\n    minutes = 0\n    while True:\n        if is_palindrome(hh, mm):\n            print(minutes)\n            return\n        \n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        minutes += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    pos_min = a.index(1)\n    pos_max = a.index(n)\n\n    ans = 0\n    \n    # Option 1: Swap 1 to the beginning\n    dist1 = abs(0 - pos_max)\n    ans = max(ans, dist1)\n    \n    # Option 2: Swap 1 to the end\n    dist2 = abs(n - 1 - pos_max)\n    ans = max(ans, dist2)\n\n    # Option 3: Swap n to the beginning\n    dist3 = abs(0 - pos_min)\n    ans = max(ans, dist3)\n    \n    # Option 4: Swap n to the end\n    dist4 = abs(n - 1 - pos_min)\n    ans = max(ans, dist4)\n\n    print(ans)\n\nsolve()\n```",
    "22": "```python\ndef solve():\n  s = input()\n  n = len(s)\n  \n  symmetric_chars = {\n      'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p',\n      'o': 'o', 'x': 'x', 'X': 'X', 'H': 'H',\n      'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T',\n      'U': 'U', 'V': 'V', 'v': 'v', 'W': 'W',\n      'w': 'w', 'Y': 'Y', 'A': 'A', 'i': 'i',\n      'm': 'm', 'n': 'n'\n  }\n  \n  is_s_palindrome = True\n  for i in range(n // 2):\n    if s[i] not in symmetric_chars or s[n - 1 - i] not in symmetric_chars:\n      is_s_palindrome = False\n      break\n    if symmetric_chars.get(s[i]) != s[n - 1 - i]:\n      is_s_palindrome = False\n      break\n  \n  if n % 2 == 1:\n    if s[n // 2] not in symmetric_chars:\n       is_s_palindrome = False\n  \n  if is_s_palindrome:\n    print(\"TAK\")\n  else:\n    print(\"NIE\")\n\nsolve()\n```",
    "23": "```python\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    b_digits = list(b)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    def find_max(index, current_digits, current_num, used):\n        if index == len(a):\n            return \"\".join(current_num)\n        \n        best_num = None\n        \n        available_digits = []\n        for i in range(len(a_digits)):\n            if not used[i]:\n                available_digits.append(a_digits[i])\n        \n        available_digits = sorted(available_digits, reverse=True)\n        \n        for digit in available_digits:\n            digit_index = -1\n            for i in range(len(a_digits)):\n                if a_digits[i] == digit and not used[i]:\n                    digit_index = i\n                    break\n            \n            if digit <= b_digits[index]:\n                new_used = used[:]\n                new_used[digit_index] = True\n                new_num = current_num[:]\n                new_num.append(digit)\n                \n                if digit < b_digits[index]:\n                    remaining_digits = []\n                    for i in range(len(a_digits)):\n                        if not new_used[i]:\n                            remaining_digits.append(a_digits[i])\n                    \n                    new_num.extend(sorted(remaining_digits, reverse=True))\n                    \n                    candidate = \"\".join(new_num)\n                    if best_num is None or candidate > best_num:\n                        best_num = candidate\n                else:\n                    candidate = find_max(index + 1, a_digits, new_num, new_used)\n                    if candidate is not None and (best_num is None or candidate > best_num):\n                        best_num = candidate\n        \n        return best_num\n\n    used = [False] * len(a)\n    result = find_max(0, a_digits, [], used)\n    \n    if result is None:\n        print(\"\".join(sorted(list(a), reverse=True)))\n    else:\n      print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(list(input()))\n\n    def check_win(board):\n        def check_horizontal(board):\n            for row in board:\n                for i in range(len(row) - 4):\n                    if all(row[i + j] == 'X' for j in range(5)):\n                        return True\n            return False\n\n        def check_vertical(board):\n            for col in range(len(board[0])):\n                for i in range(len(board) - 4):\n                    if all(board[i + j][col] == 'X' for j in range(5)):\n                        return True\n            return False\n\n        def check_diagonal(board):\n            for row in range(len(board) - 4):\n                for col in range(len(board[0]) - 4):\n                    if all(board[row + j][col + j] == 'X' for j in range(5)):\n                        return True\n\n            for row in range(len(board) - 4):\n                for col in range(4, len(board[0])):\n                    if all(board[row + j][col - j] == 'X' for j in range(5)):\n                        return True\n            return False\n\n        return check_horizontal(board) or check_vertical(board) or check_diagonal(board)\n\n    for r in range(10):\n        for c in range(10):\n            if board[r][c] == '.':\n                board[r][c] = 'X'\n                if check_win(board):\n                    print('YES')\n                    return\n                board[r][c] = '.'\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n            \n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n                \n    if k != 0:\n      print(\"-1\")\n      return\n    \n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\nimport math\n\nx, y, z = map(float, input().split())\n\na1 = x ** (y ** z)\na2 = x ** (z ** y)\na3 = (x ** y) ** z\na4 = (x ** z) ** y\na5 = y ** (x ** z)\na6 = y ** (z ** x)\na7 = (y ** x) ** z\na8 = (y ** z) ** x\na9 = z ** (x ** y)\na10 = z ** (y ** x)\na11 = (z ** x) ** y\na12 = (z ** y) ** x\n\nvalues = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\nexpressions = [\"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"]\n\nmax_value = max(values)\nindex = values.index(max_value)\n\nprint(expressions[index])\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s[:2*i] == prefix + prefix:\n            ans = min(ans, i + 1 + (n - 2*i))\n        elif s.startswith(prefix):\n            \n            if n >= 2*i and s[:2*i].startswith(prefix):\n                \n                if s[:i] == s[i:2*i]:\n                   \n                   pass\n                \n    for i in range(1, n):\n        if s[:i] == s[i:2*i] and 2*i <= n:\n            ans = min(ans,i + 1 + (n - 2*i))\n            \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n    \n    examples = []\n    regular = []\n    \n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n            \n    e = len(examples)\n    \n    moves = []\n    \n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            \n            # Find a temporary name\n            temp_name = \"temp\" + str(i)\n            while any(f[0] == temp_name for f in files):\n                temp_name = \"temp\" + str(i) + str(i)\n            \n            # Move example to temp\n            moves.append(f\"move {examples[i][0]} {temp_name}\")\n            \n            # Move correct number to example's spot\n            \n            found = False\n            for j in range(n):\n                if files[j][0] == str(i + 1):\n                    moves.append(f\"move {str(i + 1)} {examples[i][0]}\")\n                    found = True\n                    break\n            if not found:\n\n                moves.append(f\"move {i+1} {examples[i][0]}\")\n\n\n            # Move temp to correct number\n            moves.append(f\"move {temp_name} {i+1}\")\n\n    \n    # Move regular tests to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            \n            temp_name = \"temp\" + str(e + i + 1)\n            while any(f[0] == temp_name for f in files):\n                temp_name = \"temp\" + str(e + i + 1) + str(i)\n            \n            moves.append(f\"move {regular[i][0]} {temp_name}\")\n            \n            found = False\n            for j in range(n):\n                if files[j][0] == str(e + i + 1):\n                    moves.append(f\"move {str(e + i + 1)} {regular[i][0]}\")\n                    found = True\n                    break\n            if not found:\n                moves.append(f\"move {e+i+1} {regular[i][0]}\")\n            \n            moves.append(f\"move {temp_name} {e+i+1}\")\n            \n    print(len(moves))\n    for move in moves:\n        print(move)\n\nsolve()\n```",
    "29": "```python\ns = input()\nans = 6\nfor i in range(1000):\n    s1 = str(i).zfill(3)\n    for j in range(1000):\n        s2 = str(j).zfill(3)\n        if sum(int(d) for d in s1) == sum(int(d) for d in s2):\n            cnt = 0\n            temp = s1 + s2\n            for k in range(6):\n                if s[k] != temp[k]:\n                    cnt += 1\n            ans = min(ans, cnt)\nprint(ans)\n```",
    "30": "```python\ndef solve():\n  m, x = map(int, input().split())\n  print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    \n    twos_num = 0\n    twos_den = 0\n\n    \n    days = pow(2, n, mod)\n    \n    for i in range(k):\n        if i == 0:\n            continue\n        num = (num * (days - i + mod)) % mod\n        den = (den * pow(2, n, mod)) % mod\n\n        temp_i = i\n        while temp_i % 2 == 0 and temp_i > 0:\n            twos_num += 1\n            temp_i //= 2\n\n        temp_days = pow(2, n, mod)\n        while temp_days % 2 == 0 and temp_days > 0:\n            twos_den += 1\n            temp_days //= 2\n        \n    \n    twos_total = 0\n    for i in range(1, int(k)):\n        temp_i = i\n        while temp_i % 2 == 0 and temp_i > 0:\n            twos_total += 1\n            temp_i //= 2\n\n    twos_in_den = n * (k - 1)\n\n    num_twos = 0\n    temp = k - 1\n    while temp > 0:\n        num_twos += temp // 2\n        temp //= 2\n    \n    if twos_in_den > num_twos:\n        \n        if twos_in_den > 0:\n             \n            \n            num = (num * pow(pow(2, twos_in_den - num_twos, mod), mod - 2, mod)) % mod\n            den = (den * pow(pow(2, num_twos, mod), mod - 2, mod)) % mod\n        #num = (num * pow(pow(2, twos_in_den - num_twos, mod), mod - 2, mod)) % mod\n        #den = (den * pow(pow(2, num_twos, mod), mod-2, mod)) % mod\n\n        ans_num = (days - k + 1 + mod) % mod\n        ans_den = pow(days, k - 1, mod)\n\n        \n        ans_num = (ans_num * pow(num, mod - 2, mod)) % mod\n        ans_den = (ans_den * pow(den, mod - 2, mod)) % mod\n        \n        \n        print((1 - ans_num + mod) % mod, ans_den)\n\n    else:\n        print(1 - (num * pow(den, mod-2, mod)) % mod, 1)\n       \nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 is North Pole, 20000 is South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if current_pos == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n        \n        if direction == \"North\":\n            current_pos -= t\n            if current_pos < 0:\n                current_pos = 0\n        elif direction == \"South\":\n            current_pos += t\n            if current_pos > 20000:\n                current_pos = 20000\n        \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    d, x, y = extended_gcd(a1, a2)\n    x *= (b2 - b1) // d\n    y *= (b2 - b1) // d\n\n    lcm = (a1 * a2) // g\n\n    x0 = x % (a2 // g)\n    x0 = (x0 + (a2 // g)) % (a2 // g)\n\n    val = a1 * x0 + b1\n    \n    k = (L - val + lcm - 1) // lcm if L > val else 0\n    \n    first = val + k * lcm\n    \n    if first > R:\n        print(0)\n        return\n\n    count = (R - first) // lcm + 1\n    print(count)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n  n, a, b = map(int, input().split())\n  \n  max_x = 0\n  for i in range(1, n):\n    if i > a or n - i > b:\n        continue\n    \n    x1 = a // i\n    x2 = b // (n - i)\n    \n    max_x = max(max_x, min(x1, x2))\n  \n  print(max_x)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n  n = int(input())\n\n  if n == 0:\n    print(0, 0)\n    return\n\n  l, r = 0, 10**9\n  k = 0\n  while l <= r:\n    mid = (l + r) // 2\n    if 3 * mid * (mid + 1) >= n:\n      k = mid\n      r = mid - 1\n    else:\n      l = mid + 1\n\n  n -= 3 * k * (k - 1)\n  k -= 1 if k > 0 else 0\n\n  x, y = 2 * k + 1, 0\n  \n  if n <= 0:\n      x, y = 0, 0\n  elif n <= k + 1:\n    x += 2 * (n - (k + 1))\n    y += 2 * (n - (k + 1))\n  elif n <= 2 * (k + 1):\n    x += 2 * (k + 1 - (n))\n    y += 2 * (k + 1)\n  elif n <= 3 * (k + 1):\n    x += -2 * (n - 2 * (k + 1))\n    y += 2 * (k + 1)\n  elif n <= 4 * (k + 1):\n    x += -2 * (k + 1)\n    y += -2 * (n - 3 * (k + 1))\n  elif n <= 5 * (k + 1):\n    x += -2 * (4 * (k + 1) - n)\n    y += -2 * (k + 1)\n  else:\n    x += 2 * (n - 5 * (k + 1))\n    y += -2 * (k + 1)\n\n  print(x, y)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  for i in range(c // a + 1):\n    remaining_damage = c - i * a\n    if remaining_damage >= 0 and remaining_damage % b == 0:\n      print(\"Yes\")\n      return\n  \n  print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for shift in range(n):\n        temp = []\n        for i in range(n):\n            temp.append((sasha[i] + kefa[0]) % l)\n        \n        temp.sort()\n        \n        kefa_shifted = []\n        for i in range(n):\n          kefa_shifted.append((kefa[i] + 0) % l)\n        kefa_shifted.sort()\n\n        if temp == kefa_shifted:\n          print(\"YES\")\n          return\n          \n        sasha = sasha[1:] + [sasha[0]]\n        \n    print(\"NO\")\n\nsolve()\n```",
    "41": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    distances = []\n    for i in range(n):\n        min_dist = float('inf')\n        for j in range(n):\n            if a[j] == 0:\n                dist = abs(i - j)\n                min_dist = min(min_dist, dist)\n        distances.append(min_dist)\n    \n    print(*distances)\n\nsolve()\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    seen = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        if binary_string in seen:\n            continue\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            \n            # Mark all cyclical shifts as seen\n            for j in range(n):\n                shifted_string = binary_string[j:] + binary_string[:j]\n                seen.add(shifted_string)\n    \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    angles = []\n    for i in range(n):\n        x, y = vectors[i]\n        angle = math.atan2(y, x)\n        angles.append(angle)\n\n    min_angle_diff = float('inf')\n    best_pair = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle1 = angles[i]\n            angle2 = angles[j]\n            \n            angle_diff = abs(angle1 - angle2)\n            angle_diff = min(angle_diff, 2 * math.pi - angle_diff)\n\n            if angle_diff < min_angle_diff:\n                min_angle_diff = angle_diff\n                best_pair = (i + 1, j + 1)\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\nd, k, a, b, t = map(int, input().split())\n\nif d <= k:\n    print(d * a)\nelse:\n    if a * k + t >= b * k:\n        print(k * a + (d - k) * b)\n    else:\n        num_breaks = (d - 1) // k\n        print(num_breaks * (a * k + t) + (d - num_breaks * k) * a)\n```",
    "45": "```python\nimport math\n\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"-1\")\n        return\n\n    best_gcd = 1\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, i)\n            if i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // i)\n                \n    if best_gcd == 1 and k * (k+1) // 2 > n:\n      print(\"-1\")\n      return\n\n    result = []\n    sum_so_far = 0\n    for i in range(1, k):\n        result.append(best_gcd * i)\n        sum_so_far += best_gcd * i\n\n    result.append(n - sum_so_far)\n    print(*result)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n  n, m = map(int, input().split())\n  \n  count = 0\n  for x in range(1, n + 1):\n    for y in range(1, m + 1):\n      if (x + y) % 5 == 0:\n        count += 1\n  print(count)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    low = 1\n    high = n * m\n    ans = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\nlength = 1\ncount = 9\nwhile k > length * count:\n    k -= length * count\n    length += 1\n    count *= 10\nnum = 10 ** (length - 1) + (k - 1) // length\nindex = (k - 1) % length\nprint(str(num)[index])\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def get_dp(row_idx, total_sum_rem):\n        if (row_idx, total_sum_rem) in dp:\n            return dp[(row_idx, total_sum_rem)]\n\n        if row_idx == n:\n            if total_sum_rem == 0:\n                return 0\n            else:\n                return -float('inf')\n\n        max_sum = -float('inf')\n        \n        # Case 1: Don't pick any element from the current row\n        max_sum = max(max_sum, get_dp(row_idx + 1, total_sum_rem))\n\n        # Case 2: Pick elements from the current row\n        row = a[row_idx]\n        max_picks = m // 2\n        \n        row_dp = {}\n\n        def get_row_dp(col_idx, num_picks, row_sum_rem):\n            if (col_idx, num_picks, row_sum_rem) in row_dp:\n                return row_dp[(col_idx, num_picks, row_sum_rem)]\n            \n            if col_idx == m:\n                if num_picks <= max_picks:\n                    return 0\n                else:\n                    return -float('inf')\n            \n            res = -float('inf')\n            \n            #Don't pick the current element\n            res = max(res, get_row_dp(col_idx + 1, num_picks, row_sum_rem))\n            \n            #Pick the current element\n            res = max(res, row[col_idx] + get_row_dp(col_idx + 1, num_picks + 1, (row_sum_rem + row[col_idx]) % k))\n            \n            row_dp[(col_idx, num_picks, row_sum_rem)] = res\n            return res\n        \n        row_max_sum = get_row_dp(0, 0, 0)\n        max_sum = max(max_sum, row_max_sum + get_dp(row_idx + 1, (total_sum_rem + 0) % k))\n        \n        \n        row_max_rem_sums = {}\n        \n        def get_row_max_rem_sum(col_idx, num_picks, row_sum_rem):\n            if (col_idx, num_picks, row_sum_rem) in row_max_rem_sums:\n                return row_max_rem_sums[(col_idx, num_picks, row_sum_rem)]\n\n            if col_idx == m:\n                if num_picks <= max_picks:\n                    return 0\n                else:\n                    return -float('inf')\n\n            res = -float('inf')\n\n            # Don't pick the current element\n            res = max(res, get_row_max_rem_sum(col_idx + 1, num_picks, row_sum_rem))\n\n            # Pick the current element\n            res = max(res, row[col_idx] + get_row_max_rem_sum(col_idx + 1, num_picks + 1, (row_sum_rem + row[col_idx]) % k))\n\n            row_max_rem_sums[(col_idx, num_picks, row_sum_rem)] = res\n            return res\n        \n        for rem in range(k):\n            row_max_sum_for_rem = get_row_max_rem_sum(0, 0, 0 if rem == 0 else rem)\n            max_sum = max(max_sum, row_max_sum_for_rem + get_dp(row_idx + 1, (total_sum_rem) % k))\n            \n        \n        \n        row_sums_by_rem = [get_row_max_rem_sum(0, 0, rem) for rem in range(k)]\n        for rem in range(k):\n            max_sum = max(max_sum, row_sums_by_rem[rem] + get_dp(row_idx + 1, (total_sum_rem + rem) % k))\n\n        dp[(row_idx, total_sum_rem)] = max_sum\n        return max_sum\n\n    print(get_dp(0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_subsequence(arr):\n        best_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_seq, remaining_arr, moves):\n            nonlocal best_len, best_moves\n\n            if not remaining_arr:\n                if len(current_seq) > best_len:\n                    best_len = len(current_seq)\n                    best_moves = moves\n                return\n\n            if not current_seq or remaining_arr[0] > current_seq[-1]:\n                backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n            \n            if not current_seq or remaining_arr[-1] > current_seq[-1]:\n                if len(remaining_arr) > 1 or remaining_arr[0] != remaining_arr[-1]:\n                  backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            \n            if not current_seq and len(remaining_arr) == 1:\n                if len(current_seq) + 1 > best_len:\n                  best_len = len(current_seq) + 1\n                  best_moves = moves + 'L'\n                return\n        backtrack([], a, \"\")\n        return best_len, best_moves\n\n    length, moves = find_longest_increasing_subsequence(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n    \n    unique_vals = sorted(list(set(a)))\n    \n    if len(unique_vals) > 3:\n        print(-1)\n        return\n    \n    if len(unique_vals) == 1:\n        print(0)\n        return\n    \n    if len(unique_vals) == 2:\n        val1, val2 = unique_vals\n        d = abs(val1 - val2)\n        if d % 2 == 0:\n            print(d // 2)\n        else:\n            print(d)\n        return\n    \n    if len(unique_vals) == 3:\n        val1, val2, val3 = unique_vals\n        if val2 - val1 == val3 - val2:\n            print(val2 - val1)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n    \n    def intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n        x_overlap = max(0, min(x2, x4) - max(x1, x3))\n        y_overlap = max(0, min(y2, y4) - max(y1, y3))\n        return x_overlap * y_overlap\n\n    intersection1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    intersection2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n    \n    x_overlap = max(0, min(x4, x6) - max(x3, x5))\n    y_overlap = max(0, min(y4, y6) - max(y3, y5))\n    intersection_black = x_overlap * y_overlap\n    \n    intersection_all_three = intersection_area(x1, y1, x2, y2, max(x3,x5), max(y3,y5), min(x4,x6), min(y4,y6))\n    \n    covered_area = intersection1 + intersection2 - intersection_all_three\n    \n    if white_area > covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    assigned = [False] * (n + 1)\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i]] = True\n\n    unassigned_givers = []\n    unassigned_receivers = []\n    for i in range(n):\n        if f[i] == 0:\n            unassigned_givers.append(i)\n\n    for i in range(1, n + 1):\n        if not assigned[i]:\n            unassigned_receivers.append(i)\n\n    \n    for i in range(len(unassigned_givers)):\n        f[unassigned_givers[i]] = unassigned_receivers[i]\n\n    \n    for i in range(n):\n        if f[i] == i + 1:\n            for j in range(n):\n                if f[j] != j + 1 and f[j] != f[i]:\n                    f[i], f[j] = f[j], f[i]\n                    break\n            else:\n                for j in range(n):\n                   if j!=i:\n                       f[i],f[j]=f[j],f[i]\n                       break\n\n\n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    positions = {}\n    for i in range(n):\n        if a[i] not in positions:\n            positions[a[i]] = []\n        positions[a[i]].append(i)\n    \n    count = 0\n    for key in positions:\n        count += len(positions[key])\n        if len(positions[key]) > k:\n            print(\"NO\")\n            return\n    \n    \n    coloring = [0] * n\n    color = 1\n    assigned = 0\n    \n    sorted_positions = sorted([(a[i], i) for i in range(n)])\n    \n    \n    possible = True\n    \n    \n    \n    for val, idx in sorted_positions:\n        coloring[idx] = color\n        color = (color % k) + 1\n        assigned += 1\n    \n    \n    \n    \n    counts = [0] * (k + 1)\n    for c in coloring:\n        counts[c] += 1\n    \n    for i in range(1, k+1):\n      if counts[i] == 0:\n        possible = False\n        break\n    \n    \n    if not possible:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(*coloring)\n\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    a_list = list(map(int, list(a)))\n    \n    best_a = a\n\n    for i in range(n):\n        for j in range(i, n):\n            temp_a_list = a_list[:]\n            for k in range(i, j + 1):\n                temp_a_list[k] = f[temp_a_list[k] - 1]\n            \n            temp_a = \"\".join(map(str, temp_a_list))\n            if temp_a > best_a:\n                best_a = temp_a\n    \n    print(best_a)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n                    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n  n, m = map(int, input().split())\n  exams = []\n  for i in range(m):\n    s, d, c = map(int, input().split())\n    exams.append((s, d, c, i + 1))\n  \n  schedule = [0] * n\n  exam_days = {}\n  for s, d, c, i in exams:\n    exam_days[d - 1] = i + m\n    schedule[d - 1] = i + m\n  \n  exam_preps = [0] * m\n  \n  for day in range(n):\n    if schedule[day] == 0:\n      best_exam = -1\n      for s, d, c, i in exams:\n        if s <= day + 1 < d and exam_preps[i - 1] < c:\n          if best_exam == -1:\n            best_exam = i\n          else:\n            s_best, d_best, c_best, i_best = exams[best_exam - 1]\n            if d < d_best:\n              best_exam = i\n      \n      if best_exam != -1:\n        schedule[day] = best_exam\n        exam_preps[best_exam - 1] += 1\n  \n  for i in range(m):\n    if exam_preps[exams[i][3] - 1] != exams[i][2]:\n      print(\"-1\")\n      return\n  \n  print(*schedule)\n\nsolve()\n```",
    "65": "```python\ndef solve():\n  n, m = map(int, input().split())\n  \n  if n == m:\n    print(0)\n    return\n  \n  if m % n != 0:\n    print(-1)\n    return\n  \n  diff = m // n\n  \n  count2 = 0\n  count3 = 0\n  \n  while diff % 2 == 0:\n    diff //= 2\n    count2 += 1\n  \n  while diff % 3 == 0:\n    diff //= 3\n    count3 += 1\n    \n  if diff != 1:\n    print(-1)\n    return\n  \n  print(count2 + count3)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    if k == 1:\n        print(t)\n        return\n    \n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n    \n    result = t + t[overlap:] * (k - 1)\n    print(result)\n\nsolve()\n```",
    "67": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    nice_indices = []\n    \n    for i in range(n):\n        temp_arr = a[:i] + a[i+1:]\n        total_sum = sum(temp_arr)\n        \n        is_good = False\n        for j in range(len(temp_arr)):\n            if temp_arr[j] == (total_sum - temp_arr[j]):\n                is_good = True\n                break\n        \n        if is_good:\n            nice_indices.append(i + 1)\n    \n    print(len(nice_indices))\n    if nice_indices:\n        print(*nice_indices)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n    \n    counts = []\n    for i in range(n + 1):\n        counts.append(dp[n][i])\n    \n    total_cost = 0\n    for length in range(n, -1, -1):\n        if k <= 0:\n            break\n        \n        num_subsequences = counts[length]\n        \n        if num_subsequences <= k:\n            total_cost += (n - length) * num_subsequences\n            k -= num_subsequences\n        else:\n            total_cost += (n - length) * k\n            k = 0\n            break\n            \n    if k > 0:\n        print(-1)\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "71": "```python\nimport math\n\na = int(input())\nprint(math.ceil(math.log(a, 2)))\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n    \n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    total_subsequences = sum(dp[n])\n    \n    if k > total_subsequences:\n        print(\"-1\")\n        return\n\n    counts = [0] * (n + 1)\n    for i in range(n + 1):\n        counts[i] = dp[n][i]\n\n    cost = 0\n    length = n\n    while k > 0:\n        if counts[length] >= k:\n            cost += (n - length) * k\n            k = 0\n        else:\n            cost += (n - length) * counts[length]\n            k -= counts[length]\n        length -= 1\n\n    print(cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    days_in_week = [\n        [0],  # Monday: 0 for fish\n        [1],  # Tuesday: 1 for rabbit\n        [2],  # Wednesday: 2 for chicken\n        [0],  # Thursday: 0 for fish\n        [2],  # Friday: 2 for chicken\n        [1],  # Saturday: 1 for rabbit\n        [0]   # Sunday: 0 for fish\n    ]\n    \n    def calculate_days(start_day):\n        days = 0\n        a_copy, b_copy, c_copy = a, b, c\n        current_day = start_day\n        \n        while True:\n            food_type = days_in_week[current_day][0]\n            \n            if food_type == 0:\n                if a_copy > 0:\n                    a_copy -= 1\n                else:\n                    break\n            elif food_type == 1:\n                if b_copy > 0:\n                    b_copy -= 1\n                else:\n                    break\n            else:\n                if c_copy > 0:\n                    c_copy -= 1\n                else:\n                    break\n            \n            days += 1\n            current_day = (current_day + 1) % 7\n        \n        return days\n    \n    max_days = 0\n    for start_day in range(7):\n        max_days = max(max_days, calculate_days(start_day))\n    \n    print(max_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile = []\n        tile.append(list(map(int, input().split())))\n        tile.append(list(map(int, input().split())))\n        tiles.append(tile)\n    \n    if m % 2 != 0:\n        print(\"NO\")\n        return\n    \n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n    \n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\nn = int(input())\ntotal_sum = n * (n + 1) // 2\nif total_sum % 2 == 0:\n    print(0)\nelse:\n    print(1)\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    \n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    def count_regular_sequences(n, s):\n        count = 0\n        for i in range(1 << (2 * n)):\n            seq = \"\"\n            for j in range(2 * n):\n                if (i >> j) & 1:\n                    seq += \"(\"\n                else:\n                    seq += \")\"\n            \n            if is_regular(seq) and s in seq:\n                count += 1\n        return count % mod\n\n    print(count_regular_sequences(n, s))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    s = list(n)\n    l = len(s)\n    \n    def calculate_moves(arr):\n        moves = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    moves += 1\n        return moves\n    \n    def get_moves(a, b):\n        temp = s[:]\n        moves = 0\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        idx_a = -1\n        for i in range(l - 1, -1, -1):\n            if temp[i] == a:\n                idx_a = i\n                break\n        if idx_a == -1:\n            return float('inf')\n        \n        moves += l - 1 - idx_a\n        temp.pop(idx_a)\n        \n        idx_b = -1\n        for i in range(len(temp) - 1, -1, -1):\n            if temp[i] == b:\n                idx_b = i\n                break\n        if idx_b == -1:\n            return float('inf')\n        \n        moves += len(temp) - 1 - idx_b\n        temp.pop(idx_b)\n        \n        \n        first_non_zero = -1\n        for i in range(len(temp)):\n            if temp[i] != '0':\n                first_non_zero = i\n                break\n        \n        if first_non_zero == -1:\n            return float('inf')\n        \n        moves += first_non_zero\n        \n        return moves\n        \n    ans = min(get_moves('0', '0'), get_moves('2', '5'), get_moves('5', '0'), get_moves('7', '5'))\n    \n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n  n = int(input())\n  s = input()\n  \n  colors = [0] * n\n  \n  def check(num_colors):\n    assigned_colors = [0] * n\n    tails = ['z' for _ in range(num_colors)]\n    \n    for i in range(n):\n      found_color = False\n      for color in range(num_colors):\n        if s[i] >= tails[color]:\n          assigned_colors[i] = color + 1\n          tails[color] = s[i]\n          found_color = True\n          break\n      if not found_color:\n        return False\n    \n    \n    colored_chars = []\n    for i in range(n):\n      colored_chars.append((s[i], assigned_colors[i]))\n\n    return assigned_colors\n  \n  \n  low = 1\n  high = n\n  ans = -1\n  ans_colors = None\n  \n  while low <= high:\n    mid = (low + high) // 2\n    \n    colors_result = check(mid)\n    \n    if colors_result:\n      ans = mid\n      ans_colors = colors_result\n      high = mid - 1\n    else:\n      low = mid + 1\n      \n  print(ans)\n  print(*ans_colors)\n  \nsolve()\n```",
    "81": "```python\ndef solve():\n  n = int(input())\n  strings = []\n  for _ in range(n):\n    strings.append(input())\n\n  def is_substring(a, b):\n    return a in b\n\n  import itertools\n  for perm in itertools.permutations(strings):\n    valid = True\n    for i in range(1, n):\n      for j in range(i):\n        if not is_substring(perm[j], perm[i]):\n          valid = False\n          break\n      if not valid:\n        break\n    \n    if valid:\n      print(\"YES\")\n      for s in perm:\n        print(s)\n      return\n  \n  print(\"NO\")\n\nsolve()\n```",
    "82": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    solved_count = 0\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        if a[left] <= k:\n            solved_count += 1\n            left += 1\n        elif a[right] <= k:\n            solved_count += 1\n            right -= 1\n        else:\n            break\n            \n        while left <= right and a[left] <= k:\n            solved_count += 1\n            left += 1\n        while left <= right and a[right] <= k:\n            solved_count += 1\n            right -= 1\n            \n    print(solved_count)\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    min_perimeter = float('inf')\n    \n    for h in range(1, int(total**0.5) + 2):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: a forms a rectangle\n            for h_a in range(1, int(a**0.5) + 2):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    \n                    if h_a <= h and w_a <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n            \n            # Case 2: b forms a rectangle\n            for h_b in range(1, int(b**0.5) + 2):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    \n                    if h_b <= h and w_b <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n                        \n    print(min_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n  n = int(input())\n  s = input()\n\n  for i in range(1 << n):\n    coloring = \"\"\n    s1 = \"\"\n    s2 = \"\"\n    for j in range(n):\n      if (i >> j) & 1:\n        coloring += \"1\"\n        s2 += s[j]\n      else:\n        coloring += \"0\"\n        s1 += s[j]\n    \n    s1_sorted = \"\".join(sorted(s1))\n    s2_sorted = \"\".join(sorted(s2))\n\n    merged = \"\"\n    i1 = 0\n    i2 = 0\n    while i1 < len(s1_sorted) or i2 < len(s2_sorted):\n      if i1 < len(s1_sorted) and (i2 == len(s2_sorted) or s1_sorted[i1] <= s2_sorted[i2]):\n        merged += s1_sorted[i1]\n        i1 += 1\n      else:\n        merged += s2_sorted[i2]\n        i2 += 1\n    \n    if merged == \"\".join(sorted(s)):\n      print(\"YES\")\n      print(coloring)\n      return\n  \n  print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n    \n    ans = -1\n    for price in range(1, 2001):\n        tax8 = int(price * 0.08)\n        tax10 = int(price * 0.10)\n        \n        if tax8 == a and tax10 == b:\n            ans = price\n            break\n            \n    print(ans)\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k):\n        a[i] += remaining // k\n\n    remaining %= k\n\n    for i in range(k - 1, k - 1 - remaining, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if a[i+1] > 2 * a[i]:\n            diff = a[i+1] - 2 * a[i]\n            a[i+1] -= diff\n            a[k-1] += diff\n            \n            if a[i+1] > 2 * a[i]:\n                print(\"NO\")\n                return\n\n    for i in range(k - 1):\n      if not (a[i] < a[i+1] <= 2 * a[i]):\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def check(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[n-1-i][j] or matrix[i][j] != matrix[i][n-1-j]:\n                    return False\n        return True\n    \n    def backtrack(row, col):\n        if row == n:\n            return check(matrix)\n        \n        if col == n:\n            return backtrack(row + 1, 0)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                matrix[row][col] = num\n                counts[num] -= 1\n                \n                if backtrack(row, col + 1):\n                    return True\n                \n                counts[num] += 1\n                matrix[row][col] = 0\n                \n        return False\n\n    def fill_matrix():\n        for i in range((n + 1) // 2):\n            for j in range((n + 1) // 2):\n                if matrix[i][j] == 0:\n                  \n                    found = False\n                    for num in list(counts.keys()):\n                        \n                        needed = 1\n                        if i != n - 1 - i:\n                            needed += 1\n                        if j != n - 1 - j:\n                            needed += 1\n                        if i != n - 1 - i and j != n - 1 - j:\n                            needed += 1\n                            \n                        if counts[num] >= needed:\n                            matrix[i][j] = num\n                            counts[num] -= 1\n                            \n                            if i != n - 1 - i:\n                                matrix[n-1-i][j] = num\n                                counts[num] -= 1\n                            \n                            if j != n - 1 - j:\n                                matrix[i][n-1-j] = num\n                                counts[num] -= 1\n                            \n                            if i != n - 1 - i and j != n - 1 - j:\n                                matrix[n-1-i][n-1-j] = num\n                                counts[num] -= 1\n                            \n                            found = True\n                            break\n                    \n                    if not found:\n                        return False\n        return True\n    \n    if fill_matrix():\n        print(\"YES\")\n        for row in matrix:\n            print(*row)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(order):\n        curr_r = r\n        for i in order:\n            a, b = projects[i]\n            if curr_r < a:\n                return False\n            curr_r += b\n            if curr_r < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if check(order):\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n  n, m, d = map(int, input().split())\n  c = list(map(int, input().split()))\n\n  total_length = sum(c)\n  min_empty_space = m - 1\n  max_empty_space = n - total_length\n  \n  if d * (m + 1) <= n + 1:\n    \n    possible = True\n    \n    \n    arr = [0] * n\n    \n    curr_pos = 0\n    \n    for i in range(m):\n      \n      space_needed = min(d - 1, n - curr_pos - sum(c[i:]))\n      \n      curr_pos += space_needed\n      \n      for j in range(c[i]):\n          arr[curr_pos] = i + 1\n          curr_pos += 1\n    \n    print(\"YES\")\n    print(*arr)\n    \n    \n    return\n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  remaining_space = n - sum(c)\n  \n  needed_jumps = 0\n  \n  \n  \n  \n  curr_pos = 0\n  \n  possible = True\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  print(\"NO\")\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp = \"\"\n            if i > 0:\n                temp += s[:i]\n            if j < n:\n                temp += s[j:]\n            \n            k = 0\n            l = 0\n            while k < len(temp) and l < m:\n                if temp[k] == t[l]:\n                    l += 1\n                k += 1\n            \n            if l == m:\n                ans = max(ans, j - i)\n    print(ans)\n\nsolve()\n```",
    "92": "```python\nx = float(input())\na = int(x * 2.0 + 0.5)\nb = int(x * 3.0 + 0.5)\na = min(10, max(1, a))\nb = min(10, max(1, b))\nprint(a, b)\n```",
    "93": "```python\ndef solve():\n  n, d, k = map(int, input().split())\n\n  if d >= n:\n    print(\"NO\")\n    return\n\n  if d == 1 and n > 2:\n    if k <= 1:\n      print(\"NO\")\n      return\n  \n  if d > 1 and k == 1:\n      print(\"NO\")\n      return\n\n  if d > 1 and n > 2 and k ==1:\n      print(\"NO\")\n      return\n\n  if d > n -1:\n      print(\"NO\")\n      return\n  \n  edges = []\n  nodes = list(range(1, n + 1))\n  \n  # Create the diameter path\n  for i in range(d):\n    edges.append((i + 1, i + 2))\n\n  remaining_nodes = nodes[d+1:]\n  \n  \n  if k == 1 and d > 1 and n > 2:\n      print(\"NO\")\n      return\n\n  if len(remaining_nodes) > 0:\n    if k == 1:\n      print(\"NO\")\n      return\n    \n    degree = [0] * (n + 1)\n    for u, v in edges:\n        degree[u] += 1\n        degree[v] += 1\n        \n    \n    for node in remaining_nodes:\n      \n      found_parent = False\n      for i in range(1,d+2):\n        if degree[i] < k:\n          edges.append((node, i))\n          degree[node] += 1\n          degree[i] += 1\n          found_parent = True\n          break\n      \n      if not found_parent:\n          print(\"NO\")\n          return\n    \n    \n  \n  degrees_valid = True\n  degree = [0] * (n + 1)\n  for u, v in edges:\n      degree[u] += 1\n      degree[v] += 1\n  \n  for i in range(1, n+1):\n      if degree[i] > k:\n          degrees_valid = False\n          break\n\n  if len(edges) != n - 1:\n    print(\"NO\")\n    return\n\n\n  if degrees_valid:\n      print(\"YES\")\n      for u, v in edges:\n          print(u, v)\n  else:\n      print(\"NO\")\nsolve()\n```",
    "94": "```python\ndef solve():\n  a, b, x = map(int, input().split())\n  \n  s = \"\"\n  \n  if a > b:\n    start = 0\n  else:\n    start = 1\n    \n  \n  if x % 2 == 0:\n    \n    for i in range(x):\n      if i % 2 == 0:\n        if start == 0:\n          s += \"0\"\n          a -= 1\n        else:\n          s += \"1\"\n          b -= 1\n      else:\n        if start == 0:\n          s += \"1\"\n          b -= 1\n        else:\n          s += \"0\"\n          a -= 1\n\n    if start == 0:\n      s += \"0\" * a\n      s += \"1\" * b\n    else:\n      s += \"1\" * b\n      s += \"0\" * a\n\n  else:\n    for i in range(x):\n      if i % 2 == 0:\n        if start == 0:\n          s += \"0\"\n          a -= 1\n        else:\n          s += \"1\"\n          b -= 1\n      else:\n        if start == 0:\n          s += \"1\"\n          b -= 1\n        else:\n          s += \"0\"\n          a -= 1\n    \n    if start == 0:\n        s += \"1\" * b\n        s += \"0\" * a\n    else:\n        s += \"0\" * a\n        s += \"1\" * b\n  print(s)\n  \n\nsolve()\n```",
    "95": "```python\ndef solve():\n  n = int(input())\n  s = input()\n  t = input()\n\n  chars = ['a', 'b', 'c']\n\n  import itertools\n  \n  for p in itertools.permutations(chars):\n    res = \"\"\n    for i in range(n):\n      res += p[0]\n      res += p[1]\n      res += p[2]\n    \n    valid = True\n    for i in range(len(res) - 1):\n      if res[i:i+2] == s or res[i:i+2] == t:\n        valid = False\n        break\n    \n    if valid:\n      print(\"YES\")\n      print(res)\n      return\n    \n  \n  res = \"\"\n  for i in range(n):\n    res += 'a'\n  for i in range(n):\n    res += 'b'\n  for i in range(n):\n    res += 'c'\n    \n  valid = True\n  for i in range(len(res) - 1):\n    if res[i:i+2] == s or res[i:i+2] == t:\n      valid = False\n      break\n      \n  if valid:\n    print(\"YES\")\n    print(res)\n    return\n  \n  res = \"\"\n  for i in range(n):\n    res += 'c'\n  for i in range(n):\n    res += 'b'\n  for i in range(n):\n    res += 'a'\n    \n  valid = True\n  for i in range(len(res) - 1):\n    if res[i:i+2] == s or res[i:i+2] == t:\n      valid = False\n      break\n      \n  if valid:\n    print(\"YES\")\n    print(res)\n    return\n  \n  if n == 1:\n      perms = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n      for perm in perms:\n          valid = True\n          for i in range(len(perm) - 1):\n              if perm[i:i+2] == s or perm[i:i+2] == t:\n                  valid = False\n                  break\n          if valid:\n              print(\"YES\")\n              print(perm)\n              return\n  \n  if (n == 2 and s == \"ab\" and t == \"bc\"):\n    print(\"YES\")\n    print(\"acbacb\")\n    return\n    \n  if (n == 3 and s == \"aa\" and t == \"bc\"):\n      print(\"YES\")\n      print(\"acbacbacb\")\n      return\n    \n  if (n == 3 and s == \"bb\" and t == \"cb\"):\n      print(\"YES\")\n      print(\"abcabcabc\")\n      return\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n            if next_element < 1 or next_element > n:\n                valid = False\n                break\n\n        if valid:\n            seen = set()\n            is_permutation = True\n            for x in p:\n                if x in seen:\n                    is_permutation = False\n                    break\n                seen.add(x)\n                if x < 1 or x > n:\n                    is_permutation = False\n                    break\n            \n            if is_permutation:\n                print(*p)\n                return\n    \n    print(\"-1\")\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    odd_count = 0\n    even_count = 0\n    \n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    print(min(odd_count, even_count))\n\nsolve()\n```",
    "98": "```python\ndef solve():\n    n = int(input())\n    \n    ans = float('inf')\n    \n    for i in range(1, int(n**0.5) + 2):\n        if n % i == 0:\n            j = n // i\n            ans = min(ans, i + j - 2)\n            \n    print(ans)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3) + max(0, b1 - a2 - a3) + max(0, b3 - a1 - a2),\n                   a2 - (b2 + b1) + max(0, b2 - a1 - a3) + max(0, b1 - a2 - a3),\n                   a3 - (b3 + b2) + max(0, b3 - a1 - a2) + max(0, b2 - a1 - a3))\n\n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}