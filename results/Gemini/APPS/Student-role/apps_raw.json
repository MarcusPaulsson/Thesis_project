{
    "30": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    def calculate_operations(target):\n        groups = 0\n        in_group = False\n        for i in range(n):\n            if s[i] != target[i % 2]:\n                if not in_group:\n                    groups += 1\n                    in_group = True\n            else:\n                in_group = False\n        return groups\n\n    target1 = \"\"\n    target2 = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            target1 += \"0\"\n            target2 += \"1\"\n        else:\n            target1 += \"1\"\n            target2 += \"0\"\n\n    print(min(calculate_operations(target1), calculate_operations(target2)))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "31": "```python\ndef solve():\n    s = input()\n    x, y = 0, 0\n    visited = set()\n    time = 0\n    for move in s:\n        nx, ny = x, y\n        if move == 'N':\n            ny += 1\n        elif move == 'S':\n            ny -= 1\n        elif move == 'E':\n            nx += 1\n        else:\n            nx -= 1\n        \n        segment = tuple(sorted([(x, y), (nx, ny)]))\n        \n        if segment in visited:\n            time += 1\n        else:\n            time += 5\n            visited.add(segment)\n        \n        x, y = nx, ny\n    print(time)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    chanek_coins = 0\n    turn = True  # True for Chanek, False for opponent\n    \n    while n > 0:\n        if n % 2 == 0:\n            if (n // 2) >= 1:\n                if turn:\n                    chanek_coins += (n // 2)\n                n //= 2\n            else:\n                if turn:\n                    chanek_coins += 1\n                n -= 1\n        else:\n            if turn:\n                chanek_coins += 1\n            n -= 1\n        turn = not turn\n    \n    print(chanek_coins)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "33": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    \n    print(2)\n    \n    a = n\n    \n    for i in range(n - 1):\n        b = a - 1\n        print(a, b)\n        a = math.ceil((a + b) / 2)\n        \nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "34": "```python\ndef solve():\n  n = int(input())\n  \n  segments = [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n  \n  if n % 2 == 0:\n    print(\"1\" * (n // 2))\n  else:\n    print(\"7\" + \"1\" * ((n - 3) // 2))\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "35": "```python\ndef solve():\n  n = int(input())\n  e = list(map(int, input().split()))\n  \n  e.sort()\n  \n  groups = 0\n  current_group_size = 0\n  \n  for inexperience in e:\n    current_group_size += 1\n    if current_group_size >= inexperience:\n      groups += 1\n      current_group_size = 0\n      \n  print(groups)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    q = list(map(int, input().split()))\n\n    prefix_sums = [0] * (n + 1)\n    for i in range(n):\n        prefix_sums[i+1] = prefix_sums[i] + a[i]\n\n    for query in q:\n        for i in range(1, n + 1):\n            if query <= prefix_sums[i]:\n                print(i)\n                break\n\nsolve()\n```",
    "37": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    def get_decomposition(p):\n        marked = [False] * n\n        l = []\n        for i in range(n):\n            if not marked[i]:\n                reachable = []\n                curr = i\n                while not marked[curr]:\n                    reachable.append(curr)\n                    marked[curr] = True\n                    curr = p[curr] - 1\n                \n                max_val = -1\n                max_idx = -1\n                for j, idx in enumerate(reachable):\n                    if p[idx] > max_val:\n                        max_val = p[idx]\n                        max_idx = j\n                \n                shifted_list = reachable[max_idx:] + reachable[:max_idx]\n                l.append([p[idx] for idx in shifted_list])\n        return l\n\n    def new_year_transformation(p):\n        decomposition = get_decomposition(p)\n        decomposition.sort(key=lambda x: x[0])\n        result = []\n        for lst in decomposition:\n            result.extend(lst)\n        return result\n\n    def is_good(p):\n        return new_year_transformation(p) == p\n\n    def generate_permutations(n):\n        import itertools\n        perms = []\n        for p in itertools.permutations(range(1, n + 1)):\n            perms.append(list(p))\n        return perms\n\n    good_permutations = []\n    all_permutations = generate_permutations(n)\n    for p in all_permutations:\n        if is_good(p):\n            good_permutations.append(p)\n\n    good_permutations.sort()\n    \n    if k > len(good_permutations):\n        print(\"-1\")\n    else:\n        print(*good_permutations[k-1])\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "38": "```python\ndef solve():\n    n, k1, k2 = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    max_a = 0\n    for x in a:\n        max_a = max(max_a, x)\n    \n    max_b = 0\n    for x in b:\n        max_b = max(max_b, x)\n    \n    if max_a > max_b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "39": "```python\ndef solve():\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n\n    for i in range(n):\n        cost = 0\n        curr = i\n        while curr < n - 1:\n            next_stop = curr + 1\n            while next_stop < n - 1 and s[next_stop] == s[curr]:\n                next_stop += 1\n            \n            if s[curr] == 'A':\n                cost += a\n            else:\n                cost += b\n            \n            curr = next_stop\n        \n        if cost <= p:\n            print(i + 1)\n            return\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "40": null,
    "41": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = list(input())\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def find_operations(target):\n        operations = []\n        curr_s = list(s)\n\n        def apply_operation(l, r):\n            operations.append((l + 1, r + 1))\n            curr_s[l:r+1] = curr_s[l:r+1][::-1]\n\n        for i in range(n):\n            if curr_s[i] != target[i]:\n                for j in range(i + 1, n):\n                    if curr_s[j] == target[i]:\n                        apply_operation(i, j)\n                        break\n        return operations\n\n    target = ['('] * k + [')'] * k + ['('] * (n // 2 - k) + [')'] * (n // 2 - k)\n    \n    operations = find_operations(target)\n\n    print(len(operations))\n    for l, r in operations:\n        print(l, r)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "42": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            length = j - i + 1\n            decimal_value = int(sub, 2)\n            if length == decimal_value:\n                count += 1\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "43": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    min_time = float('inf')\n    \n    for i in range(1 << n):\n        courier_time = 0\n        petya_time = 0\n        \n        courier_indices = []\n        petya_indices = []\n        \n        for j in range(n):\n            if (i >> j) & 1:\n                courier_indices.append(j)\n                courier_time = max(courier_time, a[j])\n            else:\n                petya_indices.append(j)\n                petya_time += b[j]\n        \n        min_time = min(min_time, max(courier_time, petya_time))\n        \n    print(min_time)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "44": "```python\ndef solve():\n    n = int(input())\n    result = []\n    start = 2\n    for _ in range(n):\n        result.append(start)\n        start += 2\n    print(*result)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "45": "```python\ndef solve():\n    x = int(input())\n    \n    count = 0\n    stair_cells = 1\n    total_cells = 0\n    \n    while total_cells + stair_cells <= x:\n        total_cells += stair_cells\n        count += 1\n        stair_cells = stair_cells * 4 + 1\n        \n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "46": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    rock_count = s.count('R')\n    scissors_count = s.count('S')\n    paper_count = s.count('P')\n    \n    if rock_count >= scissors_count and rock_count >= paper_count:\n        print('P' * n)\n    elif scissors_count >= rock_count and scissors_count >= paper_count:\n        print('R' * n)\n    else:\n        print('S' * n)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "47": "```python\ndef solve():\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def calculate_max_strength(arr):\n        if not arr:\n            return 0\n        \n        max_strength = 0\n        for i in range(1 << len(arr)):\n            subsequence = []\n            for j in range(len(arr)):\n                if (i >> j) & 1:\n                    subsequence.append(arr[j])\n            \n            if not subsequence:\n                continue\n            \n            strength = 0\n            for k in range(len(subsequence)):\n                if (k % 2 == 0):\n                    strength += subsequence[k]\n                else:\n                    strength -= subsequence[k]\n            \n            max_strength = max(max_strength, strength)\n        return max_strength\n\n    print(calculate_max_strength(a))\n    \nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "48": "```python\ndef solve():\n    x, y, k = map(int, input().split())\n    \n    # We need k torches, so we need k coal.\n    # To get k coal, we need k * y sticks.\n    # So we need a total of k + k * y sticks.\n    \n    # We start with 1 stick. We need k + k * y sticks.\n    # So we need k + k * y - 1 more sticks.\n    \n    # Each trade of the first type gives us x - 1 sticks.\n    # Let n be the number of trades of the first type.\n    # Then n * (x - 1) >= k + k * y - 1\n    # n >= (k + k * y - 1) / (x - 1)\n    # n = ceil((k + k * y - 1) / (x - 1))\n    \n    n = (k + k * y - 1 + (x - 1) - 1) // (x - 1)\n    \n    # We need k trades of the second type to get k coal.\n    \n    print(n + k)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "49": "```python\ndef solve():\n    def count_classy(n):\n        s = str(n)\n        length = len(s)\n        memo = {}\n\n        def dp(idx, non_zero_count, tight):\n            if idx == length:\n                return 1\n            \n            if (idx, non_zero_count, tight) in memo:\n                return memo[(idx, non_zero_count, tight)]\n            \n            ans = 0\n            upper_bound = int(s[idx]) if tight else 9\n            \n            for digit in range(upper_bound + 1):\n                new_non_zero_count = non_zero_count + (digit != 0)\n                new_tight = tight and (digit == int(s[idx]))\n                \n                if new_non_zero_count <= 3:\n                    ans += dp(idx + 1, new_non_zero_count, new_tight)\n            \n            memo[(idx, non_zero_count, tight)] = ans\n            return ans\n\n        return dp(0, 0, True)\n    \n    l, r = map(int, input().split())\n    print(count_classy(r) - count_classy(l - 1))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "50": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = float('inf')\n\n    for l in range(n + 1):\n        for r in range(n + 1):\n            temp_a = a[:]\n            \n            eaten = []\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            eaten_count = l + r\n            \n            \n            strawberry_count_left = 0\n            blueberry_count_left = 0\n            for i in range(n - l, n):\n                if temp_a[i] == 1:\n                    strawberry_count_left += 1\n                else:\n                    blueberry_count_left += 1\n                    \n            strawberry_count_right = 0\n            blueberry_count_right = 0\n            for i in range(n , n + r):\n                if temp_a[i] == ",
    "51": "```python\ndef solve():\n    n, k, d1, d2 = map(int, input().split())\n\n    def check(x, y, z):\n        if x < 0 or y < 0 or z < 0:\n            return False\n        if x + y + z > k:\n            return False\n        \n        wins = n // 3\n        \n        rem_x = wins - x\n        rem_y = wins - y\n        rem_z = wins - z\n        \n        if rem_x < 0 or rem_y < 0 or rem_z < 0:\n            return False\n        \n        if (rem_x + rem_y + rem_z) <= (n - k):\n          if (n-k-rem_x-rem_y-rem_z) % 3 == 0:\n            return True\n          else:\n            return False\n        else:\n          return False\n\n    \n    if n % 3 != 0:\n      print(\"no\")\n      return\n    \n    if check(d1, d1 + d2, d2):\n        print(\"yes\")\n        return\n    \n    if check(d1, d1 - d2, -d2):\n        print(\"yes\")\n        return\n    \n    if check(-d1, -d1 + d2, d2 - d1):\n        print(\"yes\")\n        return\n    \n    if check(-d1, -d1 - d2, -d2 - d1):\n        print(\"yes\")\n        return\n    \n    print(\"no\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "52": "```python\ndef solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(int(input()))\n    \n    a.sort()\n    \n    total_time = 0\n    for i in range(n):\n        total_time += (a[i] * a[n - 1 - i])\n        \n    print(total_time % 10007)\n\nsolve()\n```",
    "53": null,
    "54": "```python\ndef solve():\n  n = int(input())\n  s = list(map(int, input().split()))\n\n  total_sum = 0\n  for x in s:\n    total_sum += x\n  \n  if total_sum >= 2048:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nq = int(input())\nfor _ in range(q):\n  solve()\n```",
    "55": "```python\ndef solve():\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1)\n    elif n % 2 == 0:\n        print(n // 2)\n    else:\n        print((n + 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "56": "```python\ndef solve():\n  n, k = map(int, input().split())\n  \n  grid = [['0'] * n for _ in range(n)]\n  \n  row = 0\n  col = 0\n  \n  for _ in range(k):\n    grid[row][col] = '1'\n    row = (row + 1) % n\n    col = (col + 1) % n\n    if grid[row][col] == '1':\n      col = (col + 1) % n\n  \n  row_sums = [0] * n\n  col_sums = [0] * n\n  \n  for i in range(n):\n    for j in range(n):\n      if grid[i][j] == '1':\n        row_sums[i] += 1\n        col_sums[j] += 1\n  \n  f_a = (max(row_sums) - min(row_sums))**2 + (max(col_sums) - min(col_sums))**2\n  \n  print(f_a)\n  for row_arr in grid:\n    print(\"\".join(row_arr))\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "57": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  def can_reduce(arr):\n    if len(arr) == 1:\n      return True\n    \n    for i in range(len(arr) - 1):\n      if arr[i] < arr[i+1]:\n        # Try removing arr[i]\n        new_arr1 = arr[:i] + arr[i+1:]\n        if can_reduce(new_arr1):\n          return True\n        \n        # Try removing arr[i+1]\n        new_arr2 = arr[:i+1] + arr[i+2:]\n        if can_reduce(new_arr2):\n          return True\n    \n    return False\n\n  if can_reduce(a):\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "58": "```python\ndef solve():\n  n, m, k = map(int, input().split())\n\n  dp = {}\n\n  def calculate_cost(rows, cols, target):\n    if (rows, cols, target) in dp:\n      return dp[(rows, cols, target)]\n\n    if target == 0:\n      return 0\n    \n    if rows * cols == target:\n      return 0\n    \n    if rows * cols < target:\n      return float('inf')\n\n    min_cost = float('inf')\n\n    # Horizontal breaks\n    for i in range(1, rows):\n      cost = cols * cols\n      cost += calculate_cost(i, cols, min(target, i * cols))\n      cost += calculate_cost(rows - i, cols, max(0, target - i * cols))\n      min_cost = min(min_cost, cost)\n\n    # Vertical breaks\n    for i in range(1, cols):\n      cost = rows * rows\n      cost += calculate_cost(rows, i, min(target, rows * i))\n      cost += calculate_cost(rows, cols - i, max(0, target - rows * i))\n      min_cost = min(min_cost, cost)\n\n    dp[(rows, cols, target)] = min_cost\n    return min_cost\n\n  print(calculate_cost(n, m, k))\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "59": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    bounds = []\n    for i in range(n):\n        if a[i] == -1:\n            if i > 0 and a[i-1] != -1:\n                bounds.append(a[i-1])\n            if i < n - 1 and a[i+1] != -1:\n                bounds.append(a[i+1])\n\n    if not bounds:\n        print(0, 0)\n        return\n\n    min_val = min(bounds)\n    max_val = max(bounds)\n    \n    k = (min_val + max_val) // 2\n    \n    \n    def calculate_m(arr, k_val):\n        b = [x if x != -1 else k_val for x in arr]\n        m = 0\n        for i in range(n - 1):\n            m = max(m, abs(b[i] - b[i+1]))\n        return m\n\n    m = calculate_m(a, k)\n    print(m, k)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "60": "```python\ndef solve():\n  a, b = map(int, input().split())\n  print(a ^ 0 + b ^ 0)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if p[i] < p[j] and p[j] > p[k]:\n                    print(\"YES\")\n                    print(i + 1, j + 1, k + 1)\n                    return\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "62": "```python\ndef solve():\n    s = input()\n    adj = {}\n    for i in range(len(s) - 1):\n        a, b = s[i], s[i+1]\n        if a not in adj:\n            adj[a] = set()\n        if b not in adj:\n            adj[b] = set()\n        adj[a].add(b)\n        adj[b].add(a)\n\n    for char in adj:\n        if len(adj[char]) > 2:\n            print(\"NO\")\n            return\n    \n    start_nodes = []\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        if char in adj and len(adj[char]) <= 1:\n            start_nodes.append(char)\n    \n    \n    used = set()\n    layout = \"\"\n    \n    if not start_nodes:\n        if len(adj) > 0:\n            \n            start_char = next(iter(adj))\n            start_nodes.append(start_char)\n        else:\n            layout = \"abcdefghijklmnopqrstuvwxyz\"\n            print(\"YES\")\n            print(layout)\n            return\n    \n    \n    for start_node in start_nodes:\n        \n        \n        temp_layout = \"\"\n        temp_used = set()\n        \n        curr = start_node\n        \n        while curr is not None and curr not in temp_used:\n            temp_layout += curr\n            temp_used.add(curr)\n            \n            next_node = None\n            if curr in adj:\n                for neighbor in adj[curr]:\n                    if neighbor not in temp_used:\n                        next_node = neighbor\n                        break\n            \n            curr = next_node\n            \n        if len(temp_layout) == len(adj):\n            layout = temp_layout\n            used = temp_used\n            break\n\n    if len(layout) == 0:\n        print(\"NO\")\n        return\n\n    for char in adj:\n        if char not in layout:\n            print(\"NO\")\n            return\n    \n    \n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        if char not in adj:\n            layout += char\n\n    if len(layout) != 26:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(layout)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "63": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n\n    a.sort()\n    w.sort()\n\n    happiness = 0\n    \n    # Assign maximums\n    l, r = 0, n - 1\n    for i in range(k):\n        if w[i] == 1:\n            happiness += 2 * a[r]\n            r -= 1\n\n    # Assign remaining\n    l = 0\n    for i in range(k - 1, -1, -1):\n        if w[i] > 1:\n            happiness += a[r]\n            happiness += a[l]\n            r -= 1\n            l += w[i] - 1\n\n    print(happiness)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n    n, l = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    a1 = [0] + a + [l]\n    \n    left_idx = 0\n    right_idx = n + 1\n    \n    left_pos = a1[left_idx]\n    right_pos = a1[right_idx]\n    \n    left_speed = 1\n    right_speed = 1\n    \n    time = 0\n    \n    while left_idx < right_idx:\n        left_time = (a1[left_idx + 1] - left_pos) / left_speed\n        right_time = (right_pos - a1[right_idx - 1]) / right_speed\n        \n        if left_time < right_time:\n            time += left_time\n            left_pos = a1[left_idx + 1]\n            right_pos -= right_speed * left_time\n            left_speed += 1\n            left_idx += 1\n        else:\n            time += right_time\n            right_pos = a1[right_idx - 1]\n            left_pos += left_speed * right_time\n            right_speed += 1\n            right_idx -= 1\n            \n    print(time + (right_pos - left_pos) / (left_speed + right_speed))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "65": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    dp = {}\n\n    def calculate_min_skips(index, turn):\n        if index == n:\n            return 0\n        \n        if (index, turn) in dp:\n            return dp[(index, turn)]\n\n        if turn == 0:  # Friend's turn\n            ans = float('inf')\n            \n            # Kill one boss\n            if a[index] == 1:\n                ans = min(ans, 1 + calculate_min_skips(index + 1, 1))\n            else:\n                ans = min(ans, calculate_min_skips(index + 1, 1))\n            \n            # Kill two bosses\n            if index + 1 < n:\n                skips = 0\n                if a[index] == 1:\n                    skips += 1\n                if a[index + 1] == 1:\n                    skips += 1\n                ans = min(ans, skips + calculate_min_skips(index + 2, 1))\n            \n            dp[(index, turn)] = ans\n            return ans\n        else:  # Your turn\n            ans = float('inf')\n            \n            # Kill one boss\n            ans = min(ans, calculate_min_skips(index + 1, 0))\n            \n            # Kill two bosses\n            if index + 1 < n:\n                ans = min(ans, calculate_min_skips(index + 2, 0))\n            \n            dp[(index, turn)] = ans\n            return ans\n\n    print(calculate_min_skips(0, 0))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "66": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n  b = list(map(int, input().split()))\n\n  print(*a)\n  print(*sorted(b))\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "67": "```python\ndef solve():\n    n = int(input())\n    s = list(input())\n    t = list(input())\n    \n    counts = {}\n    for char in s:\n        counts[char] = counts.get(char, 0) + 1\n    for char in t:\n        counts[char] = counts.get(char, 0) + 1\n    \n    for char in counts:\n        if counts[char] % 2 != 0:\n            print(\"No\")\n            return\n    \n    swaps = []\n    for i in range(n):\n        if s[i] != t[i]:\n            found = False\n            for j in range(i + 1, n):\n                if s[j] == s[i]:\n                    swaps.append((j + 1, i + 1))\n                    s[j], t[i] = t[i], s[j]\n                    found = True\n                    break\n            if not found:\n                for j in range(i + 1, n):\n                    if t[j] == s[i]:\n                        swaps.append((i + 1, j + 1))\n                        s[i], t[j] = t[j], s[i]\n                        swaps.append((j + 1, i + 1))\n                        s[j], t[i] = t[i], s[j]\n                        break\n    \n    print(\"Yes\")\n    print(len(swaps))\n    for i, j in swaps:\n        print(i, j)\n\nk = int(input())\nfor _ in range(k):\n    solve()\n```",
    "68": "```python\ndef solve():\n  n = int(input())\n  s = input()\n\n  def calculate_operations(arr):\n    operations = 0\n    while arr:\n      max_ops = 0\n      best_i = -1\n\n      for i in range(len(arr)):\n        temp_arr = arr[:]\n        del temp_arr[i]\n\n        if not temp_arr:\n          ops = 1\n        else:\n          first_char = temp_arr[0]\n          j = 0\n          while j < len(temp_arr) and temp_arr[j] == first_char:\n            j += 1\n          temp_arr = temp_arr[j:]\n          ops = 1\n\n        if ops > max_ops:\n          max_ops = ops\n          best_i = i\n\n      del arr[best_i]\n      operations += 1\n\n      if arr:\n        first_char = arr[0]\n        j = 0\n        while j < len(arr) and arr[j] == first_char:\n          j += 1\n        arr = arr[j:]\n\n    return operations\n\n  print(calculate_operations(list(s)))\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "69": "```python\ndef solve():\n    a, b = map(int, input().split())\n    s = input()\n    n = len(s)\n    \n    groups = []\n    i = 0\n    while i < n:\n        if s[i] == '1':\n            j = i\n            while j < n and s[j] == '1':\n                j += 1\n            groups.append((i, j - 1))\n            i = j\n        else:\n            i += 1\n            \n    if not groups:\n        print(0)\n        return\n    \n    cost = a * len(groups)\n    \n    for i in range(len(groups) - 1):\n        dist = groups[i+1][0] - groups[i][1] - 1\n        cost -= min(a, b * dist)\n        \n    print(cost)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "70": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    ans = 0\n    for i in range(k // 2):\n        counts = {}\n        for j in range(0, n, k):\n            counts[s[i+j]] = counts.get(s[i+j], 0) + 1\n            counts[s[k-1-i+j]] = counts.get(s[k-1-i+j], 0) + 1\n        \n        max_count = 0\n        total_count = 0\n        for count in counts.values():\n            max_count = max(max_count, count)\n            total_count += count\n            \n        ans += (total_count - max_count)\n        \n    if k % 2 == 1:\n        counts = {}\n        for j in range(0, n, k):\n            counts[s[k//2+j]] = counts.get(s[k//2+j], 0) + 1\n            \n        max_count = 0\n        total_count = 0\n        for count in counts.values():\n            max_count = max(max_count, count)\n            total_count += count\n        ans += (total_count - max_count)\n    \n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "71": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    coins = 0\n    balance = 0\n    \n    for i in range(n):\n        if a[i] > 0:\n            balance += a[i]\n        elif a[i] < 0:\n            if balance >= abs(a[i]):\n                balance += a[i]\n            else:\n                coins += abs(a[i]) - balance\n                balance = 0\n    print(coins)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "72": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    unique_elements = sorted(list(set(a)))\n    \n    if len(unique_elements) > k:\n        print(-1)\n        return\n\n    \n    b = unique_elements + [1] * (k - len(unique_elements))\n    \n    print(n * k)\n    print(*(b * n))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def mex(arr):\n        s = set(arr)\n        for i in range(n + 1):\n            if i not in s:\n                return i\n        return n + 1\n\n    ops = []\n    \n    for i in range(n):\n        if a[i] != i:\n            m = mex(a)\n            if m < n:\n                ops.append(a.index(m) + 1)\n                a[a.index(m)] = m\n                \n            else:\n                ops.append(i + 1)\n                a[i] = m\n\n    for i in range(n):\n        m = mex(a)\n        ops.append(a.index(m)+1)\n        a[a.index(m)] = m\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    b = a[:]\n    \n    for i in range(len(ops)):\n        b[ops[i]-1] = mex(b)\n        \n    \n    \n    \n    \n    print(len(ops[:n]))\n    print(*ops[:n])\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    minions = []\n    for _ in range(n):\n        minions.append(list(map(int, input().split())))\n\n    best_actions = []\n    max_power = -1\n\n    import itertools\n    for r in range(k + 1):\n        for summoned in itertools.permutations(range(n), r):\n            \n            current_power = 0\n            current_minions = []\n            actions = []\n\n            \n            powers = []\n            for i in range(len(summoned)):\n                powers.append(minions[summoned[i]][0])\n                for j in range(i):\n                  powers[i] += minions[summoned[j]][1]\n                  \n            \n            current_power = sum(powers)\n            \n            if current_power > max_power:\n                max_power = current_power\n                best_actions = []\n                for idx in summoned:\n                    best_actions.append(idx + 1)\n            \n            \n            for num_destroyed in range(r + 1):\n                for destroyed in itertools.combinations(range(r), num_destroyed):\n                  \n                    current_power = 0\n                    current_minions = []\n                    actions = []\n                    \n                    powers = []\n                    for i in range(len(summoned)):\n                        powers.append(minions[summoned[i]][0])\n                        for j in range(i):\n                          powers[i] += minions[summoned[j]][1]\n                    \n                    \n                    for i in range(len(summoned)):\n                        if i not in destroyed:\n                            current_power += powers[i]\n                            \n                    if current_power > max_power:\n                        max_power = current_power\n                        best_actions = []\n                        \n                        temp_summoned = [i+1 for i in summoned]\n                        temp_destroyed = [-(summoned[i]+1)for i in destroyed]\n                        \n                        \n                        \n                        \n                        \n                        temp_actions = []\n                        \n                        summon_idx = 0\n                        destroy_idx = 0\n                        \n                        \n                        \n                        \n                        for i in range (r + num_destroyed):\n                            if destroy_idx < len(temp_destroyed) and \\\n                                temp_destroyed[destroy_idx] < 0 and \\\n                                -temp_destroyed[destroy_idx] == temp_summoned[summon_idx]:\n                                temp_actions.append(temp_summoned[summon_idx])\n                                temp_actions.append(temp_destroyed[destroy_idx])\n                                summon_idx += 1\n                                destroy_idx += 1\n                            else:\n                                temp_actions.append(temp_summoned[summon_idx])\n                                summon_idx += 1\n                        \n                        best_actions = temp_actions\n                        \n    print(len(best_actions))\n    print(*best_actions)\n\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "75": null,
    "76": "```python\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n % 4 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolve()\n```",
    "77": "```python\ndef solve():\n    n = int(input())\n    boards = []\n    for _ in range(n):\n        boards.append(list(map(int, input().split())))\n\n    dp = [[float('inf')] * 3 for _ in range(n)]\n    \n    dp[0][0] = 0\n    dp[0][1] = boards[0][1]\n    dp[0][2] = 2 * boards[0][1]\n\n    for i in range(1, n):\n        for j in range(3):\n            for k in range(3):\n                if boards[i-1][0] + k != boards[i][0] + j:\n                    dp[i][j] = min(dp[i][j], dp[i-1][k] + j * boards[i][1])\n\n    print(min(dp[n-1]))\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "78": "```python\ndef solve():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    \n    ans = float('inf')\n    \n    for r in range(1, n + 1):\n        for c in range(1, m + 1):\n            \n            cost = 0\n            \n            # Check row r\n            for j in range(m):\n                if grid[r-1][j] == '.':\n                    cost += 1\n            \n            # Check col c\n            for i in range(n):\n                if grid[i][c-1] == '.':\n                    cost += 1\n            \n            # Avoid double counting\n            if grid[r-1][c-1] == '*':\n                cost -= 1\n                \n            ans = min(ans, cost)\n            \n    print(ans)\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "79": "```python\nimport math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve():\n    n = int(input())\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i != n:\n                divisors.append(n // i)\n    divisors.append(n)\n    divisors.sort()\n\n    best_order = divisors\n    min_moves = float('inf')\n\n    import itertools\n    for order in itertools.permutations(divisors):\n        moves = 0\n        \n        valid = True\n        for i in range(len(order)):\n            if gcd(order[i], order[(i + 1) % len(order)]) == 1:\n                valid = False\n                break\n\n        if valid:\n            if moves < min_moves:\n                min_moves = moves\n                best_order = list(order)\n        else:\n            moves = 0\n            temp_order = list(order)\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            temp_order = list(order)\n            \n            \n            is_coprime = True\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n\n            \n            is_coprime = False\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            ",
    "80": "```python\ndef solve():\n  l, r = map(int, input().split())\n  \n  count = 0\n  \n  \n  total_count = (r - l + 1) * (r - l) // 2\n  \n  \n  num_zeros = max(0, l - 0)\n  num_in_range = r - 0 + 1\n  \n  \n  \n  total_zeros = num_in_range * (num_in_range - 1) // 2\n  \n  total_zeros_below_l = max(0, l - 1) * (max(0, l - 1) - 1) // 2\n\n  \n  \n  total_zeros_in_range = total_zeros - total_zeros_below_l\n  \n  \n  \n  \n  count=0\n  for a in range(l,r+1):\n      for b in range(l,r+1):\n          if a+b == a^b:\n              count+=1\n  \n  final_count = 0\n  for a in range(l, r + 1):\n    for b in range(l, r + 1):\n      if (a + b) == (a ^ b):\n        final_count += 1\n  \n  \n  print(final_count)\n  \nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "81": null,
    "82": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    if n == 2:\n        print(p[1], p[0])\n        return\n\n    if p == list(range(1, n + 1)):\n        print(*list(range(n, 0, -1)))\n    else:\n        print(*list(range(n, 0, -1)))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "83": "```python\ndef solve():\n    x, y, a, b = map(int, input().split())\n    \n    if a + b == 0:\n        if x == y:\n            print(0)\n        else:\n            print(-1)\n        return\n    \n    if (y - x) % (a + b) == 0:\n        print((y - x) // (a + b))\n    else:\n        print(-1)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "84": null,
    "85": "```python\ndef solve():\n    s = input()\n    x = int(input())\n    n = len(s)\n    w = ['0'] * n\n    \n    for i in range(n):\n        if s[i] == '1':\n            if i - x >= 0:\n                w[i - x] = '1'\n            if i + x < n:\n                w[i + x] = '1'\n    \n    w_str = \"\".join(w)\n    \n    s_check = ['0'] * n\n    for i in range(n):\n        if (i - x >= 0 and w_str[i - x] == '1') or (i + x < n and w_str[i + x] == '1'):\n            s_check[i] = '1'\n        else:\n            s_check[i] = '0'\n    \n    s_check_str = \"\".join(s_check)\n    \n    if s_check_str == s:\n        print(w_str)\n    else:\n        print(\"-1\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "86": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  ones = a.count(1)\n  zeros = a.count(0)\n\n  if ones <= n // 2:\n    print(zeros)\n    print(*([0] * zeros))\n  else:\n    if ones % 2 == 0:\n        print(ones)\n        print(*([1] * ones))\n    else:\n        print(ones - 1)\n        print(*([1] * (ones -1)))\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "87": "```python\ndef gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)\n\ndef solve():\n  m, d, w = map(int, input().split())\n  \n  w = w // gcd(d - 1, w)\n  \n  n = min(m, d)\n  \n  k = n // w\n  \n  ans = n * k - w * (k * (k + 1) // 2)\n  \n  print(ans)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "88": "```python\ndef solve():\n    t = int(input())\n    x = list(map(int, input().split()))\n\n    for target in x:\n        if target < 14:\n            print(\"NO\")\n        elif target % 14 >= 1 and target % 14 <= 6:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    parents = {}\n    children = {}\n    for i in range(1, n + 1):\n        children[i] = []\n    \n    q = [a[0]]\n    idx = 1\n    \n    while q:\n        curr = q.pop(0)\n        \n        next_level = []\n        while idx < n:\n            if any(a[idx] in children[x] for x in a[:idx]):\n                break\n            children[curr].append(a[idx])\n            parents[a[idx]] = curr\n            next_level.append(a[idx])\n            idx += 1\n        \n        q.extend(next_level)\n        \n    def get_height(root):\n        max_depth = 0\n        q = [(root, 0)]\n        \n        while q:\n            node, depth = q.pop(0)\n            max_depth = max(max_depth, depth)\n            \n            for child in children[node]:\n                q.append((child, depth + 1))\n                \n        return max_depth\n    \n    print(get_height(1))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "90": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n\n    unlocked_values = []\n    for i in range(n):\n        if l[i] == 0:\n            unlocked_values.append(a[i])\n\n    unlocked_values.sort()\n\n    unlocked_index = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = unlocked_values[unlocked_index]\n            unlocked_index += 1\n    \n    print(*a)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "91": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n    \n    p = [0] * n\n    used = [False] * (n + 1)\n    \n    for i in range(n):\n        p[i] = q[i]\n        used[q[i]] = True\n    \n    available = []\n    for i in range(1, n + 1):\n        if not used[i]:\n            available.append(i)\n    \n    available.sort(reverse=True)\n    \n    j = 0\n    for i in range(n - 1):\n        if q[i] == q[i+1]:\n            if j >= len(available):\n                print(\"-1\")\n                return\n            p[i] = available[j]\n            j += 1\n        \n    \n    \n    ok = True\n    used_check = [False] * (n + 1)\n    for val in p:\n        if not (1 <= val <= n):\n            ok = False\n            break\n        if used_check[val]:\n            ok = False\n            break\n        used_check[val] = True\n    \n    if not ok:\n        print(\"-1\")\n        return\n    \n    \n    q_check = [0] * n\n    q_check[0] = p[0]\n    for i in range(1, n):\n        q_check[i] = max(q_check[i-1], p[i])\n        \n    if q_check == q:\n        print(*p)\n    else:\n        print(\"-1\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "92": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    \n    def get_reachable(string):\n        reachable = set()\n        reachable.add(string)\n        \n        q = [string]\n        visited = {string}\n        \n        while q:\n            curr = q.pop(0)\n            \n            for i in range(n - 1):\n                # s[i+1] = s[i]\n                new_s1 = list(curr)\n                new_s1[i+1] = new_s1[i]\n                new_s1 = \"\".join(new_s1)\n                \n                if new_s1 not in visited:\n                    reachable.add(new_s1)\n                    q.append(new_s1)\n                    visited.add(new_s1)\n                \n                # s[i] = s[i+1]\n                new_s2 = list(curr)\n                new_s2[i] = new_s2[i+1]\n                new_s2 = \"\".join(new_s2)\n                \n                if new_s2 not in visited:\n                    reachable.add(new_s2)\n                    q.append(new_s2)\n                    visited.add(new_s2)\n        \n        return reachable\n    \n    reachable_s = get_reachable(s)\n    reachable_t = get_reachable(t)\n    \n    if any(r in reachable_t for r in reachable_s):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "93": "```python\ndef solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    total_time = 0\n    \n    for i in range(m):\n        present_to_send = b[i]\n        \n        index_in_stack = a.index(present_to_send)\n        \n        time_to_send = 2 * index_in_stack + 1\n        total_time += time_to_send\n        \n        removed_presents = a[:index_in_stack]\n        remaining_presents = a[index_in_stack+1:]\n        \n        a = removed_presents + remaining_presents\n\n        \n        reordered_removed_presents = []\n        for j in range(len(removed_presents)):\n            reordered_removed_presents.append(removed_presents[j])\n\n        a = reordered_removed_presents + a\n        \n    print(total_time)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "94": "```python\ndef solve():\n    n, T = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    colors = [0] * n\n    \n    for i in range(n):\n        if a[i] * 2 < T:\n            colors[i] = 0\n        elif a[i] * 2 > T:\n            colors[i] = 1\n        else:\n            if i % 2 == 0:\n                colors[i] = 0\n            else:\n                colors[i] = 1\n    \n    print(*colors)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    if n == 1:\n        print(\"-1\")\n    else:\n        s = \"\"\n        for _ in range(n):\n            s += \"2\"\n        print(s)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "96": "```python\ndef solve():\n    n, T, a, b = map(int, input().split())\n    types = list(map(int, input().split()))\n    times = list(map(int, input().split()))\n\n    problems = []\n    for i in range(n):\n        problems.append((times[i], types[i]))\n\n    max_points = 0\n    for leave_time in range(T + 1):\n        solved_count = 0\n        possible = True\n        \n        mandatory_problems = []\n        non_mandatory_problems = []\n\n        for i in range(n):\n            if problems[i][0] <= leave_time:\n                mandatory_problems.append(problems[i])\n            else:\n                non_mandatory_problems.append(problems[i])\n        \n        mandatory_problems.sort()\n        non_mandatory_problems.sort()\n            \n        time_spent = 0\n        solved_mandatory = 0\n        \n        for problem in mandatory_problems:\n            if problem[1] == 0:\n                solve_time = a\n            else:\n                solve_time = b\n                \n            if time_spent + solve_time <= leave_time:\n                time_spent += solve_time\n                solved_mandatory += 1\n            else:\n                possible = False\n                break\n        \n        if not possible:\n            continue\n        \n        solved_count += solved_mandatory\n        \n        remaining_time = leave_time - time_spent\n        \n        \n        \n        easy_count = 0\n        hard_count = 0\n        for i in range(n):\n            if types[i] == 0:\n                easy_count +=1\n            else:\n                hard_count +=1\n\n        \n        easy_solved = 0\n        hard_solved = 0\n        \n        \n        remaining_problems = []\n        for problem in non_mandatory_problems:\n            remaining_problems.append(problem[1])\n            \n        \n        \n        \n        \n        \n        temp_solved = 0\n        temp_time = 0\n        \n        easy_remaining = remaining_problems.count(0)\n        hard_remaining = remaining_problems.count(1)\n\n        \n        \n        while temp_time + a <= remaining_time and easy_remaining > 0:\n            temp_time += a\n            temp_solved += 1\n            easy_remaining -= 1\n            \n        while temp_time + b <= remaining_time and hard_remaining > 0:\n            temp_time += b\n            temp_solved += 1\n            hard_remaining -= 1\n            \n        \n        \n        solved_count += temp_solved\n        \n\n        max_points = max(max_points, solved_count)\n\n    print(max_points)\n\nm = int(input())\nfor _ in range(m):\n    solve()\n```",
    "97": "```python\ndef solve():\n  s, c = input().split()\n  n = len(s)\n\n  if s < c:\n    print(s)\n    return\n\n  best_s = None\n\n  for i in range(n):\n    for j in range(i + 1, n):\n      temp_s = list(s)\n      temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n      temp_s = \"\".join(temp_s)\n      if temp_s < c:\n        if best_s is None or temp_s < best_s:\n          best_s = temp_s\n  \n  if best_s is None:\n    print(\"---\")\n  else:\n    print(best_s)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "98": "```python\ndef solve():\n  c, m, x = map(int, input().split())\n  \n  low = 0\n  high = min(c, m, x)\n  ans = 0\n  \n  while low <= high:\n    mid = (low + high) // 2\n    \n    if c >= mid and m >= mid and x >= mid:\n      if c - mid + m - mid + x - mid >= 0:\n        ans = mid\n        low = mid + 1\n      else:\n        high = mid - 1\n    else:\n      high = mid - 1\n  \n  print(ans)\n\nq = int(input())\nfor _ in range(q):\n  solve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    s = list(s)\n    \n    i = 0\n    while i < len(s) - 1:\n        if s[i] == '1' and s[i+1] == '0':\n            s.pop(i+1)\n            i = 0\n        else:\n            i += 1\n            \n    print(\"\".join(s))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```"
}