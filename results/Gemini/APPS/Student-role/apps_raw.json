{
    "0": "```python\ndef solve():\n  n = int(input())\n  words = []\n  for _ in range(n):\n    words.append(input())\n\n  def reverse_word(word):\n    return word[::-1]\n\n  def check(arr):\n    for i in range(len(arr) - 1):\n      if arr[i][-1] != arr[i+1][0]:\n        return False\n    return True\n\n  def find_solution():\n    for i in range(1 << n):\n      reversed_indices = []\n      temp_words = []\n      for j in range(n):\n        if (i >> j) & 1:\n          reversed_indices.append(j + 1)\n          temp_words.append(reverse_word(words[j]))\n        else:\n          temp_words.append(words[j])\n\n      \n      if len(set(temp_words)) != n:\n        continue\n      \n      import itertools\n      for perm in itertools.permutations(temp_words):\n          if check(list(perm)):\n              return len(reversed_indices), reversed_indices\n\n    return -1, []\n\n  k, reversed_indices = find_solution()\n  \n  if k == -1:\n    print(-1)\n  else:\n    print(k)\n    if k > 0:\n      print(*reversed_indices)\n    \n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "1": "```python\ndef solve():\n  q = int(input())\n  for _ in range(q):\n    n, m, k = map(int, input().split())\n\n    if n > k or m > k:\n      print(-1)\n      continue\n\n    if (n % 2) != (m % 2):\n      if k % 2 == 0:\n        print(-1)\n      else:\n        print(k - 1)\n    else:\n      print(k)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    p = [0] * n\n    p[0] = a[0]\n    \n    for i in range(1, n):\n        if a[i] != p[i-1]:\n            p[i] = a[i]\n        elif b[i] != p[i-1]:\n            p[i] = b[i]\n        else:\n            p[i] = c[i]\n    \n    if p[n-1] == p[0]:\n        if a[n-1] != p[n-2] and a[n-1] != p[0]:\n            p[n-1]=a[n-1]\n        elif b[n-1] != p[n-2] and b[n-1] != p[0]:\n             p[n-1]=b[n-1]\n        else:\n             p[n-1]=c[n-1]\n                \n    print(*p)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "3": "```python\ndef solve():\n  n, k = map(int, input().split())\n  a = list(map(int, input().split()))\n  \n  if all(x == 0 for x in a):\n    print(0)\n    return\n  \n  a.sort()\n  \n  total = sum(a[n-k-1:])\n  \n  print(total)\n  \n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "4": "```python\ndef solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    result = \"\"\n    for m in range(1, n + 1):\n        is_beautiful = False\n        for l in range(n):\n            for r in range(l, n):\n                sub_array = p[l:r+1]\n                if len(sub_array) == m:\n                    nums = sorted(sub_array)\n                    if nums == list(range(1, m + 1)):\n                        is_beautiful = True\n                        break\n            if is_beautiful:\n                break\n        result += \"1\" if is_beautiful else \"0\"\n    print(result)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "5": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    results = []\n    \n    for l1 in range(1, n):\n        l2 = n - l1\n        p1 = a[:l1]\n        p2 = a[l1:]\n        \n        m1 = max(p1)\n        m2 = max(p2)\n        \n        if all(1 <= x <= m1 for x in p1) and all(1 <= x <= m2 for x in p2) and len(set(p1)) == l1 and len(set(p2)) == l2 and m1 == l1 and m2 == l2:\n            results.append((l1, l2))\n            \n    print(len(results))\n    for l1, l2 in results:\n        print(l1, l2)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "6": null,
    "7": null,
    "8": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    def calculate_score(arr):\n        score = 0\n        for i in range(len(arr)):\n            if arr[i] == 'W':\n                if i == 0:\n                    score += 1\n                elif arr[i-1] == 'W':\n                    score += 2\n                else:\n                    score += 1\n        return score\n\n    def find_optimal_score(arr, k_left):\n        if k_left == 0:\n            return calculate_score(arr)\n\n        max_score = calculate_score(arr)\n        \n        indices_to_change = []\n        for i in range (len(arr)):\n            if arr[i] == 'L':\n                indices_to_change.append(i)\n                \n        if len(indices_to_change) == 0:\n            return calculate_score(arr)\n            \n        for i in indices_to_change:\n            temp_arr = list(arr)\n            temp_arr[i] = 'W'\n            \n            max_score = max(max_score, find_optimal_score(\"\".join(temp_arr), k_left-1))\n                \n        return max_score\n    \n    \n    \n    \n    def solve_dp():\n        max_score = 0\n        \n        for i in range(1 << n):\n            num_changes = 0\n            temp_s = list(s)\n            \n            for j in range(n):\n                if (i >> j) & 1:\n                    if temp_s[j] == 'W':\n                        temp_s[j] = 'L'\n                    else:\n                        temp_s[j] = 'W'\n                    num_changes += 1\n                    \n            if num_changes <= k:\n                max_score = max(max_score, calculate_score(temp_s))\n        return max_score\n\n    \n    \n    \n    wins = s.count('W')\n    if wins == 0:\n        if k == 0:\n            print(0)\n        else:\n            print(2 * k - 1) if k <= n else print(2 * n -1)\n        return\n\n    \n    gaps = []\n    first_win = -1\n    last_win = -1\n    \n    for i in range(n):\n        if s[i] == 'W':\n            if first_win == -1:\n                first_win = i\n            last_win = i\n            \n    \n    current_gap = 0\n    for i in range(first_win + 1, last_win + 1):\n        if s[i] == 'L':\n            current_gap += 1\n        elif current_gap > 0:\n            gaps.append(current_gap)\n            current_gap = 0\n            \n    gaps.sort()\n    \n    score = calculate_score(s)\n    \n    for gap in gaps:\n        if k >= gap:\n            score += 2 * gap + 1\n            k -= gap\n        else:\n            score += 2 * k\n            k = 0\n            break\n    \n    if k > 0:\n        score += 2 * k\n        \n        if first_win == 0 and last_win == n -1:\n            pass\n        elif first_win == 0 or last_win == n-1:\n            score -= k\n        else:\n            score -= k\n    \n    \n    print(min(score, 2 * n - 1))\n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "9": "```python\ndef solve():\n  s = input()\n  \n  def calculate_score(moves):\n    alice_score = 0\n    for i in range(len(moves)):\n      if i % 2 == 0:\n        alice_score += moves[i]\n    return alice_score\n  \n  def get_moves(current_s):\n    moves = []\n    i = 0\n    while i < len(current_s):\n      j = i\n      while j < len(current_s) and current_s[i] == current_s[j]:\n        j += 1\n      moves.append((i, j))\n      i = j\n    return moves\n  \n  def play_game(current_s, alice_turn):\n    if not current_s:\n      return 0\n    \n    moves = get_moves(current_s)\n    best_score = -1\n    \n    for start, end in moves:\n      deleted_ones = 0\n      for k in range(start, end):\n        if current_s[k] == '1':\n          deleted_ones += 1\n          \n      new_s = current_s[:start] + current_s[end:]\n      \n      score_after_move = play_game(new_s, not alice_turn)\n      \n      if alice_turn:\n          best_score = max(best_score, deleted_ones + score_after_move if best_score != -1 else deleted_ones + score_after_move)\n      else:\n          best_score = max(best_score, score_after_move if best_score != -1 else score_after_move)\n          \n    return best_score\n  \n  def solve_greedy(s):\n      groups = []\n      i = 0\n      while i < len(s):\n          j = i\n          while j < len(s) and s[i] == s[j]:\n              j += 1\n          groups.append(s[i:j])\n          i = j\n      \n      groups.sort(key=len, reverse=True)\n      \n      alice_score = 0\n      for i in range(0, len(groups), 2):\n          alice_score += groups[i].count('1')\n      \n      return alice_score\n  \n  print(solve_greedy(s))\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "10": null,
    "11": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    def calculate_area(commands):\n        x, y = 0, 0\n        min_x, max_x, min_y, max_y = 0, 0, 0, 0\n        \n        for cmd in commands:\n            if cmd == 'W':\n                y -= 1\n            elif cmd == 'S':\n                y += 1\n            elif cmd == 'A':\n                x -= 1\n            elif cmd == 'D':\n                x += 1\n            \n            min_x = min(min_x, x)\n            max_x = max(max_x, x)\n            min_y = min(min_y, y)\n            max_y = max(max_y, y)\n        \n        width = max_x - min_x + 1\n        height = max_y - min_y + 1\n        return width * height\n    \n    min_area = calculate_area(s)\n    \n    for i in range(n + 1):\n        for cmd in ['W', 'A', 'S', 'D']:\n            new_s = s[:i] + cmd + s[i:]\n            min_area = min(min_area, calculate_area(new_s))\n    \n    print(min_area)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    possible = True\n    \n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        \n        if a[i] < b[i]:\n            can_increase = False\n            for j in range(i):\n                if a[j] == 1:\n                    can_increase = True\n                    break\n            if not can_increase:\n                possible = False\n                break\n        else:\n            can_decrease = False\n            for j in range(i):\n                if a[j] == -1:\n                    can_decrease = True\n                    break\n            if not can_decrease:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "13": "```python\ndef solve():\n    n, g, b = map(int, input().split())\n    \n    required_good = (n + 1) // 2\n    \n    num_cycles = (required_good + g - 1) // g\n    \n    total_days = (num_cycles - 1) * (g + b) + required_good\n    \n    print(max(total_days, n))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "14": "```python\ndef solve():\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n\n    if a1 == a2 and a1 + b1 == b2:\n        print(\"Yes\")\n        return\n    if a1 == a2 and a1 + b2 == b1:\n        print(\"Yes\")\n        return\n    \n    if b1 == b2 and b1 + a1 == a2:\n        print(\"Yes\")\n        return\n    if b1 == b2 and b1 + a2 == a1:\n        print(\"Yes\")\n        return\n    \n    if a1 == b2 and a1 + b1 == a2:\n        print(\"Yes\")\n        return\n    if a1 == b2 and a1 + a2 == b1:\n        print(\"Yes\")\n        return\n    \n    if b1 == a2 and b1 + a1 == b2:\n        print(\"Yes\")\n        return\n    if b1 == a2 and b1 + b2 == a1:\n        print(\"Yes\")\n        return\n\n    print(\"No\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "15": "```python\ndef solve():\n  a, b, x, y = map(int, input().split())\n  \n  ans = 0\n  \n  # Case 1: Window to the right of the dead pixel\n  ans = max(ans, a * y)\n  \n  # Case 2: Window to the left of the dead pixel\n  ans = max(ans, a * (b - y - 1))\n  \n  # Case 3: Window below the dead pixel\n  ans = max(ans, b * x)\n  \n  # Case 4: Window above the dead pixel\n  ans = max(ans, b * (a - x - 1))\n  \n  print(ans)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "16": "```python\ndef solve():\n    n = int(input())\n    C, T = map(float, input().split())\n    problems = []\n    for _ in range(n):\n        a, p = map(int, input().split())\n        problems.append((a, p))\n\n    max_score = 0\n\n    for i in range(1 << n):\n        selected_problems = []\n        for j in range(n):\n            if (i >> j) & 1:\n                selected_problems.append(problems[j])\n\n        import itertools\n        \n        for perm in itertools.permutations(selected_problems):\n            \n            for training_time in range(int(T * 1000) + 1):\n                training_time /= 1000.0\n                \n                current_time = training_time\n                current_skill = 1.0 + C * training_time\n                current_score = 0\n                \n                \n                valid = True\n                for a, p in perm:\n                    current_time += 10.0\n                    if current_time > T:\n                        valid = False\n                        break\n                    \n                    current_time += a / current_skill\n                    if current_time > T:\n                        valid = False\n                        break\n                    \n                    current_score += p\n                    current_skill *= 0.9\n                    \n                if valid:\n                    max_score = max(max_score, current_score)\n\n    print(int(max_score))\n\n\ntc = int(input())\nfor _ in range(tc):\n    solve()\n```",
    "17": null,
    "18": null,
    "19": "```python\ndef solve():\n    n, k, d = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    ans = float('inf')\n    for i in range(n - d + 1):\n        sub_array = a[i:i+d]\n        \n        unique_shows = len(set(sub_array))\n        ans = min(ans, unique_shows)\n    \n    print(ans)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    n, m = map(int, input().split())\n    customers = []\n    for _ in range(n):\n        customers.append(list(map(int, input().split())))\n    \n    current_time = 0\n    current_low = m\n    current_high = m\n    \n    for t, l, h in customers:\n        time_diff = t - current_time\n        current_low -= time_diff\n        current_high += time_diff\n        \n        if current_high < l or current_low > h:\n            print(\"NO\")\n            return\n        \n        current_low = max(current_low, l)\n        current_high = min(current_high, h)\n        current_time = t\n        \n    print(\"YES\")\n\nq = int(input())\nfor _ in range(q):\n    solve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    \n    for k in range(1, 1025):\n        new_s = sorted([x ^ k for x in s])\n        if new_s == s:\n            print(k)\n            return\n    \n    print(-1)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "22": "```python\ndef min_max_digit(n):\n    s = str(n)\n    min_digit = int(s[0])\n    max_digit = int(s[0])\n    for digit in s:\n        digit = int(digit)\n        min_digit = min(min_digit, digit)\n        max_digit = max(max_digit, digit)\n    return min_digit, max_digit\n\nt = int(input())\nfor _ in range(t):\n    a1, k = map(int, input().split())\n    a = a1\n    for i in range(1, min(k, 1001)):\n        min_digit, max_digit = min_max_digit(a)\n        if min_digit == 0:\n            break\n        a += min_digit * max_digit\n    print(a)\n```",
    "23": null,
    "24": null,
    "25": "```python\ndef solve():\n    n = int(input())\n    triangles = []\n    for _ in range(n - 2):\n        triangles.append(list(map(int, input().split())))\n\n    def check_permutation(p):\n        adj = {i: [] for i in range(1, n + 1)}\n        for i in range(n):\n            adj[p[i]].append(p[(i - 1 + n) % n])\n            adj[p[i]].append(p[(i + 1) % n])\n        \n        cut_order = []\n        remaining_triangles = list(range(n - 2))\n        \n        while remaining_triangles:\n            found = False\n            for i in list(remaining_triangles):\n                triangle = triangles[i]\n                \n                valid = True\n                for v in triangle:\n                    count = 0\n                    for neighbor in adj[v]:\n                        if neighbor in triangle:\n                            count += 1\n                    if count < 2:\n                        valid = False\n                        break\n                \n                if valid:\n                    cut_order.append(i + 1)\n                    remaining_triangles.remove(i)\n                    \n                    for v in triangle:\n                        for neighbor in triangle:\n                            if neighbor != v and neighbor in adj[v]:\n                                adj[v].remove(neighbor)\n                    \n                    found = True\n                    break\n            \n            if not found:\n                return False, []\n        \n        return True, cut_order\n\n    import itertools\n    for p in itertools.permutations(range(1, n + 1)):\n        success, cut_order = check_permutation(list(p))\n        if success:\n            print(*p)\n            print(*cut_order)\n            return\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "26": "```python\ndef solve():\n  n, m = map(int, input().split())\n  if (n == 1 and m >= 1) or (n >= 1 and m == 1) or (n == 2 and m == 2):\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    moves = 0\n    processed = set()\n    \n    while True:\n        all_odd = True\n        for x in a:\n            if x % 2 == 0:\n                all_odd = False\n                break\n        \n        if all_odd:\n            break\n        \n        \n        max_even = -1\n        for x in a:\n            if x % 2 == 0:\n                max_even = max(max_even, x)\n        \n        if max_even == -1:\n            break\n        \n        if max_even not in processed:\n            processed.add(max_even)\n            moves += 1\n            \n            for i in range(n):\n                if a[i] == max_even:\n                    a[i] //= 2\n        else:\n            \n            changed = False\n            for c in sorted(list(set([x for x in a if x % 2 == 0])), reverse=True):\n                if c not in processed:\n                    processed.add(c)\n                    moves += 1\n                    for i in range(n):\n                        if a[i] == c:\n                            a[i] //= 2\n                    changed = True\n                    break\n            if not changed:\n                break\n            \n    print(moves)\n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    target = \"abacaba\"\n    \n    def check(t):\n        count = 0\n        for i in range(len(t) - 6):\n            if t[i:i+7] == target:\n                count += 1\n        return count\n    \n    def replace_all(t):\n        return t.replace('?', 'd')\n    \n    for i in range(n - 6):\n        temp = list(s)\n        possible = True\n        for j in range(7):\n            if temp[i+j] == '?':\n                temp[i+j] = target[j]\n            elif temp[i+j] != target[j]:\n                possible = False\n                break\n        \n        if possible:\n            temp_str = \"\".join(temp)\n            \n            \n            \n            \n            temp_str = replace_all(temp_str)\n            \n            \n            if check(temp_str) == 1:\n                print(\"Yes\")\n                print(temp_str)\n                return\n    \n    print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "29": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  def get_k_amazing_number(k):\n    candidates = set(a)\n    \n    possible_amazing_numbers = []\n    \n    for num in candidates:\n        is_amazing = True\n        for i in range(n - k + 1):\n            subsegment = a[i:i+k]\n            if num not in subsegment:\n                is_amazing = False\n                break\n        if is_amazing:\n            possible_amazing_numbers.append(num)\n            \n    if not possible_amazing_numbers:\n        return -1\n    else:\n        return min(possible_amazing_numbers)\n\n  result = []\n  for k in range(1, n + 1):\n    result.append(get_k_amazing_number(k))\n\n  print(*result)\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```"
}