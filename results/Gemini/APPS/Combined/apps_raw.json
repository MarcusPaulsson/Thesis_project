{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n\n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n\n    if first_bracket == -1:\n        print(-1)\n        return\n\n    first_colon = -1\n    for i in range(first_bracket + 1, n):\n        if s[i] == ':':\n            first_colon = i\n            break\n\n    if first_colon == -1:\n        print(-1)\n        return\n\n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n\n    if last_bracket == -1:\n        print(-1)\n        return\n\n    last_colon = -1\n    for i in range(last_bracket - 1, -1, -1):\n        if s[i] == ':':\n            last_colon = i\n            break\n            \n    if last_colon == -1:\n        print(-1)\n        return\n\n    if first_bracket >= first_colon or last_bracket <= last_colon:\n        print(-1)\n        return\n\n    count = 0\n    for i in range(first_colon + 1, last_colon):\n        if s[i] == '|':\n            count += 1\n\n    print(4 + count)\n\nsolve()\n```",
    "1": "```python\ndef sum_digits(n):\n    \"\"\"Calculates the sum of the digits of a non-negative integer.\n\n    Args:\n        n: The non-negative integer.\n\n    Returns:\n        The sum of the digits of n.\n    \"\"\"\n    s = str(n)\n    digit_sum = 0\n    for digit in s:\n        digit_sum += int(digit)\n    return digit_sum\n\n\ndef solve():\n    \"\"\"Finds the largest integer not exceeding x with the maximum digit sum.\"\"\"\n    x = int(input())\n\n    best_num = x\n    max_digit_sum = sum_digits(x)\n\n    s = str(x)\n    n = len(s)\n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n\n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n\n        if num > 0:\n            digit_sum = sum_digits(num)\n            if digit_sum > max_digit_sum:\n                max_digit_sum = digit_sum\n                best_num = num\n            elif digit_sum == max_digit_sum and num > best_num:\n                best_num = num\n\n    print(best_num)\n\n\nif __name__ == \"__main__\":\n    solve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    length = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10**(length-1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n, q = map(int, input().split())\n    painters = []\n    for _ in range(q):\n        l, r = map(int, input().split())\n        painters.append((l, r))\n\n    def calculate_painted_sections(selected_painters):\n        painted = [False] * n\n        for l, r in selected_painters:\n            for i in range(l - 1, r):\n                painted[i] = True\n        return sum(painted)\n\n    max_painted = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            selected_painters = []\n            for k in range(q):\n                if k != i and k != j:\n                    selected_painters.append(painters[k])\n            max_painted = max(max_painted, calculate_painted_sections(selected_painters))\n\n    print(max_painted)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    x = int(input())\n    hh, mm = map(int, input().split())\n\n    def is_lucky(h, m):\n        return '7' in str(h) or '7' in str(m)\n\n    count = 0\n    current_h = hh\n    current_m = mm\n\n    while True:\n        if is_lucky(current_h, current_m):\n            print(count)\n            return\n\n        current_m -= x\n        if current_m < 0:\n            current_m += 60\n            current_h -= 1\n            if current_h < 0:\n                current_h += 24\n        count += 1\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n\n    ans = float('inf')\n\n    for d, h in blows:\n        if d >= x:\n            ans = min(ans, 1)\n\n    if ans == 1:\n        print(1)\n        return\n\n    \n    max_diff = 0\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0 and max_damage < x:\n        print(-1)\n        return\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    \n    remaining = x - max_damage\n    \n    if remaining <= 0:\n        print(2)\n        return\n\n    \n    blows_needed = (remaining + max_diff - 1) // max_diff\n    \n    print(blows_needed + 1)\n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    capacity = n\n    day = 0\n    \n    while True:\n        day += 1\n        capacity = min(n, capacity + m)\n        capacity -= day\n        \n        if capacity <= 0:\n            print(day)\n            return\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        min_x = min(x1, x2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            min_x_other = min(x1_other, x2_other)\n            if min_x_other < min_x:\n                count += 1\n        return count\n\n    def count_right(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        max_x = max(x1, x2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            max_x_other = max(x1_other, x2_other)\n            if max_x_other > max_x:\n                count += 1\n        return count\n\n    def count_top(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        min_y = min(y1, y2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            min_y_other = min(y1_other, y2_other)\n            if min_y_other < min_y:\n                count += 1\n        return count\n\n    def count_bottom(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        max_y = max(y1, y2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            max_y_other = max(y1_other, y2_other)\n            if max_y_other > max_y:\n                count += 1\n        return count\n\n    result = -1\n    for i in range(d):\n        l = count_left(i)\n        r = count_right(i)\n        t = count_top(i)\n        b = count_bottom(i)\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            result = i + 1\n            break\n\n    print(result)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n    n = int(input())\n    \n    min_days_off = (n // 7) * 2\n    rem = n % 7\n    \n    if rem == 6:\n        min_days_off += 1\n    \n    max_days_off = (n // 7) * 2 + min(2, rem)\n    \n    print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n    \"\"\"\n    Calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Args:\n        a: The first integer.\n        b: The second integer.\n\n    Returns:\n        The greatest common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"\n    Calculates the least common multiple (LCM) of two integers.\n\n    Args:\n        a: The first integer.\n        b: The second integer.\n\n    Returns:\n        The least common multiple of a and b.\n    \"\"\"\n    return (a * b) // gcd(a, b)\n\ndef solve():\n    \"\"\"\n    Calculates the maximum number of chocolates Joty can get by painting tiles red or blue.\n    \"\"\"\n    n, a, b, p, q = map(int, input().split())\n\n    red_count = n // a\n    blue_count = n // b\n    both_count = n // lcm(a, b)\n\n    red_only = red_count - both_count\n    blue_only = blue_count - both_count\n\n    total_chocolates = 0\n\n    if p > q:\n        total_chocolates += red_only * p\n        total_chocolates += both_count * p\n        total_chocolates += blue_only * q\n    else:\n        total_chocolates += red_only * p\n        total_chocolates += both_count * q\n        total_chocolates += blue_only * q\n\n    print(total_chocolates)\n\nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i + 1] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n\n    order = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(\"-1\")\n        return\n\n    reachable = set(main_courses)\n    q = deque(main_courses)\n    visited = set(main_courses)\n\n    while q:\n        u = q.popleft()\n        for i in range(1, n + 1):\n            for dep in dependencies[i-1]:\n                if dep == u and i not in visited:\n                    reachable.add(i)\n                    visited.add(i)\n                    q.append(i)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n\n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n\n    p_full = p[:]\n    for x in remaining:\n        p_full.append(x)\n\n    def is_stack_sortable(arr):\n        stack = []\n        expected = 1\n        for x in arr:\n            stack.append(x)\n            while stack and stack[-1] == expected:\n                stack.pop()\n                expected += 1\n        return not stack\n\n    if not is_stack_sortable(p_full):\n        print(\"-1\")\n        return\n\n    print(*p_full)\n\nsolve()\n```",
    "15": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n\n  if c == 0:\n    if a == b:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n    return\n\n  diff = b - a\n\n  if diff % c == 0 and diff // c >= 0:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt1 >= 0 and cnt3 >= 0:\n        if cnt1 == 0 and cnt3 > 0:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n\n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    t = []\n    u = \"\"\n\n    suffix_min = [\"\"] * (n + 1)\n    suffix_min[n] = chr(ord('z') + 1)\n\n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i + 1])\n\n    i = 0\n    while i < n or len(t) > 0:\n        if len(t) > 0 and t[-1] <= suffix_min[i if i < n else n]:\n            u += t[-1]\n            t.pop()\n        else:\n            if i < n:\n                t.append(s[i])\n                i += 1\n            else:\n                break\n\n    while len(t) > 0:\n        u += t[-1]\n        t.pop()\n\n    print(u)\n\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n\n    if possible:\n        for i in range(1, n):\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][1] - pairs[i-1][1] > pairs[i][0] - pairs[i-1][0]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    time_str = input()\n    hh = int(time_str[:2])\n    mm = int(time_str[3:])\n\n    def is_palindrome(h, m):\n        h_str = str(h).zfill(2)\n        m_str = str(m).zfill(2)\n        return h_str == m_str[::-1]\n\n    minutes = 0\n    while True:\n        if is_palindrome(hh, mm):\n            print(minutes)\n            return\n\n        minutes += 1\n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    pos_min = a.index(1)\n    pos_max = a.index(n)\n\n    ans = max(abs(pos_min - 0), abs(pos_min - (n - 1)), abs(pos_max - 0), abs(pos_max - (n - 1)))\n\n    print(ans)\n\nsolve()\n```",
    "22": "```python\ndef solve():\n    s = input()\n    n = len(s)\n\n    symmetric_chars = {\n        'b': 'd', 'd': 'b',\n        'p': 'q', 'q': 'p',\n        'o': 'o', 'x': 'x',\n        'v': 'v', 'w': 'w',\n        'A': 'A', 'H': 'H',\n        'I': 'I', 'M': 'M',\n        'O': 'O', 'T': 'T',\n        'U': 'U', 'V': 'V',\n        'W': 'W', 'X': 'X',\n        'Y': 'Y'\n    }\n\n    for i in range(n // 2):\n        if s[i] not in symmetric_chars or symmetric_chars[s[i]] != s[n - 1 - i]:\n            print(\"NIE\")\n            return\n\n    if n % 2 == 1:\n        mid_char = s[n // 2]\n        if mid_char not in symmetric_chars or symmetric_chars[mid_char] != mid_char:\n            print(\"NIE\")\n            return\n\n    print(\"TAK\")\n\nsolve()\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    def find_max_permutation(index, current_num, remaining_digits):\n        if index == len(a):\n            return current_num\n        \n        best_num = None\n        \n        for digit in sorted(remaining_digits.keys(), reverse=True):\n            if remaining_digits[digit] > 0:\n                new_num = current_num + digit\n                \n                if new_num <= b[:index+1]:\n                    temp_remaining_digits = remaining_digits.copy()\n                    temp_remaining_digits[digit] -= 1\n                    if temp_remaining_digits[digit] == 0:\n                        del temp_remaining_digits[digit]\n                    \n                    if new_num == b[:index+1]:\n                        result = find_max_permutation(index + 1, new_num, temp_remaining_digits)\n                        if result is not None:\n                            if best_num is None or result > best_num:\n                                best_num = result\n                    else:\n                        remaining_digits_list = []\n                        for d, count in temp_remaining_digits.items():\n                            remaining_digits_list.extend([d] * count)\n                        remaining_digits_list.sort(reverse=True)\n                        \n                        full_num = new_num + \"\".join(remaining_digits_list)\n                        if best_num is None or full_num > best_num:\n                            best_num = full_num\n        \n        return best_num\n\n    a_counts = Counter(a)\n    result = find_max_permutation(0, \"\", a_counts)\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(input())\n\n    def check_win(board):\n        n = 10\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    # Check horizontal\n                    if j + 4 < n and all(board[i][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check vertical\n                    if i + 4 < n and all(board[i+k][j] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i + 4 < n and j + 4 < n and all(board[i+k][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i + 4 < n and j - 4 >= 0 and all(board[i+k][j-k] == 'X' for k in range(5)):\n                        return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                temp_board = [list(row) for row in board]\n                temp_board[i][j] = 'X'\n                temp_board = [\"\".join(row) for row in temp_board]\n                if check_win(temp_board):\n                    print('YES')\n                    return\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k > n * n:\n        print(\"-1\")\n        return\n\n    matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n        \n    if k != 0:\n        print(\"-1\")\n        return\n\n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\nimport math\n\ndef solve():\n    x, y, z = map(float, input().split())\n\n    expressions = [\"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"]\n\n    a1 = x ** (y ** z)\n    a2 = x ** (z ** y)\n    a3 = (x ** y) ** z\n    a4 = (x ** z) ** y\n    a5 = y ** (x ** z)\n    a6 = y ** (z ** x)\n    a7 = (y ** x) ** z\n    a8 = (y ** z) ** x\n    a9 = z ** (x ** y)\n    a10 = z ** (y ** x)\n    a11 = (z ** x) ** y\n    a12 = (z ** y) ** x\n\n    values = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\n\n    max_index = 0\n    for i in range(1, len(values)):\n        if values[i] > values[max_index]:\n            max_index = i\n\n    print(expressions[max_index])\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s.startswith(prefix * 2):\n            ans = min(ans, i + 1 + (n - 2 * i))\n    \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n\n    moves = []\n    e = len(examples)\n\n    def find_temp_name(existing_names):\n        temp_name = \"temp\"\n        temp_num = 0\n        while True:\n            temp_candidate = temp_name + str(temp_num)\n            if temp_candidate not in existing_names:\n                return temp_candidate\n            temp_num += 1\n\n    def move_file(source, destination):\n        moves.append(f\"move {source} {destination}\")\n        \n    def update_file_name(files_list, old_name, new_name):\n        for i in range(len(files_list)):\n            if files_list[i][0] == old_name:\n                files_list[i] = (new_name, files_list[i][1])\n                return\n\n    existing_names = {file[0] for file in files}\n\n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        target_name = str(i + 1)\n        if examples[i][0] != target_name:\n            if target_name in existing_names:\n                temp = find_temp_name(existing_names)\n                move_file(target_name, temp)\n                update_file_name(files, target_name, temp)\n                existing_names.remove(target_name)\n                existing_names.add(temp)\n                \n                temp2 = find_temp_name(existing_names)\n                move_file(examples[i][0], temp2)\n                update_file_name(files, examples[i][0], temp2)\n                existing_names.remove(examples[i][0])\n                existing_names.add(temp2)\n                \n                move_file(temp2, target_name)\n                update_file_name(files, temp2, target_name)\n                existing_names.remove(temp2)\n                existing_names.add(target_name)\n                \n                move_file(temp, examples[i][0])\n                update_file_name(files, temp, examples[i][0])\n                existing_names.remove(temp)\n                existing_names.add(examples[i][0])\n                \n                examples[i] = (target_name, examples[i][1])\n                \n                for j in range(len(examples)):\n                    if examples[j][0] == examples[i][0]:\n                        examples[j] = (examples[i][0], examples[j][1])\n                        break\n            else:\n                move_file(examples[i][0], target_name)\n                update_file_name(files, examples[i][0], target_name)\n                existing_names.remove(examples[i][0])\n                existing_names.add(target_name)\n                examples[i] = (target_name, examples[i][1])\n                \n\n    # Move regular tests to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        target_name = str(e + i + 1)\n        if regular[i][0] != target_name:\n            if target_name in existing_names:\n                temp = find_temp_name(existing_names)\n                move_file(target_name, temp)\n                update_file_name(files, target_name, temp)\n                existing_names.remove(target_name)\n                existing_names.add(temp)\n                \n                temp2 = find_temp_name(existing_names)\n                move_file(regular[i][0], temp2)\n                update_file_name(files, regular[i][0], temp2)\n                existing_names.remove(regular[i][0])\n                existing_names.add(temp2)\n                \n                move_file(temp2, target_name)\n                update_file_name(files, temp2, target_name)\n                existing_names.remove(temp2)\n                existing_names.add(target_name)\n                \n                move_file(temp, regular[i][0])\n                update_file_name(files, temp, regular[i][0])\n                existing_names.remove(temp)\n                existing_names.add(regular[i][0])\n                \n                regular[i] = (target_name, regular[i][1])\n                \n                for j in range(len(regular)):\n                    if regular[j][0] == regular[i][0]:\n                        regular[j] = (regular[i][0], regular[j][1])\n                        break\n            else:\n                move_file(regular[i][0], target_name)\n                update_file_name(files, regular[i][0], target_name)\n                existing_names.remove(regular[i][0])\n                existing_names.add(target_name)\n                regular[i] = (target_name, regular[i][1])\n\n    print(len(moves))\n    for move in moves:\n        print(move)\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    digits = [int(c) for c in s]\n    \n    ans = 6\n    \n    for sum_val in range(28):  # Max sum of 3 digits is 9+9+9 = 27, plus 1 for range\n        for i in range(1000):\n            s1 = str(i).zfill(3)\n            if sum(int(c) for c in s1) == sum_val:\n                for j in range(1000):\n                    s2 = str(j).zfill(3)\n                    if sum(int(c) for c in s2) == sum_val:\n                        \n                        temp_digits = [int(c) for c in s1 + s2]\n                        \n                        diff = 0\n                        for k in range(6):\n                            if digits[k] != temp_digits[k]:\n                                diff += 1\n                        ans = min(ans, diff)\n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n > 63 and k > 1:\n        print(1, 1)\n        return\n\n    if k > 2**n:\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    \n    for i in range(int(k)):\n        num = (num * (pow(2, n, mod) - i)) % mod\n        den = (den * pow(2, n, mod)) % mod\n\n    gcd_val = gcd(num, den)\n    num //= gcd_val\n    den //= gcd_val\n\n    a = (den - num) % mod\n    b = den % mod\n\n    print(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 is North Pole, 20000 is South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if current_pos == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n        \n        if direction == \"North\":\n            current_pos = max(0, current_pos - t)\n        elif direction == \"South\":\n            current_pos = min(20000, current_pos + t)\n        \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    d, x, y = extended_gcd(a1, a2)\n    x *= (b2 - b1) // d\n    y *= (b2 - b1) // d\n\n    lcm = (a1 * a2) // g\n\n    first = a1 * x + b1\n\n    k = (first - L + lcm - 1) // lcm\n    first_valid = first - (k * lcm)\n    \n    if first_valid < L:\n        first_valid += lcm\n    \n    if first_valid > R:\n        print(0)\n        return\n    \n    count = (R - first_valid) // lcm + 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        # i plates for cake a, n-i plates for cake b\n        if i >= 1 and i < n:\n            x = a // i\n            y = b // (n - i)\n            \n            if x > 0 and y > 0:\n                ans = max(ans, min(x, y))\n            \n    print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n\n    if n == 0:\n        print(0, 0)\n        return\n\n    layer = 0\n    count = 0\n    while True:\n        if count + 6 * layer <= n:\n            count += 6 * layer\n            layer += 1\n        else:\n            layer -= 1\n            break\n\n    remaining_moves = n - count\n    x, y = 2 * layer, 0\n\n    if remaining_moves == 0:\n        print(x, y)\n        return\n\n    segment_length = layer\n    \n    if layer == 0:\n        x = remaining_moves * 2\n        y = 0\n        print(x, y)\n        return\n\n    moves_in_segment = remaining_moves % (6 * layer)\n    \n    if 0 < remaining_moves <= layer:\n        x -= 2 * remaining_moves\n    elif layer < remaining_moves <= 2 * layer:\n        x -= 2 * layer\n        x += 2 * (remaining_moves - layer)\n        y += 2 * layer\n    elif 2 * layer < remaining_moves <= 3 * layer:\n        x += 2 * (remaining_moves - 2 * layer)\n        y += 2 * layer\n        y -= 2 * (remaining_moves - 2 * layer)\n    elif 3 * layer < remaining_moves <= 4 * layer:\n        x += 2 * layer\n        y -= 2 * (remaining_moves - 3 * layer)\n    elif 4 * layer < remaining_moves <= 5 * layer:\n        x += 2 * layer\n        x -= 2 * (remaining_moves - 4 * layer)\n        y -= 2 * layer\n    else:\n        x -= 2 * (remaining_moves - 5 * layer)\n        y -= 2 * layer\n        y += 2 * (remaining_moves - 5 * layer)\n\n    print(x, y)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n\n  for i in range(101):\n    if a * i > c:\n      break\n    remaining_damage = c - a * i\n    if remaining_damage % b == 0:\n      print(\"Yes\")\n      return\n\n  print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, L = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for start_diff in range(n):\n        shifted_sasha = [(sasha[i] - sasha[0] + kefa[0]) % L for i in range(n)]\n        shifted_sasha.sort()\n\n        if shifted_sasha == kefa:\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n    \"\"\"\n    Calculates the distance to the nearest zero for each element in the array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        list: A list of integers representing the distances to the nearest zero.\n    \"\"\"\n\n    n = len(arr)\n    distances = [float('inf')] * n\n\n    # Forward pass: Calculate distances from left to right\n    last_zero = float('-inf')\n    for i in range(n):\n        if arr[i] == 0:\n            last_zero = i\n        if last_zero != float('-inf'):\n            distances[i] = min(distances[i], i - last_zero)\n\n    # Backward pass: Calculate distances from right to left\n    last_zero = float('inf')\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 0:\n            last_zero = i\n        if last_zero != float('inf'):\n            distances[i] = min(distances[i], last_zero - i)\n\n    return distances\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = nearest_zero(arr)\n    print(*result)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    len_s = len(s)\n    \n    count = 0\n    distinct_strings = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        if binary_string in distinct_strings:\n            continue\n            \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            \n            for j in range(n):\n                shifted_string = binary_string[j:] + binary_string[:j]\n                distinct_strings.add(shifted_string)\n                \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    def angle(v):\n        return math.atan2(v[1], v[0])\n\n    angles_with_indices = []\n    for i in range(n):\n        angles_with_indices.append((angle(vectors[i]), i + 1))\n\n    angles_with_indices.sort()\n\n    min_diff = float('inf')\n    best_pair = None\n\n    for i in range(n - 1):\n        diff = angles_with_indices[i+1][0] - angles_with_indices[i][0]\n        if diff < min_diff:\n            min_diff = diff\n            best_pair = (angles_with_indices[i][1], angles_with_indices[i+1][1])\n\n    circular_diff = angles_with_indices[0][0] + (2 * math.pi - angles_with_indices[-1][0])\n    if circular_diff < min_diff:\n        min_diff = circular_diff\n        best_pair = (angles_with_indices[0][1], angles_with_indices[-1][1])\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\ndef solve():\n    d, k, a, b, t = map(int, input().split())\n\n    if d <= k:\n        print(d * a)\n        return\n\n    cost_only_driving = k * a + (d - k) * b\n    cost_with_repairs = 0\n\n    num_breaks = (d - 1) // k\n    cost_with_repairs = k * a + num_breaks * t + (d - k) * a\n\n    if t + k * a < k * b:\n        cost_with_repairs = (d // k) * (k * a + t) + (d % k) * a if d % k != 0 else (d // k) * (k * a + t) - t\n        cost_with_repairs = cost_with_repairs if d % k != 0 else cost_with_repairs + t if d == k else cost_with_repairs\n        cost_with_repairs = (d // k) * (k * a + t) + (d % k) * a if d % k != 0 else (d // k -1) * (k * a + t) + k * a\n        if d % k == 0 and d == k:\n            cost_with_repairs = k * a\n        elif d % k == 0 and d > k:\n            cost_with_repairs = (d // k - 1) * t + (d // k) * (k * a)\n        else:\n            cost_with_repairs = (d // k) * (k * a + t) + (d % k) * a\n    else:\n        cost_with_repairs = k * a + (d - k) * b\n    \n    print(min(cost_only_driving, cost_with_repairs))\n\nsolve()\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 0\n    for gcd in range(1, int(n**0.5) + 1):\n        if n % gcd == 0:\n            if (n // gcd) >= (k * (k + 1) // 2):\n                best_gcd = max(best_gcd, gcd)\n            if gcd >= (k * (k + 1) // 2):\n                best_gcd = max(best_gcd, n // gcd)\n\n    if best_gcd == 0:\n        print(-1)\n        return\n    \n    seq = []\n    sum_so_far = 0\n    for i in range(1, k):\n        seq.append(best_gcd * i)\n        sum_so_far += best_gcd * i\n\n    seq.append(n - sum_so_far)\n\n    if seq[-1] <= seq[-2]:\n        print(-1)\n        return\n\n    print(*seq)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    count = 0\n    for remainder in range(5):\n        count += (n - remainder + 4) // 5 * ((m - (5 - remainder) + 5) // 5) if remainder <= n else 0\n    print(count)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    low = 1\n    high = n * m\n    ans = 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\ndef solve():\n    k = int(input())\n\n    digits_count = 0\n    length = 1\n    power_of_10 = 1\n\n    while True:\n        numbers_count = 9 * power_of_10\n        total_digits = numbers_count * length\n\n        if digits_count + total_digits >= k:\n            break\n\n        digits_count += total_digits\n        power_of_10 *= 10\n        length += 1\n\n    remaining_digits = k - digits_count\n    number_index = (remaining_digits - 1) // length\n    digit_index = (remaining_digits - 1) % length\n\n    number = power_of_10 + number_index\n    number_str = str(number)\n\n    print(number_str[digit_index])\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def calculate_max_sum(row_index, current_sum_mod):\n        if row_index == n:\n            if current_sum_mod == 0:\n                return 0\n            else:\n                return -float('inf')\n\n        if (row_index, current_sum_mod) in dp:\n            return dp[(row_index, current_sum_mod)]\n\n        max_elements = m // 2\n        row = a[row_index]\n\n        row_dp = {}\n\n        def calculate_row_max_sum(col_index, elements_chosen, current_row_sum_mod):\n            if col_index == m:\n                if elements_chosen <= max_elements:\n                    return 0 if current_row_sum_mod == 0 else -float('inf')\n                else:\n                    return -float('inf')\n\n            if (col_index, elements_chosen, current_row_sum_mod) in row_dp:\n                return row_dp[(col_index, elements_chosen, current_row_sum_mod)]\n\n            choose = -float('inf')\n            if elements_chosen < max_elements:\n                new_row_sum_mod = (current_row_sum_mod + row[col_index]) % k\n                choose = row[col_index] + calculate_row_max_sum(col_index + 1, elements_chosen + 1, new_row_sum_mod)\n\n            skip = calculate_row_max_sum(col_index + 1, elements_chosen, current_row_sum_mod)\n\n            row_dp[(col_index, elements_chosen, current_row_sum_mod)] = max(choose, skip)\n            return row_dp[(col_index, elements_chosen, current_row_sum_mod)]\n\n        max_row_sum = calculate_row_max_sum(0, 0, 0)\n        \n        max_val = -float('inf')\n        for row_sum_mod in range(k):\n            row_dp_mod = {}\n\n            def calculate_row_max_sum_with_sum(col_index, elements_chosen, current_row_sum, current_row_sum_mod):\n                if col_index == m:\n                    if elements_chosen <= max_elements:\n                        return current_row_sum if current_row_sum_mod == 0 else -float('inf')\n                    else:\n                        return -float('inf')\n\n                if (col_index, elements_chosen, current_row_sum_mod) in row_dp_mod:\n                    return row_dp_mod[(col_index, elements_chosen, current_row_sum_mod)]\n\n                choose = -float('inf')\n                if elements_chosen < max_elements:\n                    new_row_sum_mod = (current_row_sum_mod + row[col_index]) % k\n                    choose = calculate_row_max_sum_with_sum(col_index + 1, elements_chosen + 1, current_row_sum + row[col_index], new_row_sum_mod)\n\n                skip = calculate_row_max_sum_with_sum(col_index + 1, elements_chosen, current_row_sum, current_row_sum_mod)\n\n                row_dp_mod[(col_index, elements_chosen, current_row_sum_mod)] = max(choose, skip)\n                return row_dp_mod[(col_index, elements_chosen, current_row_sum_mod)]\n\n            row_max_sum_val = calculate_row_max_sum_with_sum(0, 0, 0, row_sum_mod)\n            \n            max_val = max(max_val, row_max_sum_val + calculate_max_sum(row_index + 1, (current_sum_mod + row_sum_mod) % k))\n\n        dp[(row_index, current_sum_mod)] = max_val\n        return max_val\n\n    result = calculate_max_sum(0, 0)\n    print(result)\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_subsequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_sequence, left, right, moves):\n            nonlocal max_len, best_moves\n\n            if left > right:\n                if len(current_sequence) > max_len:\n                    max_len = len(current_sequence)\n                    best_moves = moves\n                return\n\n            if not current_sequence:\n                # Take left\n                backtrack(current_sequence + [arr[left]], left + 1, right, moves + \"L\")\n                # Take right\n                backtrack(current_sequence + [arr[right]], left, right - 1, moves + \"R\")\n            else:\n                last_element = current_sequence[-1]\n                \n                # Take left\n                if arr[left] > last_element:\n                    backtrack(current_sequence + [arr[left]], left + 1, right, moves + \"L\")\n                \n                # Take right\n                if arr[right] > last_element:\n                    backtrack(current_sequence + [arr[right]], left, right - 1, moves + \"R\")\n                \n\n        backtrack([], 0, len(arr) - 1, \"\")\n        return max_len, best_moves\n    \n    def find_longest_increasing_subsequence_optimized(arr):\n        n = len(arr)\n        dp = {}\n\n        def solve_recursive(left, right, last):\n            if (left, right, last) in dp:\n                return dp[(left, right, last)]\n\n            if left > right:\n                return 0, \"\"\n\n            len_l, len_r = 0, 0\n            moves_l, moves_r = \"\", \"\"\n\n            if arr[left] > last:\n                len_l, moves_l = solve_recursive(left + 1, right, arr[left])\n                len_l += 1\n                moves_l = \"L\" + moves_l\n\n            if arr[right] > last:\n                len_r, moves_r = solve_recursive(left, right - 1, arr[right])\n                len_r += 1\n                moves_r = \"R\" + moves_r\n            \n            if len_l > len_r:\n                dp[(left, right, last)] = len_l, moves_l\n            elif len_r > len_l:\n                dp[(left, right, last)] = len_r, moves_r\n            elif len_l == len_r and len_l != 0:\n                dp[(left, right, last)] = len_l, min(moves_l, moves_r)\n            else:\n                dp[(left, right, last)] = 0, \"\"\n            \n            return dp[(left, right, last)]\n\n        length, moves = solve_recursive(0, n - 1, 0)\n        return length, moves\n\n    length, moves = find_longest_increasing_subsequence_optimized(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    unique_values = sorted(list(set(a)))\n\n    if n == 1:\n        print(0)\n        return\n\n    if len(unique_values) > 3:\n        print(-1)\n        return\n\n    if len(unique_values) == 1:\n        print(0)\n        return\n\n    if len(unique_values) == 2:\n        val1, val2 = unique_values\n        d = abs(val1 - val2)\n        if d % 2 == 0:\n            print(d // 2)\n        else:\n            print(d)\n        return\n\n    if len(unique_values) == 3:\n        val1, val2, val3 = unique_values\n        if val2 - val1 == val3 - val2:\n            print(val2 - val1)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n    \"\"\"Calculates the area of intersection between two rectangles.\"\"\"\n    x_overlap = max(0, min(x2, x4) - max(x1, x3))\n    y_overlap = max(0, min(y2, y4) - max(y1, y3))\n    return x_overlap * y_overlap\n\n\ndef solve():\n    \"\"\"Reads input, calculates covered area, and prints the result.\"\"\"\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n\n    intersection1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    intersection2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n\n    # Calculate the intersection of the two black rectangles\n    intersection_black_rectangles = intersection_area(x3, y3, x4, y4, x5, y5, x6, y6)\n\n    # Calculate the total covered area by the two black rectangles within the white rectangle\n    total_covered_area = intersection1 + intersection2 - intersection_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n    \n    #Alternative calculation of total covered area\n    #total_covered_area = intersection1 + intersection2 - intersection_area(max(x1,x3), max(y1,y3), min(x2,x4), min(y2,y4), max(x1,x5), max(y1,y5), min(x2,x6), min(y2,y6))\n\n    if white_area > intersection1 + intersection2 - intersection_area(x3, y3, x4, y4, x5, y5, x6, y6):\n        intersection_white_black1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n        intersection_white_black2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n        \n        total_covered_area = intersection_white_black1 + intersection_white_black2 - intersection_area(max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6), x1, y1, x2, y2)\n        \n        if white_area > total_covered_area:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n\nsolve()\n```",
    "56": "```python\ndef f(x):\n    x += 1\n    while x % 10 == 0:\n        x //= 10\n    return x\n\ndef solve():\n    n = int(input())\n    reachable = set()\n    curr = n\n    while curr not in reachable:\n        reachable.add(curr)\n        curr = f(curr)\n    print(len(reachable))\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    givers = []\n    receivers = []\n\n    assigned = [False] * (n + 1)\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i]] = True\n\n    for i in range(n):\n        if f[i] == 0:\n            givers.append(i)\n\n    for i in range(1, n + 1):\n        if not assigned[i]:\n            receivers.append(i)\n\n    for i in range(len(givers)):\n        if givers[i] == receivers[i] - 1:\n            if i + 1 < len(givers):\n                receivers[i], receivers[i+1] = receivers[i+1], receivers[i]\n            else:\n                receivers[i], receivers[i-1] = receivers[i-1], receivers[i]\n\n    for i in range(len(givers)):\n        f[givers[i]] = receivers[i]\n\n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    possible = True\n    for x in counts:\n        if counts[x] > k:\n            possible = False\n            break\n\n    if not possible:\n        print(\"NO\")\n        return\n\n    colors = [0] * n\n    color_index = 1\n\n    for i in range(n):\n        colors[i] = color_index\n        color_index = (color_index % k) + 1\n        if color_index == 0:\n            color_index = k\n\n    print(\"YES\")\n    print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                pass\n            else:\n                count += 1\n        else:\n            if s[i] == '1':\n                pass\n            else:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    a_list = list(map(int, list(a)))\n    \n    start = -1\n    end = -1\n    \n    for i in range(n):\n        if f[a_list[i] - 1] > a_list[i]:\n            start = i\n            break\n            \n    if start == -1:\n        print(a)\n        return\n        \n    for i in range(start, n):\n        if f[a_list[i] - 1] < a_list[i]:\n            end = i - 1\n            break\n    else:\n        end = n - 1\n        \n    \n    result = \"\"\n    for i in range(n):\n        if start <= i <= end:\n            result += str(f[a_list[i] - 1])\n        else:\n            result += str(a_list[i])\n            \n    print(result)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_abc = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_abc = (A, B, C)\n    \n    print(best_cost)\n    print(*best_abc)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c, i + 1))\n\n    schedule = [0] * n\n    exam_days = {}\n    for s, d, c, i in exams:\n        if d in exam_days:\n            print(\"-1\")\n            return\n        exam_days[d] = i\n        schedule[d - 1] = m + 1\n\n    preparation_counts = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            best_exam = -1\n            for i in range(m):\n                s, d, c, exam_num = exams[i]\n                if s <= day + 1 < d and preparation_counts[i] < c:\n                    if best_exam == -1:\n                        best_exam = i\n                    else:\n                        s_best, d_best, c_best, exam_num_best = exams[best_exam]\n                        if d < d_best:\n                            best_exam = i\n            \n            if best_exam != -1:\n                schedule[day] = exams[best_exam][3]\n                preparation_counts[best_exam] += 1\n\n    for i in range(m):\n        if preparation_counts[i] != exams[i][2]:\n            print(\"-1\")\n            return\n\n    print(*schedule)\n\nsolve()\n```",
    "65": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    if n == m:\n        print(0)\n        return\n\n    if m % n != 0:\n        print(-1)\n        return\n\n    diff = m // n\n    \n    twos = 0\n    threes = 0\n    \n    while diff % 2 == 0:\n        diff //= 2\n        twos += 1\n    while diff % 3 == 0:\n        diff //= 3\n        threes += 1\n            \n    if diff != 1:\n        print(-1)\n    else:\n        print(twos + threes)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n\n    if k == 1:\n        print(t)\n        return\n\n    overlap = 0\n    for i in range(1, n):\n        if t[i:] == t[:n - i]:\n            overlap = n - i\n            break\n\n    result = t + t[overlap:] * (k - 1)\n    print(result)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n                dp[i][j] = min(dp[i][j], k + 1)\n\n    counts = []\n    for i in range(n + 1):\n        counts.append(dp[n][i])\n\n    total_cost = 0\n\n    for length in range(n, -1, -1):\n        take = min(counts[length], k)\n        total_cost += take * (n - length)\n        k -= take\n\n        if k == 0:\n            print(total_cost)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n\n    adj = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    degree_one = 0\n    for neighbor in adj[1]:\n        degree_one += 1\n\n    if d > degree_one or d < 1 or n - 1 > m:\n        print(\"NO\")\n        return\n\n    def bfs(start_node, all_edges):\n        q = [start_node]\n        visited = {start_node}\n        spanning_tree_edges = []\n\n        while q:\n            u = q.pop(0)\n            \n            neighbors = []\n            for edge in all_edges:\n                if edge[0] == u and edge[1] not in visited:\n                    neighbors.append(edge[1])\n                elif edge[1] == u and edge[0] not in visited:\n                    neighbors.append(edge[0])\n            \n            for v in neighbors:\n                spanning_tree_edges.append((u, v))\n                visited.add(v)\n                q.append(v)\n        \n        return spanning_tree_edges, visited\n\n    \n    initial_edges = []\n    degree_edges = []\n    other_edges = []\n    \n    for u, v in edges:\n        if u == 1 or v == 1:\n            degree_edges.append((u,v))\n        else:\n            other_edges.append((u,v))\n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "70": "```python\ndef solve():\n  h1, m1 = map(int, input().replace(':', ' ').split())\n  h2, m2 = map(int, input().replace(':', ' ').split())\n\n  start_minutes = h1 * 60 + m1\n  end_minutes = h2 * 60 + m2\n\n  mid_minutes = (start_minutes + end_minutes) // 2\n\n  h3 = mid_minutes // 60\n  m3 = mid_minutes % 60\n\n  print(f\"{h3:02d}:{m3:02d}\")\n\nsolve()\n```",
    "71": "```python\ndef solve():\n    \"\"\"\n    Reads an integer 'a' from input and finds the largest integer 'n' such that 2^n <= a.\n    Prints the value of 'n'.\n    \"\"\"\n    a = int(input())\n\n    if a == 1:\n        print(1)\n        return\n\n    n = 0\n    power_of_2 = 1\n    while power_of_2 <= a:\n        power_of_2 *= 2\n        n += 1\n\n    print(n - 1)\n\nsolve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n        for j in range(1, i + 1):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    counts = [0] * (n + 1)\n    unique_chars = set(s)\n    if len(unique_chars) == 1:\n        for i in range(n + 1):\n            counts[i] = 1\n            for j in range(1, i + 1):\n                counts[i] = counts[i] * (n - j + 1) // j\n    else:\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n\n        for i in range(1, n + 1):\n            for j in range(i + 1):\n                dp[i][0] = 1\n                if j > 0:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n        counts = [dp[n][i] for i in range(n + 1)]\n\n    total_subsequences = sum(counts)\n\n    if total_subsequences < k:\n        print(-1)\n        return\n\n    cost = 0\n    for length in range(n, -1, -1):\n        num_subsequences_of_length = counts[length]\n\n        if k > num_subsequences_of_length:\n            cost += num_subsequences_of_length * (n - length)\n            k -= num_subsequences_of_length\n        else:\n            cost += k * (n - length)\n            k = 0\n            break\n\n    print(cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  week = [0, 1, 2, 0, 2, 1, 0]  # 0: fish, 1: rabbit, 2: chicken\n  \n  weekly_a = week.count(0)\n  weekly_b = week.count(1)\n  weekly_c = week.count(2)\n  \n  weeks = min(a // weekly_a if weekly_a > 0 else float('inf'),\n              b // weekly_b if weekly_b > 0 else float('inf'),\n              c // weekly_c if weekly_c > 0 else float('inf'))\n  \n  a -= weeks * weekly_a\n  b -= weeks * weekly_b\n  c -= weeks * weekly_c\n  \n  days = weeks * 7\n  \n  best_days = 0\n  \n  for start_day in range(7):\n    temp_days = 0\n    temp_a, temp_b, temp_c = a, b, c\n    \n    possible = True\n    \n    while possible:\n      day_index = (start_day + temp_days) % 7\n      food_type = week[day_index]\n      \n      if food_type == 0:\n        if temp_a > 0:\n          temp_a -= 1\n        else:\n          possible = False\n      elif food_type == 1:\n        if temp_b > 0:\n          temp_b -= 1\n        else:\n          possible = False\n      else:\n        if temp_c > 0:\n          temp_c -= 1\n        else:\n          possible = False\n      \n      if possible:\n        temp_days += 1\n    \n    best_days = max(best_days, temp_days)\n  \n  print(days + best_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile = []\n        tile.append(list(map(int, input().split())))\n        tile.append(list(map(int, input().split())))\n        tiles.append(tile)\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n  \"\"\"\n  Calculates the minimum possible absolute difference between the sums of two sets\n  formed by dividing the sequence 1, 2, ..., n.\n\n  The problem is equivalent to checking if the sum of the sequence is even or odd.\n  If the sum is even, the minimum difference is 0. Otherwise, it's 1.\n  \"\"\"\n  n = int(input())\n  total_sum = n * (n + 1) // 2  # Calculate the sum of the sequence efficiently\n  print(total_sum % 2)  # Output 0 if even, 1 if odd\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    len_s = len(s)\n\n    def count_regular_sequences(n, s):\n        count = 0\n        \n        def is_regular(seq):\n            balance = 0\n            for char in seq:\n                if char == '(':\n                    balance += 1\n                else:\n                    balance -= 1\n                if balance < 0:\n                    return False\n            return balance == 0\n\n        def generate_sequences(current_seq, open_count, close_count):\n            nonlocal count\n            if len(current_seq) == 2 * n:\n                if is_regular(current_seq) and s in current_seq:\n                    count = (count + 1) % mod\n                return\n\n            if open_count < n:\n                generate_sequences(current_seq + '(', open_count + 1, close_count)\n            if close_count < open_count:\n                generate_sequences(current_seq + ')', open_count, close_count + 1)\n\n        generate_sequences(\"\", 0, 0)\n        return count\n\n    \n    dp = {}\n\n    def count_regular_sequences_dp(length, balance, contains_s):\n        if (length, balance, contains_s) in dp:\n            return dp[(length, balance, contains_s)]\n\n        if length == 2 * n:\n            if balance == 0 and contains_s:\n                return 1\n            else:\n                return 0\n\n        if balance < 0:\n            return 0\n\n        res = 0\n        \n        # Add '('\n        if balance < n:\n            new_contains_s = contains_s\n            temp_seq = \"\"\n            if length < len_s:\n                temp_seq = \"(\" + s[:length]\n            else:\n                temp_seq = current_seq = \"(\"\n                \n            if not contains_s:\n                if (temp_seq).endswith(s):\n                    new_contains_s = True\n            \n            res = (res + count_regular_sequences_dp(length + 1, balance + 1, new_contains_s)) % mod\n\n        # Add ')'\n        new_contains_s = contains_s\n        temp_seq = \"\"\n        if length < len_s:\n            temp_seq = \")\" + s[:length]\n        else:\n            temp_seq = \")\"\n        \n        if not contains_s:\n            if (temp_seq).endswith(s):\n                new_contains_s = True\n        \n        res = (res + count_regular_sequences_dp(length + 1, balance - 1, new_contains_s)) % mod\n\n        dp[(length, balance, contains_s)] = res\n        return res\n\n    print(count_regular_sequences_dp(0, 0, False))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    s = list(n)\n    n = len(s)\n\n    def calculate_moves(arr, target):\n        moves = 0\n        temp_arr = arr[:]\n        \n        # Move the last two digits to the end\n        first_target_index = -1\n        for i in range(len(temp_arr) - 1, -1, -1):\n            if temp_arr[i] == target[1]:\n                first_target_index = i\n                break\n        \n        if first_target_index == -1:\n            return float('inf')\n        \n        moves += len(temp_arr) - 1 - first_target_index\n        temp_arr.pop(first_target_index)\n        \n        second_target_index = -1\n        for i in range(len(temp_arr) - 1, -1, -1):\n            if temp_arr[i] == target[0]:\n                second_target_index = i\n                break\n        \n        if second_target_index == -1:\n            return float('inf')\n        \n        moves += len(temp_arr) - 1 - second_target_index\n        temp_arr.pop(second_target_index)\n        \n        # Remove leading zeros\n        first_digit_index = -1\n        for i in range(len(temp_arr)):\n            if temp_arr[i] != '0':\n                first_digit_index = i\n                break\n        \n        if first_digit_index == -1:\n            return moves\n        \n        moves += first_digit_index\n        \n        return moves\n\n    ans = float('inf')\n    \n    ans = min(ans, calculate_moves(s, \"00\"))\n    ans = min(ans, calculate_moves(s, \"25\"))\n    ans = min(ans, calculate_moves(s, \"50\"))\n    ans = min(ans, calculate_moves(s, \"75\"))\n                \n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    def check(arr, color_assignment):\n        colored_chars = []\n        for i in range(n):\n            colored_chars.append((arr[i], color_assignment[i]))\n\n        chars_list = list(s)\n\n        for _ in range(n * (n - 1) // 2):\n            swapped = False\n            for i in range(n - 1):\n                if chars_list[i] > chars_list[i + 1] and color_assignment[i] != color_assignment[i + 1]:\n                    chars_list[i], chars_list[i + 1] = chars_list[i + 1], chars_list[i]\n                    swapped = True\n            if not swapped:\n                break\n\n        return \"\".join(chars_list) == \"\".join(sorted(s))\n\n    def find_min_colors():\n        for num_colors in range(1, n + 1):\n            import itertools\n            for color_assignment in itertools.product(range(1, num_colors + 1), repeat=n):\n                if check(s, list(color_assignment)):\n                    return num_colors, list(color_assignment)\n        return n, list(range(1, n + 1))\n\n    num_colors, color_assignment = find_min_colors()\n    print(num_colors)\n    print(*color_assignment)\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    strings.sort(key=len)\n\n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    if check_order(strings):\n        print(\"YES\")\n        for s in strings:\n            print(s)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    min_perimeter = float('inf')\n    \n    for height in range(1, int(total**0.5) + 1):\n        if total % height == 0:\n            width = total // height\n            \n            # Case 1: 'a' forms a rectangle\n            for a_height in range(1, int(a**0.5) + 1):\n                if a % a_height == 0:\n                    a_width = a // a_height\n                    if a_height <= height and a_width <= width:\n                        min_perimeter = min(min_perimeter, 2 * (height + width))\n            \n            # Case 2: 'b' forms a rectangle\n            for b_height in range(1, int(b**0.5) + 1):\n                if b % b_height == 0:\n                    b_width = b // b_height\n                    if b_height <= height and b_width <= width:\n                        min_perimeter = min(min_perimeter, 2 * (height + width))\n                        \n    print(min_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    def check(coloring):\n        s0 = \"\"\n        s1 = \"\"\n        for i in range(n):\n            if coloring[i] == '0':\n                s0 += s[i]\n            else:\n                s1 += s[i]\n        \n        s0_sorted = \"\".join(sorted(s0))\n        s1_sorted = \"\".join(sorted(s1))\n        \n        sorted_s = \"\".join(sorted(s))\n        \n        merged = \"\"\n        i = 0\n        j = 0\n        k = 0\n        \n        while i < len(s0_sorted) or j < len(s1_sorted):\n            if i < len(s0_sorted) and (j == len(s1_sorted) or s0_sorted[i] <= s1_sorted[j]):\n                merged += s0_sorted[i]\n                i += 1\n            else:\n                merged += s1_sorted[j]\n                j += 1\n        \n        return merged == sorted_s\n\n    for i in range(2**n):\n        coloring = bin(i)[2:].zfill(n)\n        if check(coloring):\n            print(\"YES\")\n            print(coloring)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n\n    for price in range(1, 2001):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.10)\n\n        if tax_8 == a and tax_10 == b:\n            print(price)\n            return\n\n    print(\"-1\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k):\n        a[i] += remaining // k\n    \n    remaining %= k\n    \n    for i in range(k - 1, k - 1 - remaining, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if a[i+1] > 2 * a[i]:\n            diff = a[i+1] - 2 * a[i]\n            a[i+1] -= diff\n            a[k-1] += diff\n            \n            if a[k-1] > 2 * a[k-2]:\n                print(\"NO\")\n                return\n\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def can_fill(row, col):\n        return row < n // 2 or (row == n // 2 and n % 2 != 0) or col < n // 2 or (col == n // 2 and n % 2 != 0)\n\n    def backtrack(row, col):\n        if row == n:\n            return True\n        \n        next_row = row\n        next_col = col + 1\n        if next_col == n:\n            next_row += 1\n            next_col = 0\n        \n        if matrix[row][col] != 0:\n            return backtrack(next_row, next_col)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                needed = 4\n                if row == n - 1 - row and col == n - 1 - col:\n                    needed = 1\n                elif row == n - 1 - row or col == n - 1 - col:\n                    needed = 2\n\n                if can_fill(row, col):\n                    if counts[num] >= needed:\n                        counts[num] -= needed\n                        matrix[row][col] = num\n                        matrix[n-1-row][col] = num\n                        matrix[row][n-1-col] = num\n                        matrix[n-1-row][n-1-col] = num\n\n                        if backtrack(next_row, next_col):\n                            return True\n                    \n                        matrix[row][col] = 0\n                        matrix[n-1-row][col] = 0\n                        matrix[row][n-1-col] = 0\n                        matrix[n-1-row][n-1-col] = 0\n                        counts[num] += needed\n                else:\n                    if backtrack(next_row, next_col):\n                        return True\n        \n        return False\n\n    ones = 0\n    twos = 0\n    for num in counts:\n        if counts[num] % 4 == 1:\n            ones += 1\n        elif counts[num] % 4 == 2:\n            twos += 1\n        elif counts[num] % 4 == 3:\n            print(\"NO\")\n            return\n\n    if n % 2 == 0:\n        for num in counts:\n            if counts[num] % 4 != 0:\n                print(\"NO\")\n                return\n    else:\n        if ones > 1:\n            print(\"NO\")\n            return\n        \n        center_found = False\n        for i in range(len(matrix) // 2):\n            for j in range(len(matrix) // 2):\n                pass\n\n    if backtrack(0, 0):\n        print(\"YES\")\n        for row in matrix:\n            print(*row)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    positive_projects = []\n    negative_projects = []\n    for a, b in projects:\n        if b >= 0:\n            positive_projects.append((a, b))\n        else:\n            negative_projects.append((a, b))\n\n    positive_projects.sort()\n    \n    for a, b in positive_projects:\n        if r >= a:\n            r += b\n        else:\n            print(\"NO\")\n            return\n\n    negative_projects.sort(key=lambda x: x[0] + x[1], reverse=True)\n\n    for a, b in negative_projects:\n        if r >= a:\n            r += b\n            if r < 0:\n                print(\"NO\")\n                return\n        else:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    \n    if d * (m + 1) <= n + 1:\n        print(\"NO\")\n        return\n\n    a = [0] * n\n    \n    current_pos = 0\n    \n    for i in range(m):\n        \n        needed_empty = min(d - 1, n - current_pos - total_length + sum(c[i:]))\n        \n        start_pos = current_pos + needed_empty\n        \n        for j in range(c[i]):\n            a[start_pos + j] = i + 1\n            \n        current_pos = start_pos + c[i]\n            \n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    \n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            \n            ti = 0\n            tsi = 0\n            \n            possible = True\n            while ti < m and tsi < len(temp_s):\n                if t[ti] == temp_s[tsi]:\n                    ti += 1\n                    tsi += 1\n                else:\n                    tsi += 1\n            \n            if ti == m:\n                ans = max(ans, j - i)\n    \n    print(ans)\n\nsolve()\n```",
    "92": "```python\ndef solve():\n    x = float(input())\n\n    for i in range(1, 11):\n        for j in range(1, 11):\n            if abs(i / j - x) < 1e-7:\n                print(i, j)\n                return\n\nsolve()\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2 and k == 1:\n        print(\"NO\")\n        return\n\n    if k == 1 and n > 2 and d > 1:\n        print(\"NO\")\n        return\n\n    if d > (n - 1):\n        print(\"NO\")\n        return\n\n    if d == n - 1 and k == 1 and n > 2:\n        print(\"NO\")\n        return\n\n    if n == 1 and d == 0:\n        print(\"YES\")\n        return\n\n    if n == 1 and d > 0:\n        print(\"NO\")\n        return\n\n    edges = []\n    degree = [0] * (n + 1)\n\n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n        degree[i + 1] += 1\n        degree[i + 2] += 1\n\n    next_node = d + 2\n\n    # Add nodes to the diameter path\n    for i in range(1, d + 2):\n        while degree[i] < k and next_node <= n:\n            edges.append((i, next_node))\n            degree[i] += 1\n            degree[next_node] += 1\n            next_node += 1\n\n    if any(deg > k for deg in degree[1:]):\n        print(\"NO\")\n        return\n\n    if len(edges) != n - 1 or next_node <= n:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n\n    if a > b:\n        start = 0\n    else:\n        start = 1\n\n    s = \"\"\n    for i in range(x):\n        s += str(start)\n        if start == 0:\n            a -= 1\n            start = 1\n        else:\n            b -= 1\n            start = 0\n\n    if start == 0:\n        s += \"0\" * a\n        s += \"1\" * b\n    else:\n        s += \"1\" * b\n        s += \"0\" * a\n\n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    chars = ['a', 'b', 'c']\n\n    import itertools\n    \n    for p in itertools.permutations(chars):\n        res = \"\"\n        for i in range(n):\n            res += p[0]\n            res += p[1]\n            res += p[2]\n        \n        valid = True\n        if s in res or t in res:\n            valid = False\n        \n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n    \n    \n    res1 = \"\"\n    for i in range(n):\n        res1 += \"a\"\n    for i in range(n):\n        res1 += \"b\"\n    for i in range(n):\n        res1 += \"c\"\n    \n    valid1 = True\n    if s in res1 or t in res1:\n        valid1 = False\n    \n    if valid1:\n        print(\"YES\")\n        print(res1)\n        return\n    \n    res2 = \"\"\n    for i in range(n):\n        res2 += \"c\"\n    for i in range(n):\n        res2 += \"b\"\n    for i in range(n):\n        res2 += \"a\"\n    \n    valid2 = True\n    if s in res2 or t in res2:\n        valid2 = False\n    \n    if valid2:\n        print(\"YES\")\n        print(res2)\n        return\n    \n    \n    \n    if n == 1:\n        \n        res = \"abc\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"acb\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"bac\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"bca\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"cab\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"cba\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n    \n    if n == 2:\n        res = \"acbacb\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"acbbac\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n    \n    if n == 3:\n        res = \"acbacbacb\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"abcabcabc\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"cacbacbab\"\n        if s not in res and t not in res:\n            print(\"YES\")\n            print(res)\n            return\n            \n    if n == 3 and s == \"bb\" and t == \"cb\":\n        print(\"YES\")\n        print(\"abcabcabc\")\n        return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n        \n        if len(set(p)) != n:\n            continue\n        \n        all_elements_present = True\n        for i in range(n):\n            if not (1 <= p[i] <= n):\n                all_elements_present = False\n                break\n        \n        if all_elements_present:\n            seen = [False] * (n + 1)\n            for x in p:\n                if seen[x]:\n                    all_elements_present = False\n                    break\n                seen[x] = True\n\n        if all_elements_present:\n            print(*p)\n            return\n    \n    print(-1)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    odd_count = 0\n    even_count = 0\n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    print(min(odd_count, even_count))\n\nsolve()\n```",
    "98": "```python\ndef solve():\n    n = int(input())\n    \n    best_moves = float('inf')\n    \n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            j = n // i\n            moves = (i - 1) + (j - 1)\n            best_moves = min(best_moves, moves)\n            \n    print(best_moves)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    # Calculate maximum wins\n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    # Calculate minimum wins\n    min_wins = 0\n    \n    rem_a1, rem_a2, rem_a3 = a1, a2, a3\n    rem_b1, rem_b2, rem_b3 = b1, b2, b3\n\n    \n    lose_a1 = min(rem_a1, rem_b1)\n    rem_a1 -= lose_a1\n    rem_b1 -= lose_a1\n\n    lose_a1 = min(rem_a1, rem_b3)\n    rem_a1 -= lose_a1\n    rem_b3 -= lose_a1\n    \n    lose_a2 = min(rem_a2, rem_b2)\n    rem_a2 -= lose_a2\n    rem_b2 -= lose_a2\n\n    lose_a2 = min(rem_a2, rem_b1)\n    rem_a2 -= lose_a2\n    rem_b1 -= lose_a2\n\n    lose_a3 = min(rem_a3, rem_b3)\n    rem_a3 -= lose_a3\n    rem_b3 -= lose_a3\n\n    lose_a3 = min(rem_a3, rem_b2)\n    rem_a3 -= lose_a3\n    rem_b2 -= lose_a3\n\n    min_wins = max(0, n - (min(a1, b1) + min(a1, b3) + min(a2, b2) + min(a2, b1) + min(a3, b3) + min(a3, b2)))\n    \n    print(min_wins, max_wins)\n\nsolve()\n```"
}