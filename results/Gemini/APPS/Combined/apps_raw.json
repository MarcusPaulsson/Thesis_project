{
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n\n    weekly_food = [1, 2, 3, 1, 3, 2, 1]\n    weekly_fish = weekly_food.count(1)\n    weekly_rabbit = weekly_food.count(2)\n    weekly_chicken = weekly_food.count(3)\n\n    weeks = min(a // weekly_fish, b // weekly_rabbit, c // weekly_chicken)\n    a -= weeks * weekly_fish\n    b -= weeks * weekly_rabbit\n    c -= weeks * weekly_chicken\n    days = weeks * 7\n\n    max_days = 0\n    for start_day in range(7):\n        a_temp, b_temp, c_temp = a, b, c\n        current_days = 0\n        for i in range(7):\n            food_type = weekly_food[(start_day + i) % 7]\n            if food_type == 1:\n                if a_temp > 0:\n                    a_temp -= 1\n                    current_days += 1\n                else:\n                    break\n            elif food_type == 2:\n                if b_temp > 0:\n                    b_temp -= 1\n                    current_days += 1\n                else:\n                    break\n            else:\n                if c_temp > 0:\n                    c_temp -= 1\n                    current_days += 1\n                else:\n                    break\n        max_days = max(max_days, current_days)\n\n    print(days + max_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    tiles = []\n    for _ in range(n):\n        row1 = list(map(int, input().split()))\n        row2 = list(map(int, input().split()))\n        tiles.append((row1, row2))\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n    \"\"\"\n    Calculates the minimum possible absolute difference between the sums of two sets\n    formed by dividing the sequence 1, 2, ..., n.\n\n    The problem is equivalent to finding the minimum possible value of |sum(A) - sum(B)|,\n    where A and B are two sets that partition the sequence 1, 2, ..., n.\n\n    The sum of the sequence 1, 2, ..., n is given by n * (n + 1) // 2.\n    If this sum is even, it's possible to divide the sequence into two sets with equal sums,\n    resulting in a difference of 0. Otherwise, the minimum possible difference is 1.\n    \"\"\"\n    n = int(input())\n    total_sum = n * (n + 1) // 2\n    print(total_sum % 2)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    len_s = len(s)\n\n    dp = {}\n\n    def count_regular_sequences(length, balance, has_substring):\n        if length == 0:\n            if balance == 0 and has_substring:\n                return 1\n            else:\n                return 0\n\n        if (length, balance, has_substring) in dp:\n            return dp[(length, balance, has_substring)]\n\n        count = 0\n        \n        # Add '('\n        if balance + 1 <= n:\n            new_has_substring = has_substring\n            if not has_substring:\n                temp_seq = \"(\"\n                if len_s > 1:\n                  temp_seq = s[:1]\n                \n                if temp_seq == s[:1]:\n                    \n                    count = (count + count_regular_sequences(length - 1, balance + 1, s[:1] == s)) % mod\n                else:\n                    count = (count + count_regular_sequences(length - 1, balance + 1, False)) % mod\n            else:\n                 count = (count + count_regular_sequences(length - 1, balance + 1, True)) % mod\n        \n        # Add ')'\n        if balance > 0:\n            new_has_substring = has_substring\n            if not has_substring:\n                temp_seq = \")\"\n                if len_s > 1:\n                  temp_seq = s[:1]\n                if temp_seq == s[:1]:\n                   \n                    count = (count + count_regular_sequences(length - 1, balance - 1, s[:1] == s)) % mod\n                else:\n                     count = (count + count_regular_sequences(length - 1, balance - 1, False)) % mod\n            else:\n                count = (count + count_regular_sequences(length - 1, balance - 1, True)) % mod\n\n        dp[(length, balance, has_substring)] = count\n        return count\n\n    def count_regular_sequences_with_substring(n, s):\n      \n      \n      def kmp_table(w):\n          T = [0] * len(w)\n          pos = 1\n          cnd = 0\n          while pos < len(w):\n              if w[pos] == w[cnd]:\n                  T[pos] = cnd + 1\n                  pos += 1\n                  cnd += 1\n              elif cnd > 0:\n                  cnd = T[cnd-1]\n              else:\n                  pos += 1\n          return T\n      \n      def count_regular_sequences_dp(length, balance, kmp_state):\n          if length == 0:\n              if balance == 0:\n                  return 1\n              else:\n                  return 0\n          \n          if (length, balance, kmp_state) in dp:\n              return dp[(length, balance, kmp_state)]\n          \n          count = 0\n          \n          # Add '('\n          if balance + 1 <= n:\n              new_kmp_state = kmp_state\n              while new_kmp_state > 0 and s[new_kmp_state] != '(':\n                  new_kmp_state = table[new_kmp_state - 1]\n              if s[new_kmp_state] == '(':\n                  new_kmp_state += 1\n              \n              count = (count + count_regular_sequences_dp(length - 1, balance + 1, new_kmp_state)) % mod\n          \n          # Add ')'\n          if balance > 0:\n              new_kmp_state = kmp_state\n              while new_kmp_state > 0 and s[new_kmp_state] != ')':\n                  new_kmp_state = table[new_kmp_state - 1]\n              if s[new_kmp_state] == ')':\n                  new_kmp_state += 1\n              \n              count = (count + count_regular_sequences_dp(length - 1, balance - 1, new_kmp_state)) % mod\n          \n          dp[(length, balance, kmp_state)] = count\n          return count\n      \n      table = kmp_table(s)\n      dp.clear()\n      \n      total_regular_sequences = count_regular_sequences_dp(2 * n, 0, 0)\n      dp.clear()\n      \n      def count_regular_sequences_dp_no_substring(length, balance, kmp_state):\n          if length == 0:\n              if balance == 0:\n                  return 1\n              else:\n                  return 0\n          \n          if (length, balance, kmp_state) in dp:\n              return dp[(length, balance, kmp_state)]\n          \n          count = 0\n          \n          # Add '('\n          if balance + 1 <= n:\n              new_kmp_state = kmp_state\n              while new_kmp_state > 0 and s[new_kmp_state] != '(':\n                  new_kmp_state = table[new_kmp_state - 1]\n              if s[new_kmp_state] == '(':\n                  new_kmp_state += 1\n              \n              if new_kmp_state != len_s:\n                count = (count + count_regular_sequences_dp_no_substring(length - 1, balance + 1, new_kmp_state)) % mod\n          \n          # Add ')'\n          if balance > 0:\n              new_kmp_state = kmp_state\n              while new_kmp_state > 0 and s[new_kmp_state] != ')':\n                  new_kmp_state = table[new_kmp_state - 1]\n              if s[new_kmp_state] == ')':\n                  new_kmp_state += 1\n              \n              if new_kmp_state != len_s:\n                count = (count + count_regular_sequences_dp_no_substring(length - 1, balance - 1, new_kmp_state)) % mod\n          \n          dp[(length, balance, kmp_state)] = count\n          return count\n      \n      \n      \n      table = kmp_table(s)\n      dp.clear()\n      \n      total_regular_sequences_without_substring = count_regular_sequences_dp_no_substring(2 * n, 0, 0)\n      \n      return (total_regular_sequences - total_regular_sequences_without_substring) % mod\n\n    \n    \n    print(count_regular_sequences_with_substring(n, s))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_list = list(n)\n    length = len(n)\n\n    def calculate_moves(arr, target):\n        moves = 0\n        arr_copy = arr[:]\n\n        # Find the last digit\n        last_index = -1\n        for i in range(length - 1, -1, -1):\n            if arr_copy[i] == target[1]:\n                last_index = i\n                break\n\n        if last_index == -1:\n            return float('inf')\n\n        moves += (length - 1) - last_index\n        arr_copy.pop(last_index)\n\n        # Find the second last digit\n        second_last_index = -1\n        for i in range(len(arr_copy) - 1, -1, -1):\n            if arr_copy[i] == target[0]:\n                second_last_index = i\n                break\n\n        if second_last_index == -1:\n            return float('inf')\n\n        moves += (len(arr_copy) - 1) - second_last_index\n        arr_copy.pop(second_last_index)\n\n        # Remove leading zeros\n        leading_zeros = 0\n        for i in range(len(arr_copy)):\n            if arr_copy[i] == '0':\n                leading_zeros += 1\n            else:\n                break\n\n        moves += leading_zeros\n        if len(arr_copy) > 0 and arr_copy[0] == '0':\n            return float('inf')\n        \n        return moves\n\n    min_moves = float('inf')\n\n    targets = ['00', '25', '50', '75']\n\n    for target in targets:\n        min_moves = min(min_moves, calculate_moves(n_list[:], target))\n\n    if min_moves == float('inf'):\n        print(\"-1\")\n    else:\n        print(min_moves)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def check(num_colors):\n        coloring = [0] * n\n        \n        def is_sortable(coloring):\n            temp_s = list(s)\n            \n            swaps = True\n            while swaps:\n                swaps = False\n                for i in range(n - 1):\n                    if temp_s[i] > temp_s[i+1] and coloring[i] != coloring[i+1]:\n                        temp_s[i], temp_s[i+1] = temp_s[i+1], temp_s[i]\n                        swaps = True\n            \n            return \"\".join(temp_s) == \"\".join(sorted(s))\n        \n        \n        def find_coloring():\n            import itertools\n            for coloring_tuple in itertools.product(range(1, num_colors + 1), repeat=n):\n                coloring = list(coloring_tuple)\n                if is_sortable(coloring):\n                    return coloring\n            return None\n        \n        coloring = find_coloring()\n        if coloring:\n            return True, coloring\n        else:\n            return False, None\n            \n    \n    for num_colors in range(1, n + 1):\n        possible, coloring = check(num_colors)\n        if possible:\n            print(num_colors)\n            print(*coloring)\n            return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    strings.sort(key=len)\n\n    def is_substring(a, b):\n        return a in b\n\n    for i in range(1, n):\n        if not is_substring(strings[i-1], strings[i]):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    for s in strings:\n        print(s)\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for height in range(1, int(total**0.5) + 1):\n        if total % height == 0:\n            width = total // height\n            \n            # Case 1: a forms a rectangle\n            for a_height in range(1, int(a**0.5) + 1):\n                if a % a_height == 0:\n                    a_width = a // a_height\n                    if a_height <= height and a_width <= width:\n                        best_perimeter = min(best_perimeter, 2 * (height + width))\n            \n            # Case 2: b forms a rectangle\n            for b_height in range(1, int(b**0.5) + 1):\n                if b % b_height == 0:\n                    b_width = b // b_height\n                    if b_height <= height and b_width <= width:\n                        best_perimeter = min(best_perimeter, 2 * (height + width))\n                        \n    print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    sorted_s = sorted(s)\n\n    for i in range(2**n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += '1'\n            else:\n                coloring += '0'\n        coloring = coloring[::-1]\n\n        s0 = []\n        s1 = []\n        for k in range(n):\n            if coloring[k] == '0':\n                s0.append(s[k])\n            else:\n                s1.append(s[k])\n\n        s0.sort()\n        s1.sort()\n\n        merged = []\n        i = 0\n        j = 0\n        for k in range(n):\n            if coloring[k] == '0':\n                if i < len(s0):\n                    merged.append(s0[i])\n                    i += 1\n                else:\n                    break\n            else:\n                if j < len(s1):\n                    merged.append(s1[j])\n                    j += 1\n                else:\n                    break\n        \n        if \"\".join(merged) == \"\".join(sorted_s):\n            print(\"YES\")\n            print(coloring)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n  a, b = map(int, input().split())\n\n  for price in range(1, 2001):\n    tax_8 = int(price * 0.08)\n    tax_10 = int(price * 0.10)\n\n    if tax_8 == a and tax_10 == b:\n      print(price)\n      return\n\n  print(\"-1\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k):\n        a[i] += remaining // k\n\n    remaining %= k\n\n    for i in range(k - 1, k - 1 - remaining, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if a[i + 1] > 2 * a[i]:\n            diff = a[i + 1] - 2 * a[i]\n            a[i + 1] -= diff\n            a[k - 1] += diff\n            if a[i+1] > 2* a[i]:\n                print(\"NO\")\n                return\n    \n    is_valid = True\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            is_valid = False\n            break\n\n    if is_valid:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n // 2):\n        for j in range(n // 2):\n            found = False\n            for num, count in list(counts.items()):\n                if count >= 4:\n                    matrix[i][j] = num\n                    matrix[i][n - 1 - j] = num\n                    matrix[n - 1 - i][j] = num\n                    matrix[n - 1 - i][n - 1 - j] = num\n                    counts[num] -= 4\n                    if counts[num] == 0:\n                        del counts[num]\n                    found = True\n                    break\n            if not found:\n                print(\"NO\")\n                return\n    \n    if n % 2 == 1:\n        mid = n // 2\n        for i in range(n // 2):\n            found = False\n            for num, count in list(counts.items()):\n                if count >= 2:\n                    matrix[i][mid] = num\n                    matrix[n - 1 - i][mid] = num\n                    counts[num] -= 2\n                    if counts[num] == 0:\n                        del counts[num]\n                    found = True\n                    break\n            if not found:\n                print(\"NO\")\n                return\n\n        for j in range(n // 2):\n            found = False\n            for num, count in list(counts.items()):\n                if count >= 2:\n                    matrix[mid][j] = num\n                    matrix[mid][n - 1 - j] = num\n                    counts[num] -= 2\n                    if counts[num] == 0:\n                        del counts[num]\n                    found = True\n                    break\n            if not found:\n                print(\"NO\")\n                return\n        \n        found = False\n        for num, count in list(counts.items()):\n            if count >= 1:\n                matrix[mid][mid] = num\n                counts[num] -= 1\n                if counts[num] == 0:\n                    del counts[num]\n                found = True\n                break\n        if not found:\n            print(\"NO\")\n            return\n    \n    print(\"YES\")\n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    positive_projects = []\n    negative_projects = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        if b >= 0:\n            positive_projects.append((a, b))\n        else:\n            negative_projects.append((a, b))\n\n    positive_projects.sort()\n    negative_projects.sort(key=lambda x: x[0] + x[1], reverse=True)\n\n    def check_projects(projects, initial_rating):\n        current_rating = initial_rating\n        for a, b in projects:\n            if current_rating < a:\n                return False\n            current_rating += b\n            if current_rating < 0:\n                return False\n        return True\n\n    if not check_projects(positive_projects, r):\n        print(\"NO\")\n        return\n\n    r += sum(b for a, b in positive_projects)\n\n    if not check_projects(negative_projects, r):\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_platform_length = sum(c)\n    min_empty_space = m - 1\n    max_empty_space = n - total_platform_length\n    \n    if (m + 1) * d - 1 > n:\n        print(\"NO\")\n        return\n\n    arr = [0] * n\n    pos = 0\n    \n    for i in range(m):\n        \n        empty_before = min(d - 1, n - total_platform_length - pos)\n        \n        pos += empty_before\n        \n        for j in range(c[i]):\n            arr[pos] = i + 1\n            pos += 1\n            \n    remaining_empty = n - pos\n    \n    if remaining_empty > 0:\n        \n        last_platform_index = m - 1\n        \n        \n        \n        while remaining_empty > 0 and last_platform_index >= 0:\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            ",
    "91": "```python\ndef solve():\n  s = input()\n  t = input()\n  n = len(s)\n  m = len(t)\n  \n  ans = 0\n  for i in range(n + 1):\n    for j in range(i, n + 1):\n      temp_s = \"\"\n      if i > 0:\n        temp_s += s[:i]\n      if j < n:\n        temp_s += s[j:]\n        \n      \n      ti = 0\n      tsi = 0\n      \n      possible = True\n      while ti < m and tsi < len(temp_s):\n        if t[ti] == temp_s[tsi]:\n          ti += 1\n          tsi += 1\n        else:\n          tsi += 1\n      \n      if ti == m:\n        ans = max(ans, j - i)\n        \n  print(ans)\n\nsolve()\n```",
    "92": "```python\ndef solve():\n    x = float(input())\n    \n    for a in range(1, 11):\n        for b in range(1, 11):\n            if abs((a * b)**0.5 - x) < 1e-6:\n                print(a, b)\n                return\n\nsolve()\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if k == 1:\n        if d > 1 or n > 2:\n            print(\"NO\")\n            return\n        if n == 1 and d == 0:\n            print(\"YES\")\n            return\n        if n == 2 and d ==1:\n            print(\"YES\")\n            print(1,2)\n            return\n        \n        \n\n    if d == 1 and n > 2 and k < 2:\n        print(\"NO\")\n        return\n\n    \n    edges = []\n    degree = [0] * (n + 1)\n\n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n        degree[i + 1] += 1\n        degree[i + 2] += 1\n\n    next_node = d + 2\n\n    for i in range(1, d + 2):\n        while degree[i] < k and next_node <= n:\n            edges.append((i, next_node))\n            degree[i] += 1\n            degree[next_node] += 1\n            next_node += 1\n\n    if next_node <= n:\n        print(\"NO\")\n        return\n\n    if len(edges) != n - 1:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n\n    if a > b:\n        start = 0\n    else:\n        start = 1\n\n    s = \"\"\n    for i in range(x):\n        if start == 0:\n            s += \"0\"\n            a -= 1\n            start = 1\n        else:\n            s += \"1\"\n            b -= 1\n            start = 0\n\n    if start == 0:\n        s += \"0\" * a\n        s += \"1\" * b\n    else:\n        s += \"1\" * b\n        s += \"0\" * a\n\n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    def check(res, s, t):\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                return False\n        return True\n\n    def find_string(n, s, t):\n        import itertools\n        chars = ['a', 'b', 'c']\n        \n        possible_strings = []\n\n        for p in itertools.permutations(['a'] * n + ['b'] * n + ['c'] * n):\n            res = \"\".join(p)\n            if check(res, s, t):\n                possible_strings.append(res)\n\n        if possible_strings:\n            return possible_strings[0]\n        else:\n            return None\n\n    result = find_string(n, s, t)\n\n    if result:\n        print(\"YES\")\n        print(result)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    def check_permutation(arr):\n        if len(arr) != n:\n            return False\n        seen = set()\n        for x in arr:\n            if not (1 <= x <= n):\n                return False\n            if x in seen:\n                return False\n            seen.add(x)\n        return True\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n        \n        if check_permutation(p):\n            print(*p)\n            return\n    \n    print(\"-1\")\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    odd_count = 0\n    even_count = 0\n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    print(min(odd_count, even_count))\n\nsolve()\n```",
    "98": "```python\ndef solve():\n    n = int(input())\n\n    best_moves = float('inf')\n    \n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            j = n // i\n            moves = (i - 1) + (j - 1)\n            best_moves = min(best_moves, moves)\n\n    print(best_moves)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    # Calculate the maximum wins for Alice\n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    # Calculate the minimum wins for Alice\n    min_wins = max(0, a1 - (b1 + b3)) + max(0, a2 - (b2 + b1)) + max(0, a3 - (b3 + b2))\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}