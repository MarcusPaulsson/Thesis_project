{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n\n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n\n    if first_bracket == -1:\n        print(-1)\n        return\n\n    first_colon = -1\n    for i in range(first_bracket + 1, n):\n        if s[i] == ':':\n            first_colon = i\n            break\n\n    if first_colon == -1:\n        print(-1)\n        return\n\n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n\n    if last_bracket == -1:\n        print(-1)\n        return\n    \n    if last_bracket <= first_colon:\n        print(-1)\n        return\n\n    last_colon = -1\n    for i in range(last_bracket - 1, first_colon, -1):\n        if s[i] == ':':\n            last_colon = i\n            break\n\n    if last_colon == -1:\n        print(-1)\n        return\n\n    if last_colon <= first_colon:\n        print(-1)\n        return\n\n    count = 0\n    for i in range(first_colon + 1, last_colon):\n        if s[i] == '|':\n            count += 1\n\n    print(4 + count)\n\nsolve()\n```",
    "1": "```python\ndef sum_digits(n: int) -> int:\n    \"\"\"Calculates the sum of the digits of a non-negative integer.\n\n    Args:\n        n: The non-negative integer.\n\n    Returns:\n        The sum of the digits of n.\n    \"\"\"\n    s = str(n)\n    sum_d = 0\n    for digit in s:\n        sum_d += int(digit)\n    return sum_d\n\n\ndef solve():\n    \"\"\"Finds the integer not exceeding x with the maximum sum of digits.\"\"\"\n    x = int(input())\n\n    best_num = x\n    best_sum = sum_digits(x)\n\n    s = str(x)\n    n = len(s)\n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n\n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n\n        if num > 0:\n            current_sum = sum_digits(num)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_num = num\n            elif current_sum == best_sum and num > best_num:\n                best_num = num\n\n    print(best_num)\n\n\nif __name__ == \"__main__\":\n    solve()\n```",
    "2": "```python\ndef solve():\n  n = int(input())\n  s = str(n)\n  length = len(s)\n  \n  first_digit = int(s[0])\n  next_lucky = (first_digit + 1) * (10**(length - 1))\n  \n  print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n, q = map(int, input().split())\n    painters = []\n    for _ in range(q):\n        l, r = map(int, input().split())\n        painters.append((l, r))\n\n    def calculate_painted_sections(selected_painters):\n        painted = [False] * n\n        for l, r in selected_painters:\n            for i in range(l - 1, r):\n                painted[i] = True\n        return sum(painted)\n\n    max_painted = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            selected_painters = []\n            for k in range(q):\n                if k != i and k != j:\n                    selected_painters.append(painters[k])\n            max_painted = max(max_painted, calculate_painted_sections(selected_painters))\n\n    print(max_painted)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    x = int(input())\n    hh, mm = map(int, input().split())\n\n    def is_lucky(h, m):\n        return '7' in str(h) or '7' in str(m)\n\n    count = 0\n    current_hh = hh\n    current_mm = mm\n\n    while not is_lucky(current_hh, current_mm):\n        current_mm -= x\n        if current_mm < 0:\n            current_mm += 60\n            current_hh -= 1\n            if current_hh < 0:\n                current_hh += 24\n        count += 1\n\n    print(count)\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n\n    if l == 1 and r == n:\n        print(0)\n        return\n\n    ans = 0\n\n    if l == 1:\n        ans += abs(pos - r) + 1\n    elif r == n:\n        ans += abs(pos - l) + 1\n    else:\n        ans += min(abs(pos - l), abs(pos - r)) + (r - l) + 2\n\n    print(ans)\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n\n    ans = float('inf')\n    for d, h in blows:\n        if d >= x:\n            ans = min(ans, 1)\n\n    if ans == 1:\n        print(1)\n        return\n\n    max_diff = float('-inf')\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0 and max_damage < x:\n        print(-1)\n        return\n\n    if max_damage >= x:\n        print(1)\n        return\n\n    remaining = x - max_damage\n    blows_count = 1\n\n    if max_diff <= 0:\n      print(blows_count)\n      return\n    \n    num_blows = (remaining + max_diff - 1) // max_diff\n    blows_count += num_blows\n\n    print(blows_count)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    left = 0\n    right = 2 * 10**9  # Adjusted upper bound\n\n    ans = right\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        total_sparrows = mid * (mid + 1) // 2\n        \n        barn_content = n + mid * m\n        \n        if barn_content >= total_sparrows:\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append(((x1, y1), (x2, y2)))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa_index):\n        count = 0\n        (x1, y1), (x2, y2) = sofas[sofa_index]\n        min_x = min(x1, x2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            (ox1, oy1), (ox2, oy2) = sofas[i]\n            max_x_other = max(ox1, ox2)\n            if min_x > max_x_other:\n                count += 1\n        return count\n\n    def count_right(sofa_index):\n        count = 0\n        (x1, y1), (x2, y2) = sofas[sofa_index]\n        max_x = max(x1, x2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            (ox1, oy1), (ox2, oy2) = sofas[i]\n            min_x_other = min(ox1, ox2)\n            if max_x < min_x_other:\n                count += 1\n        return count\n\n    def count_top(sofa_index):\n        count = 0\n        (x1, y1), (x2, y2) = sofas[sofa_index]\n        min_y = min(y1, y2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            (ox1, oy1), (ox2, oy2) = sofas[i]\n            max_y_other = max(oy1, oy2)\n            if min_y > max_y_other:\n                count += 1\n        return count\n\n    def count_bottom(sofa_index):\n        count = 0\n        (x1, y1), (x2, y2) = sofas[sofa_index]\n        max_y = max(y1, y2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            (ox1, oy1), (ox2, oy2) = sofas[i]\n            min_y_other = min(oy1, oy2)\n            if max_y < min_y_other:\n                count += 1\n        return count\n\n    for i in range(d):\n        if (count_left(i) == cnt_l and\n            count_right(i) == cnt_r and\n            count_top(i) == cnt_t and\n            count_bottom(i) == cnt_b):\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```"
}