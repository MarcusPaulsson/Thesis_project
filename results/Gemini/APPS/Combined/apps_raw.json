{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n\n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n\n    if first_bracket == -1:\n        print(-1)\n        return\n\n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n\n    if last_bracket == -1 or last_bracket <= first_bracket:\n        print(-1)\n        return\n\n    first_colon = -1\n    for i in range(first_bracket + 1, last_bracket):\n        if s[i] == ':':\n            first_colon = i\n            break\n\n    if first_colon == -1:\n        print(-1)\n        return\n\n    second_colon = -1\n    for i in range(last_bracket - 1, first_colon, -1):\n        if s[i] == ':':\n            second_colon = i\n            break\n\n    if second_colon == -1 or second_colon <= first_colon:\n        print(-1)\n        return\n\n    pipes = 0\n    for i in range(first_colon + 1, second_colon):\n        if s[i] == '|':\n            pipes += 1\n\n    print(4 + pipes)\n\nsolve()\n```",
    "1": "```python\ndef sum_digits(n):\n    \"\"\"Calculates the sum of the digits of a non-negative integer.\n\n    Args:\n        n: The non-negative integer.\n\n    Returns:\n        The sum of the digits of n.\n    \"\"\"\n    s = str(n)\n    sum_val = 0\n    for digit in s:\n        sum_val += int(digit)\n    return sum_val\n\n\ndef solve():\n    \"\"\"Finds the largest integer not exceeding x with the maximum sum of digits.\"\"\"\n    x = int(input())\n\n    best_num = x\n    max_sum = sum_digits(x)\n\n    s = str(x)\n    n = len(s)\n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n\n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n\n        if num > 0:\n            current_sum = sum_digits(num)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                best_num = num\n            elif current_sum == max_sum and num > best_num:\n                best_num = num\n\n    print(best_num)\n\n\nif __name__ == \"__main__\":\n    solve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    length = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10**(length-1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n, q = map(int, input().split())\n    painters = []\n    for _ in range(q):\n        l, r = map(int, input().split())\n        painters.append((l, r))\n\n    def calculate_painted_sections(selected_painters):\n        painted = [False] * n\n        for l, r in selected_painters:\n            for i in range(l - 1, r):\n                painted[i] = True\n        return sum(painted)\n\n    max_painted = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            selected_painters = []\n            for k in range(q):\n                if k != i and k != j:\n                    selected_painters.append(painters[k])\n            max_painted = max(max_painted, calculate_painted_sections(selected_painters))\n\n    print(max_painted)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    x = int(input())\n    hh, mm = map(int, input().split())\n\n    def is_lucky(h, m):\n        return '7' in str(h) or '7' in str(m)\n\n    count = 0\n    while not is_lucky(hh, mm):\n        minutes = hh * 60 + mm\n        minutes -= x\n        if minutes < 0:\n            minutes += 24 * 60\n        minutes %= (24 * 60)\n        hh = minutes // 60\n        mm = minutes % 60\n        count += 1\n\n    print(count)\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n\n    if l == 1 and r == n:\n        print(0)\n        return\n\n    ans = 0\n    if l == 1:\n        ans = abs(pos - r) + 1\n    elif r == n:\n        ans = abs(pos - l) + 1\n    else:\n        ans = min(abs(pos - l) + abs(r - l) + 2, abs(pos - r) + abs(r - l) + 2)\n\n    print(ans)\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n\n    if max_damage >= x:\n        print(1)\n        return\n\n    max_diff = float('-inf')\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_damage\n    \n    ans = 1 + (remaining + max_diff - 1) // max_diff\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    low = 0\n    high = 2 * 10**9  # Increased upper bound to handle larger inputs\n    ans = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        \n        total_sparrows = (mid * (mid + 1)) // 2\n        \n        if n + (mid * m) >= total_sparrows:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "8": "```python\ndef solve():\n    tiles = input().split()\n    \n    def check_mentsu(hand):\n        # Check for koutsu\n        counts = {}\n        for tile in hand:\n            counts[tile] = counts.get(tile, 0) + 1\n        for tile in counts:\n            if counts[tile] >= 3:\n                return True\n        \n        # Check for shuntsu\n        suits = ['m', 'p', 's']\n        for suit in suits:\n            nums = []\n            for tile in hand:\n                if tile[1] == suit:\n                    nums.append(int(tile[0]))\n            nums.sort()\n            \n            if len(nums) >= 3:\n                for i in range(len(nums) - 2):\n                    if nums[i+1] == nums[i] + 1 and nums[i+2] == nums[i] + 2:\n                        return True\n        \n        return False\n\n    if check_mentsu(tiles):\n        print(0)\n        return\n\n    # Try drawing one tile\n    for i in range(1, 10):\n        for suit in ['m', 'p', 's']:\n            new_tile = str(i) + suit\n            new_hand = tiles + [new_tile]\n            if check_mentsu(new_hand):\n                print(1)\n                return\n\n    print(2)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((min(x1, x2), min(y1, y2), max(x1, x2), max(y1, y2)))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def check_conditions(sofa_index):\n        l_count = 0\n        r_count = 0\n        t_count = 0\n        b_count = 0\n\n        target_sofa = sofas[sofa_index]\n        target_x1, target_y1, target_x2, target_y2 = target_sofa\n\n        for i in range(d):\n            if i == sofa_index:\n                continue\n\n            other_sofa = sofas[i]\n            other_x1, other_y1, other_x2, other_y2 = other_sofa\n\n            if target_y2 < other_y1:\n                l_count += 1\n            elif target_y1 > other_y2:\n                r_count += 1\n            if target_x2 < other_x1:\n                t_count += 1\n            elif target_x1 > other_x2:\n                b_count += 1\n\n        return l_count == cnt_l and r_count == cnt_r and t_count == cnt_t and b_count == cnt_b\n\n    result = -1\n    for i in range(d):\n        if check_conditions(i):\n            result = i + 1\n            break\n\n    print(result)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n  n = int(input())\n\n  # Calculate the number of full weeks\n  full_weeks = n // 7\n\n  # Calculate the minimum and maximum days off from the full weeks\n  min_days_off = full_weeks * 2\n  max_days_off = full_weeks * 2\n\n  # Calculate the remaining days\n  remaining_days = n % 7\n\n  # Adjust the minimum and maximum days off based on the remaining days\n  if remaining_days == 6:\n    min_days_off += 1\n  elif remaining_days >= 1:\n    pass #min_days_off += 0\n  \n  max_days_off += min(remaining_days, 2)\n\n  print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"\n    Calculate the least common multiple (LCM) of two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The least common multiple of a and b.\n    \"\"\"\n    return (a * b) // gcd(a, b)\n\ndef solve():\n    \"\"\"\n    Solve the chocolate maximization problem.\n    \"\"\"\n    n, a, b, p, q = map(int, input().split())\n\n    red_count = n // a\n    blue_count = n // b\n    both_count = n // lcm(a, b)\n\n    red_only = red_count - both_count\n    blue_only = blue_count - both_count\n\n    total_chocolates = 0\n\n    if p > q:\n        total_chocolates += red_only * p\n        total_chocolates += both_count * p\n        total_chocolates += blue_only * q\n    else:\n        total_chocolates += red_only * p\n        total_chocolates += both_count * q\n        total_chocolates += blue_only * q\n\n    print(total_chocolates)\n\nif __name__ == \"__main__\":\n    solve()\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    def calculate_max_len(arr):\n        max_len = 0\n        curr_len = 0\n        for char in arr:\n            if char == 'G':\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 0\n        max_len = max(max_len, curr_len)\n        return max_len\n\n    max_beauty = calculate_max_len(s)\n    \n    g_count = s.count('G')\n\n    for i in range(n):\n        if s[i] == 'S':\n            temp_s = list(s)\n            temp_s[i] = 'G'\n            \n            \n            \n            current_max = 0\n            current_len = 0\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            ",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i + 1] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n\n    order = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(\"-1\")\n        return\n\n    \n    necessary = set(main_courses)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = set(p)\n    remaining = []\n    for i in range(n, 0, -1):\n        if i not in used:\n            remaining.append(i)\n\n    p = p + remaining\n    \n    def is_stack_sortable(arr):\n        stack = []\n        b = []\n        expected = 1\n        for x in arr:\n            stack.append(x)\n            while stack and stack[-1] == expected:\n                b.append(stack.pop())\n                expected += 1\n        return not stack\n\n    \n    original_p = p[:k]\n    \n    \n    def find_lexicographically_largest_stack_sortable(n, k, initial_p):\n        used = set(initial_p)\n        remaining = []\n        for i in range(n, 0, -1):\n            if i not in used:\n                remaining.append(i)\n\n        import itertools\n        \n        best_p = None\n        \n        for perm in itertools.permutations(remaining):\n            \n            current_p = initial_p + list(perm)\n            \n            if is_stack_sortable(current_p):\n                if best_p is None:\n                    best_p = current_p\n                else:\n                    if current_p > best_p:\n                        best_p = current_p\n        \n        return best_p\n\n    result = find_lexicographically_largest_stack_sortable(n, k, original_p)\n\n    if result:\n        print(*result)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "15": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n\n    if c == 0:\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        diff = b - a\n        if diff % c == 0 and diff // c >= 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n    \n    if cnt1 == cnt4 and cnt3 == 0 and cnt1 >= 0:\n        print(1)\n    elif cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n  n, k, t = map(int, input().split())\n\n  if t <= k:\n    print(t)\n  elif t <= n:\n    print(k)\n  else:\n    print(max(0, k - (t - n)))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    suffix_min = [0] * (n + 1)\n    suffix_min[n] = chr(ord('z') + 1)  # Initialize with a value greater than 'z'\n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    t = []\n    u = \"\"\n    \n    for i in range(n):\n        t.append(s[i])\n        while t and t[-1] <= suffix_min[i+1]:\n            u += t[-1]\n            t.pop()\n            \n    while t:\n        u += t[-1]\n        t.pop()\n        \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n\n    def is_palindrome(h, m):\n        h_str = str(h).zfill(2)\n        m_str = str(m).zfill(2)\n        return h_str == m_str[::-1]\n\n    minutes = 0\n    while True:\n        if is_palindrome(hh, mm):\n            print(minutes)\n            return\n\n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        minutes += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    pos_min = a.index(1)\n    pos_max = a.index(n)\n\n    ans = max(pos_min, pos_max, n - 1 - pos_min, n - 1 - pos_max)\n\n    print(ans)\n\nsolve()\n```",
    "22": "```python\ndef is_s_palindrome(s):\n    \"\"\"\n    Checks if a string is an \"s-palindrome\".\n\n    Args:\n        s: The input string.\n\n    Returns:\n        \"TAK\" if the string is an \"s-palindrome\", \"NIE\" otherwise.\n    \"\"\"\n\n    symmetric_chars = {\n        'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p',\n        'o': 'o', 'x': 'x', 'X': 'X', 'H': 'H',\n        'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T',\n        'U': 'U', 'V': 'V', 'v': 'v', 'W': 'W',\n        'w': 'w', 'Y': 'Y', 'A': 'A', 'm':'m'\n    }\n\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] not in symmetric_chars or symmetric_chars.get(s[i]) != s[n - 1 - i]:\n            return \"NIE\"\n\n    if n % 2 == 1:\n        if s[n // 2] not in symmetric_chars or symmetric_chars.get(s[n // 2]) != s[n // 2]:\n            return \"NIE\"\n\n    return \"TAK\"\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(is_s_palindrome(s))\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    a_counts = Counter(a)\n    \n    def find_max_permutation(index, current_num, remaining_counts):\n        if index == len(a):\n            return current_num\n        \n        for digit in sorted(remaining_counts.keys(), reverse=True):\n            \n            if current_num == \"\" and digit == '0':\n                continue\n            \n            temp_counts = remaining_counts.copy()\n            temp_counts[digit] -= 1\n            if temp_counts[digit] == 0:\n                del temp_counts[digit]\n            \n            new_num = current_num + digit\n            \n            if len(new_num) < len(b) or new_num <= b:\n                result = find_max_permutation(index + 1, new_num, temp_counts)\n                if result is not None:\n                    return result\n        \n        return None\n\n    result = find_max_permutation(0, \"\", a_counts)\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(input())\n\n    def check_win(board):\n        n = 10\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    # Check horizontal\n                    if j <= n - 5:\n                        win = True\n                        for k in range(5):\n                            if board[i][j+k] != 'X':\n                                win = False\n                                break\n                        if win:\n                            return True\n                    # Check vertical\n                    if i <= n - 5:\n                        win = True\n                        for k in range(5):\n                            if board[i+k][j] != 'X':\n                                win = False\n                                break\n                        if win:\n                            return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= n - 5 and j <= n - 5:\n                        win = True\n                        for k in range(5):\n                            if board[i+k][j+k] != 'X':\n                                win = False\n                                break\n                        if win:\n                            return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= n - 5 and j >= 4:\n                        win = True\n                        for k in range(5):\n                            if board[i+k][j-k] != 'X':\n                                win = False\n                                break\n                        if win:\n                            return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                temp_board = [list(row) for row in board]\n                temp_board[i][j] = 'X'\n                \n                new_board = [\"\".join(row) for row in temp_board]\n                \n                if check_win(new_board):\n                    print('YES')\n                    return\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k > n * n:\n        print(\"-1\")\n        return\n\n    matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if k == 0:\n            break\n\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n\n    if k > 0:\n        print(\"-1\")\n        return\n\n    for row in matrix:\n        print(*row)\n\nif __name__ == \"__main__\":\n    solve()\n```",
    "26": "```python\nimport math\n\ndef solve():\n    x, y, z = map(float, input().split())\n\n    expressions = [\n        \"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\",\n        \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\",\n        \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"\n    ]\n\n    values = [\n        x ** (y ** z),\n        x ** (z ** y),\n        (x ** y) ** z,\n        (x ** z) ** y,\n        y ** (x ** z),\n        y ** (z ** x),\n        (y ** x) ** z,\n        (y ** z) ** x,\n        z ** (x ** y),\n        z ** (y ** x),\n        (z ** x) ** y,\n        (z ** y) ** x\n    ]\n\n    max_val = float('-inf')\n    max_index = -1\n\n    for i, val in enumerate(values):\n        if val > max_val:\n            max_val = val\n            max_index = i\n\n    print(expressions[max_index])\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s.startswith(prefix * 2):\n            ans = min(ans, n - i)\n        elif s[:2*i].startswith(prefix):\n            ans = min(ans, n - i)\n            \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n\n    moves = []\n    e = len(examples)\n\n    # Function to find a temporary name that doesn't exist\n    def find_temp_name(existing_names):\n        temp_name = \"temp\"\n        temp_num = 0\n        while True:\n            temp_name_full = temp_name + str(temp_num)\n            if temp_name_full not in existing_names:\n                return temp_name_full\n            temp_num += 1\n\n    existing_names = set(file[0] for file in files)\n\n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            # Find a temporary name\n            temp_name = find_temp_name(existing_names)\n            existing_names.add(temp_name)\n\n            moves.append(f\"move {examples[i][0]} {temp_name}\")\n\n            # Find the file that is currently named i+1\n            target_file = None\n            for j in range(n):\n                if files[j][0] == str(i + 1):\n                    target_file = files[j][0]\n                    break\n            \n            if target_file:\n                # Move the file at i+1 to the original location of the example\n                moves.append(f\"move {target_file} {examples[i][0]}\")\n                existing_names.add(examples[i][0])\n                existing_names.remove(target_file)\n            \n            # Move the temporary file to the correct example location\n            moves.append(f\"move {temp_name} {i + 1}\")\n            existing_names.add(str(i + 1))\n            existing_names.remove(temp_name)\n\n    # Move regular files to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            # Find a temporary name\n            temp_name = find_temp_name(existing_names)\n            existing_names.add(temp_name)\n\n            moves.append(f\"move {regular[i][0]} {temp_name}\")\n\n            # Find the file that is currently named e+i+1\n            target_file = None\n            for j in range(n):\n                if files[j][0] == str(e + i + 1):\n                    target_file = files[j][0]\n                    break\n            \n            if target_file:\n                # Move the file at e+i+1 to the original location of the regular file\n                moves.append(f\"move {target_file} {regular[i][0]}\")\n                existing_names.add(regular[i][0])\n                existing_names.remove(target_file)\n\n            # Move the temporary file to the correct regular file location\n            moves.append(f\"move {temp_name} {e + i + 1}\")\n            existing_names.add(str(e + i + 1))\n            existing_names.remove(temp_name)\n\n    print(len(moves))\n    for move in moves:\n        print(move)\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    ans = 6\n    for sum_val in range(28):  # Max sum is 9+9+9 = 27, so range is 0 to 27 inclusive\n        for i in range(1000):\n            s1 = str(i).zfill(3)\n            if sum(int(d) for d in s1) == sum_val:\n                for j in range(1000):\n                    s2 = str(j).zfill(3)\n                    if sum(int(d) for d in s2) == sum_val:\n                        diff = 0\n                        for k in range(3):\n                            if s[k] != s1[k]:\n                                diff += 1\n                        for k in range(3):\n                            if s[k+3] != s2[k]:\n                                diff += 1\n                        ans = min(ans, diff)\n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    \n    twos_in_num = 0\n    twos_in_den = 0\n\n    for i in range(k):\n        if i == 0:\n            continue\n        \n        val = pow(2, n, mod) - i\n        if val < 0:\n            val += mod\n        \n        num = (num * val) % mod\n        \n        temp = i\n        while temp > 0 and temp % 2 == 0:\n            twos_in_num += 1\n            temp //= 2\n            \n    twos_in_den = min(n * (k - 1), twos_in_num)\n    \n    den = pow(pow(2, n, mod), k - 1, mod)\n    \n    num_div = pow(2, twos_in_num, mod)\n    den_div = pow(2, twos_in_den, mod)\n    \n    num = (num * pow(num_div, mod - 2, mod)) % mod\n    den = (den * pow(den_div, mod - 2, mod)) % mod\n\n    a = (mod + 1 - (num * pow(den, mod - 2, mod)) % mod) % mod\n    b = 1\n\n    print(a, b)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 is North Pole, 20000 is South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if current_pos == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n            \n        if direction == \"North\":\n            current_pos = max(0, current_pos - t)\n        elif direction == \"South\":\n            current_pos = min(20000, current_pos + t)\n        # West and East directions do not affect the position\n        \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    d, x, y = extended_gcd(a1, a2)\n    x *= (b2 - b1) // g\n    y *= (b2 - b1) // g\n\n    lcm = (a1 * a2) // g\n\n    # Find a solution to a1*k + b1 = a2*l + b2\n    # a1*k - a2*l = b2 - b1\n    # k = x, l = -y\n\n    # We have a solution x, y.  All solutions are of the form\n    # x + (a2/g)*t, y + (a1/g)*t\n\n    # a1*(x + (a2/g)*t) + b1 = a1*x + b1 + a1*(a2/g)*t\n    # = a1*x + b1 + lcm*t\n\n    first_solution = a1 * x + b1\n\n    # Find the smallest t such that first_solution + lcm*t >= L\n    if first_solution < L:\n        t = (L - first_solution + lcm - 1) // lcm\n        first_solution += lcm * t\n\n    # Find the largest t such that first_solution + lcm*t <= R\n    if first_solution > R:\n        print(0)\n        return\n\n    last_solution = first_solution\n    \n    count = 0\n    \n    if first_solution >= L and first_solution <= R:\n        \n        \n        k_val = (first_solution - b1) // a1\n        l_val = (first_solution - b2) // a2\n        \n        if k_val >= 0 and l_val >= 0:\n            count += 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        if i >= n:\n            continue\n        \n        x = a // i\n        y = b // (n - i)\n        \n        ans = max(ans, min(x, y))\n    \n    print(ans)\n\nsolve()\n```",
    "35": "```python\ndef solve():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n\n    def check_horizontal():\n        if n % 3 != 0:\n            return False\n        stripe_height = n // 3\n        colors = []\n        for i in range(3):\n            color = grid[i * stripe_height][0]\n            for r in range(i * stripe_height, (i + 1) * stripe_height):\n                for c in range(m):\n                    if grid[r][c] != color:\n                        return False\n            colors.append(color)\n        if len(set(colors)) != 3:\n            return False\n        return True\n\n    def check_vertical():\n        if m % 3 != 0:\n            return False\n        stripe_width = m // 3\n        colors = []\n        for i in range(3):\n            color = grid[0][i * stripe_width]\n            for r in range(n):\n                for c in range(i * stripe_width, (i + 1) * stripe_width):\n                    if grid[r][c] != color:\n                        return False\n            colors.append(color)\n        if len(set(colors)) != 3:\n            return False\n        return True\n\n    if check_horizontal() or check_vertical():\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n\n    if n == 0:\n        print(0, 0)\n        return\n\n    l, r = 0, 10**9\n    k = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if 3 * mid * (mid + 1) >= n:\n            k = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    n -= 3 * k * (k - 1)\n    side_length = 2 * k\n\n    if n <= side_length // 2:\n        print(side_length // 2 - n, 2 * n)\n    elif n <= side_length:\n        n -= side_length // 2\n        print(side_length // 2 - 2 * n, side_length)\n    elif n <= 3 * side_length // 2:\n        n -= side_length\n        print(-side_length // 2 - n, side_length - 2 * n)\n    elif n <= 2 * side_length:\n        n -= 3 * side_length // 2\n        print(-side_length // 2 + n, -side_length)\n    elif n <= 5 * side_length // 2:\n        n -= 2 * side_length\n        print(side_length // 2 + n, -side_length + 2 * n)\n    else:\n        n -= 5 * side_length // 2\n        print(side_length // 2 - 2 * n, 0)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n\n    for i in range(101):\n        if a * i > c:\n            break\n        remaining_damage = c - a * i\n        if remaining_damage % b == 0:\n            print(\"Yes\")\n            return\n\n    print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for shift in range(n):\n        shifted_sasha = []\n        for i in range(n):\n            shifted_sasha.append((sasha[i] - sasha[0] + kefa[shift]) % l)\n        shifted_sasha.sort()\n        kefa_copy = kefa[:]\n        kefa_copy.sort()\n        if shifted_sasha == kefa_copy:\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "39": "```python\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef solve():\n    s = input()\n    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if not is_palindrome(sub):\n                max_len = max(max_len, len(sub))\n    print(max_len)\n\nsolve()\n```",
    "40": "```python\ndef solve():\n    n = int(input())\n    ratings = []\n    for _ in range(n):\n        ratings.append(list(map(int, input().split())))\n\n    rating_changed = False\n    for before, after in ratings:\n        if before != after:\n            rating_changed = True\n            break\n\n    if rating_changed:\n        print(\"rated\")\n        return\n\n    sorted_correctly = True\n    for i in range(n - 1):\n        if ratings[i][0] < ratings[i + 1][0]:\n            sorted_correctly = False\n            break\n\n    if not sorted_correctly:\n        print(\"unrated\")\n    else:\n        print(\"maybe\")\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n    \"\"\"\n    Calculates the distance to the nearest zero for each element in the array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        list: A list of integers representing the distances to the nearest zero.\n    \"\"\"\n\n    n = len(arr)\n    distances = [float('inf')] * n\n\n    # Forward pass: Calculate distances from left to right\n    last_zero = float('-inf')\n    for i in range(n):\n        if arr[i] == 0:\n            last_zero = i\n        if last_zero != float('-inf'):\n            distances[i] = min(distances[i], i - last_zero)\n\n    # Backward pass: Calculate distances from right to left\n    last_zero = float('inf')\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 0:\n            last_zero = i\n        if last_zero != float('inf'):\n            distances[i] = min(distances[i], last_zero - i)\n\n    return distances\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = nearest_zero(arr)\n    print(*result)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    seen = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        if binary_string in seen:\n            continue\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            for j in range(n):\n                shifted_string = binary_string[j:] + binary_string[:j]\n                seen.add(shifted_string)\n                \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    def angle(v):\n        return math.atan2(v[1], v[0])\n\n    angles_with_indices = []\n    for i in range(n):\n        angles_with_indices.append((angle(vectors[i]), i + 1))\n\n    angles_with_indices.sort()\n\n    min_angle_diff = float('inf')\n    best_pair = None\n\n    for i in range(n - 1):\n        angle_diff = angles_with_indices[i+1][0] - angles_with_indices[i][0]\n        if angle_diff < min_angle_diff:\n            min_angle_diff = angle_diff\n            best_pair = (angles_with_indices[i][1], angles_with_indices[i+1][1])\n\n    # Compare the angle between the last and first vectors\n    angle_diff = angles_with_indices[0][0] - angles_with_indices[-1][0] + 2 * math.pi\n    angle_diff = min(angle_diff, 2 * math.pi - angle_diff)\n\n    \n    angle_diff_direct = angles_with_indices[0][0] + (2 * math.pi - angles_with_indices[-1][0])\n    angle_diff_reverse = angles_with_indices[-1][0] - angles_with_indices[0][0]\n    angle_diff = min(angle_diff_direct, 2 * math.pi - angle_diff_direct)\n\n    if angle_diff < min_angle_diff:\n        min_angle_diff = angle_diff\n        best_pair = (angles_with_indices[-1][1], angles_with_indices[0][1])\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\ndef solve():\n    d, k, a, b, t = map(int, input().split())\n\n    if d <= k:\n        print(d * a)\n        return\n\n    cost_all_car = k * a + t + (d - k) * b\n    cost_all_walk = d * a\n\n    if a * k + t >= b * k:\n        print(k * a + (d - k) * b)\n        return\n\n    num_breaks = d // k\n    remaining_dist = d % k\n\n    cost = num_breaks * (k * a + t)\n\n    if remaining_dist > 0:\n        cost += min(remaining_dist * a, remaining_dist * b + t)\n\n    print(cost)\n\n\nsolve()\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"-1\")\n        return\n\n    best_gcd = 0\n    best_seq = []\n\n    for gcd in range(int(n**0.5), 0, -1):\n        if n % gcd == 0:\n            q = n // gcd\n            \n            # Check if gcd is a valid GCD\n            if q >= k * (k + 1) // 2:\n                seq = [gcd * i for i in range(1, k)]\n                seq.append(n - sum(seq))\n                \n                if all(seq[i] < seq[i+1] for i in range(len(seq)-1)) and all(x > 0 for x in seq):\n                    print(*seq)\n                    return\n            \n            # Check if q is a valid GCD\n            if gcd != q:\n                if gcd >= k * (k + 1) // 2:\n                    continue\n                if q >= k * (k + 1) // 2:\n                    seq = [q * i for i in range(1, k)]\n                    seq.append(n - sum(seq))\n                    \n                    if all(seq[i] < seq[i+1] for i in range(len(seq)-1)) and all(x > 0 for x in seq):\n                        print(*seq)\n                        return\n\n    if n == 1 and k == 1:\n        print(1)\n        return\n\n    print(\"-1\")\n\nsolve()\n```",
    "46": "```python\ndef solve():\n    n, m = map(int, input().split())\n    count = 0\n    for remainder in range(5):\n        count += (n - remainder + 4) // 5 * ((m - (5 - remainder) + 5) // 5)\n    print(count)\n\nsolve()\n```",
    "47": "```python\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_beauty = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_a = a[:]\n            for k in range(i, j):\n                temp_a[k] *= x\n\n            current_beauty = 0\n            max_so_far = 0\n            for val in temp_a:\n                current_beauty += val\n                if current_beauty < 0:\n                    current_beauty = 0\n                max_so_far = max(max_so_far, current_beauty)\n            max_beauty = max(max_beauty, max_so_far)\n\n    print(max_beauty)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        \"\"\"\n        Counts the number of elements in the n x m multiplication table that are less than or equal to x.\n        \"\"\"\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    low = 1\n    high = n * m\n    ans = 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\ndef solve():\n    k = int(input())\n\n    digits_count = 0\n    length = 1\n    power_of_10 = 1\n\n    while True:\n        numbers_count = 9 * power_of_10\n        total_digits = numbers_count * length\n\n        if digits_count + total_digits >= k:\n            break\n\n        digits_count += total_digits\n        length += 1\n        power_of_10 *= 10\n\n    remaining = k - digits_count\n    number_index = (remaining - 1) // length\n    digit_index = (remaining - 1) % length\n\n    number = power_of_10 + number_index\n    number_str = str(number)\n\n    print(number_str[digit_index])\n\nsolve()\n```",
    "50": "```python\ndef solve():\n    n = int(input())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    def build_graph(edges):\n        graph = {i: [] for i in range(1, n + 1)}\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        return graph\n\n    def get_path(start, end, graph):\n        q = [(start, [start])]\n        visited = {start}\n        while q:\n            node, path = q.pop(0)\n            if node == end:\n                return path\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    q.append((neighbor, path + [neighbor]))\n        return None\n\n    def edges_in_path(path):\n        edge_set = set()\n        for i in range(len(path) - 1):\n            u, v = sorted((path[i], path[i+1]))\n            edge_set.add((u, v))\n        return edge_set\n\n    graph = build_graph(edges)\n    max_edges = 0\n    best_a, best_b, best_c = -1, -1, -1\n\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if a == b:\n                continue\n            for c in range(1, n + 1):\n                if a == c or b == c:\n                    continue\n\n                path_ab = get_path(a, b, graph)\n                path_bc = get_path(b, c, graph)\n                path_ac = get_path(a, c, graph)\n\n                if path_ab and path_bc and path_ac:\n                    edges_ab = edges_in_path(path_ab)\n                    edges_bc = edges_in_path(path_bc)\n                    edges_ac = edges_in_path(path_ac)\n\n                    union_edges = edges_ab.union(edges_bc).union(edges_ac)\n                    num_edges = len(union_edges)\n\n                    if num_edges > max_edges:\n                        max_edges = num_edges\n                        best_a, best_b, best_c = a, b, c\n\n    print(max_edges)\n    print(best_a, best_b, best_c)\n\nsolve()\n```",
    "51": "```python\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    return divisors\n\ndef solve():\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    divisors.sort()\n    x = divisors[-1]\n    \n    divisors_x = get_divisors(x)\n    \n    divisors_copy = divisors[:]\n    \n    for val in divisors_x:\n        if val in divisors_copy:\n            divisors_copy.remove(val)\n        else:\n            y = divisors_copy[-1]\n            print(x, y)\n            return\n    \n    if len(divisors_copy) > 0:\n        y = divisors_copy[-1]\n    else:\n        y = 1\n        \n    print(x, y)\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def calculate_max_sum(row_idx, rem):\n        if row_idx == n:\n            if rem == 0:\n                return 0\n            else:\n                return float('-inf')\n\n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n\n        max_elements = m // 2\n        row = a[row_idx]\n        \n        max_sum = calculate_max_sum(row_idx + 1, rem)\n\n        for i in range(1 << m):\n            count = 0\n            current_sum = 0\n            for j in range(m):\n                if (i >> j) & 1:\n                    count += 1\n                    current_sum += row[j]\n\n            if count <= max_elements:\n                new_rem = (rem - (current_sum % k)) % k\n                if new_rem < 0:\n                    new_rem += k\n                \n                max_sum = max(max_sum, current_sum + calculate_max_sum(row_idx + 1, new_rem))\n\n        dp[(row_idx, rem)] = max_sum\n        return max_sum\n\n    result = calculate_max_sum(0, 0)\n    print(result)\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        n = len(arr)\n        max_len = 0\n        best_moves = \"\"\n\n        def solve_recursive(left, right, last_val, moves):\n            nonlocal max_len, best_moves\n\n            if left > right:\n                if len(moves) > max_len:\n                    max_len = len(moves)\n                    best_moves = moves\n                return\n\n            if arr[left] > last_val and arr[right] > last_val:\n                if arr[left] < arr[right]:\n                    solve_recursive(left + 1, right, arr[left], moves + \"L\")\n                    solve_recursive(left, right - 1, arr[right], moves + \"R\")\n                elif arr[left] > arr[right]:\n                    solve_recursive(left, right - 1, arr[right], moves + \"R\")\n                    solve_recursive(left + 1, right, arr[left], moves + \"L\")\n                else:\n                    temp_left = \"\"\n                    temp_right = \"\"\n                    l = left\n                    r = right\n                    while l <= r and arr[l] > last_val and arr[l] == arr[left]:\n                        temp_left += \"L\"\n                        l += 1\n                    \n                    l = left\n                    r = right\n                    while l <= r and arr[r] > last_val and arr[r] == arr[right]:\n                        temp_right += \"R\"\n                        r -= 1\n                    \n                    if len(temp_left) > len(temp_right):\n                        solve_recursive(left + len(temp_left), right, arr[left], moves + temp_left)\n                    elif len(temp_right) > len(temp_left):\n                        solve_recursive(left, right - len(temp_right), arr[right], moves + temp_right)\n                    else:\n                        if moves + temp_left < moves + temp_right:\n                            solve_recursive(left + len(temp_left), right, arr[left], moves + temp_left)\n                        else:\n                            solve_recursive(left, right - len(temp_right), arr[right], moves + temp_right)\n            elif arr[left] > last_val:\n                solve_recursive(left + 1, right, arr[left], moves + \"L\")\n            elif arr[right] > last_val:\n                solve_recursive(left, right - 1, arr[right], moves + \"R\")\n            else:\n                if len(moves) > max_len:\n                    max_len = len(moves)\n                    best_moves = moves\n                return\n\n        solve_recursive(0, n - 1, 0, \"\")\n        return max_len, best_moves\n\n    max_len, best_moves = find_longest_increasing_sequence(a)\n    print(max_len)\n    print(best_moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    unique_values = sorted(list(set(a)))\n\n    if len(unique_values) > 3:\n        print(-1)\n        return\n\n    if len(unique_values) == 1:\n        print(0)\n        return\n\n    if len(unique_values) == 2:\n        diff = unique_values[1] - unique_values[0]\n        if diff % 2 == 0:\n            print(diff // 2)\n        else:\n            print(diff)\n        return\n\n    if len(unique_values) == 3:\n        x, y, z = unique_values\n        if y - x == z - y:\n            print(y - x)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n    \"\"\"Calculates the area of intersection between two rectangles.\n\n    Args:\n        x1: x-coordinate of the bottom-left corner of the first rectangle.\n        y1: y-coordinate of the bottom-left corner of the first rectangle.\n        x2: x-coordinate of the top-right corner of the first rectangle.\n        y2: y-coordinate of the top-right corner of the first rectangle.\n        x3: x-coordinate of the bottom-left corner of the second rectangle.\n        y3: y-coordinate of the bottom-left corner of the second rectangle.\n        x4: x-coordinate of the top-right corner of the second rectangle.\n        y4: y-coordinate of the top-right corner of the second rectangle.\n\n    Returns:\n        The area of the intersection between the two rectangles.\n    \"\"\"\n    x_overlap = max(0, min(x2, x4) - max(x1, x3))\n    y_overlap = max(0, min(y2, y4) - max(y1, y3))\n    return x_overlap * y_overlap\n\n\ndef solve():\n    \"\"\"Reads input, calculates the visible area of the white sheet, and prints the result.\"\"\"\n\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n\n    intersection1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    intersection2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n    intersection12 = intersection_area(x3, y3, x4, y4, x5, y5, x6, y6)\n    \n    # Calculate the intersection of the white sheet with the union of the two black sheets.\n    # This is equivalent to the area of the white sheet covered by either black sheet 1 or black sheet 2 or both.\n    covered_area = intersection1 + intersection2 - intersection_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n\n    if white_area > covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolve()\n```",
    "56": "```python\ndef f(x):\n    \"\"\"\n    Applies the function f(x) as described in the problem statement.\n\n    Args:\n        x: An integer.\n\n    Returns:\n        The result of applying f(x) to x.\n    \"\"\"\n    x += 1\n    while x % 10 == 0:\n        x //= 10\n    return x\n\n\ndef solve():\n    \"\"\"\n    Reads an integer n from input and calculates the number of reachable\n    numbers from n using the function f(x).  Prints the count of reachable numbers.\n    \"\"\"\n    n = int(input())\n    reachable = set()\n    current = n\n    while current not in reachable:\n        reachable.add(current)\n        current = f(current)\n    print(len(reachable))\n\n\nif __name__ == \"__main__\":\n    solve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    givers = []\n    receivers = []\n    assigned = [False] * (n + 1)\n\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i]] = True\n        else:\n            givers.append(i)\n\n    for i in range(1, n + 1):\n        if not assigned[i]:\n            receivers.append(i)\n\n    for i in range(len(givers)):\n        f[givers[i]] = receivers[i]\n\n    for i in range(n):\n        if f[i] == i + 1:\n            for j in range(len(givers)):\n                if givers[j] != i:\n                    f[i], f[givers[j]] = f[givers[j]], f[i]\n                    break\n            else:\n                for j in range(n):\n                    if j != i:\n                        if f[j] != j + 1:\n                            f[i], f[j] = f[j], f[i]\n                            break\n\n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n\n    colors = [0] * n\n    color_idx = 1\n\n    for i in range(n):\n        colors[i] = color_idx\n        color_idx = (color_idx % k) + 1\n        if color_idx == 0:\n            color_idx = 1\n\n    print(\"YES\")\n    print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                pass\n            else:\n                count += 1\n        else:\n            if s[i] == '1':\n                pass\n            else:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "60": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] == a[k]:\n                    print(\"YES\")\n                    return\n\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    a_list = list(map(int, list(a)))\n\n    best_a_list = a_list[:]\n\n    start_index = -1\n    end_index = -1\n\n    for i in range(n):\n        if f[a_list[i] - 1] > a_list[i]:\n            start_index = i\n            break\n\n    if start_index != -1:\n        end_index = start_index\n        for i in range(start_index, n):\n            if f[a_list[i] - 1] >= a_list[i]:\n                end_index = i\n            else:\n                break\n\n        for i in range(start_index, end_index + 1):\n            best_a_list[i] = f[a_list[i] - 1]\n\n    print(\"\".join(map(str, best_a_list)))\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "63": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    \n    print(a[n-2] - a[0])\n\nsolve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c))\n\n    schedule = [0] * n\n\n    # Mark exam days in the schedule\n    for i in range(m):\n        schedule[exams[i][1] - 1] = m + 1\n\n    preparation_counts = [0] * m\n\n    # Iterate through each day and assign preparation if possible\n    for day in range(1, n + 1):\n        if schedule[day - 1] != 0:  # Skip exam days\n            continue\n\n        best_exam = -1\n        for i in range(m):\n            s, d, c = exams[i]\n            if s <= day and day < d and preparation_counts[i] < c:\n                if best_exam == -1:\n                    best_exam = i\n                else:\n                    # Prioritize exams with earlier deadlines\n                    if exams[i][1] < exams[best_exam][1]:\n                        best_exam = i\n\n        if best_exam != -1:\n            schedule[day - 1] = best_exam + 1\n            preparation_counts[best_exam] += 1\n\n    # Check if all exams have been prepared for enough days\n    possible = True\n    for i in range(m):\n        if exams[i][2] != preparation_counts[i]:\n            possible = False\n            break\n\n    if possible:\n        print(*schedule)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "65": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    if n == m:\n        print(0)\n        return\n\n    if m % n != 0:\n        print(-1)\n        return\n\n    k = m // n\n    \n    count = 0\n    twos = 0\n    threes = 0\n    \n    while k % 2 == 0:\n        k //= 2\n        twos += 1\n    while k % 3 == 0:\n        k //= 3\n        threes += 1\n    \n    if k == 1:\n        print(twos + threes)\n    else:\n        print(-1)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n    \n    result = t + t[overlap:] * (k - 1)\n    print(result)\n\nsolve()\n```",
    "67": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    nice_indices = []\n    for i in range(n):\n        temp_a = a[:i] + a[i+1:]\n        total_sum = sum(temp_a)\n        \n        is_good = False\n        for j in range(len(temp_a)):\n            if temp_a[j] == total_sum - temp_a[j]:\n                is_good = True\n                break\n        \n        if is_good:\n            nice_indices.append(i + 1)\n\n    print(len(nice_indices))\n    if nice_indices:\n        print(*nice_indices)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n\n    counts = [dp[n][i] for i in range(n + 1)]\n\n    if sum(counts) < k:\n        print(\"-1\")\n        return\n\n    cost = 0\n    for length in range(n, -1, -1):\n        if k > counts[length]:\n            cost += counts[length] * (n - length)\n            k -= counts[length]\n        else:\n            cost += k * (n - length)\n            k = 0\n            break\n\n    print(cost)\n\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    adj = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    must_have = []\n    other_edges = []\n    for u, v in edges:\n        if u == 1 or v == 1:\n            must_have.append((u, v))\n        else:\n            other_edges.append((u, v))\n\n    if len(must_have) < d:\n        print(\"NO\")\n        return\n\n    import itertools\n    for comb in itertools.combinations(must_have, d):\n        selected_must_have = list(comb)\n        \n        remaining_edges = other_edges[:]\n        \n        \n        graph = [[] for _ in range(n + 1)]\n        for u, v in selected_must_have:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        \n        def is_connected(edges_list, num_nodes):\n            if not edges_list and num_nodes > 1:\n                return False\n\n            graph_conn = [[] for _ in range(num_nodes + 1)]\n            for u, v in edges_list:\n                graph_conn[u].append(v)\n                graph_conn[v].append(u)\n\n            visited = [False] * (num_nodes + 1)\n            q = [1]\n            visited[1] = True\n            count = 0\n\n            while q:\n                u = q.pop(0)\n                count += 1\n                for v in graph_conn[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        q.append(v)\n\n            return count == num_nodes\n        \n        \n        def find_spanning_tree(initial_edges, all_edges, num_nodes):\n            \n            import copy\n            \n            def dfs(node, current_tree, visited_nodes):\n                visited_nodes[node] = True\n                \n                for neighbor in graph_conn[node]:\n                    if not visited_nodes[neighbor]:\n                        current_tree.append((node, neighbor))\n                        dfs(neighbor, current_tree, visited_nodes)\n            \n            \n            graph_conn = [[] for _ in range(num_nodes + 1)]\n            for u, v in initial_edges:\n                graph_conn[u].append(v)\n                graph_conn[v].append(u)\n            \n            \n            visited = [False] * (num_nodes + 1)\n            spanning_tree = []\n            dfs(1, spanning_tree, visited)\n            \n            \n            if len(spanning_tree) == num_nodes - 1:\n                return spanning_tree\n            \n            \n            return None\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
    "70": "```python\ndef solve():\n  h1, m1 = map(int, input().split(':'))\n  h2, m2 = map(int, input().split(':'))\n\n  start_minutes = h1 * 60 + m1\n  end_minutes = h2 * 60 + m2\n\n  mid_minutes = (start_minutes + end_minutes) // 2\n\n  h3 = mid_minutes // 60\n  m3 = mid_minutes % 60\n\n  print(f\"{h3:02d}:{m3:02d}\")\n\nsolve()\n```",
    "71": "```python\nimport math\n\ndef solve():\n    \"\"\"\n    Calculates the smallest integer k such that 2^k >= a.\n\n    This function takes an integer 'a' as input and calculates the smallest\n    integer 'k' such that 2 raised to the power of 'k' is greater than or\n    equal to 'a'.  It handles the special case where a = 1 directly and\n    uses the ceiling of the base-2 logarithm for other values of 'a'.\n\n    \"\"\"\n    a = int(input())\n    if a == 1:\n        print(1)\n    else:\n        print(math.ceil(math.log2(a)))\n\nsolve()\n```",
    "72": "```python\ndef solve():\n    n = int(input())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    max_len = 0\n    for i in range(n):\n        temp_segments = segments[:i] + segments[i+1:]\n        \n        intersection_start = temp_segments[0][0]\n        intersection_end = temp_segments[0][1]\n        \n        for j in range(1, len(temp_segments)):\n            intersection_start = max(intersection_start, temp_segments[j][0])\n            intersection_end = min(intersection_end, temp_segments[j][1])\n        \n        length = max(0, intersection_end - intersection_start)\n        max_len = max(max_len, length)\n\n    print(max_len)\n\nsolve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n\n    counts = [0] * (n + 1)\n    counts[0] = 1\n    for i in range(1, n + 1):\n        counts[i] = dp[n][i]\n\n    total_cost = 0\n    for length in range(n, -1, -1):\n        if k > counts[length]:\n            total_cost += counts[length] * (n - length)\n            k -= counts[length]\n        else:\n            total_cost += k * (n - length)\n            k = 0\n            break\n\n    if k > 0:\n        print(-1)\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    week = [0, 1, 2, 0, 2, 1, 0]  # 0: fish, 1: rabbit, 2: chicken\n    \n    weekly_fish = week.count(0)\n    weekly_rabbit = week.count(1)\n    weekly_chicken = week.count(2)\n    \n    weekly_days = 7\n    \n    complete_weeks = min(a // weekly_fish, b // weekly_rabbit, c // weekly_chicken)\n    \n    a -= complete_weeks * weekly_fish\n    b -= complete_weeks * weekly_rabbit\n    c -= complete_weeks * weekly_chicken\n    \n    total_days = complete_weeks * weekly_days\n    \n    best_days = 0\n    \n    for start_day in range(7):\n        days = 0\n        fish = a\n        rabbit = b\n        chicken = c\n        \n        current_day = start_day\n        \n        while True:\n            food_type = week[current_day % 7]\n            \n            if food_type == 0:\n                if fish > 0:\n                    fish -= 1\n                    days += 1\n                else:\n                    break\n            elif food_type == 1:\n                if rabbit > 0:\n                    rabbit -= 1\n                    days += 1\n                else:\n                    break\n            else:\n                if chicken > 0:\n                    chicken -= 1\n                    days += 1\n                else:\n                    break\n            \n            current_day += 1\n        \n        best_days = max(best_days, days)\n    \n    print(total_days + best_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile = []\n        tile.append(list(map(int, input().split())))\n        tile.append(list(map(int, input().split())))\n        tiles.append(tile)\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n    \"\"\"\n    Calculates the minimum possible absolute difference between the sums of two sets\n    formed by dividing the sequence 1, 2, ..., n.\n\n    The problem is equivalent to finding if the sum of the sequence 1 to n is even or odd.\n    If the sum is even, the minimum difference is 0. Otherwise, it's 1.\n    \"\"\"\n    n = int(input())\n    total_sum = n * (n + 1) // 2  # Calculate the sum of the sequence efficiently\n    print(total_sum % 2)  # Output 0 if even, 1 if odd\n\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    len_s = len(s)\n\n    dp = {}\n\n    def count_regular_sequences(length, balance, found_s, kmp_state):\n        if (length, balance, found_s, kmp_state) in dp:\n            return dp[(length, balance, found_s, kmp_state)]\n\n        if length == 2 * n:\n            if balance == 0 and found_s:\n                return 1\n            else:\n                return 0\n\n        count = 0\n        \n        # Add '('\n        if balance + 1 <= n:\n            new_kmp_state = compute_kmp_state(kmp_table, kmp_state, '(')\n            new_found_s = found_s or new_kmp_state == len_s\n            count = (count + count_regular_sequences(length + 1, balance + 1, new_found_s, new_kmp_state)) % mod\n\n        # Add ')'\n        if balance > 0:\n            new_kmp_state = compute_kmp_state(kmp_table, kmp_state, ')')\n            new_found_s = found_s or new_kmp_state == len_s\n            count = (count + count_regular_sequences(length + 1, balance - 1, new_found_s, new_kmp_state)) % mod\n\n        dp[(length, balance, found_s, kmp_state)] = count\n        return count\n\n    def compute_kmp_table(pattern):\n        length = len(pattern)\n        table = [0] * length\n        i = 1\n        j = 0\n        while i < length:\n            if pattern[i] == pattern[j]:\n                j += 1\n                table[i] = j\n                i += 1\n            else:\n                if j != 0:\n                    j = table[j - 1]\n                else:\n                    i += 1\n        return table\n\n    def compute_kmp_state(table, state, char):\n        while state > 0 and char != s[state]:\n            state = table[state - 1]\n        if char == s[state]:\n            state += 1\n        return state\n\n    kmp_table = compute_kmp_table(s)\n    result = count_regular_sequences(0, 0, False, 0)\n    print(result)\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    \n    ans = float('inf')\n    \n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        \n        temp_n = list(n)\n        moves = 0\n        \n        # Find the last digit of the suffix\n        last_digit = suffix[1]\n        last_digit_index = -1\n        for i in range(n_len - 1, -1, -1):\n            if temp_n[i] == last_digit:\n                last_digit_index = i\n                break\n        \n        if last_digit_index == -1:\n            continue\n        \n        moves += (n_len - 1 - last_digit_index)\n        temp_n.pop(last_digit_index)\n        \n        # Find the first digit of the suffix\n        first_digit = suffix[0]\n        first_digit_index = -1\n        for i in range(len(temp_n) - 1, -1, -1):\n            if temp_n[i] == first_digit:\n                first_digit_index = i\n                break\n        \n        if first_digit_index == -1:\n            continue\n        \n        moves += (len(temp_n) - 1 - first_digit_index)\n        temp_n.pop(first_digit_index)\n        \n        # Remove trailing zeros\n        trailing_zeros = 0\n        for i in range(0, len(temp_n)):\n            if temp_n[i] != '0':\n                break\n            trailing_zeros += 1\n        \n        moves += trailing_zeros\n        \n        if len(temp_n) - trailing_zeros > 0:\n            ans = min(ans, moves)\n    \n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    colors = [0] * n\n    \n    def check(num_colors):\n        \n        def is_sortable(coloring):\n            arr = list(s)\n            \n            for _ in range(n * (n - 1) // 2):\n                swapped = False\n                for i in range(n - 1):\n                    if arr[i] > arr[i+1] and coloring[i] != coloring[i+1]:\n                        arr[i], arr[i+1] = arr[i+1], arr[i]\n                        swapped = True\n                if not swapped:\n                    break\n            return arr == sorted(s)\n        \n        import itertools\n        \n        for coloring in itertools.product(range(1, num_colors + 1), repeat=n):\n            if is_sortable(coloring):\n                return True, coloring\n        return False, None\n\n    def solve_efficiently():\n        max_color = 1\n        coloring = [1] * n\n        \n        for i in range(1, n):\n            if s[i] < s[i-1]:\n                max_color = 2\n                break\n        \n        if max_color == 2:\n            coloring = [0] * n\n            last_char_color1 = ''\n            last_char_color2 = ''\n            \n            for i in range(n):\n                if last_char_color1 == '' or s[i] >= last_char_color1:\n                    coloring[i] = 1\n                    last_char_color1 = s[i]\n                elif last_char_color2 == '' or s[i] >= last_char_color2:\n                    coloring[i] = 2\n                    last_char_color2 = s[i]\n                else:\n                    print(3)\n                    coloring = [1] * n\n                    coloring[i] = 2\n                    coloring[i-1] = 3\n                    print(*coloring)\n                    return\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    def is_substring(a, b):\n        return a in b\n\n    strings.sort(key=len)\n\n    for i in range(1, n):\n        valid = True\n        for j in range(i):\n            if not is_substring(strings[j], strings[i]):\n                valid = False\n                break\n        if not valid:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    for s in strings:\n        print(s)\n\nsolve()\n```",
    "82": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    solved = 0\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        if a[left] <= k:\n            solved += 1\n            left += 1\n        elif a[right] <= k:\n            solved += 1\n            right -= 1\n        else:\n            break\n\n    print(solved)\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for h in range(1, int(total**0.5) + 1):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: a forms a rectangle\n            for h_a in range(1, int(a**0.5) + 1):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    if h_a <= h and w_a <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n                        \n            # Case 2: b forms a rectangle\n            for h_b in range(1, int(b**0.5) + 1):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    if h_b <= h and w_b <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n    \n    print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    sorted_s = sorted(s)\n    \n    for i in range(1 << n):\n        coloring = \"\"\n        s0 = \"\"\n        s1 = \"\"\n        \n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += \"1\"\n                s1 += s[j]\n            else:\n                coloring += \"0\"\n                s0 += s[j]\n        \n        s0_sorted = sorted(s0)\n        s1_sorted = sorted(s1)\n        \n        merged_s = \"\"\n        idx0 = 0\n        idx1 = 0\n        \n        possible = True\n        for j in range(n):\n            if coloring[j] == '0':\n                if idx0 < len(s0):\n                    merged_s += s0_sorted[idx0]\n                    idx0 += 1\n                else:\n                    possible = False\n                    break\n            else:\n                if idx1 < len(s1):\n                    merged_s += s1_sorted[idx1]\n                    idx1 += 1\n                else:\n                    possible = False\n                    break\n        \n        if possible and \"\".join(sorted_s) == merged_s:\n            print(\"YES\")\n            print(coloring)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n\n    for price in range(1, 1251):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.10)\n\n        if tax_8 == a and tax_10 == b:\n            print(price)\n            return\n\n    print(\"-1\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k == 1:\n        print(\"YES\")\n        print(n)\n        return\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - sum(a)\n\n    add = remaining // k\n    rem = remaining % k\n\n    for i in range(k):\n        a[i] += add\n\n    for i in range(k - 1, k - 1 - rem, -1):\n        a[i] += 1\n\n    valid = True\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            valid = False\n            break\n    \n    if valid:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "87": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    pos_projects = []\n    neg_projects = []\n    for a, b in projects:\n        if b >= 0:\n            pos_projects.append((a, b))\n        else:\n            neg_projects.append((a, b))\n\n    pos_projects.sort()\n    neg_projects.sort(key=lambda x: x[0] + x[1], reverse=True)\n\n    count = 0\n    \n    # Process positive projects\n    for a, b in pos_projects:\n        if r >= a:\n            r += b\n            count += 1\n        \n    # Process negative projects\n    \n    def solve_neg(r, neg_projects):\n        n = len(neg_projects)\n        dp = {}\n\n        def get_max_projects(current_rating, index):\n            if index == n:\n                return 0\n\n            key = (current_rating, index)\n            if key in dp:\n                return dp[key]\n\n            max_count = 0\n\n            # Option 1: Skip the current project\n            max_count = max(max_count, get_max_projects(current_rating, index + 1))\n\n            # Option 2: Take the current project if possible\n            a, b = neg_projects[index]\n            if current_rating >= a and current_rating + b >= 0:\n                max_count = max(max_count, 1 + get_max_projects(current_rating + b, index + 1))\n\n            dp[key] = max_count\n            return max_count\n\n        return get_max_projects(r, 0)\n\n    count += solve_neg(r, neg_projects)\n\n    print(count)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def can_fill(row, col):\n        if row >= n:\n            return True\n        \n        if col >= n:\n            return can_fill(row + 1, 0)\n        \n        if matrix[row][col] != 0:\n            return can_fill(row, col + 1)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                counts[num] -= 1\n                matrix[row][col] = num\n                \n                if n % 2 == 0:\n                    matrix[n - 1 - row][col] = num\n                    matrix[row][n - 1 - col] = num\n                    matrix[n - 1 - row][n - 1 - col] = num\n                    if counts[num] >= 3:\n                        counts[num] -= 3\n                        if can_fill(row, col + 1):\n                            return True\n                        counts[num] += 3\n                    matrix[n - 1 - row][col] = 0\n                    matrix[row][n - 1 - col] = 0\n                    matrix[n - 1 - row][n - 1 - col] = 0\n                else:\n                    if row == n // 2 and col == n // 2:\n                        if counts[num] >= 0:\n                            if can_fill(row, col + 1):\n                                return True\n                    elif row == n // 2 or col == n // 2:\n                        if row == n // 2:\n                            matrix[row][n - 1 - col] = num\n                            if counts[num] >= 1:\n                                counts[num] -= 1\n                                if can_fill(row, col + 1):\n                                    return True\n                                counts[num] += 1\n                            matrix[row][n - 1 - col] = 0\n                        else:\n                            matrix[n - 1 - row][col] = num\n                            if counts[num] >= 1:\n                                counts[num] -= 1\n                                if can_fill(row, col + 1):\n                                    return True\n                                counts[num] += 1\n                            matrix[n - 1 - row][col] = 0\n                    else:\n                        matrix[n - 1 - row][col] = num\n                        matrix[row][n - 1 - col] = num\n                        matrix[n - 1 - row][n - 1 - col] = num\n                        if counts[num] >= 3:\n                            counts[num] -= 3\n                            if can_fill(row, col + 1):\n                                return True\n                            counts[num] += 3\n                        matrix[n - 1 - row][col] = 0\n                        matrix[row][n - 1 - col] = 0\n                        matrix[n - 1 - row][n - 1 - col] = 0\n                \n                matrix[row][col] = 0\n                counts[num] += 1\n        return False\n\n    \n    total_cells = n * n\n    needed_4 = (n // 2) * (n // 2)\n    needed_2 = 0\n    needed_1 = 0\n    if n % 2 != 0:\n        needed_2 = 2 * (n // 2)\n        needed_1 = 1\n    \n    count_4 = 0\n    count_2 = 0\n    count_1 = 0\n    \n    for count in counts.values():\n        if count >= 4:\n            count_4 += 1\n        elif count >= 2:\n            count_2 += 1\n        elif count >= 1:\n            count_1 += 1\n            \n    \n    if n % 2 == 0:\n        needed_4 = (n // 2) * (n // 2)\n        \n        counts_4 = 0\n        for num in counts:\n            counts_4 += counts[num] // 4\n        \n        if counts_4 < needed_4:\n            print(\"NO\")\n            return\n    else:\n        needed_4 = (n // 2) * (n // 2)\n        needed_2 = 2 * (n // 2)\n        needed_1 = 1\n        \n        counts_4 = 0\n        counts_2 = 0\n        counts_1 = 0\n        \n        for num in counts:\n            counts_4 += counts[num] // 4\n            counts_2 += (counts[num] % 4) // 2\n            counts_1 += (counts[num] % 4) % 2\n        \n        if counts_4 < needed_4:\n            print(\"NO\")\n            return\n        \n        remaining_4 = 0\n        for num in counts:\n            remaining_4 += counts[num] - (counts[num] % 4)\n        \n        counts_2_temp = 0\n        for num in counts:\n            counts_2_temp += (counts[num] % 4) // 2\n            \n        if counts_2_temp < needed_2:\n            \n            remaining_2 = 0\n            for num in counts:\n                remaining_2 += counts[num] - (counts[num] % 2)\n            \n            \n            if counts_1 < needed_1:\n                print(\"NO\")\n                return\n            \n            \n            \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    positive_projects = []\n    negative_projects = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        if b >= 0:\n            positive_projects.append((a, b))\n        else:\n            negative_projects.append((a, b))\n\n    positive_projects.sort()\n    negative_projects.sort(key=lambda x: x[0] + x[1], reverse=True)\n\n    current_rating = r\n    for a, b in positive_projects:\n        if current_rating < a:\n            print(\"NO\")\n            return\n        current_rating += b\n\n    for a, b in negative_projects:\n        if current_rating < a:\n            print(\"NO\")\n            return\n        current_rating += b\n        if current_rating < 0:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    min_empty = n - total_length\n\n    if min_empty > (m * (d - 1)):\n        print(\"NO\")\n        return\n\n    arr = [0] * n\n    pos = 0\n    \n    for i in range(m):\n        needed_empty = d - 1\n        empty_before = min(min_empty, needed_empty)\n        \n        pos += empty_before\n        min_empty -= empty_before\n        \n        for j in range(c[i]):\n            arr[pos] = i + 1\n            pos += 1\n\n    for i in range(n):\n        if arr[i] == 0:\n            continue\n        \n    print(\"YES\")\n    print(*arr)\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            \n            ti = 0\n            tsi = 0\n            \n            possible = True\n            while ti < m and tsi < len(temp_s):\n                if t[ti] == temp_s[tsi]:\n                    ti += 1\n                    tsi += 1\n                else:\n                    tsi += 1\n            \n            if ti == m:\n                ans = max(ans, j - i)\n    print(ans)\n\nsolve()\n```",
    "92": "```python\ndef solve():\n    x = float(input())\n    \n    for a in range(1, 11):\n        for b in range(1, 11):\n            if abs(a / b - x) < 1e-7:\n                print(a, b)\n                return\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1:\n        if n > 2 or k == 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(\"1 2\")\n        return\n\n    if k == 1:\n        print(\"NO\")\n        return\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d > n - 1:\n        print(\"NO\")\n        return\n\n    if d > 1 and k == 1:\n        print(\"NO\")\n        return\n    \n    if n > 2 and d == 1 and k == 1:\n        print(\"NO\")\n        return\n\n    if d > 2 and k == 2:\n        print(\"NO\")\n        return\n    \n    edges = []\n    \n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n\n    next_node = d + 2\n    \n    # Add nodes to the diameter path\n    for i in range(1, d + 2):\n        while next_node <= n:\n            degree = 0\n            for u, v in edges:\n                if u == i or v == i:\n                    degree += 1\n            \n            if degree < k:\n                edges.append((i, next_node))\n                next_node += 1\n            else:\n                break\n        if next_node > n:\n            break\n    \n    if next_node <= n:\n        print(\"NO\")\n        return\n\n    if len(edges) != n - 1:\n        print(\"NO\")\n        return\n    \n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n\n    if a > b:\n        start = 0\n    else:\n        start = 1\n\n    s = \"\"\n    for i in range(x):\n        s += str(start)\n        if start == 0:\n            a -= 1\n            start = 1\n        else:\n            b -= 1\n            start = 0\n\n    if start == 0:\n        s += \"0\" * a\n        s += \"1\" * b\n    else:\n        s += \"1\" * b\n        s += \"0\" * a\n\n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    chars = ['a', 'b', 'c']\n\n    import itertools\n\n    for perm in itertools.permutations(chars):\n        base_string = \"\"\n        for i in range(n):\n            base_string += perm[0]\n        for i in range(n):\n            base_string += perm[1]\n        for i in range(n):\n            base_string += perm[2]\n\n        if s not in base_string and t not in base_string:\n            print(\"YES\")\n            print(base_string)\n            return\n            \n    for perm in itertools.permutations(chars):\n        base_string = \"\"\n        for i in range(n):\n            base_string += perm[0]\n        for i in range(n):\n            base_string += perm[2]\n        for i in range(n):\n            base_string += perm[1]\n\n        if s not in base_string and t not in base_string:\n            print(\"YES\")\n            print(base_string)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n        \n        if all(1 <= x <= n for x in p) and len(set(p)) == n:\n            print(*p)\n            return\n    \n    print(-1)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    even_count = 0\n    odd_count = 0\n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    print(min(even_count, odd_count))\n\nsolve()\n```",
    "98": "```python\ndef solve():\n    n = int(input())\n\n    ans = float('inf')\n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            j = n // i\n            ans = min(ans, (i - 1) + (j - 1))\n\n    print(ans)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = 0\n    \n    temp_a1 = a1\n    temp_a2 = a2\n    temp_a3 = a3\n    temp_b1 = b1\n    temp_b2 = b2\n    temp_b3 = b3\n\n    min_wins = max(0, a1 - (b1 + b3)) + max(0, a2 - (b2 + b1)) + max(0, a3 - (b3 + b2))\n    \n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}