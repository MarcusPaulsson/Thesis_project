{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    max_len = -1\n    \n    for i in range(n):\n        for j in range(i + 3, n):\n            \n            sub = \"\"\n            \n            \n            first_bracket_index = -1\n            for k in range(n):\n                if s[k] == '[':\n                    first_bracket_index = k\n                    break\n                    \n            last_bracket_index = -1\n            for k in range(n-1, -1, -1):\n                if s[k] == ']':\n                    last_bracket_index = k\n                    break\n                    \n            if first_bracket_index == -1 or last_bracket_index == -1 or first_bracket_index >= last_bracket_index:\n                continue\n            \n            \n            first_colon_index = -1\n            for k in range(first_bracket_index + 1, n):\n                if s[k] == ':':\n                    first_colon_index = k\n                    break\n                    \n            last_colon_index = -1\n            for k in range(last_bracket_index - 1, -1, -1):\n                if s[k] == ':':\n                    last_colon_index = k\n                    break\n            \n            \n            if first_colon_index == -1 or last_colon_index == -1 or first_colon_index >= last_colon_index:\n                continue\n                \n            \n            \n            num_pipes = 0\n            for k in range(first_colon_index + 1, last_colon_index):\n                if s[k] == '|':\n                    num_pipes += 1\n                    \n            \n            curr_len = 4 + num_pipes\n            \n            if curr_len > max_len and first_bracket_index < first_colon_index and first_colon_index < last_colon_index and last_colon_index < last_bracket_index:\n                max_len = curr_len\n\n    print(max_len)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    \n    best_num = x\n    best_sum = sum_digits(x)\n    \n    s = str(x)\n    n = len(s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0:\n            current_sum = sum_digits(num)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_num = num\n            elif current_sum == best_sum and num > best_num:\n                best_num = num\n                \n    print(best_num)\n\ndef sum_digits(n):\n    s = str(n)\n    sum_val = 0\n    for digit in s:\n        sum_val += int(digit)\n    return sum_val\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    l = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10**(l-1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "3": null,
    "4": "```python\ndef solve():\n  x = int(input())\n  hh, mm = map(int, input().split())\n\n  def is_lucky(h, m):\n    return '7' in str(h) or '7' in str(m)\n\n  def time_to_minutes(h, m):\n    return h * 60 + m\n\n  def minutes_to_time(minutes):\n    h = (minutes // 60) % 24\n    m = minutes % 60\n    return h, m\n\n  target_minutes = time_to_minutes(hh, mm)\n  \n  for y in range(1000):\n    alarm_minutes = (target_minutes - x * y) % (24 * 60)\n    if alarm_minutes < 0:\n      alarm_minutes += 24 * 60\n    \n    alarm_h, alarm_m = minutes_to_time(alarm_minutes)\n    \n    if is_lucky(alarm_h, alarm_m):\n      print(y)\n      return\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n    \n    ans = 0\n    \n    if l == 1 and r == n:\n        print(0)\n        return\n    \n    if l == 1:\n        ans = abs(pos - r) + 1\n        print(ans)\n        return\n    \n    if r == n:\n        ans = abs(pos - l) + 1\n        print(ans)\n        return\n    \n    if pos <= l:\n        ans = (l - pos) + 1 + (r - l) + 1\n        print(ans)\n        return\n    \n    if pos >= r:\n        ans = (pos - r) + 1 + (r - l) + 1\n        print(ans)\n        return\n        \n    ans = min((pos - l) + 1 + (r - l) + 1, (r - pos) + 1 + (r - l) + 1)\n    print(ans)\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_d = 0\n    for d, h in blows:\n        max_d = max(max_d, d)\n    \n    best_blow = None\n    for d, h in blows:\n        if d > h:\n            if best_blow is None or (d - h) > (best_blow[0] - best_blow[1]):\n                best_blow = (d, h)\n\n    if max_d >= x:\n        print(1)\n        return\n    \n    if best_blow is None:\n        print(-1)\n        return\n    \n    d, h = best_blow\n    diff = d - h\n    \n    remaining = x - max_d\n    \n    ans = (remaining + diff - 1) // diff + 1\n    print(ans)\n    \n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    low = 0\n    high = 2 * 10**9\n    ans = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        total_eaten = (mid * (mid + 1)) // 2\n        \n        if n + mid * m >= total_eaten:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    print(ans)\n    \nsolve()\n```",
    "8": null,
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa, sofas_list):\n        count = 0\n        x1, y1, x2, y2 = sofa\n        min_x = min(x1, x2)\n        min_y = min(y1, y2)\n        max_y = max(y1, y2)\n\n        for other_sofa in sofas_list:\n            if sofa == other_sofa:\n                continue\n            ox1, oy1, ox2, oy2 = other_sofa\n            other_min_x = min(ox1, ox2)\n            \n            if other_min_x < min_x:\n                count += 1\n        return count\n\n    def count_right(sofa, sofas_list):\n        count = 0\n        x1, y1, x2, y2 = sofa\n        max_x = max(x1, x2)\n        min_y = min(y1, y2)\n        max_y = max(y1, y2)\n\n        for other_sofa in sofas_list:\n            if sofa == other_sofa:\n                continue\n            ox1, oy1, ox2, oy2 = other_sofa\n            other_max_x = max(ox1, ox2)\n\n            if other_max_x > max_x:\n                count += 1\n        return count\n\n    def count_top(sofa, sofas_list):\n        count = 0\n        x1, y1, x2, y2 = sofa\n        min_y = min(y1, y2)\n        min_x = min(x1, x2)\n        max_x = max(x1, x2)\n\n        for other_sofa in sofas_list:\n            if sofa == other_sofa:\n                continue\n            ox1, oy1, ox2, oy2 = other_sofa\n            other_min_y = min(oy1, oy2)\n\n            if other_min_y < min_y:\n                count += 1\n        return count\n\n    def count_bottom(sofa, sofas_list):\n        count = 0\n        x1, y1, x2, y2 = sofa\n        max_y = max(y1, y2)\n        min_x = min(x1, x2)\n        max_x = max(x1, x2)\n\n        for other_sofa in sofas_list:\n            if sofa == other_sofa:\n                continue\n            ox1, oy1, ox2, oy2 = other_sofa\n            other_max_y = max(oy1, oy2)\n\n            if other_max_y > max_y:\n                count += 1\n        return count\n\n    result = -1\n    for i in range(d):\n        left_count = count_left(sofas[i], sofas)\n        right_count = count_right(sofas[i], sofas)\n        top_count = count_top(sofas[i], sofas)\n        bottom_count = count_bottom(sofas[i], sofas)\n\n        if (left_count == cnt_l and\n            right_count == cnt_r and\n            top_count == cnt_t and\n            bottom_count == cnt_b):\n            result = i + 1\n            break\n\n    print(result)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n    n = int(input())\n    \n    min_days_off = (n // 7) * 2\n    max_days_off = (n // 7) * 2\n    \n    remaining_days = n % 7\n    \n    if remaining_days == 1:\n        min_days_off += 0\n        max_days_off += 1\n    elif remaining_days == 2:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 3:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 4:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 5:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 6:\n        min_days_off += 1\n        max_days_off += 2\n    \n    print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```cpp\n#include <iostream>\n\nlong long gcd(long long a, long long b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\nlong long lcm(long long a, long long b) {\n    return (a * b) / gcd(a, b);\n}\n\nint main() {\n    long long n, a, b, p, q;\n    std::cin >> n >> a >> b >> p >> q;\n    \n    long long red_count = n / a;\n    long long blue_count = n / b;\n    long long both_count = n / lcm(a, b);\n    \n    long long ans = 0;\n    \n    if (p > q) {\n        ans = red_count * p + (blue_count - both_count) * q;\n    } else {\n        ans = blue_count * q + (red_count - both_count) * p;\n    }\n    \n    std::cout << ans << std::endl;\n    \n    return 0;\n}\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    golds = s.count('G')\n    \n    if golds == 0:\n        print(0)\n        return\n    \n    max_len = 0\n    \n    for i in range(n):\n        for j in range(n):\n            temp_s = list(s)\n            temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n            temp_s = \"\".join(temp_s)\n            \n            current_len = 0\n            max_current_len = 0\n            \n            for k in range(n):\n                if temp_s[k] == 'G':\n                    current_len += 1\n                else:\n                    max_current_len = max(max_current_len, current_len)\n                    current_len = 0\n            \n            max_current_len = max(max_current_len, current_len)\n            \n            max_len = max(max_len, min(max_current_len, golds))\n    \n    print(max_len)\n\nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = set(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n    \n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    \n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i + 1] += 1\n    \n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n    \n    order = []\n    visited = [False] * (n + 1)\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        visited[u] = True\n        \n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n                \n    if len(order) != n:\n        print(\"-1\")\n        return\n    \n    \n    required_courses = set(main_courses)\n    \n    result = []\n    \n    for course in order:\n        if course in required_courses or all(dep in result for dep in dependencies[course-1]):\n            result.append(course)\n            if course in main_courses:\n                required_courses.remove(course)\n    \n    if len(required_courses) > 0:\n        print(\"-1\")\n        return\n    \n    print(len(result))\n    print(*result)\n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n    \n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n    \n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n    \n    p = p + remaining\n    \n    def is_stack_sortable(arr):\n        s = []\n        b = []\n        i = 0\n        \n        while i < len(arr) or len(s) > 0:\n            if len(arr) > i and (len(s) == 0 or arr[i] < s[-1]):\n                s.append(arr[i])\n                i += 1\n            elif len(s) > 0:\n                b.append(s.pop())\n            else:\n                return False\n        return all(b[i] <= b[i+1] for i in range(len(b)-1))\n    \n    import itertools\n    \n    \n    remaining_len = n - k\n    \n    possible_remaining = []\n\n    def find_lexicographically_largest_stack_sortable(current_p, remaining_nums):\n        if not remaining_nums:\n            if is_stack_sortable(current_p):\n                return current_p\n            else:\n                return None\n        \n        remaining_nums.sort(reverse=True)\n        \n        for i in range(len(remaining_nums)):\n            next_num = remaining_nums[i]\n            next_remaining_nums = remaining_nums[:i] + remaining_nums[i+1:]\n            \n            result = find_lexicographically_largest_stack_sortable(current_p + [next_num], next_remaining_nums)\n            if result:\n                return result\n        \n        return None\n    \n    remaining_nums = []\n    for i in range(1, n + 1):\n        if i not in p[:k]:\n            remaining_nums.append(i)\n    \n    \n    result = find_lexicographically_largest_stack_sortable(p[:k], remaining_nums)\n    \n    if result:\n        print(*result)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "15": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n\n  if c == 0:\n    if a == b:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n  else:\n    if (b - a) % c == 0 and (b - a) / c >= 0:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt3 == 0 or cnt1 == cnt4 and cnt1 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    t = []\n    u = \"\"\n    \n    suffix_min = [\"\"] * (n + 1)\n    suffix_min[n] = chr(ord('z') + 1) \n    \n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    i = 0\n    while i < n or t:\n        if not t:\n            if s[i] <= suffix_min[i+1]:\n                u += s[i]\n                i += 1\n            else:\n                t.append(s[i])\n                i += 1\n        else:\n            if i < n and suffix_min[i+1] < t[-1]:\n                if s[i] <= suffix_min[i+1]:\n                    u += s[i]\n                    i += 1\n                else:\n                    t.append(s[i])\n                    i += 1\n            else:\n                u += t.pop()\n    \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n    \n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            print(\"NO\")\n            return\n    \n    for i in range(1, n):\n        if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n            print(\"NO\")\n            return\n        if pairs[i][1] - pairs[i-1][1] > pairs[i][0] - pairs[i-1][0]:\n            print(\"NO\")\n            return\n    \n    print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n    \n    count = 0\n    while True:\n        h_str = str(hh).zfill(2)\n        m_str = str(mm).zfill(2)\n        \n        if h_str == m_str[::-1]:\n            print(count)\n            return\n        \n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        \n        count += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n  n = int(input())\n  a = list(map(int, input().split()))\n\n  min_idx = a.index(1)\n  max_idx = a.index(n)\n\n  ans = 0\n  for i in range(n):\n    temp_a = a[:]\n    temp_a[min_idx], temp_a[i] = temp_a[i], temp_a[min_idx]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n\n  for i in range(n):\n    temp_a = a[:]\n    temp_a[max_idx], temp_a[i] = temp_a[i], temp_a[max_idx]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n    \n  print(ans)\n\nsolve()\n```",
    "22": "```python\ndef solve():\n  s = input()\n  n = len(s)\n  \n  mirror = {\n    'b': 'd',\n    'd': 'b',\n    'p': 'q',\n    'q': 'p',\n    'o': 'o',\n    'x': 'x',\n    'X': 'X',\n    'H': 'H',\n    'I': 'I',\n    'M': 'M',\n    'O': 'O',\n    'T': 'T',\n    'U': 'U',\n    'V': 'V',\n    'v': 'v',\n    'W': 'W',\n    'w': 'w',\n    'Y': 'Y',\n    'A': 'A'\n  }\n  \n  is_s_palindrome = True\n  for i in range(n // 2):\n    if s[i] not in mirror or s[n - 1 - i] not in mirror or mirror.get(s[i]) != s[n - 1 - i]:\n      is_s_palindrome = False\n      break\n  \n  if n % 2 == 1:\n    if s[n // 2] not in mirror or mirror.get(s[n // 2]) != s[n // 2]:\n      is_s_palindrome = False\n      \n  if is_s_palindrome:\n    print(\"TAK\")\n  else:\n    print(\"NIE\")\n\nsolve()\n```",
    "23": "```python\ndef solve():\n    a = input()\n    b = input()\n\n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n\n    if len(a) > len(b):\n        print(\"\".join(a_digits))\n        return\n\n    def find_max_permutation(index, current_num, remaining_digits):\n        if index == len(a):\n            return current_num\n\n        best_num = \"\"\n        for digit in sorted(list(set(remaining_digits)), reverse=True):\n            temp_digits = remaining_digits[:]\n            temp_digits.remove(digit)\n            \n            if current_num + digit <= b[:index+1]:\n                next_num = find_max_permutation(index + 1, current_num + digit, temp_digits)\n                if next_num != \"\" and (best_num == \"\" or int(next_num) > int(best_num)):\n                    best_num = next_num\n                    \n        return best_num\n    \n    from collections import Counter\n    a_digits_list = list(a)\n    \n    counts = Counter(a_digits_list)\n\n    def find_max_permutation_optimized(index, current_num, remaining_counts):\n        if index == len(a):\n            return current_num\n\n        best_num = \"\"\n        for digit in sorted(list(remaining_counts.keys()), reverse=True):\n            if remaining_counts[digit] > 0:\n                temp_counts = remaining_counts.copy()\n                temp_counts[digit] -= 1\n                if temp_counts[digit] == 0:\n                    del temp_counts[digit]\n                \n                if current_num + digit <= b[:index+1]:\n                    next_num = find_max_permutation_optimized(index + 1, current_num + digit, temp_counts)\n                    if next_num != \"\" and (best_num == \"\" or int(next_num) > int(best_num)):\n                        best_num = next_num\n                    \n        return best_num\n\n    counts_dict = Counter(a)\n    result = find_max_permutation_optimized(0, \"\", counts_dict)\n\n    if result == \"\":\n        print(\"\".join(sorted(list(a), reverse=True)))\n    else:\n        print(result)\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(input())\n\n    def check_win(b):\n        for i in range(10):\n            for j in range(10):\n                if b[i][j] == 'X':\n                    # Check horizontal\n                    if j <= 5 and all(b[i][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check vertical\n                    if i <= 5 and all(b[i+k][j] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 5 and j <= 5 and all(b[i+k][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= 5 and j >= 4 and all(b[i+k][j-k] == 'X' for k in range(5)):\n                        return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                temp_board = [list(row) for row in board]\n                temp_board[i][j] = 'X'\n                temp_board = [\"\".join(row) for row in temp_board]\n                if check_win(temp_board):\n                    print(\"YES\")\n                    return\n\n    print(\"NO\")\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k > n * n:\n        print(\"-1\")\n        return\n\n    matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n\n    if k != 0:\n        print(\"-1\")\n    else:\n        for row in matrix:\n            print(*row)\n\nsolve()\n```",
    "26": "```python\nimport math\n\ndef solve():\n    x, y, z = map(float, input().split())\n\n    results = []\n    results.append((\"x^y^z\", x ** (y ** z)))\n    results.append((\"x^z^y\", x ** (z ** y)))\n    results.append((\"(x^y)^z\", (x ** y) ** z))\n    results.append((\"(x^z)^y\", (x ** z) ** y))\n    results.append((\"y^x^z\", y ** (x ** z)))\n    results.append((\"y^z^x\", y ** (z ** x)))\n    results.append((\"(y^x)^z\", (y ** x) ** z))\n    results.append((\"(y^z)^x\", (y ** z) ** x))\n    results.append((\"z^x^y\", z ** (x ** y)))\n    results.append((\"z^y^x\", z ** (y ** x)))\n    results.append((\"(z^x)^y\", (z ** x) ** y))\n    results.append((\"(z^y)^x\", (z ** y) ** x))\n\n    max_val = float('-inf')\n    max_expr = \"\"\n\n    for expr, val in results:\n        if val > max_val:\n            max_val = val\n            max_expr = expr\n\n    print(max_expr)\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s[:2*i].startswith(prefix):\n            \n            \n            \n            if s.startswith(prefix * (n // i)):\n                \n                if n % i == 0:\n                    ans = min(ans, i + 1)\n                else:\n                     ans = min(ans, i + 1 + (n % i))\n            else:\n                \n                k = 1\n                while prefix * k in s:\n                  k+=1\n                  if k*i > len(s):\n                    break\n                k-=1\n                \n                \n                if prefix * k == s[:i*k]:\n                    rem = s[i*k:]\n                    ans = min(ans, i + 1 + len(rem))\n                   \n        \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n    \n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n            \n    e = len(examples)\n    \n    moves = []\n    \n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            # Need to move examples[i][0] to i + 1\n            \n            # Check if i + 1 is already an example or regular\n            found = False\n            for j in range(n):\n                if files[j][0] == str(i+1):\n                    found = True\n                    break\n            \n            if found:\n                # Need a temporary move\n                temp_name = \"temp_\" + str(i+1)\n                \n                while True:\n                    found_temp = False\n                    for j in range(n):\n                        if files[j][0] == temp_name:\n                            found_temp = True\n                            break\n                    if not found_temp:\n                        break\n                    temp_name = \"temp_\" + temp_name\n                \n                moves.append(f\"move {files[i][0]} {temp_name}\")\n                files[examples[i][1]][0] = temp_name\n                \n                \n                for k in range(n):\n                    if files[k][0] == str(i+1):\n                        moves.append(f\"move {files[k][0]} {examples[i][0]}\")\n                        files[k][0] = examples[i][0]\n                        break\n                \n                moves.append(f\"move {temp_name} {str(i+1)}\")\n                files[examples[i][1]][0] = str(i+1)\n                \n            else:\n                moves.append(f\"move {files[i][0]} {str(i+1)}\")\n                files[examples[i][1]][0] = str(i+1)\n                \n    # Move regular tests to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            # Need to move regular[i][0] to e + i + 1\n            \n            # Check if e + i + 1 is already an example or regular\n            found = False\n            for j in range(n):\n                if files[j][0] == str(e + i + 1):\n                    found = True\n                    break\n            \n            if found:\n                # Need a temporary move\n                temp_name = \"temp_\" + str(e + i + 1)\n                \n                while True:\n                    found_temp = False\n                    for j in range(n):\n                        if files[j][0] == temp_name:\n                            found_temp = True\n                            break\n                    if not found_temp:\n                        break\n                    temp_name = \"temp_\" + temp_name\n                \n                moves.append(f\"move {files[e + i][0]} {temp_name}\")\n                files[regular[i][1]][0] = temp_name\n                \n                for k in range(n):\n                    if files[k][0] == str(e + i + 1):\n                        moves.append(f\"move {files[k][0]} {regular[i][0]}\")\n                        files[k][0] = regular[i][0]\n                        break\n                \n                moves.append(f\"move {temp_name} {str(e + i + 1)}\")\n                files[regular[i][1]][0] = str(e + i + 1)\n            else:\n                moves.append(f\"move {files[e + i][0]} {str(e + i + 1)}\")\n                files[regular[i][1]][0] = str(e + i + 1)\n    \n    print(len(moves))\n    for move in moves:\n        print(move)\n        \nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    digits = [int(c) for c in s]\n    \n    ans = 6\n    \n    for i in range(1000):\n        s1 = str(i).zfill(3)\n        sum1 = sum(int(c) for c in s1)\n        \n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            sum2 = sum(int(c) for c in s2)\n            \n            if sum1 == sum2:\n                \n                \n                temp_digits = [int(c) for c in list(s1 + s2)]\n                \n                diff = 0\n                for k in range(6):\n                    if digits[k] != temp_digits[k]:\n                        diff += 1\n                ans = min(ans, diff)\n    \n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    if k > mod:\n        print(0, 1)\n        return\n\n    numerator = 1\n    denominator = 1\n    power_of_2 = 0\n\n    for i in range(k):\n        if i == 0:\n            continue\n        numerator = (numerator * (pow(2, n, mod) - i + mod)) % mod\n        \n        power_of_2 += count_factors(i)\n\n    denominator = pow(pow(2, n, mod), k - 1, mod) % mod\n    \n    power_of_2_denominator = 0\n    if n < 63:\n      power_of_2_denominator = n * (k-1)\n    else:\n      power_of_2_denominator = 10**18\n\n    gcd_power_of_2 = min(power_of_2, power_of_2_denominator)\n    \n    \n    num_div_2 = 0\n    temp_num = numerator\n    \n    \n    den_div_2 = 0\n    temp_den = denominator\n    \n    \n    if gcd_power_of_2 > 0 and gcd_power_of_2 < 100:\n      \n      for _ in range(gcd_power_of_2):\n        temp_num = temp_num * pow(2, mod - 2, mod) % mod\n        temp_den = temp_den * pow(2, mod - 2, mod) % mod\n\n    \n    \n    \n    numerator = numerator * pow(pow(2, gcd_power_of_2, mod), mod-2, mod) % mod\n    denominator = denominator * pow(pow(2, gcd_power_of_2, mod), mod-2, mod) % mod\n    \n\n    a = (denominator - numerator + mod) % mod\n    b = denominator\n\n    print(a, b)\n\ndef count_factors(x):\n    count = 0\n    while x > 0 and x % 2 == 0:\n        count += 1\n        x //= 2\n    return count\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 to 20000, 0 is North Pole, 20000 is South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if current_pos == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n            \n        if direction == \"North\":\n            current_pos -= t\n            if current_pos < 0:\n                current_pos = 0\n        elif direction == \"South\":\n            current_pos += t\n            if current_pos > 20000:\n                current_pos = 20000\n        \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n    \n    g, x, y = extended_gcd(a1, a2)\n\n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    x *= (b2 - b1) // g\n    y *= (b2 - b1) // g\n\n    lcm = (a1 * a2) // g\n\n    k = x\n    l = -y\n\n    x0 = a1 * k + b1\n    \n    \n    def find_min_val(a1, b1, a2, b2, L, R):\n        first_val = max(b1, b2)\n        \n        if first_val > R:\n            return -1\n        \n        \n        g, x, y = extended_gcd(a1, a2)\n\n        if (b2 - b1) % g != 0:\n            return -1\n        \n        x *= (b2 - b1) // g\n        y *= (b2 - b1) // g\n        \n        lcm = (a1 * a2) // g\n        \n        x0 = a1 * x + b1\n        \n        if(x0 < max(b1,b2)):\n            diff = max(b1, b2) - x0\n            k = (diff + a1 -1)//a1\n            x0 += k * a1\n        \n        if(x0 < max(b1,b2)):\n             diff = max(b1, b2) - x0\n             k = (diff + a2 -1)//a2\n             x0 += k * a2\n        \n        \n        if x0 < L:\n            diff = L - x0\n            k = (diff + lcm - 1) // lcm\n            x0 += k * lcm\n\n        if x0 > R:\n            return -1\n        \n        return x0\n        \n    first_val = find_min_val(a1, a1, a2, a2, L, R)\n    \n    \n    if first_val == -1:\n        print(0)\n        return\n    \n    \n    g, x, y = extended_gcd(a1, a2)\n    lcm = (a1 * a2) // g\n    \n    \n    count = (R - first_val) // lcm + 1\n    \n    print(count)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        if i > a or n - i > b:\n            continue\n        \n        x = a // i\n        y = b // (n - i)\n        \n        ans = max(ans, min(x, y))\n    \n    print(ans)\n\nsolve()\n```",
    "35": null,
    "36": "```python\ndef solve():\n    n = int(input())\n    \n    if n == 0:\n        print(0, 0)\n        return\n    \n    l, r = 0, 10**9\n    k = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if 3 * mid * (mid + 1) >= n:\n            k = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n            \n    moves_in_prev_layers = 3 * (k - 1) * k if k > 0 else 0\n    remaining_moves = n - moves_in_prev_layers\n    \n    x, y = 2 * k, 0\n    \n    if remaining_moves <= k:\n        x -= 2 * (remaining_moves)\n    elif remaining_moves <= 2 * k:\n        x -= 2 * k\n        remaining_moves -= k\n        x += remaining_moves * (-1)\n        y += remaining_moves * 2\n        \n    elif remaining_moves <= 3 * k:\n        x -= k\n        y += 2 * k\n        remaining_moves -= 2 * k\n        x += remaining_moves * (-1)\n        \n    elif remaining_moves <= 4 * k:\n        x -= remaining_moves - 3 * k\n        y -= 2 * (remaining_moves - 3 * k)\n        x += k\n        y += 2 * k\n        remaining_moves -= 3 * k\n\n    elif remaining_moves <= 5 * k:\n        x += k\n        y -= 2*k\n        remaining_moves -= 4*k\n        x += remaining_moves\n        \n    else:\n        x += 2*k\n        remaining_moves -= 5*k\n        x += remaining_moves\n        y += remaining_moves * (-2)\n        y -= 2*k\n        \n\n    print(x, y)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  for i in range(c // a + 1):\n    remaining_damage = c - i * a\n    if remaining_damage >= 0 and remaining_damage % b == 0:\n      print(\"Yes\")\n      return\n  \n  print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for start_diff in range(l):\n        possible = True\n        for i in range(n):\n            kefa_dist = kefa[i]\n            sasha_dist = (sasha[0] + start_diff) % l\n            \n            found = False\n            for j in range(n):\n                if (sasha[j] + start_diff) % l == kefa[i]:\n                    found = True\n                    break\n            if not found:\n                possible = False\n                break\n        \n        if possible:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "39": null,
    "40": null,
    "41": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    distances = [0] * n\n    \n    for i in range(n):\n        min_dist = float('inf')\n        for j in range(n):\n            if a[j] == 0:\n                dist = abs(i - j)\n                min_dist = min(min_dist, dist)\n        distances[i] = min_dist\n    \n    print(*distances)\n\nsolve()\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    len_s = len(s)\n    \n    count = 0\n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    def angle(v):\n        x, y = v\n        return math.atan2(y, x)\n\n    angles = []\n    for i in range(n):\n        angles.append((angle(vectors[i]), i + 1))\n\n    angles.sort()\n\n    min_angle = float('inf')\n    best_pair = None\n\n    for i in range(n):\n        j = (i + 1) % n\n        angle1 = angles[i][0]\n        angle2 = angles[j][0]\n        \n        diff = angle2 - angle1\n        if diff < 0:\n            diff += 2 * math.pi\n\n        non_oriented_angle = min(diff, 2 * math.pi - diff)\n        \n        if non_oriented_angle < min_angle:\n            min_angle = non_oriented_angle\n            best_pair = (angles[i][1], angles[j][1])\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\ndef solve():\n  d, k, a, b, t = map(int, input().split())\n\n  if d <= k:\n    print(d * a)\n  else:\n    cost = k * a\n    remaining_distance = d - k\n    \n    if t + k * a < k * b:\n      num_breaks = remaining_distance // k\n      cost += num_breaks * (t + k * a)\n      remaining_distance %= k\n\n      if remaining_distance > 0:\n        cost += min(t + remaining_distance * a, remaining_distance * b)\n      print(cost)\n    else:\n      print(k * a + (d - k) * b)\n\nsolve()\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"-1\")\n        return\n\n    best_gcd = 0\n    best_seq = []\n\n    for gcd in range(int(n**0.5), 0, -1):\n        if n % gcd == 0:\n            \n            \n            def check(cur_gcd):\n              \n              rem = n // cur_gcd\n              if k * (k + 1) // 2 > rem:\n                  return False\n              \n              seq = [i for i in range(1, k)]\n              last = rem - sum(seq)\n              \n              if last <= seq[-1]:\n                return False\n              \n              return True\n\n            if check(gcd):\n                rem = n // gcd\n                seq = [i for i in range(1, k)]\n                last = rem - sum(seq)\n                \n                seq = [x * gcd for x in seq]\n                seq.append(last * gcd)\n                \n                print(*seq)\n                return\n            \n\n            def check2(cur_gcd):\n              rem = n // cur_gcd\n              if k * (k + 1) // 2 > rem:\n                  return False\n              \n              seq = [i for i in range(1, k)]\n              last = rem - sum(seq)\n              \n              if last <= seq[-1]:\n                return False\n              \n              return True\n\n            if check2(n // gcd):\n                rem = gcd\n                seq = [i for i in range(1, k)]\n                last = rem - sum(seq)\n                \n                seq = [x * (n // gcd) for x in seq]\n                seq.append(last * (n // gcd))\n                \n                print(*seq)\n                return\n\n    print(\"-1\")\n\nsolve()\n```",
    "46": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    count = 0\n    for x in range(1, n + 1):\n        for y in range(1, m + 1):\n            if (x + y) % 5 == 0:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "47": "```python\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_a = a[:]\n            for k in range(i, j):\n                temp_a[k] *= x\n            \n            max_so_far = 0\n            current_max = 0\n            for k in range(n):\n                current_max += temp_a[k]\n                if current_max < 0:\n                    current_max = 0\n                max_so_far = max(max_so_far, current_max)\n            ans = max(ans, max_so_far)\n\n    print(ans)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    low = 1\n    high = n * m\n    ans = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\nlength = 1\ncount = 9\nwhile k > length * count:\n    k -= length * count\n    length += 1\n    count *= 10\n\nnumber = 10**(length - 1) + (k - 1) // length\nindex = (k - 1) % length\n\nprint(str(number)[index])\n```",
    "50": null,
    "51": null,
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n    \n    def get_dp(row_idx, total_elements, current_rem):\n        if (row_idx, total_elements, current_rem) in dp:\n            return dp[(row_idx, total_elements, current_rem)]\n        \n        if row_idx == n:\n            if current_rem == 0:\n                return 0\n            else:\n                return float('-inf')\n\n        max_elements_per_row = m // 2\n        \n        row = a[row_idx]\n        row_dp = {}\n        \n        def get_row_dp(col_idx, elements_taken, row_rem):\n            if (col_idx, elements_taken, row_rem) in row_dp:\n                return row_dp[(col_idx, elements_taken, row_rem)]\n            \n            if col_idx == m:\n                if elements_taken <= max_elements_per_row:\n                    return 0\n                else:\n                    return float('-inf')\n            \n            ans = get_row_dp(col_idx + 1, elements_taken, row_rem)\n            \n            if elements_taken < max_elements_per_row:\n                new_rem = (row_rem + row[col_idx]) % k\n                ans = max(ans, row[col_idx] + get_row_dp(col_idx + 1, elements_taken + 1, new_rem))\n            \n            row_dp[(col_idx, elements_taken, row_rem)] = ans\n            return ans\n\n        max_row_sum = float('-inf')\n        for row_rem in range(k):\n            row_sum = get_row_dp(0, 0, row_rem)\n            if row_sum != float('-inf'):\n                new_rem = (current_rem + row_rem) % k\n                max_row_sum = max(max_row_sum, row_sum + get_dp(row_idx + 1, total_elements, new_rem))\n                \n        dp[(row_idx, total_elements, current_rem)] = max_row_sum\n        return max_row_sum\n\n    print(get_dp(0, 0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_seq, remaining_arr, moves):\n            nonlocal max_len, best_moves\n\n            if len(current_seq) > max_len:\n                max_len = len(current_seq)\n                best_moves = moves\n\n            if not remaining_arr:\n                return\n\n            if not current_seq:\n                # Take left\n                backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_val = current_seq[-1]\n                \n                # Take left\n                if remaining_arr[0] > last_val:\n                    backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                \n                # Take right\n                if remaining_arr[-1] > last_val:\n                    backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n        \n        backtrack([], arr, \"\")\n        return max_len, best_moves\n\n    if len(set(a)) == 1:\n        print(1)\n        print(\"R\")\n        return\n    \n    max_len, best_moves = find_longest_increasing_sequence(a)\n    print(max_len)\n    print(best_moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    for D in range(101):\n        for target in range(1, 101):\n            possible = True\n            for val in a:\n                if val == target:\n                    continue\n                elif val + D == target:\n                    continue\n                elif val - D == target:\n                    continue\n                else:\n                    possible = False\n                    break\n            if possible:\n                print(D)\n                return\n\n    print(-1)\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n    \n    white_area = (x2 - x1) * (y2 - y1)\n    \n    # Calculate intersection with first black sheet\n    ix1 = max(x1, x3)\n    iy1 = max(y1, y3)\n    ix2 = min(x2, x4)\n    iy2 = min(y2, y4)\n    \n    intersection1_area = 0\n    if ix1 < ix2 and iy1 < iy2:\n        intersection1_area = (ix2 - ix1) * (iy2 - iy1)\n    \n    # Calculate intersection with second black sheet\n    jx1 = max(x1, x5)\n    jy1 = max(y1, y5)\n    jx2 = min(x2, x6)\n    jy2 = min(y2, y6)\n    \n    intersection2_area = 0\n    if jx1 < jx2 and jy1 < jy2:\n        intersection2_area = (jx2 - jx1) * (jy2 - jy1)\n\n    # Calculate intersection of both black sheets with the white sheet\n    kx1 = max(ix1, x5)\n    ky1 = max(iy1, y5)\n    kx2 = min(ix2, x6)\n    ky2 = min(iy2, y6)\n\n    intersection12_area = 0\n    if kx1 < kx2 and ky1 < ky2:\n        intersection12_area = (kx2 - kx1) * (ky2 - ky1)\n    \n    covered_area = intersection1_area + intersection2_area - intersection12_area\n    \n    if white_area > covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "56": null,
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    givers = [i + 1 for i in range(n)]\n    receivers = [True] * (n + 1)\n    receivers[0] = False\n\n    for i in range(n):\n        if f[i] != 0:\n            receivers[f[i]] = False\n\n    available_receivers = []\n    for i in range(1, n + 1):\n        if receivers[i]:\n            available_receivers.append(i)\n    \n    unknown_givers_indices = []\n    for i in range(n):\n        if f[i] == 0:\n            unknown_givers_indices.append(i)\n\n    for i in range(len(unknown_givers_indices)):\n        f[unknown_givers_indices[i]] = available_receivers[i]\n\n    # Handle self-gifting\n    for i in range(n):\n        if f[i] == i + 1:\n            for j in range(n):\n                if i != j and f[j] != 0 and f[j] != j + 1:\n                  \n                  temp = f[i]\n                  f[i] = f[j]\n                  f[j] = temp\n                  break\n            else:\n                for j in range(n):\n                  if i != j and f[j] == 0:\n                    if i + 1 != available_receivers[unknown_givers_indices.index(j)] and j+1 != available_receivers[unknown_givers_indices.index(i)]:\n                      temp = f[i]\n                      f[i] = f[j]\n                      f[j] = temp\n                      break\n                else:\n                   \n                    for j in range(n):\n                       if j != i:\n                            temp = f[i]\n                            f[i] = f[j]\n                            f[j] = temp\n                            if f[i] == i + 1 or f[j] == j+1:\n                                temp = f[i]\n                                f[i] = f[j]\n                                f[j] = temp\n                            break\n\n\n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n  n, k = map(int, input().split())\n  a = list(map(int, input().split()))\n  \n  counts = {}\n  for x in a:\n    counts[x] = counts.get(x, 0) + 1\n  \n  for x in counts:\n    if counts[x] > k:\n      print(\"NO\")\n      return\n  \n  print(\"YES\")\n  colors = [0] * n\n  color_idx = 1\n  \n  colored_count = 0\n  \n  for i in range(n):\n    if counts[a[i]] > 0:\n      colors[i] = color_idx\n      counts[a[i]] -= 1\n      color_idx = (color_idx % k) + 1\n      colored_count += 1\n      \n      if colored_count == k:\n        break\n        \n  color_idx = 1\n  \n  for i in range(n):\n    if colors[i] == 0:\n      colors[i] = color_idx\n      color_idx = (color_idx % k) + 1\n  \n  print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - y - 1:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "60": null,
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    \n    a_list = [int(digit) for digit in a]\n    \n    best_a = a_list[:]\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a = a_list[:]\n            for k in range(i, j + 1):\n                temp_a[k] = f[a_list[k] - 1]\n            \n            if temp_a > best_a:\n                best_a = temp_a[:]\n                \n    print(\"\".join(map(str, best_a)))\n    \nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_abc = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            C1 = (c // B) * B\n            C2 = C1 + B\n            \n            if C1 > 0:\n                cost1 = abs(A - a) + abs(B - b) + abs(C1 - c)\n                if cost1 < best_cost:\n                    best_cost = cost1\n                    best_abc = (A, B, C1)\n            \n            if C2 > 0 and C2 <= 3*c:\n                cost2 = abs(A - a) + abs(B - b) + abs(C2 - c)\n                if cost2 < best_cost:\n                    best_cost = cost2\n                    best_abc = (A, B, C2)\n\n    print(best_cost)\n    print(*best_abc)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "63": null,
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c, i + 1))\n\n    schedule = [0] * n\n    exam_days = {}\n    for s, d, c, i in exams:\n        exam_days[d - 1] = i\n\n    for day in exam_days:\n        schedule[day] = m + 1\n\n    preparation_days = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            best_exam = -1\n            for s, d, c, i in exams:\n                exam_index = i - 1\n                if s - 1 <= day < d - 1 and preparation_days[exam_index] < c:\n                    if best_exam == -1:\n                        best_exam = exam_index\n                    else:\n                        s_best, d_best, c_best, i_best = exams[best_exam]\n                        if d < d_best:\n                            best_exam = exam_index\n            \n            if best_exam != -1:\n                schedule[day] = exams[best_exam][3]\n                preparation_days[best_exam] += 1\n\n    possible = True\n    for i in range(m):\n        if preparation_days[i] != exams[i][2]:\n            possible = False\n            break\n\n    if possible:\n        print(*schedule)\n    else:\n        print(-1)\n\nsolve()\n```",
    "65": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    if n == m:\n        print(0)\n        return\n    \n    if m % n != 0:\n        print(-1)\n        return\n    \n    k = m // n\n    \n    count = 0\n    while k % 2 == 0:\n        k //= 2\n        count += 1\n    \n    while k % 3 == 0:\n        k //= 3\n        count += 1\n        \n    if k != 1:\n        print(-1)\n    else:\n        print(count)\n        \nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n    \n    result = t + t[overlap:] * (k - 1)\n    print(result)\n\nsolve()\n```",
    "67": null,
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n\n    counts = [0] * (n + 1)\n    for i in range(n + 1):\n        counts[i] = dp[n][i]\n    \n    total_cost = 0\n    remaining_k = k\n    \n    for length in range(n, -1, -1):\n        num_subsequences = counts[length]\n        \n        if remaining_k <= 0:\n          break\n\n        if num_subsequences <= remaining_k:\n            total_cost += (n - length) * num_subsequences\n            remaining_k -= num_subsequences\n        else:\n            total_cost += (n - length) * remaining_k\n            remaining_k = 0\n            break\n    \n    if remaining_k > 0:\n        print(\"-1\")\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n\n    def check_degree(tree):\n        degree = 0\n        for u, v in tree:\n            if u == 1 or v == 1:\n                degree += 1\n        return degree\n\n    import itertools\n    for i in itertools.combinations(edges, n - 1):\n        tree = list(i)\n        \n        parent = list(range(n + 1))\n\n        def find(i):\n            if parent[i] == i:\n                return i\n            parent[i] = find(parent[i])\n            return parent[i]\n\n        def union(i, j):\n            root_i = find(i)\n            root_j = find(j)\n            if root_i != root_j:\n                parent[root_i] = root_j\n                return True\n            return False\n        \n        num_edges = 0\n        is_spanning = True\n        for u, v in tree:\n            if union(u, v):\n                num_edges += 1\n        \n        for j in range(1, n+1):\n            find(j)\n\n        num_components = len(set(parent[1:]))\n        if num_components > 1:\n            is_spanning = False\n        \n        if is_spanning and check_degree(tree) == d:\n            print(\"YES\")\n            for u, v in tree:\n                print(u, v)\n            return\n\n    print(\"NO\")\n\nsolve()\n\n```",
    "70": "```python\ndef solve():\n  h1, m1 = map(int, input().split(':'))\n  h2, m2 = map(int, input().split(':'))\n\n  start_minutes = h1 * 60 + m1\n  end_minutes = h2 * 60 + m2\n\n  total_minutes = end_minutes - start_minutes\n  midpoint_minutes = start_minutes + total_minutes // 2\n\n  h3 = midpoint_minutes // 60\n  m3 = midpoint_minutes % 60\n\n  print(\"{:02d}:{:02d}\".format(h3, m3))\n\nsolve()\n```",
    "71": "```python\ndef solve():\n  a = int(input())\n  \n  if a == 1:\n    print(0)\n    return\n    \n  ans = 0\n  curr = 2\n  while curr <= a:\n    curr *= 2\n    ans += 1\n  \n  print(ans)\n\nsolve()\n```",
    "72": null,
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n  n, k = map(int, input().split())\n  s = input()\n  \n  dp = [[0] * (n + 1) for _ in range(n + 1)]\n  dp[0][0] = 1\n  \n  for i in range(1, n + 1):\n    for j in range(i + 1):\n      dp[i][j] = dp[i-1][j]\n      if j > 0:\n        dp[i][j] += dp[i-1][j-1]\n        \n  counts = []\n  for i in range(n, -1, -1):\n      counts.append(dp[n][i])\n\n  total_cost = 0\n  \n  for i in range(len(counts)):\n    if k > counts[i]:\n        total_cost += counts[i] * (n - (len(counts) - 1 - i))\n        k -= counts[i]\n    else:\n        total_cost += k * (n - (len(counts) - 1 - i))\n        k = 0\n        break\n        \n  if k > 0:\n      print(\"-1\")\n  else:\n      print(total_cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    food_schedule = {\n        \"Monday\": \"fish\",\n        \"Tuesday\": \"rabbit\",\n        \"Wednesday\": \"chicken\",\n        \"Thursday\": \"fish\",\n        \"Friday\": \"chicken\",\n        \"Saturday\": \"rabbit\",\n        \"Sunday\": \"fish\"\n    }\n    \n    def calculate_days(start_day):\n        days = 0\n        a_temp, b_temp, c_temp = a, b, c\n        current_day_index = days_of_week.index(start_day)\n        \n        while True:\n            current_day = days_of_week[current_day_index % 7]\n            food_type = food_schedule[current_day]\n            \n            if food_type == \"fish\":\n                if a_temp > 0:\n                    a_temp -= 1\n                    days += 1\n                else:\n                    break\n            elif food_type == \"rabbit\":\n                if b_temp > 0:\n                    b_temp -= 1\n                    days += 1\n                else:\n                    break\n            else:\n                if c_temp > 0:\n                    c_temp -= 1\n                    days += 1\n                else:\n                    break\n            \n            current_day_index += 1\n        \n        return days\n\n    max_days = 0\n    for start_day in days_of_week:\n        max_days = max(max_days, calculate_days(start_day))\n    \n    print(max_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n  n, m = map(int, input().split())\n  tiles = []\n  for _ in range(n):\n    tiles.append([list(map(int, input().split())) for _ in range(2)])\n\n  if m % 2 != 0:\n    print(\"NO\")\n    return\n\n  found = False\n  for tile in tiles:\n    if tile[0][1] == tile[1][0]:\n      found = True\n      break\n\n  if found:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n  solve()\n```",
    "77": "```python\ndef solve():\n    n = int(input())\n    total_sum = n * (n + 1) // 2\n    if total_sum % 2 == 0:\n        print(0)\n    else:\n        print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    len_s = len(s)\n    mod = 10**9 + 7\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_sequences(n, s):\n        count = 0\n        for i in range(1 << (2 * n)):\n            seq = \"\"\n            for j in range(2 * n):\n                if (i >> j) & 1:\n                    seq += '('\n                else:\n                    seq += ')'\n            if is_regular(seq) and s in seq:\n                count += 1\n        return count % mod\n\n    print(count_regular_sequences(n, s))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    s = list(n)\n    l = len(s)\n    ans = float('inf')\n\n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        temp_s = s[:]\n        \n        # Find last digit of suffix\n        last_digit_index = -1\n        for i in range(l - 1, -1, -1):\n            if temp_s[i] == suffix[1]:\n                last_digit_index = i\n                break\n        \n        if last_digit_index == -1:\n            continue\n        \n        moves = 0\n        for i in range(last_digit_index, l - 1):\n            temp_s[i], temp_s[i+1] = temp_s[i+1], temp_s[i]\n            moves += 1\n        \n        # Find second to last digit of suffix\n        second_last_digit_index = -1\n        for i in range(l - 2, -1, -1):\n            if temp_s[i] == suffix[0]:\n                second_last_digit_index = i\n                break\n        \n        if second_last_digit_index == -1:\n            continue\n            \n        for i in range(second_last_digit_index, l - 2):\n            temp_s[i], temp_s[i+1] = temp_s[i+1], temp_s[i]\n            moves += 1\n\n        # Remove leading zeros\n        first_non_zero_index = -1\n        for i in range(l):\n            if temp_s[i] != '0':\n                first_non_zero_index = i\n                break\n\n        if first_non_zero_index == -1:\n            continue\n\n        moves += first_non_zero_index\n        \n        ans = min(ans, moves)\n    \n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def check(num_colors, coloring):\n        colored_chars = [[] for _ in range(num_colors)]\n        for i in range(n):\n            colored_chars[coloring[i] - 1].append(s[i])\n        \n        colored_chars = [''.join(sorted(chars)) for chars in colored_chars]\n        \n        merged_string = \"\"\n        for chars in colored_chars:\n            merged_string += chars\n        \n        if \"\".join(sorted(s)) == merged_string:\n            return True\n        else:\n            return False\n\n    for num_colors in range(1, n + 1):\n        \n        import itertools\n        \n        for coloring in itertools.product(range(1, num_colors + 1), repeat=n):\n            \n            if check(num_colors, list(coloring)):\n                print(num_colors)\n                print(*list(coloring))\n                return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    import itertools\n    for permutation in itertools.permutations(strings):\n        if check_order(list(permutation)):\n            print(\"YES\")\n            for s in permutation:\n                print(s)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "82": null,
    "83": "```python\ndef solve():\n  a, b = map(int, input().split())\n  total = a + b\n  \n  best_perimeter = float('inf')\n  \n  for h in range(1, int(total**0.5) + 2):\n    if total % h == 0:\n      w = total // h\n      \n      # Case 1: a forms a rectangle\n      for h_a in range(1, int(a**0.5) + 2):\n        if a % h_a == 0:\n          w_a = a // h_a\n          \n          if h_a <= h and w_a <= w:\n            best_perimeter = min(best_perimeter, 2 * (h + w))\n\n      # Case 2: b forms a rectangle\n      for h_b in range(1, int(b**0.5) + 2):\n        if b % h_b == 0:\n          w_b = b // h_b\n          \n          if h_b <= h and w_b <= w:\n            best_perimeter = min(best_perimeter, 2 * (h + w))\n            \n  print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += \"1\"\n            else:\n                coloring += \"0\"\n\n        s0 = \"\"\n        s1 = \"\"\n        for j in range(n):\n            if coloring[j] == '0':\n                s0 += s[j]\n            else:\n                s1 += s[j]\n\n        s0_sorted = \"\".join(sorted(s0))\n        s1_sorted = \"\".join(sorted(s1))\n\n        merged = \"\"\n        idx0 = 0\n        idx1 = 0\n        for j in range(n):\n            if coloring[j] == '0':\n                merged += s0_sorted[idx0]\n                idx0 += 1\n            else:\n                merged += s1_sorted[idx1]\n                idx1 += 1\n        \n        if \"\".join(sorted(s)) == merged:\n            print(\"YES\")\n            print(coloring)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n  a, b = map(int, input().split())\n\n  ans = -1\n  for price in range(1, 2001):\n    tax8 = int(price * 0.08)\n    tax10 = int(price * 0.10)\n    if tax8 == a and tax10 == b:\n      ans = price\n      break\n\n  print(ans)\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [0] * k\n    for i in range(k):\n        a[i] = i + 1\n\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k):\n        a[i] += remaining // k\n\n    remaining %= k\n\n    for i in range(k - 1, k - 1 - remaining, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if a[i+1] > 2 * a[i]:\n            diff = a[i+1] - 2 * a[i]\n            a[i+1] -= diff\n            a[k-1] += diff\n            \n    \n    possible = True\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2*a[i]):\n            possible = False\n            break\n    \n    if possible:\n        print(\"YES\")\n        print(*a)\n    else:\n        \n        a = [0] * k\n        \n        low = 1\n        high = n\n        \n        best_a = None\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            temp_a = [0] * k\n            temp_a[0] = mid\n            \n            possible = True\n            total_sum = mid\n            \n            for i in range(1, k):\n                next_val = temp_a[i-1] + 1\n                \n                if next_val > 2 * temp_a[i-1]:\n                    possible = False\n                    break\n                    \n                temp_a[i] = next_val\n                total_sum += temp_a[i]\n                \n            if possible:\n                if total_sum <= n:\n                    remaining = n - total_sum\n                    \n                    for i in range(k):\n                        temp_a[i] += remaining // k\n                    remaining %= k\n                    \n                    for i in range(k -1, k - 1 - remaining, -1):\n                        temp_a[i] += 1\n                    \n                    valid = True\n                    for i in range(k - 1):\n                        if not (temp_a[i] < temp_a[i+1] <= 2 * temp_a[i]):\n                            valid = False\n                            break\n                    \n                    if valid:\n                        best_a = temp_a\n                        low = mid + 1\n                    else:\n                        high = mid - 1\n                else:\n                    high = mid - 1\n            else:\n                high = mid - 1\n        \n        if best_a is not None:\n            print(\"YES\")\n            print(*best_a)\n        else:\n            print(\"NO\")\n            \nsolve()\n```",
    "87": null,
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def is_palindromic(mat):\n        for i in range(n):\n            for j in range(n):\n                if mat[i][j] != mat[n - 1 - i][j] or mat[i][j] != mat[i][n - 1 - j]:\n                    return False\n        return True\n    \n    def can_fill(row, col):\n        return row >= 0 and row < n and col >= 0 and col < n and matrix[row][col] == 0\n    \n    def backtrack(row, col):\n        if row >= (n + 1) // 2:\n            return is_palindromic(matrix)\n\n        if col >= (n + 1) // 2:\n            return backtrack(row + 1, 0)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                counts[num] -= 1\n\n                matrix[row][col] = num\n                matrix[n - 1 - row][col] = num\n                matrix[row][n - 1 - col] = num\n                matrix[n - 1 - row][n - 1 - col] = num\n\n                needed = 1\n                if row != n - 1 - row:\n                    needed += 1\n                if col != n - 1 - col:\n                    needed += 1\n                if row != n - 1 - row and col != n - 1 - col:\n                    needed += 1\n                \n                \n                if counts[num] >= needed - 1:\n                    \n                    if backtrack(row, col + 1):\n                        return True\n                    \n                matrix[row][col] = 0\n                matrix[n - 1 - row][col] = 0\n                matrix[row][n - 1 - col] = 0\n                matrix[n - 1 - row][n - 1 - col] = 0\n                \n                counts[num] += 1\n        return False\n    \n    if backtrack(0, 0):\n        print(\"YES\")\n        for row in matrix:\n            print(*row)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(order):\n        rating = r\n        for i in order:\n            a, b = projects[i]\n            if rating < a:\n                return False\n            rating += b\n            if rating < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if check(order):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n    \n    total_platform_length = sum(c)\n    min_empty_space = m - 1\n    \n    if n + 1 - (total_platform_length + min_empty_space + 1) > (d - 1) * (m + 1):\n        print(\"NO\")\n        return\n    \n    arr = [0] * n\n    \n    pos = 0\n    for i in range(m):\n        \n        needed_jump = 0\n        if i == 0:\n          needed_jump = 1\n        else:\n          needed_jump = 1\n\n        while pos < n and (n + 1 - pos - c[i]) > (d - 1) * (m - i):\n            pos += 1\n            \n        for j in range(c[i]):\n            arr[pos] = i + 1\n            pos += 1\n    \n    print(\"YES\")\n    print(*arr)\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            k = 0\n            l = 0\n            while k < len(temp_s) and l < m:\n                if temp_s[k] == t[l]:\n                    l += 1\n                k += 1\n            \n            if l == m:\n                ans = max(ans, j - i)\n    \n    print(ans)\n\nsolve()\n```",
    "92": "```python\nx = float(input())\n\na = int((x * 10) // 1)\nb = int((x * 10) % 1 * 10)\n\nprint(a, b)\n```",
    "93": "```python\ndef solve():\n  n, d, k = map(int, input().split())\n\n  if d >= n:\n    print(\"NO\")\n    return\n\n  if d == 1 and n > 2:\n    if k < 2:\n      print(\"NO\")\n      return\n  elif k == 1 and d > 1:\n    print(\"NO\")\n    return\n  \n  if k == 1 and d != 1:\n    print(\"NO\")\n    return\n  \n  if n == 1 and d > 0:\n    print(\"NO\")\n    return\n  \n  if n == 1 and d == 0:\n      print(\"YES\")\n      return\n\n  edges = []\n  \n  # Create a path of length d\n  for i in range(d):\n    edges.append((i + 1, i + 2))\n  \n  remaining_nodes = n - d - 1\n  \n  if remaining_nodes < 0:\n    print(\"NO\")\n    return\n  \n  degrees = [0] * (n + 1)\n  for u, v in edges:\n    degrees[u] += 1\n    degrees[v] += 1\n\n  current_node = d + 2\n  \n  \n  for i in range(1, d + 2):\n    while degrees[i] < k and remaining_nodes > 0:\n      edges.append((i, current_node))\n      degrees[i] += 1\n      degrees[current_node] += 1\n      current_node += 1\n      remaining_nodes -= 1\n\n  if remaining_nodes > 0:\n      print(\"NO\")\n      return\n\n  if len(edges) != n - 1:\n    print(\"NO\")\n    return\n  \n  print(\"YES\")\n  for u, v in edges:\n    print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n\n    def construct_string(start_with_one):\n        s = \"\"\n        if start_with_one:\n            s += \"1\"\n            b -= 1\n        else:\n            s += \"0\"\n            a -= 1\n        \n        switches = 0\n        last_digit = s[-1]\n        \n        while a > 0 or b > 0:\n            if last_digit == '0':\n                if b > 0 and switches < x:\n                    s += '1'\n                    b -= 1\n                    switches += 1\n                    last_digit = '1'\n                else:\n                    s += '0'\n                    a -= 1\n                    last_digit = '0'\n            else:\n                if a > 0 and switches < x:\n                    s += '0'\n                    a -= 1\n                    switches += 1\n                    last_digit = '0'\n                else:\n                    s += '1'\n                    b -= 1\n                    last_digit = '1'\n        return s\n\n    if a > b:\n        ans = construct_string(False)\n    else:\n        ans = construct_string(True)\n\n    count = 0\n    for i in range(len(ans) - 1):\n        if ans[i] != ans[i+1]:\n            count += 1\n    \n    print(ans)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    chars = ['a', 'b', 'c']\n\n    import itertools\n    for perm in itertools.permutations(chars):\n        res = \"\"\n        \n        \n        res1 = \"\"\n        for _ in range(n):\n            res1 += perm[0]\n        for _ in range(n):\n            res1 += perm[1]\n        for _ in range(n):\n            res1 += perm[2]\n\n        \n        is_valid1 = True\n        if s in res1 or t in res1:\n            is_valid1 = False\n            \n            \n        if is_valid1:\n            print(\"YES\")\n            print(res1)\n            return\n\n        res2 = \"\"\n\n        for _ in range(n):\n            res2 += perm[0]\n        for _ in range(n):\n            res2 += perm[2]\n        for _ in range(n):\n            res2 += perm[1]\n            \n        is_valid2 = True\n        if s in res2 or t in res2:\n            is_valid2 = False\n            \n        if is_valid2:\n            print(\"YES\")\n            print(res2)\n            return\n            \n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    def check_permutation(p):\n        if len(p) != n:\n            return False\n        if len(set(p)) != n:\n            return False\n        for x in p:\n            if not (1 <= x <= n):\n                return False\n        return True\n\n    def find_permutation():\n        for first_element in range(1, n + 1):\n            p = [first_element]\n            valid = True\n            for i in range(n - 1):\n                next_element = p[-1] + q[i]\n                p.append(next_element)\n            \n            if check_permutation(p):\n                if len(set(p)) == n and all(1 <= x <= n for x in p):\n                    return p\n        return None\n\n    result = find_permutation()\n\n    if result is None:\n        print(\"-1\")\n    else:\n        print(*result)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n  n = int(input())\n  x = list(map(int, input().split()))\n\n  min_cost = float('inf')\n\n  for target in range(1, 101):\n    cost = 0\n    for i in range(n):\n      diff = abs(x[i] - target)\n      cost += diff % 2\n    min_cost = min(min_cost, cost)\n  \n  even_count = 0\n  odd_count = 0\n  for val in x:\n    if val % 2 == 0:\n      even_count += 1\n    else:\n      odd_count += 1\n  \n  min_cost = min(min_cost, min(even_count, odd_count))\n  \n  \n  print(min_cost)\n\nsolve()\n```",
    "98": "```python\ndef solve():\n  n = int(input())\n  \n  best_moves = float('inf')\n  \n  for i in range(1, int(n**0.5) + 2):\n    if n % i == 0:\n      j = n // i\n      moves = (i - 1) + (j - 1)\n      best_moves = min(best_moves, moves)\n      \n  print(best_moves)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n  n = int(input())\n  a1, a2, a3 = map(int, input().split())\n  b1, b2, b3 = map(int, input().split())\n\n  min_wins = max(0, a1 - (b1 + b3) , a2 - (b2 + b1), a3 - (b3 + b2))\n  \n  max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n  \n  print(min_wins, max_wins)\n\nsolve()\n```"
}