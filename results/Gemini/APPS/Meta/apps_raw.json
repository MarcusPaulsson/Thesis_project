{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n    \n    if first_bracket == -1:\n        print(-1)\n        return\n    \n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n    \n    if last_bracket == -1 or last_bracket <= first_bracket:\n        print(-1)\n        return\n    \n    first_colon = -1\n    for i in range(first_bracket + 1, n):\n        if s[i] == ':':\n            first_colon = i\n            break\n    \n    if first_colon == -1 or first_colon >= last_bracket:\n        print(-1)\n        return\n    \n    second_colon = -1\n    for i in range(last_bracket - 1, -1, -1):\n        if s[i] == ':':\n            second_colon = i\n            break\n            \n    if second_colon == -1 or second_colon <= first_colon:\n        print(-1)\n        return\n    \n\n    count = 0\n    for i in range(first_colon + 1, second_colon):\n        if s[i] == '|':\n            count += 1\n            \n    print(4 + count)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    \n    best_num = x\n    best_sum = sum_digits(x)\n    \n    s = str(x)\n    n = len(s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0:\n            current_sum = sum_digits(num)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_num = num\n            elif current_sum == best_sum and num > best_num:\n                best_num = num\n                \n    print(best_num)\n\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n\nsolve()\n```",
    "2": "```python\ndef solve():\n  n = int(input())\n  s = str(n)\n  l = len(s)\n  \n  first_digit = int(s[0])\n  \n  next_lucky = (first_digit + 1) * (10**(l-1))\n  \n  print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n, q = map(int, input().split())\n    painters = []\n    for _ in range(q):\n        l, r = map(int, input().split())\n        painters.append((l, r))\n\n    max_painted = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            \n            chosen_painters = []\n            for k in range(q):\n                if k != i and k != j:\n                    chosen_painters.append(painters[k])\n\n            painted_sections = [0] * (n + 1)\n            for l, r in chosen_painters:\n                for section in range(l, r + 1):\n                    painted_sections[section] = 1\n\n            max_painted = max(max_painted, sum(painted_sections))\n\n    print(max_painted)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    x = int(input())\n    hh, mm = map(int, input().split())\n\n    def is_lucky(h, m):\n        return '7' in str(h) or '7' in str(m)\n    \n    count = 0\n    h = hh\n    m = mm\n    \n    while True:\n        if is_lucky(h, m):\n            print(count)\n            return\n        \n        m -= x\n        if m < 0:\n            m += 60\n            h -= 1\n            if h < 0:\n                h += 24\n        \n        count += 1\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(tuple(map(int, input().split())))\n\n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n\n    if max_damage >= x:\n        print(1)\n        return\n\n    max_diff = 0\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_damage\n    \n    ans = 1 + (remaining + max_diff - 1) // max_diff\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    left = 0\n    right = 2 * 10**9 \n\n    ans = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        \n        total_sparrows = mid * (mid + 1) // 2\n        \n        \n        \n        full_barns = (total_sparrows - n + (n + m - 1)) // (n + m) if total_sparrows > n else 0\n       \n\n        \n        remaining_grains = n + full_barns * m - total_sparrows\n        \n        if remaining_grains <= 0:\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    print(ans)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n    \n    def count_left(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        min_x = min(x1, x2)\n        min_y = min(y1, y2)\n        max_y = max(y1, y2)\n        \n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            min_x_other = min(x1_other, x2_other)\n            min_y_other = min(y1_other, y2_other)\n            max_y_other = max(y1_other, y2_other)\n            \n            if min_x_other < min_x:\n                count += 1\n        return count\n\n    def count_right(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        max_x = max(x1, x2)\n        min_y = min(y1, y2)\n        max_y = max(y1, y2)\n        \n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            max_x_other = max(x1_other, x2_other)\n            min_y_other = min(y1_other, y2_other)\n            max_y_other = max(y1_other, y2_other)\n            \n            if max_x_other > max_x:\n                count += 1\n        return count\n\n    def count_top(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        min_y = min(y1, y2)\n        min_x = min(x1, x2)\n        max_x = max(x1, x2)\n        \n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            min_y_other = min(y1_other, y2_other)\n            min_x_other = min(x1_other, x2_other)\n            max_x_other = max(x1_other, x2_other)\n            \n            if min_y_other < min_y:\n                count += 1\n        return count\n\n    def count_bottom(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        max_y = max(y1, y2)\n        min_x = min(x1, x2)\n        max_x = max(x1, x2)\n        \n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            max_y_other = max(y1_other, y2_other)\n            min_x_other = min(x1_other, x2_other)\n            max_x_other = max(x1_other, x2_other)\n            \n            if max_y_other > max_y:\n                count += 1\n        return count\n\n    for i in range(d):\n        if (count_left(i) == cnt_l and\n            count_right(i) == cnt_r and\n            count_top(i) == cnt_t and\n            count_bottom(i) == cnt_b):\n            print(i + 1)\n            return\n    \n    print(\"-1\")\n\nsolve()\n```",
    "10": "```python\ndef solve():\n    n = int(input())\n    \n    min_days_off = (n // 7) * 2\n    max_days_off = (n // 7) * 2\n    \n    remaining_days = n % 7\n    \n    if remaining_days == 1:\n        min_days_off += 0\n        max_days_off += 1\n    elif remaining_days == 2:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 3:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 4:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 5:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 6:\n        min_days_off += 1\n        max_days_off += 2\n    \n    print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef solve():\n    n, a, b, p, q = map(int, input().split())\n    \n    red_count = n // a\n    blue_count = n // b\n    both_count = n // lcm(a, b)\n    \n    if p > q:\n        result = red_count * p + (blue_count - both_count) * q\n    else:\n        result = blue_count * q + (red_count - both_count) * p\n        \n    print(result)\n\nsolve()\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    golds = s.count('G')\n    \n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            temp = list(s)\n            temp[i], temp[j] = temp[j], temp[i]\n            temp_str = \"\".join(temp)\n            \n            current_len = 0\n            max_current_len = 0\n            for k in range(n):\n                if temp_str[k] == 'G':\n                    current_len += 1\n                else:\n                    max_current_len = max(max_current_len, current_len)\n                    current_len = 0\n            max_current_len = max(max_current_len, current_len)\n            \n            max_len = max(max_len, max_current_len)\n    \n    current_len = 0\n    max_current_len = 0\n    for k in range(n):\n        if s[k] == 'G':\n            current_len += 1\n        else:\n            max_current_len = max(max_current_len, current_len)\n            current_len = 0\n    max_current_len = max(max_current_len, current_len)\n\n    max_len = max(max_len, max_current_len)\n    \n    if golds == 0:\n        print(0)\n        return\n    \n    if golds == n:\n        print(n)\n        return\n\n    best_len = 0\n    for i in range(n):\n        for j in range(n):\n            temp = list(s)\n            temp[i], temp[j] = temp[j], temp[i]\n            \n            curr_len = 0\n            max_curr_len = 0\n            for k in range(n):\n                if temp[k] == 'G':\n                    curr_len += 1\n                else:\n                    max_curr_len = max(max_curr_len, curr_len)\n                    curr_len = 0\n            max_curr_len = max(max_curr_len, curr_len)\n            \n            best_len = max(best_len,min(max_curr_len, golds))\n\n    print(best_len)\n\nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    in_degree = [0] * n\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep - 1].append(i)\n            in_degree[i] += 1\n\n    q = deque()\n    for i in range(n):\n        if in_degree[i] == 0:\n            q.append(i)\n\n    result = []\n    count = 0\n    \n    necessary = [False] * n\n    for course in main_courses:\n        necessary[course - 1] = True\n\n    \n    q_necessary = deque()\n    for i in range(n):\n      if necessary[i] and in_degree[i] == 0:\n        q_necessary.append(i)\n    \n    visited = [False] * n\n    \n    def bfs(start_nodes):\n      nonlocal count\n      q_local = deque(start_nodes)\n      \n      while q_local:\n        u = q_local.popleft()\n        \n        if visited[u]:\n          continue\n        visited[u] = True\n        \n        result.append(u + 1)\n        count += 1\n        \n        for v in adj[u]:\n          in_degree[v] -= 1\n          if in_degree[v] == 0:\n            q_local.append(v)\n    \n    \n    bfs([i for i in range(n) if in_degree[i] == 0 and i not in [course -1 for course in main_courses]])\n    \n    \n    \n    def find_necessary_dependencies(course_index, visited_local):\n      deps = []\n      for i in range(n):\n        for dep in dependencies[i]:\n          if dep - 1 == course_index:\n            deps.append(i)\n      return deps\n    \n    \n    \n    def bfs_necessary(start_nodes):\n      nonlocal count\n      q_local = deque(start_nodes)\n      \n      while q_local:\n        u = q_local.popleft()\n        \n        if visited[u]:\n          continue\n        visited[u] = True\n        \n        result.append(u + 1)\n        count += 1\n        \n        for v in adj[u]:\n          in_degree[v] -= 1\n          if in_degree[v] == 0:\n            q_local.append(v)\n            \n    \n    start_nodes_necessary = []\n    for course in main_courses:\n      node_index = course - 1\n      q = deque([node_index])\n      visited_local = [False] * n\n      \n      while q:\n        curr = q.popleft()\n        if visited_local[curr]:\n          continue\n        \n        visited_local[curr] = True\n        \n        if in_degree[curr] != 0:\n          start_nodes_necessary.append(curr)\n        else:\n          start_nodes_necessary.append(curr)\n          \n        for dep in dependencies[curr]:\n              if not visited_local[dep - 1]:\n                q.append(dep - 1)\n    \n    start_nodes_necessary = list(set(start_nodes_necessary))\n    \n    \n    bfs_necessary([i for i in range(n) if necessary[i] and i not in [course - 1 for course in main_courses] and in_degree[i] == 0 and i in start_nodes_necessary])\n    bfs_necessary([i for i in range(n) if i in [course - 1 for course in main_courses] and in_degree[i] == 0 and i in start_nodes_necessary])\n    \n\n    \n    \n    if len(result) < len(set(main_courses)):\n      print(\"-1\")\n      return\n    \n    \n    for course in main_courses:\n      if course not in result:\n        print(\"-1\")\n        return\n        \n    if count < len(set(main_courses)):\n      print(\"-1\")\n      return\n\n    if count < len(main_courses):\n      print(\"-1\")\n      return\n\n    \n    \n    \n    visited_all = [False] * n\n    \n    def bfs_check(start_nodes):\n      q_local = deque(start_nodes)\n      \n      while q_local:\n        u = q_local.popleft()\n        \n        if visited_all[u]:\n          continue\n        visited_all[u] = True\n        \n        for v in adj[u]:\n          q_local.append(v)\n          \n    bfs_check([i for i in range(n) if in_degree[i] == 0])\n    \n    for course in main_courses:\n      if not visited_all[course - 1]:\n        print(\"-1\")\n        return\n\n    print(len(result))\n    print(*result)\n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n\n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n\n    p_full = p[:]\n    for x in remaining:\n        p_full.append(x)\n\n    def is_stack_sortable(arr):\n        s = []\n        b = []\n        a = arr[:]\n        \n        i = 0\n        while i < 2 * n:\n            if len(a) > 0 and (len(s) == 0 or a[0] < (s[-1])):\n                s.append(a[0])\n                a.pop(0)\n                i += 1\n            elif len(s) > 0:\n                b.append(s[-1])\n                s.pop()\n                i += 1\n            else:\n                break\n\n        if len(s) == 0 and len(a) == 0:\n            for i in range(len(b) - 1):\n                if b[i] > b[i+1]:\n                    return False\n            return True\n        else:\n            return False\n\n    if not is_stack_sortable(p_full):\n        print(\"-1\")\n        return\n\n    \n    def generate_permutations(arr, k):\n        \n        used_nums = set(arr[:k])\n        nums_to_fill = []\n        for i in range(1, n + 1):\n            if i not in used_nums:\n                nums_to_fill.append(i)\n        nums_to_fill.sort(reverse=True)\n\n        \n        def backtrack(index, current_permutation):\n            if index == n:\n                return current_permutation[:]\n            \n            if index < k:\n                return backtrack(index + 1, current_permutation)\n\n            \n            for num in nums_to_fill:\n                if num not in current_permutation:\n                    current_permutation.append(num)\n                    \n                    new_nums_to_fill = nums_to_fill[:]\n                    new_nums_to_fill.remove(num)\n                    \n                    temp_result = backtrack(index + 1, current_permutation)\n                    if temp_result:\n                        return temp_result\n                    \n                    current_permutation.pop()\n            return None\n\n        result = backtrack(0, arr[:k])\n        return result\n\n    \n    lexicographically_max_permutation = generate_permutations(p[:], k)\n\n    if lexicographically_max_permutation:\n        if is_stack_sortable(lexicographically_max_permutation):\n            print(*lexicographically_max_permutation)\n        else:\n            print(\"-1\")\n    else:\n        print(\"-1\")\n\n\nsolve()\n```",
    "15": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  if c == 0:\n    if a == b:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n  else:\n    if (b - a) % c == 0 and (b - a) / c >= 0:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt1 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    t = []\n    u = \"\"\n    \n    suffix_min = [\"\"] * (n + 1)\n    suffix_min[n] = chr(ord('z') + 1)\n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    for i in range(n):\n        while t and t[-1] <= suffix_min[i]:\n            u += t.pop()\n        t.append(s[i])\n        \n    while t:\n        u += t.pop()\n        \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n    \n    possible = True\n    \n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n    \n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n  s = input()\n  hh = int(s[:2])\n  mm = int(s[3:])\n  \n  ans = 0\n  while True:\n    h_str = str(hh).zfill(2)\n    m_str = str(mm).zfill(2)\n    \n    if h_str == m_str[::-1]:\n      print(ans)\n      return\n    \n    mm += 1\n    if mm == 60:\n      mm = 0\n      hh += 1\n      if hh == 24:\n        hh = 0\n    \n    ans += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    pos_min = a.index(1)\n    pos_max = a.index(n)\n\n    ans = 0\n    \n    # Try swapping min with first element\n    temp_a = a[:]\n    temp_a[0], temp_a[pos_min] = temp_a[pos_min], temp_a[0]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n    \n    # Try swapping min with last element\n    temp_a = a[:]\n    temp_a[-1], temp_a[pos_min] = temp_a[pos_min], temp_a[-1]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n    \n    # Try swapping max with first element\n    temp_a = a[:]\n    temp_a[0], temp_a[pos_max] = temp_a[pos_max], temp_a[0]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n    \n    # Try swapping max with last element\n    temp_a = a[:]\n    temp_a[-1], temp_a[pos_max] = temp_a[pos_max], temp_a[-1]\n    ans = max(ans, abs(temp_a.index(1) - temp_a.index(n)))\n    \n    print(ans)\nsolve()\n```",
    "22": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    mirrors = {\n        'b': 'd',\n        'd': 'b',\n        'p': 'q',\n        'q': 'p',\n        'o': 'o',\n        'x': 'x',\n        'X': 'X',\n        'H': 'H',\n        'I': 'I',\n        'M': 'M',\n        'O': 'O',\n        'T': 'T',\n        'U': 'U',\n        'V': 'V',\n        'v': 'v',\n        'W': 'W',\n        'w': 'w',\n        'Y': 'Y',\n        'y': 'y',\n        'A': 'A',\n    }\n    \n    for i in range((n + 1) // 2):\n        if s[i] not in mirrors or mirrors[s[i]] != s[n - 1 - i]:\n            print(\"NIE\")\n            return\n    print(\"TAK\")\n\nsolve()\n```",
    "23": "```python\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    def find_max_permutation(index, current_num, remaining_digits):\n        if index == len(a):\n            return current_num\n        \n        best_num = \"\"\n        \n        for i in range(len(remaining_digits)):\n            digit = remaining_digits[i]\n            \n            if int(current_num + digit) <= int(b[:index+1]):\n                new_num = current_num + digit\n                new_remaining = remaining_digits[:i] + remaining_digits[i+1:]\n                \n                if int(new_num) > int(b[:index+1]):\n                    continue\n                \n                result = find_max_permutation(index + 1, new_num, new_remaining)\n                \n                if result != \"\" and (best_num == \"\" or int(result) > int(best_num)):\n                    best_num = result\n        \n        return best_num\n\n    import collections\n    a_counts = collections.Counter(a)\n    \n    \n    if len(a) > len(b):\n        print(\"\".join(sorted(a, reverse=True)))\n        return\n    \n    \n    \n    \n    def find_permutation(index, current_num, remaining_counts):\n        if index == len(a):\n            return current_num\n        \n        best_num = \"\"\n        \n        for digit in sorted(remaining_counts.keys(), reverse=True):\n            if remaining_counts[digit] > 0:\n                new_num = current_num + digit\n                \n                if int(new_num) <= int(b[:index+1]):\n                    new_counts = remaining_counts.copy()\n                    new_counts[digit] -= 1\n                    if new_counts[digit] == 0:\n                        del new_counts[digit]\n                    \n                    result = find_permutation(index + 1, new_num, new_counts)\n                    \n                    if result != \"\" and (best_num == \"\" or int(result) > int(best_num)):\n                        best_num = result\n        \n        return best_num\n\n    \n    a_counts = collections.Counter(a)\n    result = find_permutation(0, \"\", a_counts)\n    \n    print(result)\n    \n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(input())\n\n    def check_win(b):\n        for i in range(10):\n            for j in range(10):\n                if b[i][j] == 'X':\n                    # Check horizontal\n                    if j <= 5:\n                        count = 0\n                        for k in range(5):\n                            if b[i][j+k] == 'X':\n                                count += 1\n                        if count == 5:\n                            return True\n\n                    # Check vertical\n                    if i <= 5:\n                        count = 0\n                        for k in range(5):\n                            if b[i+k][j] == 'X':\n                                count += 1\n                        if count == 5:\n                            return True\n\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 5 and j <= 5:\n                        count = 0\n                        for k in range(5):\n                            if b[i+k][j+k] == 'X':\n                                count += 1\n                        if count == 5:\n                            return True\n\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= 5 and j >= 4:\n                        count = 0\n                        for k in range(5):\n                            if b[i+k][j-k] == 'X':\n                                count += 1\n                        if count == 5:\n                            return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                temp_board = [list(row) for row in board]\n                temp_board[i][j] = 'X'\n                temp_board = [\"\".join(row) for row in temp_board]\n                if check_win(temp_board):\n                    print(\"YES\")\n                    return\n\n    print(\"NO\")\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k > n * n:\n        print(\"-1\")\n        return\n\n    matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n\n    if k > 0:\n        print(\"-1\")\n        return\n\n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\ndef solve():\n    x, y, z = map(float, input().split())\n\n    a1 = x**(y**z)\n    a2 = x**(z**y)\n    a3 = (x**y)**z\n    a4 = (x**z)**y\n    a5 = y**(x**z)\n    a6 = y**(z**x)\n    a7 = (y**x)**z\n    a8 = (y**z)**x\n    a9 = z**(x**y)\n    a10 = z**(y**x)\n    a11 = (z**x)**y\n    a12 = (z**y)**x\n\n    values = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\n    \n    max_val = max(values)\n    max_index = values.index(max_val)\n\n    if max_index == 0:\n        print(\"x^y^z\")\n    elif max_index == 1:\n        print(\"x^z^y\")\n    elif max_index == 2:\n        print(\"(x^y)^z\")\n    elif max_index == 3:\n        print(\"(x^z)^y\")\n    elif max_index == 4:\n        print(\"y^x^z\")\n    elif max_index == 5:\n        print(\"y^z^x\")\n    elif max_index == 6:\n        print(\"(y^x)^z\")\n    elif max_index == 7:\n        print(\"(y^z)^x\")\n    elif max_index == 8:\n        print(\"z^x^y\")\n    elif max_index == 9:\n        print(\"z^y^x\")\n    elif max_index == 10:\n        print(\"(z^x)^y\")\n    elif max_index == 11:\n        print(\"(z^y)^x\")\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        \n        if s[:2*i] == prefix + prefix:\n          ans = min(ans, i + 1 + (n - 2*i))\n        elif s.startswith(prefix):\n            \n            if n >= i and s[:i] == prefix:\n                \n                \n                \n                \n                if n > i and s[i:2*i] == prefix and 2*i <= n:\n                    ans = min(ans, i + 1 + (n - 2*i))\n                else:\n                    \n                    \n                    pass\n            \n            \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n    \n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n    \n    e = len(examples)\n    \n    moves = []\n    \n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            if any(f[0] == str(i + 1) for f in files):\n                # Need a temporary file\n                temp_name = \"temp_\" + str(i)\n                while any(f[0] == temp_name for f in files):\n                    temp_name = \"temp_\" + temp_name\n                moves.append(f\"move {examples[i][0]} {temp_name}\")\n                \n                target_idx = -1\n                for j in range(n):\n                    if files[j][0] == str(i+1):\n                        target_idx = j\n                        break\n                \n                moves.append(f\"move {str(i + 1)} {examples[i][0]}\")\n                moves.append(f\"move {temp_name} {str(i + 1)}\")\n            else:\n                moves.append(f\"move {examples[i][0]} {str(i + 1)}\")\n                \n    \n    # Move regular tests to e + 1, e + 2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            if any(f[0] == str(e + i + 1) for f in files):\n                # Need a temporary file\n                temp_name = \"temp_reg_\" + str(i)\n                while any(f[0] == temp_name for f in files):\n                    temp_name = \"temp_reg_\" + temp_name\n                    \n                moves.append(f\"move {regular[i][0]} {temp_name}\")\n                \n                target_idx = -1\n                for j in range(n):\n                    if files[j][0] == str(e + i + 1):\n                        target_idx = j\n                        break\n                \n                moves.append(f\"move {str(e + i + 1)} {regular[i][0]}\")\n                moves.append(f\"move {temp_name} {str(e + i + 1)}\")\n            else:\n                moves.append(f\"move {regular[i][0]} {str(e + i + 1)}\")\n    \n    print(len(moves))\n    for move in moves:\n        print(move)\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    ans = 6\n    for i in range(1000):\n        s1 = str(i).zfill(3)\n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            if sum(int(d) for d in s1) == sum(int(d) for d in s2):\n                cnt = 0\n                temp = list(s)\n                temp[0] = s1[0]\n                temp[1] = s1[1]\n                temp[2] = s1[2]\n                temp[3] = s2[0]\n                temp[4] = s2[1]\n                temp[5] = s2[2]\n                for k in range(6):\n                    if s[k] != temp[k]:\n                        cnt+=1\n                ans = min(ans,cnt)\n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n > 60 and k > mod:\n        print(0, 1)\n        return\n\n    if k > (1 << min(n, 60)):\n        print(1, 1)\n        return\n\n    total_days = pow(2, n, mod)\n    \n    if k > mod:\n      num = 0\n      den = 1\n    else:\n      num = 1\n      for i in range(k):\n          num = (num * (total_days - i)) % mod\n\n      den = pow(total_days, k, mod)\n    \n    \n    if num == 0:\n      a = 1\n      b = 1\n    else:\n      \n      gcd_val = gcd(num, den)\n      num //= gcd_val\n      den //= gcd_val\n\n      num %= mod\n      den %= mod\n      \n      a = (den - num + mod) % mod\n      b = den % mod\n      \n\n    print(a, b)\n    \ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 is North Pole, 20000 is South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if current_pos == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n            \n        if direction == \"North\":\n            current_pos -= t\n        elif direction == \"South\":\n            current_pos += t\n        \n        if current_pos < 0 or current_pos > 20000:\n            print(\"NO\")\n            return\n            \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n    \n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n    \n    d, x, y = extended_gcd(a1, a2)\n    \n    x *= (b2 - b1) // d\n    y *= (b2 - b1) // d\n    \n    lcm = (a1 * a2) // g\n    \n    x0 = x\n    y0 = y\n    \n    x0 = (x0 % (a2 // g) + (a2 // g)) % (a2 // g)\n        \n    val = a1 * x0 + b1\n    \n    \n    k_min = (L - val + lcm - 1) // lcm\n    k_max = (R - val) // lcm\n    \n    if k_min > k_max:\n        print(0)\n        return\n    \n    first = val + k_min * lcm\n    last = val + k_max * lcm\n    \n    if first > R or last < L:\n        print(0)\n        return\n    \n    count = k_max - k_min + 1\n    \n    print(count)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n  n, a, b = map(int, input().split())\n  \n  ans = 0\n  for i in range(1, n):\n    if i >= 1 and i < n:\n      x = a // i\n      y = b // (n - i)\n      if x > 0 and y > 0:\n        ans = max(ans, min(x, y))\n  print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n    \n    if n == 0:\n        print(0, 0)\n        return\n    \n    l, r = 0, 10**9\n    k = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if 3 * mid * (mid + 1) >= n:\n            k = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    \n    n -= 3 * k * (k - 1)\n    \n    x, y = 2 * k, 0\n    \n    if n <= k:\n        x -= 2 * (n)\n        y += 2 * n\n    elif n <= 2 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= k\n        x += (-n * 2 + n * 2)\n        y += (-n) * 2\n        \n        \n        x += (-(n))\n        y += (-n) * 2\n        \n        x = x + 2*(2*k - n)\n        \n        x = x - (n - k)\n        y = y + (n - k)*2\n        \n        x = 2*k - 2*(n - k)\n        y = -2*(n-k)\n        x, y = -2*k + 2*(n-k), 2*(n-k)\n        \n        x, y = x - (n-k)*2, y\n        \n        x, y = x - (n-k)*2, y\n        \n        x, y = 2*k - (n-k)*2, 0 + (n-k)*2\n    elif n <= 3 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 2 * k\n\n        x -= k\n    elif n <= 4 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 2 * k\n        \n        x -= k\n        \n    elif n <= 5 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 2 * k\n        \n        x -= k\n        \n    else:\n        x -= 2 * k\n        y += 2 * k\n        n -= 2 * k\n        \n        x -= k\n        \n    \n    \n    x, y = 2 * k, 0\n    \n    if n <= k:\n        x -= n * 2\n        y += n * 2\n    elif n <= 2 * k:\n        n -= k\n        x -= k * 2\n        y += k * 2\n        x += (-(n))\n        y += (-n) * 2\n    elif n <= 3 * k:\n        n -= 2 * k\n        x -= k * 2\n        y += k * 2\n        x -= k\n        y -= (n*2)\n        \n        x -= (n*2)\n    elif n <= 4 * k:\n        n -= 3 * k\n        x -= k * 2\n        y += k * 2\n        x -= k\n        y -= k*2\n        x += n * 2\n        \n        \n    elif n <= 5 * k:\n        n -= 4*k\n        x -= k * 2\n        y += k * 2\n        x -= k\n        y -= k*2\n        x += k * 2\n        x += n * 2\n        y += n * 2\n        \n    else:\n        n -= 5 * k\n        x -= k * 2\n        y += k * 2\n        x -= k\n        y -= k*2\n        x += k * 2\n        x += k * 2\n        y += k * 2\n        \n        \n        x -= n*2\n        \n    x, y = 2 * k, 0\n    \n    if n <= k:\n        x -= 2 * n\n        y += 2 * n\n    elif n <= 2 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= k\n        x -= n\n        y -= n * 2\n        x = x\n    elif n <= 3 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 2 * k\n        x +=(n)\n        y -= (n) * 2\n        \n        x = x\n    elif n <= 4 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 3 * k\n        x += 2*k\n        y += 0\n        x +=n*2\n        y +=0\n    elif n <= 5 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 4 * k\n        x += k\n        y -= k * 2\n        x += n * 2\n        y += n * 2\n        \n    else:\n        x -= 2 * k\n        y += 2 * k\n        n -= 5 * k\n        x += k\n        y -= k * 2\n    \n    x, y = 2 * k, 0\n    \n    dx = 0\n    dy = 0\n\n    if n <= k:\n        dx = -2\n        dy = 2\n        x += dx * n\n        y += dy * n\n    elif n <= 2 * k:\n        dx = -1\n        dy = -2\n        x += -2*k\n        y += 2*k\n        n -= k\n        x += dx * n\n        y += dy * n\n    elif n <= 3 * k:\n        dx = 1\n        dy = -2\n        x += -2*k\n        y += 2*k\n        n -= 2 * k\n        x += -k\n        y -= k*2\n        x += dx * n\n        y += dy * n\n    elif n <= 4 * k:\n        dx = 2\n        dy = 0\n        x += -2*k\n        y += 2*k\n        n -= 3 * k\n        x += -k\n        y -= k*2\n        x += n * dx\n        y += n * dy\n    elif n <= 5 * k:\n        dx = 1\n        dy = 2\n        x += -2*k\n        y += 2*k\n        n -= 4 * k\n        x += -k\n        y -= k*2\n        x += 2*k\n        x += n*dx\n        y += n*dy\n\n    else:\n        dx = -1\n        dy = 2\n        x += -2*k\n        y += 2*k\n        n -= 5 * k\n        x += -k\n        y -= k*2\n        x += 2*k\n        x += n * dx\n        y += n * dy\n        \n        \n    x, y = 2 * k, 0\n    \n    if n <= k:\n        x -= 2*n\n        y += 2*n\n    elif n <= 2*k:\n        x -= 2*k\n        y += 2*k\n        n -= k\n        x -= n\n        y -= 2*n\n    elif n <= 3*k:\n        x -= 2*k\n        y += 2*k\n        n -= 2*k\n        x += n\n        y -= 2*n\n    elif n <= 4*k:\n        x -= 2*k\n        y += 2*k\n        n -= 3*k\n        x += 2*n\n    elif n <= 5*k:\n        x -= 2*k\n        y += 2*k\n        n -= 4*k\n        x += n\n        y += 2*n\n    else:\n        x -= 2*k\n        y += 2*k\n        n -= 5*k\n        x -= n\n        y += 2*n\n        \n    x, y = 2 * k, 0\n    \n    if n <= k:\n        x -= 2 * n\n        y += 2 * n\n    elif n <= 2 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= k\n        x -= n\n        y -= 2 * n\n    elif n <= 3 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 2 * k\n        x += n\n        y -= 2 * n\n    elif n <= 4 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 3 * k\n        x += 2 * n\n    elif n <= 5 * k:\n        x -= 2 * k\n        y += 2 * k\n        n -= 4 * k\n        x += n\n        y += 2 * n\n    else:\n        x -= 2 * k\n        y += 2 * k\n        n -= 5 * k\n        x -= n\n        y += 2 * n\n\n    x, y = 2*k, 0\n    \n    if n <= k:\n        x -= 2*n\n        y += 2*n\n    elif n <= 2*k:\n        x -= 2*k\n        y += 2*k\n        n -= k\n        x -= n\n        y -= 2*n\n    elif n <= 3*k:\n        x -= 2*k\n        y += 2*k\n        n -= 2*k\n        x += n\n        y -= 2*n\n    elif n <= 4*k:\n        x -= 2*k\n        y += 2*k\n        n -= 3*k\n        x += 2*n\n    elif n <= 5*k:\n        x -= 2*k\n        y += 2*k\n        n -= 4*k\n        x += n\n        y += 2*n\n    else:\n        x -= 2*k\n        y += 2*k\n        n -= 5*k\n        x -= n\n        y += 2*n\n    \n\n    print(x, y)\nsolve()\n```",
    "37": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  for i in range(c // a + 1):\n    remaining_damage = c - i * a\n    if remaining_damage % b == 0 and remaining_damage >= 0:\n      print(\"Yes\")\n      return\n  \n  print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, L = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for shift in range(L):\n        shifted_sasha = [(x + shift) % L for x in sasha]\n        shifted_sasha.sort()\n        if kefa == shifted_sasha:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "39": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sub != sub[::-1]:\n                max_len = max(max_len, len(sub))\n    print(max_len)\n\nsolve()\n```",
    "41": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    distances = [0] * n\n    \n    for i in range(n):\n        min_dist = float('inf')\n        for j in range(n):\n            if a[j] == 0:\n                min_dist = min(min_dist, abs(i - j))\n        distances[i] = min_dist\n    \n    print(*distances)\n\nsolve()\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    distinct_strings = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            if binary_string not in distinct_strings:\n                count += 1\n                distinct_strings.add(binary_string)\n\n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    def angle(v):\n        return math.atan2(v[1], v[0])\n\n    angles = []\n    for i in range(n):\n        angles.append((angle(vectors[i]), i + 1))\n\n    angles.sort()\n\n    min_angle = float('inf')\n    best_pair = None\n\n    for i in range(n - 1):\n        diff = angles[i+1][0] - angles[i][0]\n        if diff < min_angle:\n            min_angle = diff\n            best_pair = (angles[i][1], angles[i+1][1])\n\n    diff = angles[0][0] + (2 * math.pi - angles[-1][0])\n    if diff < min_angle:\n        min_angle = diff\n        best_pair = (angles[0][1], angles[-1][1])\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\nd, k, a, b, t = map(int, input().split())\n\nif d <= k:\n    print(d * a)\nelse:\n    if a * k + t >= b * k:\n        print(k * a + (d - k) * b)\n    else:\n        num_breaks = (d - 1) // k\n        \n        if num_breaks * k + k >= d:\n            print(num_breaks * (a * k + t) + (d - num_breaks * k) * a)\n        else:\n            print(num_breaks * (a * k + t) + (d - num_breaks * k) * a)\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, i)\n            if i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // i)\n\n    if best_gcd == 1 and k * (k + 1) // 2 > n:\n      print(\"-1\")\n      return\n    \n    \n    seq = []\n    sum_so_far = 0\n    for i in range(1, k):\n        seq.append(best_gcd * i)\n        sum_so_far += best_gcd * i\n\n    seq.append(n - sum_so_far)\n\n    if seq[-1] <= seq[-2]:\n        print(-1)\n        return\n    \n    print(*seq)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n  n, m = map(int, input().split())\n  count = 0\n  for i in range(1, n + 1):\n    for j in range(1, m + 1):\n      if (i + j) % 5 == 0:\n        count += 1\n  print(count)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    left = 1\n    right = n * m\n    ans = 0\n\n    while left <= right:\n        mid = (left + right) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\ndef solve():\n    k = int(input())\n    \n    digits = 0\n    count = 0\n    power_of_10 = 1\n    length = 1\n    \n    while True:\n        num_numbers = 9 * power_of_10\n        num_digits = num_numbers * length\n        \n        if digits + num_digits >= k:\n            break\n        \n        digits += num_digits\n        count += num_numbers\n        power_of_10 *= 10\n        length += 1\n    \n    remaining = k - digits\n    number_index = (remaining - 1) // length\n    digit_index = (remaining - 1) % length\n    \n    number = power_of_10 + number_index\n    \n    print(str(number)[digit_index])\n\nsolve()\n```",
    "51": "```python\ndef solve():\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n    x = divisors[-1]\n\n    divisors_x = []\n    for d in divisors:\n        if x % d == 0:\n            divisors_x.append(d)\n    \n    divisors_x.sort()\n    \n    remaining_divisors = []\n    counts = {}\n    for d in divisors:\n        if d not in counts:\n            counts[d] = 0\n        counts[d] += 1\n    \n    for d in divisors_x:\n        counts[d] -= 1\n        \n    for d in divisors:\n        if counts[d] > 0:\n            remaining_divisors.append(d)\n            counts[d] -= 1\n    \n    if not remaining_divisors:\n        y = 1\n        divisors_y = [1]\n    else:\n        remaining_divisors.sort()\n        y = remaining_divisors[-1]\n        divisors_y = []\n        for d in remaining_divisors:\n            if y % d == 0:\n                divisors_y.append(d)\n        divisors_y.sort()\n        \n    print(x, y)\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def get_dp(row_idx, rem):\n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n        \n        if row_idx == n:\n            if rem == 0:\n                return 0\n            else:\n                return float('-inf')\n\n        max_sum = float('-inf')\n        \n        # Option 1: Don't pick any element from the current row\n        max_sum = max(max_sum, get_dp(row_idx + 1, rem))\n        \n        # Option 2: Pick elements from the current row\n        max_elements = m // 2\n        \n        for i in range(1 << m):\n            count = 0\n            current_sum = 0\n            elements = []\n            for j in range(m):\n                if (i >> j) & 1:\n                    count += 1\n                    current_sum += a[row_idx][j]\n                    elements.append(a[row_idx][j])\n\n            if count <= max_elements:\n                new_rem = (rem - (current_sum % k)) % k\n                if new_rem < 0:\n                    new_rem += k\n                max_sum = max(max_sum, current_sum + get_dp(row_idx + 1, new_rem))\n\n        dp[(row_idx, rem)] = max_sum\n        return max_sum\n\n    print(get_dp(0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_sequence, remaining_arr, moves):\n            nonlocal max_len, best_moves\n\n            if len(current_sequence) > max_len:\n                max_len = len(current_sequence)\n                best_moves = moves\n\n            if not remaining_arr:\n                return\n\n            if not current_sequence:\n                # Take left\n                backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_val = current_sequence[-1]\n                \n                # Take left\n                if remaining_arr[0] > last_val:\n                    backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                \n                # Take right\n                if remaining_arr[-1] > last_val:\n                    backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n        backtrack([], a, \"\")\n        return max_len, best_moves\n\n    length, moves = find_longest_increasing_sequence(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n    \n    unique_values = sorted(list(set(a)))\n    \n    if len(unique_values) > 3:\n        print(-1)\n        return\n    \n    if len(unique_values) == 1:\n        print(0)\n        return\n    \n    if len(unique_values) == 2:\n        val1, val2 = unique_values\n        if (val1 + val2) % 2 == 0:\n            print((val2 - val1) // 2)\n        else:\n            print(val2 - val1)\n        return\n    \n    if len(unique_values) == 3:\n        val1, val2, val3 = unique_values\n        if val2 - val1 == val3 - val2:\n            print(val2 - val1)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n    \n    intersection1 = max(0, min(x2, x4) - max(x1, x3)) * max(0, min(y2, y4) - max(y1, y3))\n    intersection2 = max(0, min(x2, x6) - max(x1, x5)) * max(0, min(y2, y6) - max(y1, y5))\n    \n    x_overlap = max(0, min(x4, x6) - max(x3, x5))\n    y_overlap = max(0, min(y4, y6) - max(y3, y5))\n    intersection12_temp = x_overlap * y_overlap\n    intersection12 = max(0, min(x2, x4, x6) - max(x1, x3, x5)) * max(0, min(y2, y4, y6) - max(y1, y3, y5)) if x_overlap > 0 and y_overlap > 0 else 0\n\n    covered_area = intersection1 + intersection2 - intersection12\n    \n    if white_area > covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    givers = [i + 1 for i in range(n)]\n    receivers = [i + 1 for i in range(n)]\n\n    given = set()\n    received = set()\n\n    for i in range(n):\n        if f[i] != 0:\n            given.add(f[i])\n\n    missing_givers = []\n    for i in range(n):\n        if f[i] == 0:\n            missing_givers.append(i)\n\n    missing_receivers = []\n    for i in range(1, n + 1):\n        if i not in given:\n            missing_receivers.append(i)\n\n    for i in range(len(missing_givers)):\n        f[missing_givers[i]] = missing_receivers[i]\n\n    \n    \n    for i in range(len(missing_givers)):\n        if f[missing_givers[i]] == missing_givers[i] + 1:\n            \n            for j in range(len(missing_givers)):\n                if i != j and f[missing_givers[j]] != missing_givers[j] + 1:\n                    f[missing_givers[i]], f[missing_givers[j]] = f[missing_givers[j]], f[missing_givers[i]]\n                    break\n            else:\n                \n                if len(missing_givers) > 1:\n                  if i == 0:\n                    f[missing_givers[i]], f[missing_givers[i+1]] = f[missing_givers[i+1]], f[missing_givers[i]]\n                  else:\n                    f[missing_givers[i]], f[missing_givers[0]] = f[missing_givers[0]], f[missing_givers[i]]\n\n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n\n    coloring = [0] * n\n    color_assignment = {}\n    color_index = 1\n\n    for i in range(n):\n        num = a[i]\n        if num not in color_assignment:\n            color_assignment[num] = []\n\n        if len(color_assignment[num]) < k:\n            coloring[i] = color_index\n            color_assignment[num].append(color_index)\n            color_index = (color_index % k) + 1\n\n    \n    color_counts = [0] * (k + 1)\n    for c in coloring:\n        color_counts[c] += 1\n\n    for i in range(1, k + 1):\n        if color_counts[i] == 0:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*coloring)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - y - 1:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    \n    a_list = list(map(int, list(a)))\n    \n    best_a = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a = a_list[:]\n            for k in range(i, j + 1):\n                temp_a[k] = f[temp_a[k] - 1]\n            \n            temp_str = \"\".join(map(str, temp_a))\n            \n            if temp_str > best_a:\n                best_a = temp_str\n                \n    print(best_a)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(A - a) + abs(B - b) + abs(C - c)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n                    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "63": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 2:\n        print(0)\n        return\n\n    min_instability = float('inf')\n    \n    # Try removing each element and calculate instability\n    for i in range(n):\n        temp_a = a[:i] + a[i+1:]\n        min_val = min(temp_a)\n        max_val = max(temp_a)\n        instability = max_val - min_val\n        min_instability = min(min_instability, instability)\n\n    print(min_instability)\n\nsolve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c))\n\n    schedule = [0] * n\n    exam_days = {}\n    for i in range(m):\n        exam_days[exams[i][1]] = i + 1\n        schedule[exams[i][1] - 1] = m + 1\n\n    prep_counts = [0] * m\n    \n    for day in range(1, n + 1):\n        if schedule[day - 1] == m + 1:\n            continue\n        \n        best_exam = -1\n        \n        for i in range(m):\n            s, d, c = exams[i]\n            \n            if s <= day < d and prep_counts[i] < c:\n                if best_exam == -1:\n                    best_exam = i\n                else:\n                    s_best, d_best, c_best = exams[best_exam]\n                    if d < d_best:\n                        best_exam = i\n                        \n        if best_exam != -1:\n            schedule[day - 1] = best_exam + 1\n            prep_counts[best_exam] += 1\n\n    possible = True\n    for i in range(m):\n        if prep_counts[i] != exams[i][2]:\n            possible = False\n            break\n\n    if possible:\n        print(*schedule)\n    else:\n        print(-1)\n\nsolve()\n```",
    "65": "```python\ndef solve():\n  n, m = map(int, input().split())\n\n  if n == m:\n    print(0)\n    return\n\n  if m % n != 0:\n    print(-1)\n    return\n\n  div = m // n\n  \n  count = 0\n  while div % 2 == 0:\n    div //= 2\n    count += 1\n  while div % 3 == 0:\n    div //= 3\n    count += 1\n  \n  if div != 1:\n    print(-1)\n  else:\n    twos = 0\n    threes = 0\n    temp = m // n\n    while temp % 2 == 0:\n        temp //= 2\n        twos += 1\n    while temp % 3 == 0:\n        temp //= 3\n        threes += 1\n    \n    if (2**twos) * (3**threes) == m//n:\n        print(twos + threes)\n    \nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    if k == 1:\n        print(t)\n        return\n    \n    max_overlap = 0\n    for overlap in range(n - 1, 0, -1):\n        if t[:overlap] == t[n - overlap:]:\n            max_overlap = overlap\n            break\n    \n    s = t\n    for _ in range(k - 1):\n        s += t[max_overlap:]\n    \n    print(s)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n                dp[i][j] = min(dp[i][j], k + 1)\n\n    total_subsequences = 0\n    for i in range(n + 1):\n        total_subsequences += dp[n][i]\n        total_subsequences = min(total_subsequences, k + 1)\n    \n    if total_subsequences <= k:\n        print(\"-1\")\n        return\n    \n    ans = 0\n    \n    for length in range(n, -1, -1):\n        num_subsequences_length = dp[n][length]\n        num_subsequences_length = min(num_subsequences_length, k)\n        \n        ans += (n - length) * num_subsequences_length\n        k -= num_subsequences_length\n        \n        if k == 0:\n            break\n            \n    print(ans)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    def check_degree(tree_edges):\n        degree = 0\n        for u, v in tree_edges:\n            if u == 1 or v == 1:\n                degree += 1\n        return degree\n\n    def find_spanning_tree(target_degree):\n        import itertools\n\n        for i in range(n - 1, min(m + 1, n + 5)):\n            for comb in itertools.combinations(edges, n - 1):\n                \n                \n                adj = [[] for _ in range(n + 1)]\n                for u, v in comb:\n                    adj[u].append(v)\n                    adj[v].append(u)\n\n                visited = [False] * (n + 1)\n                q = [1]\n                visited[1] = True\n                count = 0\n\n                while q:\n                    u = q.pop(0)\n                    count += 1\n                    for v in adj[u]:\n                        if not visited[v]:\n                            visited[v] = True\n                            q.append(v)\n\n                if count == n:\n                    if check_degree(comb) == target_degree:\n                        return comb\n        return None\n\n    spanning_tree = find_spanning_tree(d)\n\n    if spanning_tree:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "70": "```python\ndef solve():\n    start_time = input()\n    end_time = input()\n    \n    start_h, start_m = map(int, start_time.split(':'))\n    end_h, end_m = map(int, end_time.split(':'))\n    \n    start_minutes = start_h * 60 + start_m\n    end_minutes = end_h * 60 + end_m\n    \n    mid_minutes = (start_minutes + end_minutes) // 2\n    \n    mid_h = mid_minutes // 60\n    mid_m = mid_minutes % 60\n    \n    print(f\"{mid_h:02}:{mid_m:02}\")\n\nsolve()\n```",
    "71": "```python\ndef solve():\n    a = int(input())\n    \n    if a == 1:\n        print(1)\n        return\n\n    ans = 0\n    power_of_2 = 1\n    while power_of_2 < a:\n        power_of_2 *= 2\n        ans += 1\n        \n    print(ans)\n\nsolve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n    \n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n  n, k = map(int, input().split())\n  s = input()\n\n  dp = [[0] * (n + 1) for _ in range(n + 1)]\n  dp[0][0] = 1\n\n  for i in range(1, n + 1):\n    for j in range(i + 1):\n      dp[i][j] = dp[i - 1][j]\n      if j > 0:\n        dp[i][j] += dp[i - 1][j - 1]\n\n  total_subsequences = sum(dp[n])\n  \n  if k > total_subsequences:\n    print(-1)\n    return\n\n  dp = [[0] * (n + 1) for _ in range(n + 1)]\n  dp[0][0] = 1\n  \n  for i in range(1, n + 1):\n    for j in range(i + 1):\n      dp[i][j] = dp[i - 1][j]\n      if j > 0:\n        dp[i][j] += dp[i - 1][j - 1]\n\n  ans = 0\n  curr_len = n\n  \n  while k > 0:\n      \n    num_subsequences_len_curr_len = dp[n][curr_len] if curr_len <= n else 0\n    \n    if k <= num_subsequences_len_curr_len:\n      ans += (n - curr_len) * k\n      k = 0\n    else:\n      ans += (n - curr_len) * num_subsequences_len_curr_len\n      k -= num_subsequences_len_curr_len\n\n    curr_len -= 1\n    \n  print(ans)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    days = [0] * 7\n    days[0] = 0  # Monday\n    days[1] = 1  # Tuesday\n    days[2] = 2  # Wednesday\n    days[3] = 0  # Thursday\n    days[4] = 2  # Friday\n    days[5] = 1  # Saturday\n    days[6] = 0  # Sunday\n    \n    food = [a, b, c]\n    \n    def calculate_days(start_day):\n        food_copy = food[:]\n        count = 0\n        day = start_day\n        while True:\n            food_type = days[day % 7]\n            if food_copy[food_type] > 0:\n                food_copy[food_type] -= 1\n                count += 1\n                day += 1\n            else:\n                break\n        return count\n\n    max_days = 0\n    for start_day in range(7):\n        max_days = max(max_days, calculate_days(start_day))\n    \n    print(max_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tiles.append([list(map(int, input().split())) for _ in range(2)])\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n    \n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n            \n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n  n = int(input())\n  total_sum = n * (n + 1) // 2\n  if total_sum % 2 == 0:\n    print(0)\n  else:\n    print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    ls = len(s)\n    \n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_sequences(n, s):\n        count = 0\n        for i in range(2**(2*n)):\n            seq = \"\"\n            temp = i\n            for _ in range(2*n):\n                if temp % 2 == 0:\n                    seq = '(' + seq\n                else:\n                    seq = ')' + seq\n                temp //= 2\n            \n            if is_regular(seq) and s in seq:\n                count = (count + 1) % mod\n        return count\n\n    print(count_regular_sequences(n, s))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    s = list(n)\n    l = len(s)\n    ans = float('inf')\n\n    for suffix in ['00', '25', '50', '75']:\n        temp_s = s[:]\n        moves = 0\n\n        # Find the last digit of the suffix\n        try:\n            idx1 = -1\n            for i in range(l - 1, -1, -1):\n                if temp_s[i] == suffix[1]:\n                    idx1 = i\n                    break\n            if idx1 == -1:\n                continue\n\n            moves += (l - 1 - idx1)\n            del temp_s[idx1]\n\n            # Find the second last digit of the suffix\n            idx2 = -1\n            for i in range(len(temp_s) - 1, -1, -1):\n                if temp_s[i] == suffix[0]:\n                    idx2 = i\n                    break\n\n            if idx2 == -1:\n                continue\n\n            moves += (len(temp_s) - 1 - idx2)\n            del temp_s[idx2]\n            \n            # Remove leading zeros\n            leading_zeros = 0\n            for i in range(len(temp_s)):\n                if temp_s[i] == '0':\n                    leading_zeros += 1\n                else:\n                    break\n            \n            moves += leading_zeros\n\n            ans = min(ans, moves)\n\n        except ValueError:\n            continue\n    \n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    def check(k):\n        colors = [0] * n\n        \n        def can_sort(coloring):\n            arr = list(s)\n            \n            for _ in range(n * (n - 1) // 2):\n                swapped = False\n                for i in range(n - 1):\n                    if arr[i] > arr[i+1] and coloring[i] != coloring[i+1]:\n                        arr[i], arr[i+1] = arr[i+1], arr[i]\n                        swapped = True\n                if not swapped:\n                    break\n            \n            return \"\".join(arr) == \"\".join(sorted(s))\n\n        \n        import itertools\n        \n        for coloring in itertools.product(range(1, k + 1), repeat=n):\n            if can_sort(coloring):\n                return True, list(coloring)\n        return False, None\n\n    for k in range(1, n + 1):\n        possible, coloring = check(k)\n        if possible:\n            print(k)\n            print(*coloring)\n            return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    import itertools\n    \n    for permutation in itertools.permutations(strings):\n        if check_order(list(permutation)):\n            print(\"YES\")\n            for s in permutation:\n                print(s)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for height in range(1, int(total**0.5) + 2):\n        if total % height == 0:\n            width = total // height\n            \n            # Case 1: a forms a rectangle\n            for a_height in range(1, int(a**0.5) + 2):\n                if a % a_height == 0:\n                    a_width = a // a_height\n                    \n                    if a_height <= height and a_width <= width:\n                        best_perimeter = min(best_perimeter, 2 * (height + width))\n            \n            # Case 2: b forms a rectangle\n            for b_height in range(1, int(b**0.5) + 2):\n                if b % b_height == 0:\n                    b_width = b // b_height\n                    \n                    if b_height <= height and b_width <= width:\n                        best_perimeter = min(best_perimeter, 2 * (height + width))\n                        \n    print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += '1'\n            else:\n                coloring += '0'\n\n        s0 = \"\"\n        s1 = \"\"\n        for j in range(n):\n            if coloring[j] == '0':\n                s0 += s[j]\n            else:\n                s1 += s[j]\n\n        sorted_s0 = \"\".join(sorted(list(s0)))\n        sorted_s1 = \"\".join(sorted(list(s1)))\n\n        merged = \"\"\n        idx0 = 0\n        idx1 = 0\n        \n        temp_merged = []\n\n        for k in range(n):\n          if coloring[k] == '0':\n            if idx0 < len(sorted_s0):\n              temp_merged.append(sorted_s0[idx0])\n              idx0 += 1\n          else:\n            if idx1 < len(sorted_s1):\n              temp_merged.append(sorted_s1[idx1])\n              idx1 += 1\n        \n        merged = \"\".join(temp_merged)\n\n        if \"\".join(sorted(list(s))) == merged:\n            print(\"YES\")\n            print(coloring)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n\n    for price in range(1, 2001):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.10)\n        if tax_8 == a and tax_10 == b:\n            print(price)\n            return\n\n    print(\"-1\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [0] * k\n    for i in range(k):\n        a[i] = i + 1\n\n    remaining = n - k * (k + 1) // 2\n\n    increase = remaining // k\n    remaining %= k\n\n    for i in range(k):\n        a[i] += increase\n\n    for i in range(k - 1, k - 1 - remaining, -1):\n        a[i] += 1\n    \n    for i in range(k - 1):\n        if a[i+1] > 2 * a[i]:\n            diff = a[i+1] - 2 * a[i]\n            a[i+1] -= diff\n            a[k-1] += diff\n            \n            if a[i+1] > 2 * a[i]:\n                print(\"NO\")\n                return\n\n    for i in range(k - 1):\n        if a[i+1] <= a[i]:\n            print(\"NO\")\n            return\n    \n\n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def check():\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[n-1-i][j] or matrix[i][j] != matrix[i][n-1-j]:\n                    return False\n        return True\n    \n    def backtrack(row, col):\n        if row == n:\n            if check():\n                print(\"YES\")\n                for r in matrix:\n                    print(*r)\n                return True\n            else:\n                return False\n        \n        if col == n:\n            return backtrack(row + 1, 0)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                matrix[row][col] = num\n                counts[num] -= 1\n                \n                if backtrack(row, col + 1):\n                    return True\n                \n                matrix[row][col] = 0\n                counts[num] += 1\n        \n        return False\n    \n    if not backtrack(0, 0):\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(order):\n        current_rating = r\n        for i in order:\n            a, b = projects[i]\n            if current_rating < a:\n                return False\n            current_rating += b\n            if current_rating < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if check(order):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    min_empty = n - total_length\n    \n    arr = [0] * n\n    \n    current_pos = 0\n    for i in range(m):\n        \n        empty_before = min(min_empty,d-1)\n        \n        for j in range(empty_before):\n          arr[current_pos] = 0\n          current_pos +=1\n        min_empty -= empty_before\n        \n        for j in range(c[i]):\n            arr[current_pos] = i + 1\n            current_pos += 1\n\n    for j in range(n-current_pos):\n        arr[current_pos] = 0\n        current_pos+=1\n    \n    \n    curr = 0\n    possible = False\n    \n    q = [0]\n    visited = [False] * (n+2)\n    visited[0] = True\n    \n    while len(q) > 0:\n        u = q.pop(0)\n        if u == n+1:\n            possible = True\n            break\n        \n        for v in range(u+1, min(u+d+1, n+2)):\n            if not visited[v]:\n                if v == n+1 or arr[v-1] != 0:\n                    q.append(v)\n                    visited[v] = True\n    \n    if possible:\n        print(\"YES\")\n        print(*arr)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "92": "```python\ndef solve():\n  x = float(input())\n  for i in range(1, 11):\n    for j in range(1, 11):\n      if abs(i / j - x) < 1e-7:\n        print(i, j)\n        return\n\nsolve()\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        if k < 2:\n            print(\"NO\")\n            return\n    \n    if k == 1 and d > 1:\n        print(\"NO\")\n        return\n    \n    if k == 1 and n > 2:\n        print(\"NO\")\n        return\n\n    edges = []\n    \n    # Create a path of length d\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n    \n    used = d + 1\n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n\n    # Add remaining nodes to the path\n    for i in range(1, d + 2):\n        while degrees[i] < k and used <= n:\n            edges.append((i, used))\n            degrees[i] += 1\n            degrees[used] += 1\n            used += 1\n\n    if used <= n:\n        print(\"NO\")\n        return\n    \n    if len(edges) != n - 1:\n        print(\"NO\")\n        return\n    \n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    s = \"\"\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    \n    for i in range(x):\n        s += str(start)\n        start = 1 - start\n    \n    if start == 0:\n        s += \"0\" * (a - s.count(\"0\"))\n        s += \"1\" * (b - s.count(\"1\"))\n    else:\n        s += \"1\" * (b - s.count(\"1\"))\n        s += \"0\" * (a - s.count(\"0\"))\n        \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    chars = ['a', 'b', 'c']\n\n    import itertools\n\n    for perm in itertools.permutations(chars):\n        res = (perm[0] * n) + (perm[1] * n) + (perm[2] * n)\n        \n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n            \n    for perm in itertools.permutations(chars):\n        res = (perm[0] * n) + (perm[2] * n) + (perm[1] * n)\n        \n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n\n    for perm in itertools.permutations(chars):\n        res = (perm[1] * n) + (perm[0] * n) + (perm[2] * n)\n        \n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n\n    for perm in itertools.permutations(chars):\n        res = (perm[1] * n) + (perm[2] * n) + (perm[0] * n)\n        \n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n\n    for perm in itertools.permutations(chars):\n        res = (perm[2] * n) + (perm[0] * n) + (perm[1] * n)\n        \n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n\n    for perm in itertools.permutations(chars):\n        res = (perm[2] * n) + (perm[1] * n) + (perm[0] * n)\n        \n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    if n == 1:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        perm = ['a','b','c']\n        res = \"\".join(perm)\n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n            \n            \n        perm = ['a','c','b']\n        res = \"\".join(perm)\n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n            \n            \n            \n        perm = ['b','a','c']\n        res = \"\".join(perm)\n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n            \n        perm = ['b','c','a']\n        res = \"\".join(perm)\n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n            \n        perm = ['c','a','b']\n        res = \"\".join(perm)\n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n        \n        perm = ['c','b','a']\n        res = \"\".join(perm)\n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n\nsolve()\n```",
    "96": "```python\ndef solve():\n  n = int(input())\n  q = list(map(int, input().split()))\n\n  def check_permutation(p):\n    if len(p) != n:\n      return False\n    seen = set()\n    for x in p:\n      if not (1 <= x <= n):\n        return False\n      if x in seen:\n        return False\n      seen.add(x)\n    return True\n\n  for first_element in range(1, n + 1):\n    p = [first_element]\n    valid = True\n    for i in range(n - 1):\n      next_element = p[-1] + q[i]\n      p.append(next_element)\n\n    if check_permutation(p):\n      print(*p)\n      return\n\n  print(-1)\n\nsolve()\n```",
    "98": "```python\ndef solve():\n  n = int(input())\n  \n  best_moves = float('inf')\n  \n  for i in range(1, int(n**0.5) + 2):\n    if n % i == 0:\n      j = n // i\n      moves = (i - 1) + (j - 1)\n      best_moves = min(best_moves, moves)\n      \n  print(best_moves)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3 - a1) if a1 > (b1 + b3 - a1) else 0)\n    min_wins = max(0, a2 - (b2 + b1 - a2) if a2 > (b2 + b1 - a2) else 0)\n    min_wins = max(0, a3 - (b3 + b2 - a3) if a3 > (b3 + b2 - a3) else 0)\n    \n    min_wins = 0\n    \n    temp_a1, temp_a2, temp_a3 = a1, a2, a3\n    temp_b1, temp_b2, temp_b3 = b1, b2, b3\n    \n    min_wins += max(0, temp_a1 - (temp_b1 + temp_b3))\n    \n    temp_a1 -= min(temp_a1, temp_b2)\n    temp_a1 -= min(temp_a1, temp_b3)\n    \n    temp_a2, temp_a3 = a2, a3\n    temp_b1, temp_b2, temp_b3 = b1, b2, b3\n    \n    min_wins += max(0, temp_a2 - (temp_b2 + temp_b1))\n    \n    temp_a2 -= min(temp_a2, temp_b3)\n    temp_a2 -= min(temp_a2, temp_b1)\n    \n    temp_a1, temp_a2, temp_a3 = a1, a2, a3\n    temp_b1, temp_b2, temp_b3 = b1, b2, b3\n    \n    min_wins += max(0, temp_a3 - (temp_b3 + temp_b2))\n    \n    temp_a3 -= min(temp_a3, temp_b1)\n    temp_a3 -= min(temp_a3, temp_b2)\n    \n    min_wins = 0\n    \n    min_wins = max(0, a1 - (b1 + b3)) if a1 > (b1 + b3) else 0\n    min_wins = max(0, a2 - (b2 + b1)) if a2 > (b2 + b1) else 0\n    min_wins = max(0, a3 - (b3 + b2)) if a3 > (b3 + b2) else 0\n    \n    \n    \n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}