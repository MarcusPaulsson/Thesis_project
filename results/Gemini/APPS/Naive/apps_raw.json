{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n    \n    if first_bracket == -1:\n        print(-1)\n        return\n    \n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n            \n    if last_bracket == -1 or last_bracket <= first_bracket:\n        print(-1)\n        return\n    \n    first_colon = -1\n    for i in range(first_bracket + 1, last_bracket):\n        if s[i] == ':':\n            first_colon = i\n            break\n            \n    if first_colon == -1:\n        print(-1)\n        return\n    \n    second_colon = -1\n    for i in range(last_bracket - 1, first_colon, -1):\n        if s[i] == ':':\n            second_colon = i\n            break\n            \n    if second_colon == -1 or second_colon <= first_colon:\n        print(-1)\n        return\n    \n    count_pipes = 0\n    for i in range(first_colon + 1, second_colon):\n        if s[i] == '|':\n            count_pipes += 1\n            \n    print(4 + count_pipes)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    \n    best_num = x\n    max_sum = sum_digits(x)\n    \n    s = str(x)\n    n = len(s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0:\n            current_sum = sum_digits(num)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                best_num = num\n            elif current_sum == max_sum and num > best_num:\n                best_num = num\n                \n    print(best_num)\n\ndef sum_digits(n):\n    s = str(n)\n    sum_val = 0\n    for digit in s:\n        sum_val += int(digit)\n    return sum_val\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    l = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10**(l-1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n, q = map(int, input().split())\n    painters = []\n    for _ in range(q):\n        painters.append(tuple(map(int, input().split())))\n\n    max_painted = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            \n            hired_painters = []\n            for k in range(q):\n                if k != i and k != j:\n                    hired_painters.append(painters[k])\n\n            painted_sections = [0] * n\n            for l, r in hired_painters:\n                for section in range(l - 1, r):\n                    painted_sections[section] = 1\n\n            max_painted = max(max_painted, sum(painted_sections))\n\n    print(max_painted)\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n\n    if l == 1 and r == n:\n        print(0)\n        return\n\n    if l == 1:\n        print(abs(pos - r) + 1)\n        return\n\n    if r == n:\n        print(abs(pos - l) + 1)\n        return\n\n    print(min(abs(pos - l) + abs(r - l) + 2, abs(pos - r) + abs(r - l) + 2))\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n\n    if max_damage >= x:\n        print(1)\n        return\n\n    max_diff = 0\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_damage\n    \n    ans = 1\n    ans += (remaining + max_diff - 1) // max_diff\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    low = 0\n    high = 2 * 10**9 \n    \n    ans = high\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        total_sparrows = mid * (mid + 1) // 2\n        \n        \n        if n + mid * m >= total_sparrows:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    print(ans)\n\nsolve()\n```",
    "8": "```python\ndef solve():\n    tiles = input().split()\n    \n    def check_mentsu(hand):\n        # Check for koutsu\n        for i in range(len(hand)):\n            count = 0\n            for j in range(len(hand)):\n                if hand[i] == hand[j]:\n                    count += 1\n            if count >= 3:\n                return True\n        \n        # Check for shuntsu\n        for i in range(len(hand)):\n            for j in range(i + 1, len(hand)):\n                for k in range(j + 1, len(hand)):\n                    t1 = hand[i]\n                    t2 = hand[j]\n                    t3 = hand[k]\n                    \n                    if t1[1] == t2[1] == t3[1]:\n                        nums = sorted([int(t1[0]), int(t2[0]), int(t3[0])])\n                        if nums[1] == nums[0] + 1 and nums[2] == nums[1] + 1:\n                            return True\n        \n        return False\n\n    if check_mentsu(tiles):\n        print(0)\n        return\n\n    # Try drawing one tile\n    for i in range(1, 10):\n        for suit in ['m', 'p', 's']:\n            new_tile = str(i) + suit\n            new_hand = tiles + [new_tile]\n            if check_mentsu(new_hand):\n                print(1)\n                return\n\n    # Try drawing two tiles\n    print(2)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_sofas(sofa_index):\n        l, r, t, b = 0, 0, 0, 0\n        x1_s, y1_s, x2_s, y2_s = sofas[sofa_index]\n\n        for i in range(d):\n            if i == sofa_index:\n                continue\n\n            x1_o, y1_o, x2_o, y2_o = sofas[i]\n\n            # Check left\n            if min(x1_s, x2_s) > max(x1_o, x2_o):\n                l += 1\n            # Check right\n            if max(x1_s, x2_s) < min(x1_o, x2_o):\n                r += 1\n            # Check top\n            if min(y1_s, y2_s) > max(y1_o, y2_o):\n                t += 1\n            # Check bottom\n            if max(y1_s, y2_s) < min(y1_o, y2_o):\n                b += 1\n\n        return l, r, t, b\n\n    for i in range(d):\n        l, r, t, b = count_sofas(i)\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n    n = int(input())\n    \n    min_days_off = (n // 7) * 2\n    max_days_off = (n // 7) * 2\n    \n    remaining_days = n % 7\n    \n    if remaining_days == 1:\n        min_days_off += 0\n        max_days_off += 1\n    elif remaining_days == 2:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 3:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 4:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 5:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 6:\n        min_days_off += 1\n        max_days_off += 2\n    \n    print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef solve():\n    n, a, b, p, q = map(int, input().split())\n    \n    red_count = n // a\n    blue_count = n // b\n    common_count = n // lcm(a, b)\n    \n    red_only = red_count - common_count\n    blue_only = blue_count - common_count\n    \n    total_chocolates = red_only * p + blue_only * q\n    \n    if p > q:\n        total_chocolates += common_count * p\n    else:\n        total_chocolates += common_count * q\n        \n    print(total_chocolates)\n\nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n):\n        for dependency in dependencies[i]:\n            adj[dependency].append(i + 1)\n            in_degree[i + 1] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n\n    order = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(\"-1\")\n        return\n\n    \n    required_courses = set(main_courses)\n    \n    reachable = [False] * (n + 1)\n    q = deque(main_courses)\n    for course in main_courses:\n        reachable[course] = True\n    \n    while q:\n        u = q.popleft()\n        for i in range(1, n + 1):\n            if u in adj[i]:\n                if not reachable[i]:\n                    reachable[i] = True\n                    q.append(i)\n                    required_courses.add(i)\n    \n    \n    result = []\n    visited = [False] * (n + 1)\n    \n    def dfs(course):\n        if visited[course]:\n            return True\n        \n        visited[course] = True\n        \n        for dependency in dependencies[course-1]:\n            if not dfs(dependency):\n                return False\n        \n        result.append(course)\n        return True\n    \n    \n    for course in main_courses:\n        if not dfs(course):\n            print(\"-1\")\n            return\n            \n    final_result = []\n    for course in reversed(result):\n        if course not in final_result:\n            final_result.append(course)\n            \n    print(len(final_result))\n    print(*final_result)\n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n\n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n\n    p_full = p[:]\n    for x in remaining:\n        p_full.append(x)\n\n    def is_stack_sortable(arr):\n        a = arr[:]\n        s = []\n        b = []\n        \n        while a or s:\n            if a:\n                s.append(a.pop(0))\n            else:\n                b.append(s.pop())\n                \n            \n            while s and b and s[-1] == min(i for i in s + a if i > (b[-1] if b else 0)):\n                b.append(s.pop())\n                \n            \n            \n            \n        \n        \n        is_sorted = all(b[i] <= b[i+1] for i in range(len(b)-1)) if len(b) > 1 else True\n        return is_sorted\n\n    import itertools\n    \n    remaining_len = n - k\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "15": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    if c == 0:\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        return\n    \n    if (b - a) % c == 0 and (b - a) // c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n    \n    if cnt1 == cnt4 and cnt3 == 0:\n        print(1)\n    elif cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    suffix_min = [0] * (n + 1)\n    suffix_min[n] = 'z'\n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    t = []\n    u = \"\"\n    \n    for i in range(n):\n        t.append(s[i])\n        while t and t[-1] <= suffix_min[i+1]:\n            u += t.pop()\n            \n    while t:\n        u += t.pop()\n        \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef is_palindrome(time_str):\n    return time_str == time_str[::-1]\n\ndef solve():\n    time_str = input()\n    hh = int(time_str[:2])\n    mm = int(time_str[3:])\n    \n    minutes = 0\n    while True:\n        time_str = \"{:02d}:{:02d}\".format(hh, mm)\n        if is_palindrome(time_str):\n            print(minutes)\n            return\n        \n        minutes += 1\n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n\nsolve()\n```",
    "22": "```python\ndef is_s_palindrome(s):\n    \"\"\"\n    Checks if a string is an \"s-palindrome\".\n\n    Args:\n        s: The input string.\n\n    Returns:\n        \"TAK\" if the string is an \"s-palindrome\", \"NIE\" otherwise.\n    \"\"\"\n\n    mirror_chars = {\n        'b': 'd', 'd': 'b',\n        'p': 'q', 'q': 'p',\n        'o': 'o', 'x': 'x',\n        'X': 'X', 'H': 'H',\n        'I': 'I', 'M': 'M',\n        'O': 'O', 'T': 'T',\n        'U': 'U', 'V': 'V',\n        'v': 'v', 'W': 'W',\n        'w': 'w', 'Y': 'Y',\n        'A': 'A', 'm':'m'\n    }\n\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] not in mirror_chars or s[n - 1 - i] not in mirror_chars:\n            return \"NIE\"\n        if mirror_chars.get(s[i]) != s[n - 1 - i]:\n            return \"NIE\"\n\n    if n % 2 == 1:\n        if s[n // 2] not in mirror_chars or mirror_chars.get(s[n // 2]) != s[n // 2]:\n            return \"NIE\"\n\n    return \"TAK\"\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(is_s_palindrome(s))\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    b_digits = list(b)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    def find_max_permutation(index, remaining_digits, current_number):\n        if index == len(a):\n            return current_number\n        \n        best_number = \"\"\n        \n        for digit in sorted(remaining_digits.keys(), reverse=True):\n            if remaining_digits[digit] > 0:\n                if digit < b_digits[index]:\n                    temp_digits = remaining_digits.copy()\n                    temp_digits[digit] -= 1\n                    \n                    remaining_str = \"\"\n                    for d in sorted(temp_digits.keys(), reverse=True):\n                        remaining_str += d * temp_digits[d]\n                    \n                    new_number = current_number + digit + remaining_str\n                    \n                    if best_number == \"\" or new_number > best_number:\n                        best_number = new_number\n                elif digit == b_digits[index]:\n                    temp_digits = remaining_digits.copy()\n                    temp_digits[digit] -= 1\n                    \n                    next_remaining_digits = {k: v for k, v in temp_digits.items() if v > 0}\n                    \n                    next_number = find_max_permutation(index + 1, temp_digits, current_number + digit)\n                    \n                    if next_number != \"\" and (best_number == \"\" or next_number > best_number):\n                        best_number = next_number\n        \n        return best_number\n    \n    a_counts = Counter(a)\n    result = find_max_permutation(0, a_counts, \"\")\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(list(input()))\n\n    def check_win(board):\n        for i in range(10):\n            for j in range(10):\n                if board[i][j] == 'X':\n                    # Check horizontal\n                    if j <= 5 and all(board[i][j + k] == 'X' for k in range(5)):\n                        return True\n                    # Check vertical\n                    if i <= 5 and all(board[i + k][j] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 5 and j <= 5 and all(board[i + k][j + k] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= 5 and j >= 4 and all(board[i + k][j - k] == 'X' for k in range(5)):\n                        return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n                if check_win(board):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n            \n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n        \n    if k != 0:\n        print(\"-1\")\n        return\n    \n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s[:2*i].startswith(prefix):\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n\n    moves = []\n    e = len(examples)\n    \n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            if any(f[0] == str(i + 1) for f in examples) or any(f[0] == str(i + 1) for f in regular):\n                temp_name = generate_temp_name(files)\n                moves.append(f\"move {examples[i][0]} {temp_name}\")\n                \n                # Find the file that needs to be moved to i+1\n                target_file = \"\"\n                for j in range(n):\n                    if files[j][0] == str(i+1):\n                        target_file = files[j][0]\n                        break\n                \n                moves.append(f\"move {target_file} {str(i + 1)}\")\n                moves.append(f\"move {temp_name} {examples[i][0]}\")\n            else:\n                moves.append(f\"move {examples[i][0]} {str(i + 1)}\")\n\n    # Move regular tests to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            if any(f[0] == str(e + i + 1) for f in examples) or any(f[0] == str(e + i + 1) for f in regular):\n                temp_name = generate_temp_name(files)\n                moves.append(f\"move {regular[i][0]} {temp_name}\")\n                \n                # Find the file that needs to be moved to e+i+1\n                target_file = \"\"\n                for j in range(n):\n                    if files[j][0] == str(e+i+1):\n                        target_file = files[j][0]\n                        break\n                \n                moves.append(f\"move {target_file} {str(e + i + 1)}\")\n                moves.append(f\"move {temp_name} {regular[i][0]}\")\n            else:\n                moves.append(f\"move {regular[i][0]} {str(e + i + 1)}\")\n\n    print(len(moves))\n    for move in moves:\n        print(move)\n\ndef generate_temp_name(files):\n    temp_name = \"temp\"\n    i = 0\n    while any(f[0] == temp_name + str(i) for f in files):\n        i += 1\n    return temp_name + str(i)\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    ans = 6\n    for i in range(1000):\n        s1 = str(i).zfill(3)\n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            if sum(int(d) for d in s1) == sum(int(d) for d in s2):\n                cnt = 0\n                for k in range(3):\n                    if s[k] != s1[k]:\n                        cnt += 1\n                for k in range(3):\n                    if s[k+3] != s2[k]:\n                        cnt += 1\n                ans = min(ans, cnt)\n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    if k > mod:\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    \n    for i in range(int(k)):\n        if i == 0:\n            continue\n        num = (num * (pow(2, n, mod) - i)) % mod\n        den = (den * pow(2, n, mod)) % mod\n\n    \n    inv_den = pow(den, mod - 2, mod)\n    prob_diff = (num * inv_den) % mod\n    \n    a = (1 - prob_diff + mod) % mod\n    b = 1\n    \n    \n    g = gcd(a, pow(2, int(n * (k-1)), mod))\n    \n    a = a // g\n    b = pow(2, int(n * (k-1)), mod) // g\n    \n    print(a % mod, b % mod)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 represents North Pole, 20000 represents South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0:\n            if direction != \"South\":\n                print(\"NO\")\n                return\n            current_pos += t\n        elif current_pos == 20000:\n            if direction != \"North\":\n                print(\"NO\")\n                return\n            current_pos -= t\n        else:\n            if direction == \"North\":\n                current_pos -= t\n            elif direction == \"South\":\n                current_pos += t\n            else:\n                pass  # West and East don't change North-South position\n        \n        if current_pos < 0 or current_pos > 20000:\n            print(\"NO\")\n            return\n            \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    d, x, y = extended_gcd(a1, a2)\n    x *= (b2 - b1) // d\n    y *= (b2 - b1) // d\n\n    lcm = (a1 * a2) // g\n\n    k = (x * a1 + b1)\n    \n    \n    first = (k % lcm + lcm) % lcm\n    \n    \n    start = max(L, ( (L - first + lcm - 1) // lcm) * lcm + first)\n    \n    if start > R:\n        print(0)\n        return\n    \n    print((R - start) // lcm + 1)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        if i > a or n - i > b:\n            continue\n        \n        x = a // i\n        y = b // (n - i)\n        \n        ans = max(ans, min(x, y))\n    \n    print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n    \n    if n == 0:\n        print(0, 0)\n        return\n    \n    layer = 0\n    count = 0\n    while True:\n        if count + 6 * layer <= n:\n            count += 6 * layer\n            layer += 1\n        else:\n            break\n    \n    remaining = n - count\n    \n    x, y = 2 * (layer - 1), 0\n    \n    if remaining == 0:\n        print(x, y)\n        return\n    \n    if remaining <= layer:\n        x -= 2 * remaining\n        print(x, y)\n        return\n    \n    remaining -= layer\n    x -= 2 * layer\n    y += 2 * remaining\n    \n    if remaining <= layer:\n        print(x, y)\n        return\n    \n    remaining -= layer\n    x += remaining * 2\n    y += remaining * 2\n    \n    if remaining <= layer:\n        print(x, y)\n        return\n    \n    remaining -= layer\n    x += 2 * remaining\n    \n    y -= 2 * remaining\n    \n    if remaining <= layer:\n        print(x, y)\n        return\n    \n    remaining -= layer\n    x -= 2 * remaining\n    y -= 2 * remaining\n    \n    if remaining <= layer:\n        print(x, y)\n        return\n    \n    remaining -= layer\n    x -= 2 * remaining\n    \n    print(x, y)\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for start_diff in range(l):\n        possible = True\n        for i in range(n):\n            kefa_dist = kefa[i]\n            sasha_dist = (sasha[0] + start_diff) % l\n            \n            found = False\n            for j in range(n):\n                if (sasha[j] + start_diff) % l == kefa_dist:\n                    found = True\n                    break\n            if not found:\n                possible = False\n                break\n        \n        if possible:\n            \n            kefa_shifted = []\n            for i in range(n):\n                kefa_shifted.append(kefa[i])\n            \n            sasha_shifted = []\n            for i in range(n):\n                sasha_shifted.append((sasha[i] + start_diff) % l)\n            \n            sasha_shifted.sort()\n            kefa_shifted.sort()\n            \n            if sasha_shifted == kefa_shifted:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "39": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sub != sub[::-1]:\n                max_len = max(max_len, len(sub))\n    print(max_len)\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n  \"\"\"\n  Calculates the distance to the nearest zero for each element in the array.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    A list of integers representing the distances to the nearest zero for each element.\n  \"\"\"\n\n  n = len(arr)\n  distances = [float('inf')] * n\n\n  # Forward pass: find the distance to the nearest zero from the left\n  last_zero = float('-inf')\n  for i in range(n):\n    if arr[i] == 0:\n      last_zero = i\n      distances[i] = 0\n    elif last_zero != float('-inf'):\n      distances[i] = min(distances[i], i - last_zero)\n\n  # Backward pass: find the distance to the nearest zero from the right\n  last_zero = float('inf')\n  for i in range(n - 1, -1, -1):\n    if arr[i] == 0:\n      last_zero = i\n      distances[i] = 0\n    elif last_zero != float('inf'):\n      distances[i] = min(distances[i], last_zero - i)\n\n  return distances\n\n\nif __name__ == \"__main__\":\n  n = int(input())\n  arr = list(map(int, input().split()))\n  result = nearest_zero(arr)\n  print(*result)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            \n    print(count)\n\nsolve()\n```",
    "44": "```python\ndef solve():\n    d, k, a, b, t = map(int, input().split())\n\n    if d <= k:\n        print(d * a)\n    else:\n        cost1 = k * a + (d - k) * b\n        \n        num_breaks = (d - 1) // k\n        \n        cost2 = k * a\n        cost2 += num_breaks * t\n        remaining_dist = d - (num_breaks * k)\n        cost2 += remaining_dist * a\n        \n        cost3 = 0\n        num_full_breaks = d // k\n        cost3 += num_full_breaks * (k * a + t)\n        remaining_dist = d % k\n        cost3 += remaining_dist * b\n        cost3 -= t if d % k == 0 and num_full_breaks > 0 else 0\n        \n        \n        cost4 = 0\n        num_full_breaks = (d - k) // k\n        cost4 += k * a\n        cost4 += num_full_breaks * (t + k * a)\n        remaining_dist = d - k - num_full_breaks * k\n        cost4 += remaining_dist * b\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, i)\n            if i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // i)\n\n    if best_gcd == 1 and k * (k+1) // 2 > n:\n        print(-1)\n        return\n    \n    if best_gcd == 1 and n == 1 and k == 1:\n        print(1)\n        return\n\n    if best_gcd == 1 and n == 1 and k > 1:\n        print(-1)\n        return\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "46": "```python\ndef solve():\n    n, m = map(int, input().split())\n    count = 0\n    for x in range(1, n + 1):\n        for y in range(1, m + 1):\n            if (x + y) % 5 == 0:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "47": "```python\ndef max_beauty(n, x, a):\n    \"\"\"\n    Calculates the maximum possible beauty of array a after multiplying all values\n    belonging to some consecutive subarray by x.\n\n    Args:\n        n: The length of array a.\n        x: The integer to multiply the subarray by.\n        a: The array of integers.\n\n    Returns:\n        The maximum possible beauty of array a after multiplying all values\n        belonging to some consecutive subarray by x.\n    \"\"\"\n\n    max_so_far = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            current_array = a[:]\n            for k in range(i, j):\n                current_array[k] *= x\n\n            current_max = 0\n            max_ending_here = 0\n            for num in current_array:\n                max_ending_here = max(0, max_ending_here + num)\n                current_max = max(current_max, max_ending_here)\n\n            max_so_far = max(max_so_far, current_max)\n\n    return max_so_far\n\n\nif __name__ == \"__main__\":\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    result = max_beauty(n, x, a)\n    print(result)\n```",
    "49": "```python\ndef solve():\n    k = int(input())\n    \n    digits = 0\n    count = 0\n    power_of_10 = 1\n    length = 1\n    \n    while True:\n        num_digits = 9 * power_of_10 * length\n        if digits + num_digits >= k:\n            break\n        digits += num_digits\n        power_of_10 *= 10\n        length += 1\n    \n    diff = k - digits - 1\n    number_index = diff // length\n    digit_index = diff % length\n    \n    number = power_of_10 + number_index\n    \n    print(str(number)[digit_index])\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n    def get_dp(row_idx, rem):\n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n        return None\n\n    def set_dp(row_idx, rem, val):\n        dp[(row_idx, rem)] = val\n\n    def calculate_max_sum(row_idx, rem):\n        if row_idx == n:\n            if rem == 0:\n                return 0\n            else:\n                return float('-inf')\n\n        cached_result = get_dp(row_idx, rem)\n        if cached_result is not None:\n            return cached_result\n\n        max_elements = m // 2\n        row = a[row_idx]\n        \n        max_sum = float('-inf')\n        \n        for i in range(1 << m):\n            chosen_elements = []\n            count = 0\n            current_sum = 0\n            \n            for j in range(m):\n                if (i >> j) & 1:\n                    chosen_elements.append(row[j])\n                    count += 1\n                    current_sum += row[j]\n            \n            if count <= max_elements:\n                next_rem = (rem - (current_sum % k)) % k\n                if next_rem < 0:\n                    next_rem += k\n                \n                next_sum = calculate_max_sum(row_idx + 1, next_rem)\n                if next_sum != float('-inf'):\n                    max_sum = max(max_sum, current_sum + next_sum)\n        \n        set_dp(row_idx, rem, max_sum)\n        return max_sum\n\n    result = calculate_max_sum(0, 0)\n    print(result)\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_subsequence(arr):\n        best_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_seq, remaining_arr, moves):\n            nonlocal best_len, best_moves\n\n            if not remaining_arr:\n                if len(current_seq) > best_len:\n                    best_len = len(current_seq)\n                    best_moves = moves\n                return\n\n            if not current_seq:\n                # Take left\n                backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_val = current_seq[-1]\n                \n                # Take left\n                if remaining_arr[0] > last_val:\n                    backtrack(current_seq + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                \n                # Take right\n                if remaining_arr[-1] > last_val:\n                    backtrack(current_seq + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n        backtrack([], a, \"\")\n        return best_len, best_moves\n\n    length, moves = find_longest_increasing_subsequence(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    possible_ds = set()\n    for i in range(n):\n        for j in range(n):\n            diff = abs(a[i] - a[j])\n            if diff % 2 == 0:\n                possible_ds.add(diff // 2)\n    possible_ds.add(0)\n\n    for d in sorted(list(possible_ds)):\n        possible = True\n        first_val = None\n        \n        for target in [a[0] - d, a[0], a[0] + d]:\n            \n            valid = True\n            for i in range(n):\n                found = False\n                if a[i] + d == target:\n                    found = True\n                if a[i] - d == target:\n                    found = True\n                if a[i] == target:\n                    found = True\n                if not found:\n                    valid = False\n                    break\n            \n            if valid:\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                ",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n\n    def intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n        x_overlap = max(0, min(x2, x4) - max(x1, x3))\n        y_overlap = max(0, min(y2, y4) - max(y1, y3))\n        return x_overlap * y_overlap\n\n    black1_on_white = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    black2_on_white = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n\n    # Intersection of black sheets\n    x_overlap_black = max(0, min(x4, x6) - max(x3, x5))\n    y_overlap_black = max(0, min(y4, y6) - max(y3, y5))\n    black_intersection_area = x_overlap_black * y_overlap_black\n\n    black_intersection_on_white = intersection_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n\n    covered_area = black1_on_white + black2_on_white - black_intersection_on_white\n\n    if white_area > covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    givers = [i + 1 for i in range(n)]\n    receivers = [i + 1 for i in range(n)]\n\n    given = set()\n    for i in range(n):\n        if f[i] != 0:\n            given.add(f[i])\n            if f[i] in givers:\n                givers.remove(f[i])\n            if i + 1 in receivers:\n                receivers.remove(i + 1)\n\n    unknown_givers_indices = [i for i in range(n) if f[i] == 0]\n\n    for i in unknown_givers_indices:\n        giver = givers.pop(0)\n        f[i] = giver\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n        \n        if f[i] == i + 1:\n            \n            for j in range(1, n + 1):\n                if j != i + 1 and j not in f:\n                    f[i] = j\n                    break\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    positions = {}\n    for i in range(n):\n        if a[i] not in positions:\n            positions[a[i]] = []\n        positions[a[i]].append(i)\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n\n    colors = [0] * n\n    color_idx = 1\n    \n    colored_count = 0\n    \n    for num in sorted(positions.keys()):\n        for pos in positions[num]:\n            if color_idx <= k:\n                colors[pos] = color_idx\n                color_idx += 1\n                colored_count += 1\n            else:\n                break\n        if color_idx > k:\n            break\n    \n    if colored_count < k:\n        print(\"NO\")\n        return\n\n    \n    color_idx = 1\n    for i in range(n):\n        if colors[i] == 0:\n            colors[i] = color_idx\n            color_idx = (color_idx % k) + 1\n\n    print(\"YES\")\n    print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n                    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    if k == 1:\n        print(t)\n        return\n    \n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n    \n    result = t + t[overlap:] * (k - 1)\n    print(result)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] = min(dp[i][j], k + 1)\n    \n    total_subsequences = sum(dp[n])\n    \n    if total_subsequences < k:\n        print(\"-1\")\n        return\n    \n    cost = 0\n    for length in range(n, -1, -1):\n        num_subsequences_of_length = dp[n][length]\n        \n        take = min(num_subsequences_of_length, k)\n        cost += (n - length) * take\n        k -= take\n        \n        if k == 0:\n            break\n    \n    print(cost)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    def check_degree(tree_edges):\n        degree = 0\n        for u, v in tree_edges:\n            if u == 1 or v == 1:\n                degree += 1\n        return degree\n\n    def find_spanning_tree(edges, n, d):\n        import itertools\n        for i in range(1 << m):\n            tree_edges = []\n            for j in range(m):\n                if (i >> j) & 1:\n                    tree_edges.append(edges[j])\n\n            if len(tree_edges) != n - 1:\n                continue\n\n            parent = list(range(n + 1))\n\n            def find(i):\n                if parent[i] == i:\n                    return i\n                parent[i] = find(parent[i])\n                return parent[i]\n\n            def union(i, j):\n                root_i = find(i)\n                root_j = find(j)\n                if root_i != root_j:\n                    parent[root_i] = root_j\n                    return True\n                return False\n\n            num_edges_added = 0\n            for u, v in tree_edges:\n                if union(u, v):\n                    num_edges_added += 1\n\n            if num_edges_added != n - 1:\n                continue\n            \n            is_connected = True\n            root = find(1)\n            for k in range(2, n + 1):\n                if find(k) != root:\n                    is_connected = False\n                    break\n            \n            if not is_connected:\n                continue\n\n            if check_degree(tree_edges) == d:\n                return tree_edges\n\n        return None\n\n    spanning_tree = find_spanning_tree(edges, n, d)\n\n    if spanning_tree:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "71": "```python\nimport math\n\ndef solve():\n  a = int(input())\n  if a == 1:\n    print(1)\n  else:\n    print(math.ceil(math.log(a, 2)))\n\nsolve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    counts = [[0] * (n + 1) for _ in range(n + 1)]\n    counts[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            counts[i][0] = 1\n            if j > 0:\n                counts[i][j] = counts[i - 1][j] + counts[i - 1][j - 1]\n        \n        for l in range(i):\n            if s[i-1] == s[l]:\n                for j in range(1, i + 1):\n                    counts[i][j] -= counts[l][j-1]\n\n    total_cost = 0\n    \n    for length in range(n, -1, -1):\n        num_subsequences = counts[n][length]\n        \n        if k > num_subsequences:\n            total_cost += num_subsequences * (n - length)\n            k -= num_subsequences\n        else:\n            total_cost += k * (n - length)\n            k = 0\n            break\n    \n    if k > 0:\n        print(\"-1\")\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tiles.append([list(map(int, input().split())) for _ in range(2)])\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n  n = int(input())\n  total_sum = n * (n + 1) // 2\n  if total_sum % 2 == 0:\n    print(0)\n  else:\n    print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    \n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_sequences(n, s):\n        count = 0\n        \n        def generate_sequences(current_seq, open_count, close_count):\n            nonlocal count\n            \n            if len(current_seq) == 2 * n:\n                if is_regular(current_seq) and s in current_seq:\n                    count = (count + 1) % mod\n                return\n            \n            if open_count < n:\n                generate_sequences(current_seq + '(', open_count + 1, close_count)\n            if close_count < open_count:\n                generate_sequences(current_seq + ')', open_count, close_count + 1)\n\n        generate_sequences(\"\", 0, 0)\n        return count\n\n    print(count_regular_sequences(n, s))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    s = list(n)\n    ans = float('inf')\n\n    for suffix in ['00', '25', '50', '75']:\n        temp_s = s[:]\n        moves = 0\n        \n        # Find the last digit of the suffix\n        try:\n            idx2 = -1\n            for i in range(len(temp_s) - 1, -1, -1):\n                if temp_s[i] == suffix[1]:\n                    idx2 = i\n                    break\n            if idx2 == -1:\n                continue\n\n            moves += len(temp_s) - 1 - idx2\n            temp_s.pop(idx2)\n        except:\n            continue\n        \n        # Find the first digit of the suffix\n        try:\n            idx1 = -1\n            for i in range(len(temp_s) - 1, -1, -1):\n                if temp_s[i] == suffix[0]:\n                    idx1 = i\n                    break\n            if idx1 == -1:\n                continue\n            \n            moves += len(temp_s) - 1 - idx1\n            temp_s.pop(idx1)\n        except:\n            continue\n\n        # Remove leading zeros\n        try:\n            leading_zeros = 0\n            for i in range(len(temp_s)):\n                if temp_s[i] == '0':\n                    leading_zeros += 1\n                else:\n                    break\n            \n            moves += leading_zeros\n        except:\n            continue\n        \n        ans = min(ans, moves)\n\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    colors = [0] * n\n    \n    def check(num_colors):\n        \n        def possible_to_sort(coloring):\n            temp_s = list(s)\n            \n            for _ in range(n * (n - 1) // 2):\n                swapped = False\n                for i in range(n - 1):\n                    if temp_s[i] > temp_s[i+1] and coloring[i] != coloring[i+1]:\n                        temp_s[i], temp_s[i+1] = temp_s[i+1], temp_s[i]\n                        swapped = True\n                if not swapped:\n                    break\n            \n            return \"\".join(temp_s) == \"\".join(sorted(s))\n        \n        \n        import itertools\n        \n        for coloring in itertools.product(range(1, num_colors + 1), repeat=n):\n            if possible_to_sort(coloring):\n                return True, list(coloring)\n        \n        return False, None\n\n    for num_colors in range(1, n + 1):\n        possible, coloring = check(num_colors)\n        if possible:\n            print(num_colors)\n            print(*coloring)\n            return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    import itertools\n    \n    for permutation in itertools.permutations(strings):\n        if check_order(list(permutation)):\n            print(\"YES\")\n            for s in permutation:\n                print(s)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "83": "```python\nimport math\n\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for height in range(1, int(math.sqrt(total)) + 2):\n        if total % height == 0:\n            width = total // height\n            \n            # Case 1: a forms a rectangle\n            for a_height in range(1, int(math.sqrt(a)) + 2):\n                if a % a_height == 0:\n                    a_width = a // a_height\n                    \n                    if a_height <= height and a_width <= width:\n                        best_perimeter = min(best_perimeter, 2 * (height + width))\n            \n            # Case 2: b forms a rectangle\n            for b_height in range(1, int(math.sqrt(b)) + 2):\n                if b % b_height == 0:\n                    b_width = b // b_height\n                    \n                    if b_height <= height and b_width <= width:\n                        best_perimeter = min(best_perimeter, 2 * (height + width))\n    \n    print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += '1'\n            else:\n                coloring += '0'\n\n        zeros = \"\"\n        ones = \"\"\n        for j in range(n):\n            if coloring[j] == '0':\n                zeros += s[j]\n            else:\n                ones += s[j]\n\n        sorted_s = \"\".join(sorted(s))\n        \n        merged = \"\"\n        zero_idx = 0\n        one_idx = 0\n        \n        possible = True\n        for char in sorted_s:\n            if zero_idx < len(zeros) and zeros[zero_idx] == char:\n                merged += zeros[zero_idx]\n                zero_idx += 1\n            elif one_idx < len(ones) and ones[one_idx] == char:\n                merged += ones[one_idx]\n                one_idx += 1\n            else:\n                possible = False\n                break\n        \n        if possible:\n            print(\"YES\")\n            print(coloring)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k):\n        a[i] += remaining // k\n    \n    remaining %= k\n    \n    for i in range(k - 1, k - 1 - remaining, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if a[i+1] > 2 * a[i]:\n            diff = a[i+1] - 2 * a[i]\n            a[i+1] -= diff\n            a[k-1] += diff\n            \n            if a[i+1] > 2 * a[i]:\n                print(\"NO\")\n                return\n            \n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def is_valid(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    return False\n        return True\n    \n    def is_palindromic(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[n-1-i][j] or matrix[i][j] != matrix[i][n-1-j]:\n                    return False\n        return True\n    \n    def backtrack(row, col):\n        if row == n:\n            if is_valid(matrix) and is_palindromic(matrix):\n                print(\"YES\")\n                for r in matrix:\n                    print(*r)\n                return True\n            else:\n                return False\n        \n        if col == n:\n            return backtrack(row + 1, 0)\n        \n        if matrix[row][col] != 0:\n            return backtrack(row, col + 1)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                \n                matrix[row][col] = num\n                matrix[n-1-row][col] = num\n                matrix[row][n-1-col] = num\n                matrix[n-1-row][n-1-col] = num\n                \n                counts[num] -= 1\n                if counts[num] == 0:\n                    del counts[num]\n                \n                if backtrack(row, col + 1):\n                    return True\n                \n                counts[num] = counts.get(num, 0) + 1\n                matrix[row][col] = 0\n                matrix[n-1-row][col] = 0\n                matrix[row][n-1-col] = 0\n                matrix[n-1-row][n-1-col] = 0\n        \n        return False\n    \n    if not backtrack(0, 0):\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(order):\n        current_rating = r\n        for i in order:\n            a, b = projects[i]\n            if current_rating < a:\n                return False\n            current_rating += b\n            if current_rating < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if check(order):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    if d > n + 1:\n        arr = [0] * n\n        arr[n - c[-1]:] = [m] * c[-1]\n        print(\"YES\")\n        print(*arr)\n        return\n\n    total_length = sum(c)\n    \n    if total_length + (m - 1) > n and d <= 1:\n        print(\"NO\")\n        return\n\n    arr = [0] * n\n    \n    current_pos = 0\n    platform_positions = []\n    \n    for i in range(m):\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            k = 0\n            l = 0\n            while k < len(temp_s) and l < m:\n                if temp_s[k] == t[l]:\n                    l += 1\n                k += 1\n            \n            if l == m:\n                ans = max(ans, j - i)\n    \n    print(ans)\n\nsolve()\n```",
    "92": "```python\ndef solve():\n  x = float(input())\n  \n  a = int(x * 2.5)\n  b = int((x * 2.5) + 1)\n  \n  a = min(max(a, 1), 10)\n  b = min(max(b, 1), 10)\n  \n  print(a, b)\n\nsolve()\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        print(\"NO\")\n        return\n    \n    if k == 1 and n > 2:\n        print(\"NO\")\n        return\n\n    if d > n - 1:\n        print(\"NO\")\n        return\n\n    if d == n - 1 and k == 1:\n        print(\"NO\")\n        return\n\n    edges = []\n    \n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n    \n    remaining_nodes = n - d - 1\n    \n    if remaining_nodes < 0:\n        print(\"NO\")\n        return\n\n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n    \n    next_node = d + 2\n    \n    for i in range(1, d + 2):\n        while degrees[i] < k and remaining_nodes > 0:\n            edges.append((i, next_node))\n            degrees[i] += 1\n            degrees[next_node] += 1\n            next_node += 1\n            remaining_nodes -= 1\n\n    if remaining_nodes > 0:\n        print(\"NO\")\n        return\n\n    if len(edges) != n - 1:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    s = \"\"\n    \n    for i in range(x):\n        s += str(start)\n        if start == 0:\n            start = 1\n            b -= 1\n        else:\n            start = 0\n            a -= 1\n    \n    if start == 0:\n        s += \"0\" * a\n        s += \"1\" * b\n    else:\n        s += \"1\" * b\n        s += \"0\" * a\n    \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    chars = ['a', 'b', 'c']\n\n    import itertools\n    \n    for perm in itertools.permutations(chars):\n        res = \"\"\n        for _ in range(n):\n            res += perm[0]\n            res += perm[1]\n            res += perm[2]\n        \n        valid = True\n        if s in res or t in res:\n            valid = False\n        \n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n    \n    \n    res = \"\"\n    for _ in range(n):\n        res += 'a'\n    for _ in range(n):\n        res += 'b'\n    for _ in range(n):\n        res += 'c'\n    \n    valid = True\n    if s in res or t in res:\n        valid = False\n    \n    if valid:\n        print(\"YES\")\n        print(res)\n        return\n    \n    res = \"\"\n    for _ in range(n):\n        res += 'c'\n    for _ in range(n):\n        res += 'b'\n    for _ in range(n):\n        res += 'a'\n    \n    valid = True\n    if s in res or t in res:\n        valid = False\n    \n    if valid:\n        print(\"YES\")\n        print(res)\n        return\n    \n    \n    \n    if n == 1:\n        \n        \n        res = \"abc\"\n        valid = True\n        if s in res or t in res:\n            valid = False\n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"acb\"\n        valid = True\n        if s in res or t in res:\n            valid = False\n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"bac\"\n        valid = True\n        if s in res or t in res:\n            valid = False\n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"bca\"\n        valid = True\n        if s in res or t in res:\n            valid = False\n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"cab\"\n        valid = True\n        if s in res or t in res:\n            valid = False\n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n        \n        res = \"cba\"\n        valid = True\n        if s in res or t in res:\n            valid = False\n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    def check_permutation(arr):\n        if len(arr) != n:\n            return False\n        seen = set()\n        for x in arr:\n            if not (1 <= x <= n):\n                return False\n            if x in seen:\n                return False\n            seen.add(x)\n        return True\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n            if not (1 <= next_element <= n):\n                valid = False\n                break\n        \n        if valid and check_permutation(p):\n            print(*p)\n            return\n    \n    print(-1)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    min_cost = float('inf')\n    \n    for target in range(1, 101):\n        cost = 0\n        for val in x:\n            cost += abs(val - target) % 2\n        min_cost = min(min_cost, cost)\n        \n    print(min_cost)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a3 - a1), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - b1 - b3, a2 - b2 - b1, a3 - b3 - b2)\n    \n    min_wins = 0\n    \n    \n    temp_a1, temp_a2, temp_a3 = a1, a2, a3\n    temp_b1, temp_b2, temp_b3 = b1, b2, b3\n    \n    min_wins += max(0, temp_a1 - (n - temp_a1 - temp_a2 - temp_a3 + temp_b1))\n    min_wins += max(0, temp_a2 - (n - temp_a1 - temp_a2 - temp_a3 + temp_b2))\n    min_wins += max(0, temp_a3 - (n - temp_a1 - temp_a2 - temp_a3 + temp_b3))\n    \n    \n    \n    \n    \n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}