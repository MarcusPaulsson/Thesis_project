{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    max_len = -1\n    \n    for i in range(n):\n        if s[i] == '[':\n            for j in range(i + 1, n):\n                if s[j] == ']':\n                    \n                    first_colon = -1\n                    for k in range(i + 1, j):\n                        if s[k] == ':':\n                            first_colon = k\n                            break\n                    \n                    if first_colon == -1:\n                        continue\n                    \n                    second_colon = -1\n                    for k in range(j - 1, first_colon, -1):\n                        if s[k] == ':':\n                            second_colon = k\n                            break\n                    \n                    if second_colon == -1:\n                        continue\n                    \n                    \n                    pipes = 0\n                    for k in range(first_colon + 1, second_colon):\n                        if s[k] == '|':\n                            pipes += 1\n                    \n                    current_len = 4 + pipes\n                    max_len = max(max_len, current_len)\n    \n    print(max_len)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n\n    def digit_sum(n):\n        s = 0\n        while n:\n            s += n % 10\n            n //= 10\n        return s\n\n    best_num = x\n    max_sum = digit_sum(x)\n\n    s = str(x)\n    n = len(s)\n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n\n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n\n        if num > 0 and num <= x:\n           current_sum = digit_sum(num)\n           if current_sum > max_sum:\n               max_sum = current_sum\n               best_num = num\n           elif current_sum == max_sum and num > best_num:\n               best_num = num\n\n    print(best_num)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    \n    s = str(n)\n    l = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10**(l-1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "3": "```python\ndef solve():\n    n, q = map(int, input().split())\n    painters = []\n    for _ in range(q):\n        painters.append(tuple(map(int, input().split())))\n\n    def calculate_painted_sections(selected_painters):\n        painted = [False] * n\n        for l, r in selected_painters:\n            for i in range(l - 1, r):\n                painted[i] = True\n        return sum(painted)\n\n    max_painted = 0\n    for i in range(q):\n        for j in range(i + 1, q):\n            selected_painters = []\n            for k in range(q):\n                if k != i and k != j:\n                    selected_painters.append(painters[k])\n            max_painted = max(max_painted, calculate_painted_sections(selected_painters))\n\n    print(max_painted)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    x = int(input())\n    hh, mm = map(int, input().split())\n\n    def is_lucky(h, m):\n        return '7' in str(h) or '7' in str(m)\n\n    count = 0\n    while True:\n        if is_lucky(hh, mm):\n            print(count)\n            return\n\n        mm -= x\n        if mm < 0:\n            mm += 60\n            hh -= 1\n            if hh < 0:\n                hh += 24\n        count += 1\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(tuple(map(int, input().split())))\n    \n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n    \n    if max_damage >= x:\n        print(1)\n        return\n    \n    max_diff = 0\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n    \n    if max_diff <= 0:\n        print(-1)\n        return\n    \n    remaining = x - max_damage\n    \n    blows_needed = (remaining + max_diff - 1) // max_diff\n    \n    print(blows_needed + 1)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n  n, m = map(int, input().split())\n  \n  l, r = 0, 2 * 10**9\n  ans = r\n  \n  while l <= r:\n    mid = (l + r) // 2\n    \n    total_sparrows = mid * (mid + 1) // 2\n    \n    if n + mid * m >= total_sparrows:\n      ans = mid\n      r = mid - 1\n    else:\n      l = mid + 1\n      \n  print(ans)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_sofas(sofa_index):\n        l, r, t, b = 0, 0, 0, 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        \n        for i in range(d):\n            if i == sofa_index:\n                continue\n            \n            other_x1, other_y1, other_x2, other_y2 = sofas[i]\n            \n            # Check left\n            if min(x1, x2) > max(other_x1, other_x2):\n                l += 1\n            elif min(x1, x2) < max(other_x1, other_x2) and max(x1,x2) > min(other_x1, other_x2):\n                \n                found_left = False\n                \n                if x1 < other_x1:\n                    found_left = True\n                if x1 < other_x2:\n                    found_left = True\n                if x2 < other_x1:\n                    found_left = True\n                if x2 < other_x2:\n                    found_left = True\n                \n                if found_left:\n                    l +=1\n            \n            # Check right\n            if max(x1, x2) < min(other_x1, other_x2):\n                r += 1\n            elif min(x1, x2) < max(other_x1, other_x2) and max(x1,x2) > min(other_x1, other_x2):\n                found_right = False\n\n                if x1 > other_x1:\n                    found_right = True\n                if x1 > other_x2:\n                    found_right = True\n                if x2 > other_x1:\n                    found_right = True\n                if x2 > other_x2:\n                    found_right = True\n                    \n                if found_right:\n                    r += 1\n            \n            # Check top\n            if min(y1, y2) > max(other_y1, other_y2):\n                t += 1\n            elif min(y1, y2) < max(other_y1, other_y2) and max(y1,y2) > min(other_y1, other_y2):\n                \n                found_top = False\n                \n                if y1 < other_y1:\n                    found_top = True\n                if y1 < other_y2:\n                    found_top = True\n                if y2 < other_y1:\n                    found_top = True\n                if y2 < other_y2:\n                    found_top = True\n                    \n                if found_top:\n                    t += 1\n            \n            # Check bottom\n            if max(y1, y2) < min(other_y1, other_y2):\n                b += 1\n            elif min(y1, y2) < max(other_y1, other_y2) and max(y1,y2) > min(other_y1, other_y2):\n                \n                found_bottom = False\n                \n                if y1 > other_y1:\n                    found_bottom = True\n                if y1 > other_y2:\n                    found_bottom = True\n                if y2 > other_y1:\n                    found_bottom = True\n                if y2 > other_y2:\n                    found_bottom = True\n                if found_bottom:\n                    b += 1\n        \n        return l, r, t, b\n\n    result = -1\n    for i in range(d):\n        l, r, t, b = count_sofas(i)\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            result = i + 1\n            break\n\n    print(result)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n    n = int(input())\n    \n    min_days_off = (n // 7) * 2\n    max_days_off = (n // 7) * 2\n    \n    remaining_days = n % 7\n    \n    if remaining_days == 1:\n        min_days_off += 0\n        max_days_off += 1\n    elif remaining_days == 2:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 3:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 4:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 5:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 6:\n        min_days_off += 1\n        max_days_off += 2\n    \n    print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef solve():\n    n, a, b, p, q = map(int, input().split())\n    \n    red_count = n // a\n    blue_count = n // b\n    common_count = n // lcm(a, b)\n    \n    red_only = red_count - common_count\n    blue_only = blue_count - common_count\n    \n    total_chocolates = 0\n    \n    if p > q:\n        total_chocolates += red_only * p\n        total_chocolates += common_count * p\n        total_chocolates += blue_only * q\n    else:\n        total_chocolates += blue_only * q\n        total_chocolates += common_count * q\n        total_chocolates += red_only * p\n    \n    print(total_chocolates)\n\nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n    \n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    \n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i + 1] += 1\n            \n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n            \n    result = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        result.append(u)\n        count += 1\n        \n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n                \n    if count != n:\n        print(\"-1\")\n        return\n        \n    \n    def find_path(start, end, dependencies):\n      q = deque([(start, [start])])\n      visited = set()\n\n      while q:\n          node, path = q.popleft()\n          if node == end:\n              return path\n\n          visited.add(node)\n\n          for i in range(1,n+1):\n              if i not in adj[node]:\n                  continue\n              \n              neighbor = i\n              if neighbor not in visited:\n                  q.append((neighbor, path + [neighbor]))\n\n      return None\n\n    \n    required_courses = set(main_courses)\n    \n    for i in range(1, n + 1):\n        if i in main_courses:\n            continue\n        \n        path_to_main = False\n        for main_course in main_courses:\n            path = find_path(i, main_course, dependencies)\n            if path:\n                path_to_main = True\n                break\n        \n        if path_to_main:\n            required_courses.add(i)\n    \n    \n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    \n    for i in range(n):\n        for dep in dependencies[i]:\n            if i+1 in required_courses and dep in required_courses:\n                adj[dep].append(i + 1)\n                in_degree[i + 1] += 1\n    \n    q = deque()\n    for i in required_courses:\n        if in_degree[i] == 0:\n            q.append(i)\n            \n    result = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        result.append(u)\n        count += 1\n        \n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n                \n    if count != len(required_courses):\n        print(\"-1\")\n        return\n        \n    print(len(result))\n    print(*result)\n    \n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n\n    missing = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            missing.append(i)\n\n    p = p + missing\n    \n    def is_stack_sortable(arr):\n        s = []\n        b = []\n        i = 0\n        while i < len(arr) or len(s) > 0:\n            if len(s) > 0 and (i == len(arr) or s[-1] < arr[i]):\n                b.append(s.pop())\n            elif i < len(arr):\n                s.append(arr[i])\n                i += 1\n            else:\n                return False\n        \n        for i in range(len(b) - 1):\n            if b[i] > b[i+1]:\n                return False\n        return True\n    \n    if not is_stack_sortable(p):\n        print(\"-1\")\n    else:\n        print(*p)\n\nsolve()\n```",
    "15": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n\n    if c == 0:\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        return\n\n    if (b - a) % c == 0 and (b - a) / c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt3 == 0:\n        print(1)\n    elif cnt1 == cnt4 and cnt1 >= 0 and cnt2 >= 0 and cnt3 >= 0 and cnt4 >= 0 :\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    u = \"\"\n    t = \"\"\n    \n    suffix_min = [0] * n\n    suffix_min[-1] = s[-1]\n    for i in range(n - 2, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    \n    i = 0\n    while i < n:\n        if not t:\n            t += s[i]\n            i += 1\n        elif i < n and suffix_min[i] < t[-1]:\n            t += s[i]\n            i += 1\n        else:\n            u += t[-1]\n            t = t[:-1]\n    \n    while t:\n        u += t[-1]\n        t = t[:-1]\n        \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n    \n    valid = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            valid = False\n            break\n    \n    if valid:\n        for i in range(1, n):\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                valid = False\n                break\n            if pairs[i][1] - pairs[i-1][1] > pairs[i][0] - pairs[i-1][0]:\n                valid = False\n                break\n    \n    if valid:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    time_str = input()\n    hh = int(time_str[:2])\n    mm = int(time_str[3:])\n    \n    minutes = 0\n    while True:\n        hh_str = str(hh).zfill(2)\n        mm_str = str(mm).zfill(2)\n        \n        if hh_str == mm_str[::-1]:\n            print(minutes)\n            return\n        \n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        minutes += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    pos_1 = a.index(1)\n    pos_n = a.index(n)\n\n    ans = abs(pos_1 - pos_n)\n    \n    ans = max(ans, abs(0 - pos_1))\n    ans = max(ans, abs(n - 1 - pos_1))\n    ans = max(ans, abs(0 - pos_n))\n    ans = max(ans, abs(n - 1 - pos_n))\n\n    print(ans)\n\nsolve()\n```",
    "22": "```python\ndef is_s_palindrome(s):\n  \"\"\"\n  Checks if a string is an \"s-palindrome\".\n\n  Args:\n    s: The string to check.\n\n  Returns:\n    \"TAK\" if the string is an \"s-palindrome\", \"NIE\" otherwise.\n  \"\"\"\n\n  mirror_chars = {\n      'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p',\n      'o': 'o', 'x': 'x', 'X': 'X', 'H': 'H',\n      'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T',\n      'U': 'U', 'V': 'V', 'v': 'v', 'W': 'W',\n      'w': 'w', 'Y': 'Y', 'A': 'A', 'm':'m'\n  }\n\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] not in mirror_chars or s[n - 1 - i] not in mirror_chars:\n      return \"NIE\"\n    if mirror_chars.get(s[i]) != s[n - 1 - i]:\n      return \"NIE\"\n\n  if n % 2 == 1:\n    if s[n // 2] not in mirror_chars:\n      return \"NIE\"\n\n  return \"TAK\"\n\n\nif __name__ == \"__main__\":\n  s = input()\n  print(is_s_palindrome(s))\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_counts = Counter(a)\n    \n    def find_max_permutation(index, current_num, remaining_counts, b_str):\n        if index == len(a):\n            return current_num\n        \n        max_num = \"\"\n        \n        for digit in sorted(remaining_counts.keys(), reverse=True):\n            if remaining_counts[digit] > 0:\n                temp_counts = remaining_counts.copy()\n                temp_counts[digit] -= 1\n                \n                new_num = current_num + digit\n                \n                if len(new_num) < len(b_str) or new_num <= b_str:\n                    \n                    valid = True\n                    if len(new_num) == len(b_str):\n                        for i in range(len(new_num)):\n                            if new_num[i] > b_str[i]:\n                                valid = False\n                                break\n                    \n                    if valid:\n                        \n                        next_max = find_max_permutation(index + 1, new_num, temp_counts, b_str)\n                        \n                        if len(next_max) > len(max_num) or (len(next_max) == len(max_num) and next_max > max_num):\n                            max_num = next_max\n        \n        return max_num\n\n    result = find_max_permutation(0, \"\", a_counts, b)\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(list(input()))\n\n    def check_win(board):\n        for i in range(10):\n            for j in range(10):\n                if board[i][j] == 'X':\n                    # Check horizontal\n                    if j <= 5 and all(board[i][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check vertical\n                    if i <= 5 and all(board[i+k][j] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 5 and j <= 5 and all(board[i+k][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= 5 and j >= 4 and all(board[i+k][j-k] == 'X' for k in range(5)):\n                        return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n                if check_win(board):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            \n    if k != 0:\n        print(\"-1\")\n    else:\n        for row in matrix:\n            print(*row)\n\nsolve()\n```",
    "26": "```python\nimport math\n\ndef solve():\n    x, y, z = map(float, input().split())\n\n    a1 = x ** (y ** z)\n    a2 = x ** (z ** y)\n    a3 = (x ** y) ** z\n    a4 = (x ** z) ** y\n    a5 = y ** (x ** z)\n    a6 = y ** (z ** x)\n    a7 = (y ** x) ** z\n    a8 = (y ** z) ** x\n    a9 = z ** (x ** y)\n    a10 = z ** (y ** x)\n    a11 = (z ** x) ** y\n    a12 = (z ** y) ** x\n\n    values = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\n    \n    max_val = max(values)\n    max_index = values.index(max_val) + 1\n\n    if max_index == 1:\n        print(\"x^y^z\")\n    elif max_index == 2:\n        print(\"x^z^y\")\n    elif max_index == 3:\n        print(\"(x^y)^z\")\n    elif max_index == 4:\n        print(\"(x^z)^y\")\n    elif max_index == 5:\n        print(\"y^x^z\")\n    elif max_index == 6:\n        print(\"y^z^x\")\n    elif max_index == 7:\n        print(\"(y^x)^z\")\n    elif max_index == 8:\n        print(\"(y^z)^x\")\n    elif max_index == 9:\n        print(\"z^x^y\")\n    elif max_index == 10:\n        print(\"z^y^x\")\n    elif max_index == 11:\n        print(\"(z^x)^y\")\n    elif max_index == 12:\n        print(\"(z^y)^x\")\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        if s[:i] == s[i:2*i]:\n            ans = min(ans, i + 1 + (n - 2*i))\n            \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n    \n    e = len(examples)\n    \n    moves = []\n    \n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            \n            if any(f[0] == str(i+1) for f in examples) or any(f[0] == str(i+1) for f in regular):\n                temp_name = generate_temp_name(files)\n                moves.append(f\"move {examples[i][0]} {temp_name}\")\n                \n                # Find the file that should be moved to this position\n                for j in range(n):\n                    if files[j][0] == str(i+1):\n                        if files[j][1] == '1':\n                            moves.append(f\"move {str(i+1)} {temp_name + '_temp'}\")\n                            moves.append(f\"move {temp_name} {str(i+1)}\")\n                            moves.append(f\"move {temp_name + '_temp'} {str(i+1)}\")\n                            \n                        else:\n                            moves.append(f\"move {str(i+1)} {examples[i][0]}\")\n                            moves.append(f\"move {temp_name} {str(i+1)}\")\n                        break\n                else:\n                    moves.append(f\"move {temp_name} {str(i+1)}\")\n                \n\n            else:\n                moves.append(f\"move {examples[i][0]} {str(i + 1)}\")\n    \n    # Move regular tests to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            \n            if any(f[0] == str(e+i+1) for f in examples) or any(f[0] == str(e+i+1) for f in regular):\n                temp_name = generate_temp_name(files)\n                moves.append(f\"move {regular[i][0]} {temp_name}\")\n                \n                for j in range(n):\n                    if files[j][0] == str(e+i+1):\n                        if files[j][1] == '1':\n                            moves.append(f\"move {str(e+i+1)} {temp_name + '_temp'}\")\n                            moves.append(f\"move {temp_name} {str(e+i+1)}\")\n                            moves.append(f\"move {temp_name + '_temp'} {str(e+i+1)}\")\n                        else:\n                            moves.append(f\"move {str(e+i+1)} {regular[i][0]}\")\n                            moves.append(f\"move {temp_name} {str(e+i+1)}\")\n                        break\n                \n                else:\n                    moves.append(f\"move {temp_name} {str(e + i + 1)}\")\n\n            else:\n                moves.append(f\"move {regular[i][0]} {str(e + i + 1)}\")\n    \n    print(len(moves))\n    for move in moves:\n        print(move)\n\ndef generate_temp_name(files):\n    temp_name = \"temp1\"\n    i = 1\n    while any(f[0] == temp_name for f in files):\n        temp_name = f\"temp{i}\"\n        i += 1\n    return temp_name\n    \nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    digits = [int(c) for c in s]\n    \n    ans = 6\n    \n    for i in range(1000):\n        s1 = str(i).zfill(3)\n        sum1 = sum(int(c) for c in s1)\n        \n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            sum2 = sum(int(c) for c in s2)\n            \n            if sum1 == sum2:\n                \n                temp_digits = [int(c) for c in s1 + s2 ]\n                \n                diff = 0\n                for k in range(6):\n                    if digits[k] != temp_digits[k]:\n                        diff += 1\n                \n                ans = min(ans, diff)\n                \n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    if k > mod:\n        print(0, 1)\n        return\n\n    num = 1\n    den = 1\n    \n    for i in range(int(k)):\n        if i == 0:\n            continue\n        num = (num * (pow(2, n, mod) - i)) % mod\n        den = (den * pow(2, n, mod)) % mod\n    \n    gcd_val = gcd(num, den)\n    num //= gcd_val\n    den //= gcd_val\n\n    ans_num = (den - num + mod) % mod\n    ans_den = den\n\n    print(ans_num % mod, ans_den % mod)\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 represents North Pole, 20000 represents South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0:\n            if direction != \"South\":\n                print(\"NO\")\n                return\n            current_pos += t\n        elif current_pos == 20000:\n            if direction != \"North\":\n                print(\"NO\")\n                return\n            current_pos -= t\n        else:\n            if direction == \"North\":\n                current_pos -= t\n            elif direction == \"South\":\n                current_pos += t\n            else:\n                pass # ignore east or west\n        \n        if current_pos < 0 or current_pos > 20000:\n            print(\"NO\")\n            return\n    \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\nimport math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n    \n    lcm = (a1 * a2) // g\n    \n    d, x, y = extended_gcd(a1, a2)\n    \n    x *= (b2 - b1) // g\n    y *= (b2 - b1) // g\n\n    x0 = x\n    y0 = y\n    \n    x = x0 % (a2 // g)\n    \n    first_solution = a1 * x + b1\n    \n    k = math.ceil((L - first_solution) / lcm)\n    \n    first_valid = first_solution + k * lcm\n    \n    if first_valid > R:\n        print(0)\n        return\n    \n    k1 = math.ceil((-x0) / (a2 // g)) \n    \n    x_pos = x0 + k1 * (a2 // g)\n\n    first_solution_pos = a1 * x_pos + b1\n    \n    k_pos = math.ceil((L-first_solution_pos) / lcm)\n    \n    first_valid_pos = first_solution_pos + k_pos * lcm\n    \n    if first_valid_pos < L:\n        k_pos +=1\n        first_valid_pos = first_solution_pos + k_pos * lcm\n        \n    if first_valid_pos > R:\n        print(0)\n        return\n    \n    \n    k2 = math.floor((R - first_valid_pos) / lcm)\n    \n    \n    count = k2 + 1\n    \n    \n    k_neg = math.floor((x0) / (a2 // g))\n    \n    x_neg = x0 - k_neg * (a2//g)\n    \n    first_solution_neg = a1 * x_neg + b1\n    \n    k_neg2 = math.ceil((L-first_solution_neg) / lcm)\n    \n    first_valid_neg = first_solution_neg + k_neg2 * lcm\n    \n    if first_valid_neg < L:\n        k_neg2 += 1\n        first_valid_neg = first_solution_neg + k_neg2 * lcm\n        \n    if first_valid_neg > R:\n        print(0)\n        return\n\n    \n    k_neg3 = math.floor((R - first_valid_neg) / lcm)\n    \n    \n    count_neg = k_neg3+1\n    \n    \n    if first_valid_pos == first_valid_neg:\n        print(count)\n    else:\n        start = max(first_valid_pos, first_valid_neg)\n        end = R\n        \n        k_total = math.floor((R - start) / lcm)\n        \n        print(k_total+1)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        if i >= 1 and i <= n - 1:\n            \n            x = a // i\n            y = b // (n - i)\n            \n            if x > 0 and y > 0:\n                ans = max(ans, min(x, y))\n    print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n    \n    if n == 0:\n        print(0, 0)\n        return\n    \n    layer = 0\n    count = 0\n    while True:\n        if count + 6 * layer < n:\n            count += 6 * layer\n            layer += 1\n        else:\n            break\n    \n    rem = n - count\n    \n    if rem <= layer:\n        x = 2 * layer - rem\n        y = 2 * rem\n    elif rem <= 2 * layer:\n        x = layer - 2 * (rem - layer)\n        y = 2 * layer\n    elif rem <= 3 * layer:\n        x = -layer - (rem - 2 * layer)\n        y = 2 * layer - 2 * (rem - 2 * layer)\n    elif rem <= 4 * layer:\n        x = -2 * layer + (rem - 3 * layer)\n        y = -2 * (rem - 3 * layer)\n    elif rem <= 5 * layer:\n        x = -layer + 2 * (rem - 4 * layer)\n        y = -2 * layer\n    else:\n        x = layer + (rem - 5 * layer)\n        y = -2 * layer + 2 * (rem - 5 * layer)\n        \n    print(x, y)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  for i in range(c // a + 1):\n    remaining_damage = c - i * a\n    if remaining_damage >= 0 and remaining_damage % b == 0:\n      print(\"Yes\")\n      return\n  \n  print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n  n, l = map(int, input().split())\n  kefa = list(map(int, input().split()))\n  sasha = list(map(int, input().split()))\n\n  for shift in range(n):\n    shifted_sasha = [(sasha[i] - sasha[0] + l) % l for i in range(n)]\n    \n    shifted_kefa = [(kefa[i] - kefa[0] + l) % l for i in range(n)]\n    shifted_kefa.sort()\n    shifted_sasha.sort()\n    \n    if shifted_kefa == shifted_sasha:\n      print(\"YES\")\n      return\n\n  print(\"NO\")\n\nsolve()\n```",
    "39": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    max_len = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sub != sub[::-1]:\n                max_len = max(max_len, len(sub))\n                \n    print(max_len)\n\nsolve()\n```",
    "40": "```python\ndef solve():\n    n = int(input())\n    ratings = []\n    for _ in range(n):\n        ratings.append(list(map(int, input().split())))\n\n    changed = False\n    for a, b in ratings:\n        if a != b:\n            changed = True\n            break\n\n    if changed:\n        print(\"rated\")\n        return\n\n    sorted_flag = True\n    for i in range(n - 1):\n        if ratings[i][0] < ratings[i+1][0]:\n            sorted_flag = False\n            break\n\n    if not sorted_flag:\n        print(\"unrated\")\n    else:\n        print(\"maybe\")\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n    \"\"\"\n    Calculates the distance to the nearest zero for each element in the array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        list: A list of integers representing the distances to the nearest zero.\n    \"\"\"\n    n = len(arr)\n    distances = [float('inf')] * n\n\n    # Forward pass: find distances to the nearest zero from the left\n    last_zero = float('-inf')\n    for i in range(n):\n        if arr[i] == 0:\n            last_zero = i\n            distances[i] = 0\n        elif last_zero != float('-inf'):\n            distances[i] = min(distances[i], i - last_zero)\n\n    # Backward pass: find distances to the nearest zero from the right\n    last_zero = float('inf')\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 0:\n            last_zero = i\n            distances[i] = 0\n        elif last_zero != float('inf'):\n            distances[i] = min(distances[i], last_zero - i)\n\n    return distances\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = nearest_zero(arr)\n    print(*result)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n    \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n    \n    def angle(v):\n        x, y = v\n        return math.atan2(y, x)\n    \n    angles = []\n    for i in range(n):\n        angles.append((angle(vectors[i]), i + 1))\n    \n    angles.sort()\n    \n    min_diff = float('inf')\n    best_pair = (0, 0)\n    \n    for i in range(n):\n        j = (i + 1) % n\n        diff = angles[j][0] - angles[i][0]\n        if diff < 0:\n            diff += 2 * math.pi\n        \n        diff = min(diff, 2 * math.pi - diff)\n        \n        if diff < min_diff:\n            min_diff = diff\n            best_pair = (angles[i][1], angles[j][1])\n            \n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\ndef solve():\n    d, k, a, b, t = map(int, input().split())\n\n    if d <= k:\n        print(d * a)\n    else:\n        cost_driving_all = k * a + t + (d - k) * a\n        cost_drive_k_walk_rest = k * a + (d - k) * b\n        \n        num_breaks = (d - 1) // k\n        \n        cost_with_breaks = 0\n        \n        if num_breaks == 0:\n          cost_with_breaks = d * a\n        else:\n          \n          full_breaks = (d // k) - 1 \n          \n          \n          if full_breaks < 0:\n            full_breaks = 0\n            \n          cost_with_breaks = (k * a + t) * (full_breaks + 1) + (d % k) * a\n          \n          if d % k == 0:\n              cost_with_breaks -= (d % k) * a\n          \n        \n        cost_walk_rest_after_first_k = k * a + (d - k) * b\n        \n        cost_alt_break = 0\n        \n        if d > k:\n            breaks = (d - 1) // k\n            \n            if breaks > 0:\n                \n                \n                cost_alt_break = (k * a + t) * breaks\n                \n                remaining_dist = d - k * breaks\n                \n                cost_alt_break += min(remaining_dist * a, remaining_dist * b + t)\n            else:\n                cost_alt_break = d * a\n        else:\n            cost_alt_break = d * a\n            \n        if d <= k:\n            print(d * a)\n        else:\n           \n            \n            \n            \n            cost_efficient_breaks = 0\n            \n            \n            if d > k:\n                num_full_ks = (d // k)\n                remaining_dist = d % k\n                \n                if remaining_dist == 0:\n                    num_full_ks -= 1\n                    remaining_dist = k\n                    \n                if num_full_ks > 0:\n                    cost_efficient_breaks = (k * a) * num_full_ks + t * num_full_ks\n                    cost_efficient_breaks += min(remaining_dist * a, remaining_dist * b)\n                else:\n                    cost_efficient_breaks = d * a\n            else:\n                cost_efficient_breaks = d * a\n           \n           \n            if t > k * b - k * a :\n                print(k * a + (d-k) * b)\n            else:\n                num_breaks = (d - 1) // k\n\n                if num_breaks == 0:\n                    print(d * a)\n                else:\n                    print(min(\n                        d * a + num_breaks * t,\n                        k * a + (d - k) * b + num_breaks * t,\n                        k * a + (d - k) * b\n                    ))\nsolve()\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 1\n    for gcd in range(1, int(n**0.5) + 1):\n        if n % gcd == 0:\n            if n // gcd >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, gcd)\n            if gcd >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // gcd)\n\n    if best_gcd == 1 and k * (k + 1) // 2 > n:\n      print(-1)\n      return\n\n    \n    \n    sequence_sum = n // best_gcd\n    sequence = []\n    for i in range(1, k):\n        sequence.append(i)\n        sequence_sum -= i\n    sequence.append(sequence_sum)\n\n    if sequence[-1] <= sequence[-2]:\n        print(-1)\n        return\n\n    result = [x * best_gcd for x in sequence]\n    print(*result)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n    n, m = map(int, input().split())\n    count = 0\n    for x in range(1, n + 1):\n        for y in range(1, m + 1):\n            if (x + y) % 5 == 0:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    left = 1\n    right = n * m\n    ans = 0\n\n    while left <= right:\n        mid = (left + right) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\ndef solve():\n    k = int(input())\n    \n    digits = 0\n    count = 0\n    power_of_10 = 1\n    length = 1\n    \n    while True:\n        num_numbers = 9 * power_of_10\n        digits_in_numbers = num_numbers * length\n        \n        if count + digits_in_numbers >= k:\n            break\n        \n        count += digits_in_numbers\n        power_of_10 *= 10\n        length += 1\n        \n    remaining = k - count\n    number_index = (remaining - 1) // length\n    digit_index = (remaining - 1) % length\n    \n    number = power_of_10 + number_index\n    number_str = str(number)\n    \n    print(number_str[digit_index])\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def max_sum_divisible_by_k(row_index, current_sum):\n        if row_index == n:\n            if current_sum % k == 0:\n                return current_sum\n            else:\n                return -float('inf')\n        \n        if (row_index, current_sum) in dp:\n            return dp[(row_index, current_sum)]\n        \n        max_val = max_sum_divisible_by_k(row_index + 1, current_sum)\n        \n        row = a[row_index]\n        max_elements = m // 2\n        \n        for i in range(1 << m):\n            count = 0\n            subset_sum = 0\n            elements = []\n            \n            for j in range(m):\n                if (i >> j) & 1:\n                    count += 1\n                    subset_sum += row[j]\n                    elements.append(row[j])\n            \n            if count <= max_elements:\n                max_val = max(max_val, max_sum_divisible_by_k(row_index + 1, current_sum + subset_sum))\n\n        dp[(row_index, current_sum)] = max_val\n        return max_val\n\n    result = max_sum_divisible_by_k(0, 0)\n    print(result)\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_subsequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_sequence, remaining_arr, moves):\n            nonlocal max_len, best_moves\n            \n            if not remaining_arr:\n                if len(current_sequence) > max_len:\n                    max_len = len(current_sequence)\n                    best_moves = moves\n                return\n\n            if not current_sequence or remaining_arr[0] > current_sequence[-1]:\n                backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n\n            if not current_sequence or remaining_arr[-1] > current_sequence[-1]:\n                backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n        backtrack([], a, \"\")\n\n        return max_len, best_moves\n\n    length, moves = find_longest_increasing_subsequence(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    unique_vals = sorted(list(set(a)))\n\n    if len(unique_vals) > 3:\n        print(-1)\n        return\n\n    if len(unique_vals) == 1:\n        print(0)\n        return\n\n    if len(unique_vals) == 2:\n        val1, val2 = unique_vals\n        if (val1 + val2) % 2 == 0:\n            print((val2 - val1) // 2)\n        else:\n            print(val2 - val1)\n        return\n\n    if len(unique_vals) == 3:\n        val1, val2, val3 = unique_vals\n        if val2 - val1 == val3 - val2:\n            print(val2 - val1)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n    \n    # Calculate intersection of white and black 1\n    x_overlap_1 = max(0, min(x2, x4) - max(x1, x3))\n    y_overlap_1 = max(0, min(y2, y4) - max(y1, y3))\n    intersection_area_1 = x_overlap_1 * y_overlap_1\n    \n    # Calculate intersection of white and black 2\n    x_overlap_2 = max(0, min(x2, x6) - max(x1, x5))\n    y_overlap_2 = max(0, min(y2, y6) - max(y1, y5))\n    intersection_area_2 = x_overlap_2 * y_overlap_2\n\n    # Calculate intersection of white, black 1, and black 2\n    x_overlap_12 = max(0, min(x2, x4, x6) - max(x1, x3, x5))\n    y_overlap_12 = max(0, min(y2, y4, y6) - max(y1, y3, y5))\n    intersection_area_12 = x_overlap_12 * y_overlap_12\n    \n    # Calculate intersection of black 1 and black 2\n    x_black_overlap = max(0, min(x4, x6) - max(x3, x5))\n    y_black_overlap = max(0, min(y4, y6) - max(y3, y5))\n    black_overlap_area = x_black_overlap * y_black_overlap\n    \n    # Calculate intersection of white with (black 1 U black 2)\n    union_area = intersection_area_1 + intersection_area_2 - intersection_area_12\n\n    if white_area > union_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "56": "```python\ndef f(x):\n    x += 1\n    while x % 10 == 0:\n        x //= 10\n    return x\n\ndef solve():\n    n = int(input())\n    reachable = {n}\n    curr = n\n    while True:\n        curr = f(curr)\n        if curr in reachable:\n            break\n        reachable.add(curr)\n    print(len(reachable))\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n    \n    givers = list(range(1, n + 1))\n    receivers = list(range(1, n + 1))\n    \n    for gift in f:\n        if gift != 0:\n            if gift in receivers:\n                receivers.remove(gift)\n    \n    zeros_indices = [i for i, x in enumerate(f) if x == 0]\n    \n    for i, index in enumerate(zeros_indices):\n        giver = givers[index]\n        \n        if len(receivers) > 0:\n            potential_receiver = receivers[0]\n            \n            if potential_receiver != giver:\n                f[index] = potential_receiver\n                receivers.remove(potential_receiver)\n            else:\n                if len(receivers) > 1:\n                    potential_receiver = receivers[1]\n                    f[index] = potential_receiver\n                    receivers.remove(potential_receiver)\n                else:\n                    # Swap with another zero\n                    for j in range(len(zeros_indices)):\n                        if j != i:\n                            \n                            other_index = zeros_indices[j]\n                            \n                            temp = f[index]\n                            f[index] = receivers[0]\n                            f[other_index] = givers[index]\n\n                            if givers[index] != f[other_index] and receivers[0]!=givers[index]:\n                                f[other_index] = receivers[0]\n                                f[index] = givers[other_index]\n                                \n                                if givers[other_index] != f[index]:\n                                    \n                                    if len(receivers) > 1:\n                                        \n                                        \n                                        if len(receivers) > 0:\n                                            potential_receiver = receivers[0]\n                                            \n                                            if potential_receiver != givers[index]:\n                                                f[index] = potential_receiver\n                                                receivers.remove(potential_receiver)\n                                                break\n                                            else:\n                                                \n                                                if len(receivers) > 1:\n                                                    potential_receiver = receivers[1]\n                                                    f[index] = potential_receiver\n                                                    receivers.remove(potential_receiver)\n                                                    break\n                                    \n                                    \n                                    \n                                    \n                                \n                                break\n                            \n                            else:\n                                \n                                \n                                f[other_index] = 0\n                                f[index] = 0\n                                \n                                \n                                \n                                \n                    \n    \n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n\n    coloring = [0] * n\n    color_assignments = {}\n    color_index = 1\n\n    for i in range(n):\n        if a[i] not in color_assignments:\n            color_assignments[a[i]] = []\n        \n        if len(color_assignments[a[i]]) < k:\n            coloring[i] = color_index\n            color_assignments[a[i]].append(color_index)\n            color_index = (color_index % k) + 1\n        else:\n            coloring[i] = -1\n\n    color_counts = [0] * (k + 1)\n    for c in coloring:\n        if c != -1:\n            color_counts[c] += 1\n\n    missing_colors = []\n    for i in range(1, k + 1):\n        if color_counts[i] == 0:\n            missing_colors.append(i)\n\n    if missing_colors:\n        missing_index = 0\n        for i in range(n):\n            if coloring[i] == -1:\n                coloring[i] = missing_colors[missing_index]\n                missing_index = (missing_index + 1) % len(missing_colors)\n                \n    print(\"YES\")\n    print(*coloring)\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    a_list = list(map(int, list(a)))\n    \n    best_a = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a_list = a_list[:]\n            for k in range(i, j + 1):\n                temp_a_list[k] = f[temp_a_list[k] - 1]\n            \n            temp_a = \"\".join(map(str, temp_a_list))\n            \n            if temp_a > best_a:\n                best_a = temp_a\n    \n    print(best_a)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(A - a) + abs(B - b) + abs(C - c)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "63": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    a.sort()\n    \n    instability1 = a[n-2] - a[0]\n    instability2 = a[n-1] - a[1]\n    \n    print(min(instability1, instability2))\n\nsolve()\n```",
    "65": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    if n == m:\n        print(0)\n        return\n\n    if m % n != 0:\n        print(-1)\n        return\n\n    diff = m // n\n    \n    count = 0\n    while diff % 2 == 0:\n        diff //= 2\n        count += 1\n    \n    while diff % 3 == 0:\n        diff //= 3\n        count += 1\n        \n    if diff != 1:\n        print(-1)\n    else:\n        print(count)\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n\n    if k == 1:\n        print(t)\n        return\n\n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n\n    result = t + t[overlap:] * (k - 1)\n    print(result)\n\nsolve()\n```",
    "67": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    nice_indices = []\n    for i in range(n):\n        temp_arr = a[:i] + a[i+1:]\n        total_sum = sum(temp_arr)\n        \n        is_good = False\n        for j in range(len(temp_arr)):\n            if temp_arr[j] == (total_sum - temp_arr[j]):\n                is_good = True\n                break\n        \n        if is_good:\n            nice_indices.append(i + 1)\n    \n    print(len(nice_indices))\n    if nice_indices:\n        print(*nice_indices)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    counts = [[0] * 26 for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(26):\n            counts[i][j] = counts[i-1][j]\n        counts[i][ord(s[i-1]) - ord('a')] += 1\n\n    dp2 = [[0] * (n + 1) for _ in range(n + 1)]\n    dp2[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp2[i][0] = 1\n            if j > 0:\n                dp2[i][j] = dp2[i-1][j] + dp2[i-1][j-1]\n            else:\n                dp2[i][j] = dp2[i-1][j]\n            \n            \n    \n    subsequence_counts = []\n    for i in range(n + 1):\n        subsequence_counts.append(dp2[n][i])\n    \n    total_cost = 0\n    \n    if sum(subsequence_counts) < k:\n        print(\"-1\")\n        return\n    \n    \n    for length in range(n, -1, -1):\n      \n        if subsequence_counts[length] <= k:\n            total_cost += subsequence_counts[length] * (n - length)\n            k -= subsequence_counts[length]\n        else:\n            total_cost += k * (n - length)\n            k = 0\n            break\n            \n    print(total_cost)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    def check_degree(tree_edges):\n        degree = 0\n        for u, v in tree_edges:\n            if u == 1 or v == 1:\n                degree += 1\n        return degree\n\n    def find_spanning_tree(edges, n, d):\n        import itertools\n        for r in range(n, len(edges) + 1):\n            for combination in itertools.combinations(edges, n - 1):\n                \n                parent = list(range(n + 1))\n\n                def find(i):\n                    if parent[i] == i:\n                        return i\n                    parent[i] = find(parent[i])\n                    return parent[i]\n\n                def union(i, j):\n                    root_i = find(i)\n                    root_j = find(j)\n                    if root_i != root_j:\n                        parent[root_i] = root_j\n                        return True\n                    return False\n                \n                num_edges = 0\n                for u, v in combination:\n                    if union(u, v):\n                        num_edges += 1\n                \n                if num_edges == n - 1:\n                    if check_degree(combination) == d:\n                        return combination\n        return None\n\n    spanning_tree = find_spanning_tree(edges, n, d)\n\n    if spanning_tree:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "71": "```python\nimport math\n\ndef solve():\n  a = int(input())\n  if a == 1:\n    print(1)\n    return\n\n  print(math.ceil(math.log(a, 2)))\n\nsolve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] = min(dp[i][j], k)\n    \n    total_subsequences = sum(dp[n])\n    \n    if total_subsequences < k:\n        print(-1)\n        return\n    \n    cost = 0\n    current_length = n\n    \n    while k > 0:\n        count = dp[n][current_length]\n        \n        if count >= k:\n            cost += (n - current_length) * k\n            k = 0\n        else:\n            cost += (n - current_length) * count\n            k -= count\n        \n        n -= 1\n        current_length -= 1\n    \n    print(cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n  \n  weekly_schedule = [0, 1, 2, 0, 2, 1, 0] \n  \n  best_days = 0\n  \n  for start_day in range(7):\n    days = 0\n    fish = a\n    rabbit = b\n    chicken = c\n    \n    current_day = start_day\n    \n    while True:\n      food_type = weekly_schedule[current_day % 7]\n      \n      if food_type == 0:\n        if fish > 0:\n          fish -= 1\n          days += 1\n        else:\n          break\n      elif food_type == 1:\n        if rabbit > 0:\n          rabbit -= 1\n          days += 1\n        else:\n          break\n      else:\n        if chicken > 0:\n          chicken -= 1\n          days += 1\n        else:\n          break\n      \n      current_day += 1\n      \n    best_days = max(best_days, days)\n    \n  print(best_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tiles.append([list(map(int, input().split())) for _ in range(2)])\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n    n = int(input())\n    total_sum = n * (n + 1) // 2\n    if total_sum % 2 == 0:\n        print(0)\n    else:\n        print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    len_s = len(s)\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def contains_substring(seq, sub):\n        return sub in seq\n\n    count = 0\n    \n    def generate_sequences(length):\n      sequences = []\n      def backtrack(current_sequence, open_count, close_count):\n          if len(current_sequence) == length:\n              sequences.append(\"\".join(current_sequence))\n              return\n          \n          if open_count < length // 2:\n              current_sequence.append(\"(\")\n              backtrack(current_sequence, open_count + 1, close_count)\n              current_sequence.pop()\n          \n          if close_count < open_count:\n              current_sequence.append(\")\")\n              backtrack(current_sequence, open_count, close_count + 1)\n              current_sequence.pop()\n      \n      backtrack([], 0, 0)\n      return sequences\n\n\n    all_sequences = generate_sequences(2 * n)\n\n    for seq in all_sequences:\n        if is_regular(seq) and contains_substring(seq, s):\n            count = (count + 1) % mod\n\n    print(count)\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    \n    def calculate_moves(s):\n        moves = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                for j in range(i, 0, -1):\n                    s[j], s[j-1] = s[j-1], s[j]\n                    moves += 1\n                break\n        return moves, s\n    \n    def remove_leading_zeros(s):\n        first_digit_index = -1\n        for i in range(len(s)):\n            if s[i] != '0':\n                first_digit_index = i\n                break\n        \n        if first_digit_index == -1:\n            return -1, []\n        \n        return 0, s[first_digit_index:]\n    \n    \n    min_moves = float('inf')\n    \n    for suffix in ['00', '25', '50', '75']:\n        temp_n = list(n)\n        moves = 0\n        \n        # Find last digit of suffix\n        last_digit = suffix[1]\n        last_digit_index = -1\n        for i in range(n_len - 1, -1, -1):\n            if temp_n[i] == last_digit:\n                last_digit_index = i\n                break\n        \n        if last_digit_index == -1:\n            continue\n        \n        # Move last digit to the end\n        for i in range(last_digit_index, n_len - 1):\n            temp_n[i], temp_n[i+1] = temp_n[i+1], temp_n[i]\n            moves += 1\n        \n        # Find second last digit of suffix\n        second_last_digit = suffix[0]\n        second_last_digit_index = -1\n        for i in range(n_len - 2, -1, -1):\n            if temp_n[i] == second_last_digit:\n                second_last_digit_index = i\n                break\n        \n        if second_last_digit_index == -1:\n            continue\n        \n        # Move second last digit to second last position\n        for i in range(second_last_digit_index, n_len - 2):\n            temp_n[i], temp_n[i+1] = temp_n[i+1], temp_n[i]\n            moves += 1\n            \n        # Remove leading zeroes\n        remove_zeroes_moves, remaining_digits = remove_leading_zeros(temp_n[:n_len-2])\n        if remove_zeroes_moves == -1 :\n            continue\n            \n        min_moves = min(min_moves, moves + remove_zeroes_moves)\n    \n    if min_moves == float('inf'):\n        print(\"-1\")\n    else:\n        print(min_moves)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    colors = [0] * n\n    \n    def check(num_colors):\n        \n        def possible_to_sort(coloring):\n            arr = list(s)\n            \n            for _ in range(n * (n - 1) // 2):\n                swapped = False\n                for i in range(n - 1):\n                    if arr[i] > arr[i+1] and coloring[i] != coloring[i+1]:\n                        arr[i], arr[i+1] = arr[i+1], arr[i]\n                        swapped = True\n                if not swapped:\n                    break\n\n            return arr == sorted(list(s))\n\n        \n        import itertools\n        \n        for coloring in itertools.product(range(1, num_colors + 1), repeat=n):\n            if possible_to_sort(list(coloring)):\n                return True, list(coloring)\n        return False, None\n    \n    for num_colors in range(1, n + 1):\n        possible, coloring = check(num_colors)\n        if possible:\n            print(num_colors)\n            print(*coloring)\n            return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n  n = int(input())\n  strings = [input() for _ in range(n)]\n\n  def is_substring(a, b):\n    return a in b\n\n  strings.sort(key=len)\n\n  for i in range(1, n):\n    for j in range(i):\n      if not is_substring(strings[j], strings[i]):\n        print(\"NO\")\n        return\n\n  print(\"YES\")\n  for s in strings:\n    print(s)\n\nsolve()\n```",
    "83": "```python\nimport math\n\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for h in range(1, int(math.sqrt(total)) + 2):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: Red forms a rectangle\n            for h_a in range(1, int(math.sqrt(a)) + 2):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    if h_a <= h and w_a <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n            \n            # Case 2: Blue forms a rectangle\n            for h_b in range(1, int(math.sqrt(b)) + 2):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    if h_b <= h and w_b <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n                        \n    print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    def check(coloring):\n        zeros = []\n        ones = []\n        for i in range(n):\n            if coloring[i] == '0':\n                zeros.append(s[i])\n            else:\n                ones.append(s[i])\n        \n        zeros.sort()\n        ones.sort()\n        \n        merged = []\n        zero_idx = 0\n        one_idx = 0\n        for i in range(n):\n            if coloring[i] == '0':\n                merged.append(zeros[zero_idx])\n                zero_idx += 1\n            else:\n                merged.append(ones[one_idx])\n                one_idx += 1\n                \n        \n        sorted_s = sorted(s)\n        \n        if merged == sorted_s:\n            return True\n        else:\n            return False\n        \n    for i in range(2**n):\n        coloring = bin(i)[2:].zfill(n)\n        if check(coloring):\n            print(\"YES\")\n            print(coloring)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n  a, b = map(int, input().split())\n\n  for price in range(1, 2501):\n    tax_8 = int(price * 0.08)\n    tax_10 = int(price * 0.10)\n\n    if tax_8 == a and tax_10 == b:\n      print(price)\n      return\n\n  print(\"-1\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - sum(a)\n\n    if remaining == 0:\n        print(\"YES\")\n        print(*a)\n        return\n    \n    add = remaining // k\n    for i in range(k):\n        a[i] += add\n\n    remaining %= k\n    \n    for i in range(k - 1, -1, -1):\n        if remaining > 0:\n            a[i] += 1\n            remaining -= 1\n    \n    valid = True\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            valid = False\n            break\n    \n    if valid:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "87": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def check(subset):\n        pos = []\n        neg = []\n        for i in subset:\n            if projects[i][1] >= 0:\n                pos.append(i)\n            else:\n                neg.append(i)\n\n        pos.sort(key=lambda x: projects[x][0])\n        neg.sort(key=lambda x: projects[x][0] + projects[x][1], reverse=True)\n\n        current_rating = r\n        \n        for i in pos:\n            if current_rating >= projects[i][0]:\n                current_rating += projects[i][1]\n            else:\n                return False\n        \n        for i in neg:\n            if current_rating >= projects[i][0]:\n                current_rating += projects[i][1]\n                if current_rating < 0:\n                    return False\n            else:\n                return False\n        \n        if current_rating < 0:\n            return False\n            \n        return True\n\n    max_size = 0\n    for i in range(1 << n):\n        subset = []\n        for j in range(n):\n            if (i >> j) & 1:\n                subset.append(j)\n        \n        if check(subset):\n            max_size = max(max_size, len(subset))\n\n    print(max_size)\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def is_valid(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    return False\n        return True\n    \n    def is_palindromic(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[n-1-i][j] or matrix[i][j] != matrix[i][n-1-j]:\n                    return False\n        return True\n    \n    def backtrack(row, col):\n        if row == n:\n            if is_valid(matrix) and is_palindromic(matrix):\n                print(\"YES\")\n                for r in matrix:\n                    print(*r)\n                return True\n            else:\n                return False\n        \n        if col == n:\n            return backtrack(row + 1, 0)\n        \n        if matrix[row][col] != 0:\n            return backtrack(row, col + 1)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                counts[num] -= 1\n                matrix[row][col] = num\n                \n                row_sym = n - 1 - row\n                col_sym = n - 1 - col\n                \n                matrix[row_sym][col] = num\n                matrix[row][col_sym] = num\n                matrix[row_sym][col_sym] = num\n                \n                if backtrack(row, col + 1):\n                    return True\n                \n                counts[num] += 1\n                matrix[row][col] = 0\n                matrix[row_sym][col] = 0\n                matrix[row][col_sym] = 0\n                matrix[row_sym][col_sym] = 0\n        \n        return False\n\n    \n    if backtrack(0, 0):\n        return\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def can_complete(order):\n        current_rating = r\n        for i in order:\n            a, b = projects[i]\n            if current_rating < a:\n                return False\n            current_rating += b\n            if current_rating < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if can_complete(order):\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    if sum(c) + (m - 1) > n and d == 1:\n      print(\"NO\")\n      return\n    \n    if d > n:\n        print(\"YES\")\n        result = [0] * n\n        for i in range(sum(c)):\n            result[n - sum(c) + i] = m\n        print(*[0]*n)\n        return\n\n    \n    \n    \n    \n    needed_space = sum(c) + m -1\n    \n    if d == 1 and n > needed_space:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    \n        \n      \n        \n      \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            k = 0\n            l = 0\n            while k < len(temp_s) and l < m:\n                if temp_s[k] == t[l]:\n                    l += 1\n                k += 1\n            \n            if l == m:\n                ans = max(ans, j - i)\n    print(ans)\nsolve()\n```",
    "92": "```python\ndef solve():\n    x = float(input())\n    \n    a = int(x * 2.5)\n    b = int((x * 2.5) + 1)\n\n    print(a, b)\n\nsolve()\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        print(\"NO\")\n        return\n    \n    if k == 1 and n > 2:\n        print(\"NO\")\n        return\n\n    if k == 1 and n == 2 and d == 1:\n        print(\"YES\")\n        print(\"1 2\")\n        return\n\n    edges = []\n    \n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n    \n    remaining_nodes = n - d - 1\n    \n    if k == 1 and d != 1:\n        print(\"NO\")\n        return\n\n    \n    if d > 1 and k == 1:\n        print(\"NO\")\n        return\n    \n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n\n    next_node = d + 2\n    \n    def add_node(parent):\n        nonlocal next_node, remaining_nodes\n        if next_node > n:\n            return False\n        \n        if degrees[parent] < k:\n            edges.append((parent, next_node))\n            degrees[parent] += 1\n            degrees[next_node] += 1\n            next_node += 1\n            remaining_nodes -= 1\n            return True\n        return False\n\n    \n    for i in range(1, d + 2):\n        while degrees[i] < k and remaining_nodes > 0:\n            if not add_node(i):\n                break\n    \n    if remaining_nodes > 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for u, v in edges:\n            print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    res = \"\"\n    \n    while x > 1:\n        res += str(start)\n        if start == 0:\n            a -= 1\n            start = 1\n        else:\n            b -= 1\n            start = 0\n        x -= 1\n    \n    if start == 0:\n        res += \"0\" * a + \"1\" * b\n    else:\n        res += \"1\" * b + \"0\" * a\n        \n    print(res)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    def check(res, s, t):\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                return False\n        return True\n\n    import itertools\n    \n    chars = ['a'] * n + ['b'] * n + ['c'] * n\n    \n    for perm in itertools.permutations(chars):\n        res = \"\".join(perm)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            if 1 <= next_element <= n:\n                p.append(next_element)\n            else:\n                valid = False\n                break\n\n        if valid:\n            if len(set(p)) == n:\n                print(*p)\n                return\n\n    print(-1)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    ans = float('inf')\n    for target in range(1, 101):\n        cost = 0\n        for i in range(n):\n            cost += abs(x[i] - target) % 2\n        ans = min(ans, cost)\n    \n    print(ans)\n\nsolve()\n```",
    "98": "```python\ndef solve():\n    n = int(input())\n    \n    best_moves = float('inf')\n    \n    for i in range(1, int(n**0.5) + 2):\n        if n % i == 0:\n            j = n // i\n            moves = (i - 1) + (j - 1)\n            best_moves = min(best_moves, moves)\n    \n    print(best_moves)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3 - a3) - b2, a2 - (b2 + b1 - a1) - b3, a3 - (b3 + b2 - a2) - b1,0)\n\n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}