{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n    \n    if first_bracket == -1:\n        print(-1)\n        return\n    \n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n    \n    if last_bracket == -1 or last_bracket <= first_bracket:\n        print(-1)\n        return\n    \n    first_colon = -1\n    for i in range(first_bracket + 1, last_bracket):\n        if s[i] == ':':\n            first_colon = i\n            break\n    \n    if first_colon == -1:\n        print(-1)\n        return\n    \n    second_colon = -1\n    for i in range(last_bracket - 1, first_colon, -1):\n        if s[i] == ':':\n            second_colon = i\n            break\n    \n    if second_colon == -1 or second_colon <= first_colon:\n        print(-1)\n        return\n    \n    count = 0\n    for i in range(first_colon + 1, second_colon):\n        if s[i] == '|':\n            count += 1\n    \n    print(4 + count)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    \n    best_num = x\n    max_digit_sum = sum_digits(x)\n    \n    s = str(x)\n    n = len(s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0:\n            digit_sum = sum_digits(num)\n            \n            if digit_sum > max_digit_sum:\n                max_digit_sum = digit_sum\n                best_num = num\n            elif digit_sum == max_digit_sum and num > best_num:\n                best_num = num\n                \n    print(best_num)\n\ndef sum_digits(n):\n    s = str(n)\n    digit_sum = 0\n    for digit in s:\n        digit_sum += int(digit)\n    return digit_sum\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    l = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10**(l-1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    x = int(input())\n    hh, mm = map(int, input().split())\n\n    def is_lucky(h, m):\n        return '7' in str(h) or '7' in str(m)\n\n    count = 0\n    while True:\n        if is_lucky(hh, mm):\n            print(count)\n            return\n\n        mm -= x\n        if mm < 0:\n            mm += 60\n            hh -= 1\n            if hh < 0:\n                hh += 24\n        \n        count += 1\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n\n    if l == 1 and r == n:\n        print(0)\n        return\n\n    if l == 1:\n        print(abs(pos - r) + 1)\n        return\n\n    if r == n:\n        print(abs(pos - l) + 1)\n        return\n\n    print(min(abs(pos - l) + abs(r - l) + 2, abs(pos - r) + abs(r - l) + 2))\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_damage = 0\n    for d, h in blows:\n        max_damage = max(max_damage, d)\n\n    if max_damage >= x:\n        print(1)\n        return\n\n    max_diff = 0\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_damage\n    \n    blows_needed = (remaining + max_diff - 1) // max_diff\n    \n    print(blows_needed + 1)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    day = 0\n    grains = n\n    \n    while True:\n        day += 1\n        grains = min(n, grains + m)\n        grains -= day\n        \n        if grains <= 0:\n            print(day)\n            return\n\nsolve()\n```",
    "8": "```python\ndef solve():\n    tiles = input().split()\n    \n    def check_mentsu(hand):\n        # Check for koutsu\n        for i in range(len(hand)):\n            count = 0\n            for j in range(len(hand)):\n                if hand[i] == hand[j]:\n                    count += 1\n            if count >= 3:\n                return True\n        \n        # Check for shuntsu\n        for i in range(len(hand)):\n            for j in range(i + 1, len(hand)):\n                for k in range(j + 1, len(hand)):\n                    t1 = hand[i]\n                    t2 = hand[j]\n                    t3 = hand[k]\n                    \n                    if t1[1] == t2[1] == t3[1]:\n                        nums = sorted([int(t1[0]), int(t2[0]), int(t3[0])])\n                        if nums[1] == nums[0] + 1 and nums[2] == nums[1] + 1:\n                            return True\n        \n        return False\n    \n    if check_mentsu(tiles):\n        print(0)\n        return\n    \n    # Try drawing one tile\n    suits = ['m', 'p', 's']\n    for i in range(1, 10):\n        for suit in suits:\n            new_tile = str(i) + suit\n            new_hand = tiles + [new_tile]\n            if check_mentsu(new_hand):\n                print(1)\n                return\n    \n    # Try drawing two tiles\n    print(2)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        min_x = min(x1, x2)\n        min_y = min(y1, y2)\n        max_y = max(y1, y2)\n        \n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            min_x_other = min(x1_other, x2_other)\n            min_y_other = min(y1_other, y2_other)\n            max_y_other = max(y1_other, y2_other)\n\n            if min_x > max(y1_other, y2_other):\n                continue\n            \n            if min_x > min(x1_other, x2_other):\n                count += 1\n        return count\n\n    def count_right(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        max_x = max(x1, x2)\n        min_y = min(y1, y2)\n        max_y = max(y1, y2)\n\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            max_x_other = max(x1_other, x2_other)\n            min_y_other = min(y1_other, y2_other)\n            max_y_other = max(y1_other, y2_other)\n\n            if max_x < min(x1_other, x2_other):\n                count += 1\n        return count\n\n    def count_top(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        min_y = min(y1, y2)\n        min_x = min(x1, x2)\n        max_x = max(x1, x2)\n\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            min_y_other = min(y1_other, y2_other)\n            min_x_other = min(x1_other, x2_other)\n            max_x_other = max(x1_other, x2_other)\n\n            if min_y > max(x1_other, x2_other):\n                continue\n            \n            if min_y > min(y1_other, y2_other):\n                count += 1\n        return count\n\n    def count_bottom(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        max_y = max(y1, y2)\n        min_x = min(x1, x2)\n        max_x = max(x1, x2)\n\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            max_y_other = max(y1_other, y2_other)\n            min_x_other = min(x1_other, x2_other)\n            max_x_other = max(x1_other, x2_other)\n\n            if max_y < min(y1_other, y2_other):\n                count += 1\n        return count\n\n    for i in range(d):\n        l = count_left(i)\n        r = count_right(i)\n        t = count_top(i)\n        b = count_bottom(i)\n\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n  n = int(input())\n  \n  min_days_off = (n // 7) * 2\n  max_days_off = (n // 7) * 2\n  \n  remaining_days = n % 7\n  \n  if remaining_days == 1:\n    min_days_off += 0\n    max_days_off += 1\n  elif remaining_days == 2:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 3:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 4:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 5:\n    min_days_off += 0\n    max_days_off += 2\n  elif remaining_days == 6:\n    min_days_off += 1\n    max_days_off += 2\n  \n  print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef solve():\n    n, a, b, p, q = map(int, input().split())\n\n    red_count = n // a\n    blue_count = n // b\n    \n    lcm_val = (a * b) // gcd(a, b)\n    \n    both_count = n // lcm_val\n\n    red_only = red_count - both_count\n    blue_only = blue_count - both_count\n\n    if p > q:\n        total_chocolates = (red_only * p) + (both_count * p) + (blue_only * q)\n    else:\n        total_chocolates = (red_only * p) + (both_count * q) + (blue_only * q)\n\n    print(total_chocolates)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nsolve()\n```",
    "12": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    golds = s.count('G')\n    \n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            temp_s = list(s)\n            temp_s[i], temp_s[j] = temp_s[j], temp_s[i]\n            temp_s = \"\".join(temp_s)\n            \n            current_len = 0\n            max_current_len = 0\n            for k in range(n):\n                if temp_s[k] == 'G':\n                    current_len += 1\n                else:\n                    max_current_len = max(max_current_len, current_len)\n                    current_len = 0\n            max_current_len = max(max_current_len, current_len)\n            \n            max_len = max(max_len, max_current_len)\n    \n    if golds == 0:\n        print(0)\n    else:\n        print(min(max_len, golds))\n\nsolve()\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = set(map(int, input().split()))\n    dependencies = []\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        line = list(map(int, input().split()))\n        t = line[0]\n        deps = line[1:]\n        dependencies.append(deps)\n        for dep in deps:\n            adj[dep].append(i)\n            in_degree[i] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n\n    order = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(\"-1\")\n        return\n\n    \n    required_courses = set(main_courses)\n    result = []\n    visited = [False] * (n + 1)\n\n    def dfs(course):\n        if visited[course]:\n            return\n        visited[course] = True\n        for dep in dependencies[course - 1]:\n            if not visited[dep]:\n                dfs(dep)\n        result.append(course)\n    \n    for course in main_courses:\n        if not visited[course]:\n            dfs(course)\n    \n    result.reverse()\n    \n    final_result = []\n    final_visited = [False] * (n + 1)\n    \n    def dfs2(course):\n        if final_visited[course]:\n            return\n        final_visited[course] = True\n        for dep in dependencies[course - 1]:\n            if not final_visited[dep]:\n                dfs2(dep)\n        final_result.append(course)\n    \n    for course in main_courses:\n        if not final_visited[course]:\n            dfs2(course)\n            \n    final_result.reverse()\n    \n    print(len(final_result))\n    print(*final_result)\n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    def is_stack_sortable(arr):\n        stack = []\n        b = []\n        i = 0\n        while i < len(arr) or stack:\n            if stack and (i == len(arr) or stack[-1] < arr[i]):\n                b.append(stack.pop())\n            elif i < len(arr):\n                stack.append(arr[i])\n                i += 1\n            else:\n                return False\n        \n        for i in range(len(b) - 1):\n            if b[i] > b[i+1]:\n                return False\n        return True\n\n    remaining = sorted(list(set(range(1, n + 1)) - set(p)), reverse=True)\n    \n    permutation = p[:]\n    \n    for _ in range(n - k):\n        permutation.append(remaining.pop(0))\n\n    if is_stack_sortable(permutation):\n        print(*permutation)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "15": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n\n  if c == 0:\n    if a == b:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n    return\n\n  if (b - a) % c == 0 and (b - a) // c >= 0:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n    \n    if cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0:\n        print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(k - (t - n))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    suffix_min = [0] * (n + 1)\n    suffix_min[n] = 'z'\n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    t = []\n    u = \"\"\n    \n    for i in range(n):\n        while t and t[-1] <= suffix_min[i]:\n            u += t.pop()\n        t.append(s[i])\n        \n    while t:\n        u += t.pop()\n        \n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    time_str = input()\n    hh = int(time_str[:2])\n    mm = int(time_str[3:])\n\n    minutes = 0\n    while True:\n        hh_str = str(hh).zfill(2)\n        mm_str = str(mm).zfill(2)\n        \n        if hh_str == mm_str[::-1]:\n            print(minutes)\n            return\n\n        minutes += 1\n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    pos_min = a.index(1)\n    pos_max = a.index(n)\n\n    ans = abs(pos_min - pos_max)\n\n    ans = max(ans, abs(0 - pos_min))\n    ans = max(ans, abs(n - 1 - pos_min))\n    ans = max(ans, abs(0 - pos_max))\n    ans = max(ans, abs(n - 1 - pos_max))\n\n    print(ans)\n\nsolve()\n```",
    "22": "```python\ndef is_s_palindrome(s):\n  \"\"\"\n  Checks if a string is an \"s-palindrome\".\n\n  Args:\n    s: The string to check.\n\n  Returns:\n    \"TAK\" if the string is an \"s-palindrome\", \"NIE\" otherwise.\n  \"\"\"\n\n  mirror_chars = {\n      'b': 'd',\n      'd': 'b',\n      'p': 'q',\n      'q': 'p',\n      'o': 'o',\n      'x': 'x',\n      'X': 'X',\n      'H': 'H',\n      'I': 'I',\n      'M': 'M',\n      'O': 'O',\n      'T': 'T',\n      'U': 'U',\n      'V': 'V',\n      'v': 'v',\n      'W': 'W',\n      'w': 'w',\n      'Y': 'Y',\n      'A': 'A',\n      'm': 'm',\n      't': 't',\n      'u': 'u',\n      'i': 'i'\n  }\n\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] not in mirror_chars or s[n - 1 - i] not in mirror_chars:\n      return \"NIE\"\n    if mirror_chars.get(s[i]) != s[n - 1 - i]:\n      return \"NIE\"\n\n  if n % 2 == 1:\n    if s[n // 2] not in mirror_chars or mirror_chars.get(s[n // 2]) != s[n // 2]:\n      return \"NIE\"\n\n  return \"TAK\"\n\n\nif __name__ == \"__main__\":\n  s = input()\n  print(is_s_palindrome(s))\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n\n    a_digits = sorted(list(a), reverse=True)\n    b_digits = list(b)\n\n    if len(a) > len(b):\n        print(\"\".join(a_digits))\n        return\n\n    a_counts = Counter(a)\n\n    def find_max_permutation(index, current_num, remaining_counts):\n        if index == len(a):\n            return current_num\n\n        best_num = \"\"\n        for digit in sorted(remaining_counts.keys(), reverse=True):\n            if remaining_counts[digit] > 0:\n                temp_counts = remaining_counts.copy()\n                temp_counts[digit] -= 1\n                if temp_counts[digit] == 0:\n                    del temp_counts[digit]\n\n                new_num = current_num + digit\n\n                if len(new_num) == len(b):\n                    if new_num <= b:\n                        return new_num\n                    else:\n                        continue\n\n                if new_num <= \"\".join(b_digits[:len(new_num)]):\n                    result = find_max_permutation(index + 1, new_num, temp_counts)\n                    if result and (not best_num or result > best_num):\n                        best_num = result\n        return best_num\n\n    result = find_max_permutation(0, \"\", a_counts)\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(list(input()))\n\n    def check_win(board):\n        for i in range(10):\n            for j in range(10):\n                if board[i][j] == 'X':\n                    # Check horizontal\n                    if j <= 5 and all(board[i][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check vertical\n                    if i <= 5 and all(board[i+k][j] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 5 and j <= 5 and all(board[i+k][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= 5 and j >= 4 and all(board[i+k][j-k] == 'X' for k in range(5)):\n                        return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n                if check_win(board):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n    \n    if k > n * n:\n        print(\"-1\")\n        return\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n            \n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] == 0 and matrix[j][i] == 0 and k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n                \n    if k > 0:\n        print(\"-1\")\n        return\n    \n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\ndef solve():\n    x, y, z = map(float, input().split())\n\n    a1 = x**(y**z)\n    a2 = x**(z**y)\n    a3 = (x**y)**z\n    a4 = (x**z)**y\n    a5 = y**(x**z)\n    a6 = y**(z**x)\n    a7 = (y**x)**z\n    a8 = (y**z)**x\n    a9 = z**(x**y)\n    a10 = z**(y**x)\n    a11 = (z**x)**y\n    a12 = (z**y)**x\n\n    values = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\n    expressions = [\n        \"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\",\n        \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"\n    ]\n\n    max_val = max(values)\n    max_index = values.index(max_val)\n\n    print(expressions[max_index])\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s[:2*i].startswith(prefix):\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n\n    moves = []\n    e = len(examples)\n\n    # Move examples to the front\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            \n            # Find if the target position is already occupied by an example\n            target_occupied_by_example = False\n            for j in range(e):\n                if examples[j][0] == str(i + 1):\n                    target_occupied_by_example = True\n                    break\n            \n            if target_occupied_by_example:\n                # Find a temporary name\n                temp_name = \"temp\"\n                temp_idx = 0\n                while True:\n                    temp_name_with_idx = temp_name + str(temp_idx)\n                    \n                    name_exists = False\n                    for k in range(n):\n                        if files[k][0] == temp_name_with_idx:\n                            name_exists = True\n                            break\n                    \n                    if not name_exists:\n                        break\n                    \n                    temp_idx += 1\n                \n                moves.append(f\"move {examples[i][0]} {temp_name_with_idx}\")\n                \n                # Find the file at the target position\n                target_file = \"\"\n                for k in range(n):\n                    if files[k][0] == str(i + 1):\n                        target_file = files[k][0]\n                        break\n                \n                moves.append(f\"move {target_file} {str(i + 1)}\")\n                moves.append(f\"move {temp_name_with_idx} {str(i + 1)}\")\n                \n                # Update the examples list\n                for j in range(len(examples)):\n                    if examples[j][0] == str(i + 1):\n                        examples[j] = (str(i + 1), examples[j][1])\n                        break\n                examples[i] = (str(i + 1), examples[i][1])\n            else:\n                moves.append(f\"move {examples[i][0]} {str(i + 1)}\")\n                examples[i] = (str(i + 1), examples[i][1])\n\n    # Move regular tests to the back\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            \n            # Find if the target position is already occupied by a regular test\n            target_occupied_by_regular = False\n            for j in range(len(regular)):\n                if regular[j][0] == str(e + i + 1):\n                    target_occupied_by_regular = True\n                    break\n            \n            if target_occupied_by_regular:\n                # Find a temporary name\n                temp_name = \"temp\"\n                temp_idx = 0\n                while True:\n                    temp_name_with_idx = temp_name + str(temp_idx)\n                    \n                    name_exists = False\n                    for k in range(n):\n                        if files[k][0] == temp_name_with_idx:\n                            name_exists = True\n                            break\n                    \n                    if not name_exists:\n                        break\n                    \n                    temp_idx += 1\n                \n                moves.append(f\"move {regular[i][0]} {temp_name_with_idx}\")\n                \n                # Find the file at the target position\n                target_file = \"\"\n                for k in range(n):\n                    if files[k][0] == str(e + i + 1):\n                        target_file = files[k][0]\n                        break\n                \n                moves.append(f\"move {target_file} {str(e + i + 1)}\")\n                moves.append(f\"move {temp_name_with_idx} {str(e + i + 1)}\")\n                \n                # Update the regular list\n                for j in range(len(regular)):\n                    if regular[j][0] == str(e + i + 1):\n                        regular[j] = (str(e + i + 1), regular[j][1])\n                        break\n                regular[i] = (str(e + i + 1), regular[i][1])\n            else:\n                moves.append(f\"move {regular[i][0]} {str(e + i + 1)}\")\n                regular[i] = (str(e + i + 1), regular[i][1])\n\n    print(len(moves))\n    for move in moves:\n        print(move)\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    ans = 6\n    for i in range(1000):\n        s1 = str(i).zfill(3)\n        for j in range(1000):\n            s2 = str(j).zfill(3)\n            if sum(int(d) for d in s1) == sum(int(d) for d in s2):\n                cnt = 0\n                temp = s1 + s2\n                for k in range(6):\n                    if s[k] != temp[k]:\n                        cnt += 1\n                ans = min(ans, cnt)\n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    if k == 2:\n        pow_2_n_mod = pow(2, n, mod)\n        print(1, pow_2_n_mod)\n        return\n\n    num = 1\n    den = 1\n    \n    for i in range(int(k)):\n        if i == 0:\n            continue\n        num = (num * (pow(2, n, mod) - i)) % mod\n        den = (den * pow(2, n, mod)) % mod\n\n    \n    \n    inv_den = pow(den, mod - 2, mod)\n    prob_diff = (num * inv_den) % mod\n    \n    a = (1 - prob_diff + mod) % mod\n    b = 1\n    \n    print(a, 1)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 is North Pole, 20000 is South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if current_pos == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n        \n        if direction == \"North\":\n            current_pos -= t\n            if current_pos < 0:\n                current_pos = 0\n        elif direction == \"South\":\n            current_pos += t\n            if current_pos > 20000:\n                current_pos = 20000\n        \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    d, x, y = extended_gcd(a1, a2)\n    \n    x *= (b2 - b1) // d\n    y *= (b2 - b1) // d\n\n    lcm = (a1 * a2) // g\n\n    k = (x * a1 + b1)\n    \n    \n    first = k % lcm\n    if first < 0:\n        first += lcm\n    \n    \n    start = first\n    \n    while start < L:\n        start += lcm\n        \n    count = 0\n    while start <= R:\n        count += 1\n        start += lcm\n        \n    print(count)\n\nsolve()\n```",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    max_x = 0\n    for i in range(1, n):\n        if i >= 1 and i < n:\n            x1 = a // i\n            x2 = b // (n - i)\n            \n            if x1 > 0 and x2 > 0:\n                max_x = max(max_x, min(x1, x2))\n    \n    print(max_x)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n\n    if n == 0:\n        print(0, 0)\n        return\n\n    layer = 0\n    count = 0\n    while True:\n        if count + 6 * layer <= n:\n            count += 6 * layer\n            layer += 1\n        else:\n            layer -= 1\n            break\n\n    remaining = n - count\n    layer += 1\n\n    if remaining == 0:\n        x = 2 * layer - 1\n        y = layer\n    elif remaining <= layer:\n        x = 2 * layer - remaining\n        y = layer + 2 * remaining\n    elif remaining <= 2 * layer:\n        x = layer - 2 * (remaining - layer)\n        y = 3 * layer\n    elif remaining <= 3 * layer:\n        x = -layer - (remaining - 2 * layer)\n        y = layer + 2 * (3 * layer - remaining)\n    elif remaining <= 4 * layer:\n        x = -2 * layer + (remaining - 3 * layer)\n        y = -layer - 2 * (remaining - 3 * layer)\n    elif remaining <= 5 * layer:\n        x = -layer + 2 * (remaining - 4 * layer)\n        y = -3 * layer\n    else:\n        x = layer + (remaining - 5 * layer)\n        y = -layer - 2 * (6 * layer - remaining)\n\n    print(x, y)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n  a, b, c = map(int, input().split())\n\n  for i in range(c // a + 1):\n    remaining_damage = c - i * a\n    if remaining_damage >= 0 and remaining_damage % b == 0:\n      print(\"Yes\")\n      return\n\n  print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for start_diff in range(l):\n        possible = True\n        for i in range(n):\n            kefa_dist = kefa[i]\n            sasha_dist = (sasha[0] + start_diff) % l\n            \n            found = False\n            for j in range(n):\n                if (sasha[j] + start_diff) % l == kefa_dist:\n                    found = True\n                    break\n            if not found:\n                possible = False\n                break\n        \n        if possible:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "40": "```python\ndef solve():\n    n = int(input())\n    ratings = []\n    for _ in range(n):\n        ratings.append(list(map(int, input().split())))\n\n    changed = False\n    for a, b in ratings:\n        if a != b:\n            changed = True\n            break\n\n    if changed:\n        print(\"rated\")\n        return\n\n    sorted_flag = True\n    for i in range(n - 1):\n        if ratings[i][0] < ratings[i+1][0]:\n            sorted_flag = False\n            break\n\n    if not sorted_flag:\n        print(\"unrated\")\n    else:\n        print(\"maybe\")\n\nsolve()\n```",
    "41": "```python\ndef nearest_zero(arr):\n  \"\"\"\n  Calculates the distance to the nearest zero for each element in the array.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    A list of integers representing the distances to the nearest zero for each element.\n  \"\"\"\n\n  n = len(arr)\n  distances = [float('inf')] * n\n\n  # Forward pass: Find distances to the nearest zero from the left\n  last_zero = float('-inf')\n  for i in range(n):\n    if arr[i] == 0:\n      last_zero = i\n      distances[i] = 0\n    elif last_zero != float('-inf'):\n      distances[i] = min(distances[i], i - last_zero)\n\n  # Backward pass: Find distances to the nearest zero from the right\n  last_zero = float('inf')\n  for i in range(n - 1, -1, -1):\n    if arr[i] == 0:\n      last_zero = i\n      distances[i] = 0\n    elif last_zero != float('inf'):\n      distances[i] = min(distances[i], last_zero - i)\n\n  return distances\n\n\nif __name__ == \"__main__\":\n  n = int(input())\n  arr = list(map(int, input().split()))\n  result = nearest_zero(arr)\n  print(*result)\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    distinct_strings = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        if binary_string in distinct_strings:\n            continue\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            \n            # Add all cyclical shifts to the set to avoid duplicates\n            for j in range(n):\n                shifted_string = binary_string[j:] + binary_string[:j]\n                distinct_strings.add(shifted_string)\n    \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    def angle(v):\n        x, y = v\n        return math.atan2(y, x)\n\n    angles = []\n    for i in range(n):\n        angles.append(angle(vectors[i]))\n\n    min_angle_diff = float('inf')\n    best_pair = (0, 0)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle1 = angles[i]\n            angle2 = angles[j]\n\n            diff = abs(angle1 - angle2)\n            diff = min(diff, 2 * math.pi - diff)\n\n            if diff < min_angle_diff:\n                min_angle_diff = diff\n                best_pair = (i + 1, j + 1)\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\ndef solve():\n    d, k, a, b, t = map(int, input().split())\n\n    if d <= k:\n        print(d * a)\n    else:\n        cost_driving_all = k * a + t + (d - k) * a\n        cost_drive_k_walk_rest = k * a + (d - k) * b\n\n        num_breaks = (d - 1) // k\n        \n        cost_with_breaks = 0\n        \n        if num_breaks == 0:\n            cost_with_breaks = d * a\n        else:\n            cost_with_breaks = (num_breaks) * (k * a + t) + (d - num_breaks * k) * a\n        \n        \n        cost_with_breaks_walk_last = (num_breaks) * (k * a + t) + (d - num_breaks * k) * b\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, i)\n            if i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // i)\n\n    first = best_gcd\n    result = []\n    for i in range(1, k):\n        result.append(first * i)\n    result.append(n // best_gcd * best_gcd - sum(result))\n    \n    if any(x <= 0 for x in result):\n        print(-1)\n        return\n    \n    if len(set(result)) != len(result):\n        print(-1)\n        return\n\n    if sum(result) != n:\n        print(-1)\n        return\n\n    if not all(x % best_gcd == 0 for x in result):\n        print(-1)\n        return\n\n    if not all(result[i] < result[i+1] for i in range(len(result)-1)):\n        print(-1)\n        return\n    \n    print(*result)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n    n, m = map(int, input().split())\n    count = 0\n    for x in range(1, n + 1):\n        for y in range(1, m + 1):\n            if (x + y) % 5 == 0:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    low = 1\n    high = n * m\n    ans = 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\ndef solve():\n    k = int(input())\n    \n    digits = 0\n    count = 0\n    power_of_10 = 1\n    length = 1\n    \n    while True:\n        num_numbers = 9 * power_of_10\n        num_digits = num_numbers * length\n        \n        if count + num_digits >= k:\n            break\n        \n        count += num_digits\n        length += 1\n        power_of_10 *= 10\n    \n    remaining = k - count\n    number_index = (remaining - 1) // length\n    digit_index = (remaining - 1) % length\n    \n    number = power_of_10 + number_index\n    number_str = str(number)\n    \n    print(number_str[digit_index])\n\nsolve()\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def get_dp(row_idx, rem):\n        if (row_idx, rem) in dp:\n            return dp[(row_idx, rem)]\n        return None\n\n    def set_dp(row_idx, rem, value):\n        dp[(row_idx, rem)] = value\n\n    def calculate_max_sum(row_idx, rem):\n        if row_idx == n:\n            if rem == 0:\n                return 0\n            else:\n                return float('-inf')\n\n        cached_value = get_dp(row_idx, rem)\n        if cached_value is not None:\n            return cached_value\n\n        max_elements = m // 2\n        max_sum = float('-inf')\n\n        # Option 1: Don't choose any element from this row\n        max_sum = max(max_sum, calculate_max_sum(row_idx + 1, rem))\n\n        # Option 2: Choose some elements from this row\n        for i in range(1 << m):\n            chosen_elements = []\n            for j in range(m):\n                if (i >> j) & 1:\n                    chosen_elements.append(a[row_idx][j])\n\n            if len(chosen_elements) <= max_elements:\n                current_sum = sum(chosen_elements)\n                new_rem = (rem - (current_sum % k)) % k\n                if new_rem < 0:\n                    new_rem += k\n                max_sum = max(max_sum, current_sum + calculate_max_sum(row_idx + 1, new_rem))\n\n        set_dp(row_idx, rem, max_sum)\n        return max_sum\n\n    print(calculate_max_sum(0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_sequence, remaining_arr, moves):\n            nonlocal max_len, best_moves\n\n            if len(current_sequence) > max_len:\n                max_len = len(current_sequence)\n                best_moves = moves\n\n            if not remaining_arr:\n                return\n\n            if not current_sequence:\n                # Take left\n                backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n            else:\n                last_element = current_sequence[-1]\n                \n                # Take left\n                if remaining_arr[0] > last_element:\n                    backtrack(current_sequence + [remaining_arr[0]], remaining_arr[1:], moves + \"L\")\n                # Take right\n                if remaining_arr[-1] > last_element:\n                    backtrack(current_sequence + [remaining_arr[-1]], remaining_arr[:-1], moves + \"R\")\n\n        backtrack([], a, \"\")\n        return max_len, best_moves\n\n    def find_longest_increasing_sequence_optimized(arr):\n        n = len(arr)\n        max_len = 0\n        best_moves = \"\"\n\n        def solve_recursive(left, right, last_val, moves):\n            nonlocal max_len, best_moves\n\n            if left > right:\n                if len(moves) > max_len:\n                    max_len = len(moves)\n                    best_moves = moves\n                return\n\n            if arr[left] > last_val and arr[right] > last_val:\n                if arr[left] < arr[right]:\n                    solve_recursive(left + 1, right, arr[left], moves + \"L\")\n                    if len(moves) + 1 > max_len:\n                        solve_recursive(left, right - 1, arr[right], moves + \"R\")\n                elif arr[left] > arr[right]:\n                    solve_recursive(left, right - 1, arr[right], moves + \"R\")\n                    if len(moves) + 1 > max_len:\n                        solve_recursive(left + 1, right, arr[left], moves + \"L\")\n                else:\n                    len_left = 0\n                    temp_left = left\n                    last_left = arr[left]\n                    while temp_left <= right and arr[temp_left] > last_left:\n                        len_left += 1\n                        last_left = arr[temp_left]\n                        temp_left += 1\n\n                    len_right = 0\n                    temp_right = right\n                    last_right = arr[right]\n                    while temp_right >= left and arr[temp_right] > last_right:\n                        len_right += 1\n                        last_right = arr[temp_right]\n                        temp_right -= 1\n                    \n                    if len_left > len_right:\n                        solve_recursive(left + len_left, right, arr[left + len_left -1], moves + \"L\" * len_left)\n                    else:\n                        solve_recursive(left, right - len_right, arr[right - len_right + 1], moves + \"R\" * len_right)\n            elif arr[left] > last_val:\n                solve_recursive(left + 1, right, arr[left], moves + \"L\")\n            elif arr[right] > last_val:\n                solve_recursive(left, right - 1, arr[right], moves + \"R\")\n            else:\n                if len(moves) > max_len:\n                    max_len = len(moves)\n                    best_moves = moves\n                return\n\n        solve_recursive(0, n - 1, 0, \"\")\n        return max_len, best_moves\n    \n    \n    def find_longest_increasing_sequence_iterative(arr):\n        n = len(arr)\n        \n        max_len = 0\n        best_moves = \"\"\n        \n        for start_side in ['L', 'R']:\n            \n            q = [(0, n - 1, 0, \"\", -1)] # (left, right, last_val, moves, last_side)\n            \n            while q:\n                left, right, last_val, moves, last_side = q.pop(0)\n                \n                if left > right:\n                    if len(moves) > max_len:\n                        max_len = len(moves)\n                        best_moves = moves\n                    continue\n                \n                \n                if arr[left] > last_val and arr[right] > last_val:\n                    if arr[left] < arr[right]:\n                        q.append((left + 1, right, arr[left], moves + \"L\", 0))\n                        q.append((left, right - 1, arr[right], moves + \"R\", 1))\n                    elif arr[left] > arr[right]:\n                        q.append((left, right - 1, arr[right], moves + \"R\", 1))\n                        q.append((left + 1, right, arr[left], moves + \"L\", 0))\n                    else:\n                        len_left = 0\n                        temp_left = left\n                        last_left = arr[left]\n                        while temp_left <= right and arr[temp_left] > last_left:\n                            len_left += 1\n                            last_left = arr[temp_left]\n                            temp_left += 1\n\n                        len_right = 0\n                        temp_right = right\n                        last_right = arr[right]\n                        while temp_right >= left and arr[temp_right] > last_right:\n                            len_right += 1\n                            last_right = arr[temp_right]\n                            temp_right -= 1\n                        \n                        if len_left > len_right:\n                            q.append((left + len_left, right, arr[left + len_left -1], moves + \"L\" * len_left, 0))\n                        else:\n                            q.append((left, right - len_right, arr[right - len_right + 1], moves + \"R\" * len_right, 1))\n                elif arr[left] > last_val:\n                    q.append((left + 1, right, arr[left], moves + \"L\", 0))\n                elif arr[right] > last_val:\n                    q.append((left, right - 1, arr[right], moves + \"R\", 1))\n                else:\n                    if len(moves) > max_len:\n                        max_len = len(moves)\n                        best_moves = moves\n                    continue\n        \n        return max_len, best_moves\n    \n    \n    \n    length, moves = find_longest_increasing_sequence_optimized(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    unique_values = sorted(list(set(a)))\n\n    if len(unique_values) > 3:\n        print(-1)\n        return\n\n    if len(unique_values) == 1:\n        print(0)\n        return\n\n    if len(unique_values) == 2:\n        val1, val2 = unique_values\n        d = abs(val1 - val2)\n        if d % 2 == 0:\n            print(d // 2)\n        else:\n            print(d // 2)\n        return\n\n    if len(unique_values) == 3:\n        val1, val2, val3 = unique_values\n        if val2 - val1 == val3 - val2:\n            print(val2 - val1)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n\n    def intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n        x_overlap = max(0, min(x2, x4) - max(x1, x3))\n        y_overlap = max(0, min(y2, y4) - max(y1, y3))\n        return x_overlap * y_overlap\n\n    intersection1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    intersection2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n\n    # Calculate the intersection of the two black sheets with the white sheet\n    x_overlap_black = max(0, min(x4, x6) - max(x3, x5))\n    y_overlap_black = max(0, min(y4, y6) - max(y3, y5))\n    intersection_black_sheets = x_overlap_black * y_overlap_black\n\n    intersection_all = intersection_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n\n    covered_area = intersection1 + intersection2 - intersection_area(max(x1, x3, x5), max(y1, y3, y5), min(x2, x4, x6), min(y2, y4, y6), max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n    \n    if white_area > covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    assigned = [False] * (n + 1)\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i]] = True\n\n    unassigned_givers = []\n    unassigned_receivers = []\n    for i in range(n):\n        if f[i] == 0:\n            unassigned_givers.append(i)\n\n    for i in range(1, n + 1):\n        if not assigned[i]:\n            unassigned_receivers.append(i)\n\n    for i in range(len(unassigned_givers)):\n        f[unassigned_givers[i]] = unassigned_receivers[i]\n\n    for i in range(n):\n        if f[i] == i + 1:\n            for j in range(len(unassigned_givers)):\n                if unassigned_givers[j] != i:\n                    f[unassigned_givers[j]], f[i] = f[i], f[unassigned_givers[j]]\n                    break\n            else:\n                for j in range(n):\n                    if j != i and f[j] != j + 1:\n                        f[j], f[i] = f[i], f[j]\n                        break\n\n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n\n    colors = [0] * n\n    color_map = {}\n    color_idx = 1\n    \n    indices = list(range(n))\n    indices.sort(key=lambda i: a[i])\n\n    for i in indices:\n        val = a[i]\n        if val not in color_map:\n            color_map[val] = []\n        \n        if len(color_map[val]) < k:\n            colors[i] = color_idx\n            color_map[val].append(color_idx)\n            color_idx = (color_idx % k) + 1\n        else:\n            colors[i] = 0\n\n    \n    color_counts = [0] * (k + 1)\n    for color in colors:\n        if 1 <= color <= k:\n            color_counts[color] += 1\n\n    \n    for i in range(1, k + 1):\n        if color_counts[i] == 0:\n            \n            uncolored_indices = [idx for idx in range(n) if colors[idx] == 0]\n            if not uncolored_indices:\n                print(\"NO\")\n                return\n            \n            colors[uncolored_indices[0]] = i\n            \n            color_counts = [0] * (k + 1)\n            for color in colors:\n                if 1 <= color <= k:\n                    color_counts[color] += 1\n            \n            all_colored = True\n            for j in range(1, k + 1):\n                if color_counts[j] == 0:\n                    all_colored = False\n                    break\n            \n            if not all_colored:\n                print(\"NO\")\n                return\n            \n            break\n    \n    color_counts = [0] * (k + 1)\n    for color in colors:\n        if 1 <= color <= k:\n            color_counts[color] += 1\n    \n    all_colored = True\n    for i in range(1, k + 1):\n        if color_counts[i] == 0:\n            all_colored = False\n            break\n    \n    if not all_colored:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    \n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    a_list = list(map(int, list(a)))\n\n    best_a = a\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp_a_list = a_list[:]\n            for k in range(i, j + 1):\n                temp_a_list[k] = f[temp_a_list[k] - 1]\n            \n            temp_a = \"\".join(map(str, temp_a_list))\n            \n            if temp_a > best_a:\n                best_a = temp_a\n                \n    print(best_a)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(A - a) + abs(B - b) + abs(C - c)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n                    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c, i + 1))\n\n    schedule = [0] * n\n    exam_days = {}\n    for s, d, c, i in exams:\n        exam_days[d - 1] = i\n\n    for day in exam_days:\n        schedule[day] = m + 1\n\n    preparation_counts = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            best_exam = -1\n            for s, d, c, i in exams:\n                exam_index = i - 1\n                if s - 1 <= day < d - 1 and preparation_counts[exam_index] < c:\n                    if best_exam == -1:\n                        best_exam = i\n                    else:\n                        s_best, d_best, c_best, i_best = exams[best_exam - 1]\n                        if d < d_best:\n                            best_exam = i\n            \n            if best_exam != -1:\n                schedule[day] = best_exam\n                preparation_counts[best_exam - 1] += 1\n\n    possible = True\n    for i in range(m):\n        if exams[i][2] != preparation_counts[i]:\n            possible = False\n            break\n\n    if possible:\n        print(*schedule)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "65": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    if n == m:\n        print(0)\n        return\n\n    if m % n != 0:\n        print(-1)\n        return\n\n    diff = m // n\n    \n    count = 0\n    while diff % 2 == 0:\n        diff //= 2\n        count += 1\n    \n    while diff % 3 == 0:\n        diff //= 3\n        count += 1\n        \n    if diff != 1:\n        print(-1)\n    else:\n        print(count)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n    \n    if overlap == 0:\n        print(t + t[n:] * (k - 1))\n    else:\n        print(t + t[overlap:] * (k - 1))\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            dp[i][j] = min(dp[i][j], k + 1)\n\n    total_cost = 0\n    for length in range(n, -1, -1):\n        num_subsequences = dp[n][length]\n        take = min(num_subsequences, k)\n        total_cost += (n - length) * take\n        k -= take\n        if k == 0:\n            print(total_cost)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    def build_spanning_tree(edges, n, d):\n        adj = [[] for _ in range(n + 1)]\n        for u, v in edges:\n            adj[u].append(v)\n            adj[v].append(u)\n\n        def bfs(start_node, edges_to_use):\n            visited = [False] * (n + 1)\n            q = [start_node]\n            visited[start_node] = True\n            spanning_tree_edges = []\n            \n            while q:\n                u = q.pop(0)\n                for v in adj[u]:\n                    if not visited[v]:\n                        edge = (min(u, v), max(u, v))\n                        if edge in edges_to_use:\n                            visited[v] = True\n                            q.append(v)\n                            spanning_tree_edges.append((u, v))\n            \n            all_visited = all(visited[1:])\n            if all_visited:\n                return spanning_tree_edges\n            else:\n                return None\n\n        \n        import itertools\n        \n        for comb in itertools.combinations(edges, n - 1):\n            \n            spanning_tree_edges = bfs(1, set(comb))\n            \n            if spanning_tree_edges:\n                degree_one = 0\n                for u, v in spanning_tree_edges:\n                    if u == 1 or v == 1:\n                        degree_one += 1\n                \n                if degree_one == d:\n                    return spanning_tree_edges\n        \n        return None\n\n    spanning_tree = build_spanning_tree(edges, n, d)\n\n    if spanning_tree:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "70": "```python\ndef solve():\n  h1, m1 = map(int, input().replace(':', ' ').split())\n  h2, m2 = map(int, input().replace(':', ' ').split())\n\n  start_minutes = h1 * 60 + m1\n  end_minutes = h2 * 60 + m2\n\n  mid_minutes = (start_minutes + end_minutes) // 2\n\n  h3 = mid_minutes // 60\n  m3 = mid_minutes % 60\n\n  print(f\"{h3:02d}:{m3:02d}\")\n\nsolve()\n```",
    "71": "```python\nimport math\n\ndef solve():\n    a = int(input())\n    if a == 1:\n        print(1)\n    else:\n        print(math.ceil(math.log(a, 2)))\n\nsolve()\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][0] = 1\n            if j > 0:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n        counts = {}\n        for l in range(i):\n            char = s[l]\n            if char in counts:\n                dp[i][counts[char]] -= dp[l][counts[char] - 1]\n            counts[char] = i\n\n    total_subsequences = sum(dp[n])\n\n    if k > total_subsequences:\n        print(\"-1\")\n        return\n\n    cost = 0\n    for length in range(n, -1, -1):\n        num_subsequences_of_length = dp[n][length]\n        \n        if k > num_subsequences_of_length:\n            cost += num_subsequences_of_length * (n - length)\n            k -= num_subsequences_of_length\n        else:\n            cost += k * (n - length)\n            k = 0\n            break\n\n    print(cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    weekly_schedule = [0, 1, 2, 0, 2, 1, 0]  # 0: fish, 1: rabbit, 2: chicken\n    \n    best_days = 0\n    \n    for start_day in range(7):\n        days = 0\n        fish = a\n        rabbit = b\n        chicken = c\n        \n        current_day = start_day\n        \n        while True:\n            food_type = weekly_schedule[current_day % 7]\n            \n            if food_type == 0:\n                if fish > 0:\n                    fish -= 1\n                    days += 1\n                else:\n                    break\n            elif food_type == 1:\n                if rabbit > 0:\n                    rabbit -= 1\n                    days += 1\n                else:\n                    break\n            else:\n                if chicken > 0:\n                    chicken -= 1\n                    days += 1\n                else:\n                    break\n            \n            current_day += 1\n        \n        best_days = max(best_days, days)\n    \n    print(best_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile = []\n        tile.append(list(map(int, input().split())))\n        tile.append(list(map(int, input().split())))\n        tiles.append(tile)\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\ndef solve():\n  n = int(input())\n  total_sum = n * (n + 1) // 2\n  if total_sum % 2 == 0:\n    print(0)\n  else:\n    print(1)\n\nsolve()\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    len_s = len(s)\n    mod = 10**9 + 7\n\n    def is_regular(seq):\n        balance = 0\n        for char in seq:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    def count_regular_sequences(n, s):\n        count = 0\n        for i in range(1 << (2 * n)):\n            seq = \"\"\n            for j in range(2 * n):\n                if (i >> j) & 1:\n                    seq += '('\n                else:\n                    seq += ')'\n\n            if is_regular(seq) and s in seq:\n                count = (count + 1) % mod\n        return count\n\n    print(count_regular_sequences(n, s))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n    \n    ans = float('inf')\n    \n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        \n        temp_n = list(n)\n        moves = 0\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    colors = [0] * n\n    \n    def check(num_colors):\n        \n        def possible(coloring):\n            temp_s = list(s)\n            \n            for _ in range(n * (n - 1) // 2):\n                swapped = False\n                for i in range(n - 1):\n                    if temp_s[i] > temp_s[i+1] and coloring[i] != coloring[i+1]:\n                        temp_s[i], temp_s[i+1] = temp_s[i+1], temp_s[i]\n                        swapped = True\n                if not swapped:\n                    break\n            \n            return \"\".join(temp_s) == \"\".join(sorted(s))\n\n        \n        \n        import itertools\n        \n        for coloring in itertools.product(range(1, num_colors + 1), repeat=n):\n            if possible(coloring):\n                return True, list(coloring)\n        \n        return False, None\n    \n    for num_colors in range(1, n + 1):\n        possible, coloring = check(num_colors)\n        if possible:\n            print(num_colors)\n            print(*coloring)\n            return\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n\n    def is_substring(a, b):\n        return a in b\n\n    def check_order(order):\n        for i in range(1, len(order)):\n            for j in range(i):\n                if not is_substring(order[j], order[i]):\n                    return False\n        return True\n\n    import itertools\n    for permutation in itertools.permutations(strings):\n        if check_order(permutation):\n            print(\"YES\")\n            for s in permutation:\n                print(s)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "82": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    solved_count = 0\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        if a[left] <= k:\n            solved_count += 1\n            left += 1\n        elif a[right] <= k:\n            solved_count += 1\n            right -= 1\n        else:\n            break\n            \n    print(solved_count)\n\nsolve()\n```",
    "83": "```python\nimport math\n\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for height in range(1, int(math.sqrt(total)) + 2):\n        if total % height == 0:\n            width = total // height\n            \n            # Case 1: Red forms a rectangle\n            for red_height in range(1, int(math.sqrt(a)) + 2):\n                if a % red_height == 0:\n                    red_width = a // red_height\n                    if red_height <= height and red_width <= width:\n                        best_perimeter = min(best_perimeter, 2 * (height + width))\n            \n            # Case 2: Blue forms a rectangle\n            for blue_height in range(1, int(math.sqrt(b)) + 2):\n                if b % blue_height == 0:\n                    blue_width = b // blue_height\n                    if blue_height <= height and blue_width <= width:\n                        best_perimeter = min(best_perimeter, 2 * (height + width))\n    \n    print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += \"1\"\n            else:\n                coloring += \"0\"\n        \n        zeros = \"\"\n        ones = \"\"\n        for j in range(n):\n            if coloring[j] == '0':\n                zeros += s[j]\n            else:\n                ones += s[j]\n        \n        sorted_zeros = \"\".join(sorted(zeros))\n        sorted_ones = \"\".join(sorted(ones))\n        \n        merged = \"\"\n        zero_idx = 0\n        one_idx = 0\n        \n        for j in range(n):\n            if coloring[j] == '0':\n                merged += sorted_zeros[zero_idx]\n                zero_idx += 1\n            else:\n                merged += sorted_ones[one_idx]\n                one_idx += 1\n        \n        if merged == \"\".join(sorted(s)):\n            print(\"YES\")\n            print(coloring)\n            return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n    \n    for price in range(1, 2001):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.10)\n        \n        if tax_8 == a and tax_10 == b:\n            print(price)\n            return\n    \n    print(\"-1\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k):\n        a[i] += remaining // k\n    \n    remaining %= k\n    \n    for i in range(k - 1, k - 1 - remaining, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if a[i + 1] > 2 * a[i]:\n            diff = a[i + 1] - 2 * a[i]\n            a[i + 1] -= diff\n            a[k - 1] += diff\n            \n            if a[i + 1] > 2 * a[i]:\n                print(\"NO\")\n                return\n    \n    for i in range(k - 1):\n        if a[i+1] <= a[i]:\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            ",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def is_palindromic(mat):\n        for i in range(n):\n            for j in range(n):\n                if mat[i][j] != mat[n-1-i][j] or mat[i][j] != mat[i][n-1-j]:\n                    return False\n        return True\n\n    def backtrack(row, col):\n        if row == n:\n            return is_palindromic(matrix)\n        \n        if col == n:\n            return backtrack(row + 1, 0)\n        \n        if matrix[row][col] != 0:\n            return backtrack(row, col + 1)\n        \n        for num in list(counts.keys()):\n            if counts[num] > 0:\n                \n                \n                r_sym = n - 1 - row\n                c_sym = n - 1 - col\n                \n                if row == r_sym and col == c_sym:\n                    if counts[num] >= 1:\n                        matrix[row][col] = num\n                        counts[num] -= 1\n                        if backtrack(row, col + 1):\n                            return True\n                        matrix[row][col] = 0\n                        counts[num] += 1\n                elif row == r_sym:\n                    if counts[num] >= 2:\n                        matrix[row][col] = num\n                        matrix[row][c_sym] = num\n                        counts[num] -= 2\n                        if backtrack(row, col + 1):\n                            return True\n                        matrix[row][col] = 0\n                        matrix[row][c_sym] = 0\n                        counts[num] += 2\n                elif col == c_sym:\n                    if counts[num] >= 2:\n                        matrix[row][col] = num\n                        matrix[r_sym][col] = num\n                        counts[num] -= 2\n                        if backtrack(row, col + 1):\n                            return True\n                        matrix[row][col] = 0\n                        matrix[r_sym][col] = 0\n                        counts[num] += 2\n                else:\n                    if counts[num] >= 4:\n                        matrix[row][col] = num\n                        matrix[row][c_sym] = num\n                        matrix[r_sym][col] = num\n                        matrix[r_sym][c_sym] = num\n                        counts[num] -= 4\n                        if backtrack(row, col + 1):\n                            return True\n                        matrix[row][col] = 0\n                        matrix[row][c_sym] = 0\n                        matrix[r_sym][col] = 0\n                        matrix[r_sym][c_sym] = 0\n                        counts[num] += 4\n        \n        return False\n\n    if backtrack(0, 0):\n        print(\"YES\")\n        for row in matrix:\n            print(*row)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "89": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    def can_complete(order):\n        current_rating = r\n        for i in order:\n            a, b = projects[i]\n            if current_rating < a:\n                return False\n            current_rating += b\n            if current_rating < 0:\n                return False\n        return True\n\n    import itertools\n    for order in itertools.permutations(range(n)):\n        if can_complete(order):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    min_empty_space = m - 1\n    max_empty_space = n - total_length\n    \n    if max_empty_space + m < (n + 1) // d:\n        print(\"NO\")\n        return\n\n    arr = [0] * n\n    \n    current_pos = 0\n    platform_positions = []\n    \n    for i in range(m):\n        \n        needed_space = 0\n        if i > 0:\n            needed_space = 1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        ",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            \n            ti = 0\n            tsi = 0\n            possible = True\n            while ti < m and tsi < len(temp_s):\n                if t[ti] == temp_s[tsi]:\n                    ti += 1\n                    tsi += 1\n                else:\n                    tsi += 1\n            \n            if ti == m:\n                ans = max(ans, j - i)\n    \n    print(ans)\n\nsolve()\n```",
    "92": "```python\ndef solve():\n    x = float(input())\n    \n    a = int(x * 2.5) + 1\n    b = int((x * 2.5) / 0.75) + 1\n    \n    a = min(max(a, 1), 10)\n    b = min(max(b, 1), 10)\n    \n    print(a, b)\n\nsolve()\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2:\n        print(\"NO\")\n        return\n    \n    if k == 1 and n > 2:\n        print(\"NO\")\n        return\n\n    if k == 1 and d > 1:\n        print(\"NO\")\n        return\n    \n    if k == 1 and d == 1 and n == 2:\n        print(\"YES\")\n        print(\"1 2\")\n        return\n\n    edges = []\n    \n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n\n    if len(edges) > n - 1:\n        print(\"NO\")\n        return\n\n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n\n    if any(degree > k for degree in degrees[1:]):\n        print(\"NO\")\n        return\n\n    next_node = d + 2\n    \n    q = list(range(1, d + 2))\n    \n    while q and next_node <= n:\n        u = q.pop(0)\n        \n        while degrees[u] < k and next_node <= n:\n            edges.append((u, next_node))\n            degrees[u] += 1\n            degrees[next_node] += 1\n            q.append(next_node)\n            next_node += 1\n\n    if any(degree > k for degree in degrees[1:]):\n        print(\"NO\")\n        return\n\n    if len(edges) != n - 1:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    s = \"\"\n    \n    for i in range(x):\n        s += str(start)\n        start = 1 - start\n    \n    if start == 0:\n        s += \"0\" * (a - (x + 1) // 2)\n        s += \"1\" * (b - x // 2)\n    else:\n        s += \"1\" * (b - (x + 1) // 2)\n        s += \"0\" * (a - x // 2)\n    \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    chars = ['a', 'b', 'c']\n\n    import itertools\n    \n    for perm in itertools.permutations(chars):\n        base_string = \"\".join(perm)\n        \n        res = \"\"\n        for _ in range(n):\n            res += base_string\n        \n        s_found = False\n        t_found = False\n        \n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s:\n                s_found = True\n            if sub == t:\n                t_found = True\n        \n        if not s_found and not t_found:\n            print(\"YES\")\n            print(res)\n            return\n            \n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    def check_permutation(arr):\n        if len(arr) != n:\n            return False\n        seen = set()\n        for x in arr:\n            if not (1 <= x <= n):\n                return False\n            if x in seen:\n                return False\n            seen.add(x)\n        return True\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n            \n        if check_permutation(p):\n            print(*p)\n            return\n\n    print(\"-1\")\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    min_cost = float('inf')\n\n    for target in range(1, 101):\n        cost = 0\n        for i in range(n):\n            cost += abs(x[i] - target) % 2\n        min_cost = min(min_cost, cost)\n\n    print(min_cost)\n\nsolve()\n```",
    "98": "```python\ndef solve():\n    n = int(input())\n    \n    ans = float('inf')\n    \n    for i in range(1, int(n**0.5) + 2):\n        if n % i == 0:\n            j = n // i\n            ans = min(ans, (i - 1) + (j - 1))\n            \n    print(ans)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = max(0, a1 - (b1 + b3 - a3) , a2 - (b2 + b1 - a1), a3 - (b3 + b2 - a2))\n    min_wins = 0\n    \n    temp_a1, temp_a2, temp_a3 = a1, a2, a3\n    temp_b1, temp_b2, temp_b3 = b1, b2, b3\n    \n    min_wins = max(0, a1 - (temp_b1 + temp_b3 - a3), a2 - (temp_b2 + temp_b1 - a1), a3 - (temp_b3 + temp_b2 - a2))\n    \n    \n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}