{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n    \n    if first_bracket == -1:\n        print(-1)\n        return\n    \n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n            \n    if last_bracket == -1 or last_bracket <= first_bracket:\n        print(-1)\n        return\n    \n    first_colon = -1\n    for i in range(first_bracket + 1, last_bracket):\n        if s[i] == ':':\n            first_colon = i\n            break\n            \n    if first_colon == -1:\n        print(-1)\n        return\n        \n    second_colon = -1\n    for i in range(last_bracket - 1, first_colon, -1):\n        if s[i] == ':':\n            second_colon = i\n            break\n            \n    if second_colon == -1 or second_colon <= first_colon:\n        print(-1)\n        return\n    \n    count = 0\n    for i in range(first_colon + 1, second_colon):\n        if s[i] == '|':\n            count += 1\n            \n    print(4 + count)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    s = str(x)\n    n = len(s)\n    \n    best_num = x\n    best_sum = sum(int(digit) for digit in s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0 and num <= x:\n            current_sum = sum(int(digit) for digit in num_str)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_num = num\n            elif current_sum == best_sum and num > best_num:\n                best_num = num\n                \n    print(best_num)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    l = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10 ** (l - 1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "4": "```python\ndef solve():\n    x = int(input())\n    hh, mm = map(int, input().split())\n\n    def is_lucky(h, m):\n        return '7' in str(h) or '7' in str(m)\n\n    count = 0\n    while True:\n        if is_lucky(hh, mm):\n            print(count)\n            return\n\n        mm -= x\n        if mm < 0:\n            mm += 60\n            hh -= 1\n            if hh < 0:\n                hh += 24\n        elif mm >= 60:\n            hh += mm // 60\n            mm %= 60\n            hh %= 24\n        \n        hh %= 24\n        mm %= 60\n        count += 1\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n\n    if l == 1 and r == n:\n        print(0)\n        return\n\n    ans = 0\n    if l == 1:\n        ans = abs(pos - r) + 1\n    elif r == n:\n        ans = abs(pos - l) + 1\n    else:\n        ans = min(abs(pos - l) + abs(r - l) + 2, abs(pos - r) + abs(r - l) + 2)\n\n    print(ans)\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_d = 0\n    for d, h in blows:\n        max_d = max(max_d, d)\n\n    if max_d > x:\n        print(1)\n        return\n\n    max_diff = float('-inf')\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_d\n    \n    ans = 1\n    ans += (remaining + max_diff - 1) // max_diff\n    print(ans)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\ndef solve():\n    n, m = map(int, input().split())\n\n    l, r = 0, 2 * 10**9\n    ans = r\n\n    while l <= r:\n        mid = (l + r) // 2\n        \n        total_sparrows = mid * (mid + 1) // 2\n        \n        \n        full_barns = 0\n        if total_sparrows > n:\n            full_barns = (total_sparrows - n + m - 1) // m\n        \n        \n        grain_left = n + full_barns * m - total_sparrows\n        \n        if grain_left <= 0:\n            ans = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        sofas.append(list(map(int, input().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        left_most = min(y1, y2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            right_most_other = max(y1_other, y2_other)\n            if right_most_other < left_most:\n                count += 1\n        return count\n\n    def count_right(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        right_most = max(y1, y2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            left_most_other = min(y1_other, y2_other)\n            if left_most_other > right_most:\n                count += 1\n        return count\n\n    def count_top(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        top_most = min(x1, x2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            bottom_most_other = max(x1_other, x2_other)\n            if bottom_most_other < top_most:\n                count += 1\n        return count\n\n    def count_bottom(sofa_index):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_index]\n        bottom_most = max(x1, x2)\n        for i in range(d):\n            if i == sofa_index:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            top_most_other = min(x1_other, x2_other)\n            if top_most_other > bottom_most:\n                count += 1\n        return count\n\n    for i in range(d):\n        l = count_left(i)\n        r = count_right(i)\n        t = count_top(i)\n        b = count_bottom(i)\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\ndef solve():\n    n = int(input())\n    \n    weeks = n // 7\n    remaining_days = n % 7\n    \n    min_days_off = weeks * 2\n    max_days_off = weeks * 2\n    \n    if remaining_days == 1:\n        min_days_off += 0\n        max_days_off += 1\n    elif remaining_days == 2:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 3:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 4:\n        min_days_off += 0\n        max_days_off += 2\n    elif remaining_days == 5:\n        min_days_off += 1\n        max_days_off += 2\n    elif remaining_days == 6:\n        min_days_off += 1\n        max_days_off += 2\n    \n    print(min_days_off, max_days_off)\n\nsolve()\n```",
    "11": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\nn, a, b, p, q = map(int, input().split())\n\nred_count = n // a\nblue_count = n // b\nboth_count = n // lcm(a, b)\n\ntotal_chocolates = 0\n\nif p > q:\n    total_chocolates += red_count * p + (blue_count - both_count) * q\nelse:\n    total_chocolates += blue_count * q + (red_count - both_count) * p\n\nprint(total_chocolates)\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        dependencies.append(line[1:])\n\n    indegree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            indegree[i + 1] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if indegree[i] == 0:\n            q.append(i)\n\n    order = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n\n        for v in adj[u]:\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(\"-1\")\n        return\n\n    \n    required = set(main_courses)\n    result = []\n    visited = [False] * (n + 1)\n    \n    def dfs(course):\n        if visited[course]:\n            return\n        visited[course] = True\n        for dep in dependencies[course-1]:\n            if not visited[dep]:\n                dfs(dep)\n        result.append(course)\n    \n    for course in main_courses:\n        dfs(course)\n    \n    result_set = set(result)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = set(p)\n    remaining = []\n    for i in range(n, 0, -1):\n        if i not in used:\n            remaining.append(i)\n\n    p = p + remaining\n    \n    def is_stack_sortable(arr):\n        a = arr[:]\n        s = []\n        b = []\n        \n        i = 0\n        j = 0\n        \n        while i < len(arr) or len(s) > 0:\n            \n            if len(s) > 0 and (i == len(arr) or s[-1] < (arr[i] if i < len(arr) else float('inf'))):\n                b.append(s.pop())\n            elif i < len(arr):\n                s.append(arr[i])\n                i += 1\n            else:\n                return False\n                \n        for i in range(len(b) - 1):\n            if b[i] > b[i+1]:\n                return False\n        return True\n\n    \n    used = set(p[:k])\n    remaining = []\n    for i in range(n, 0, -1):\n        if i not in used:\n            remaining.append(i)\n    \n    \n    best_p = None\n    \n    import itertools\n    \n    for perm in itertools.permutations(remaining):\n        temp_p = p[:k] + list(perm)\n        \n        if is_stack_sortable(temp_p):\n            if best_p is None:\n                best_p = temp_p\n            else:\n                if temp_p > best_p:\n                    best_p = temp_p\n    \n    if best_p is None:\n        print(\"-1\")\n    else:\n        print(*best_p)\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n\n    if cnt1 == cnt4 and cnt1 >= 0 and cnt4 >= 0 and cnt3 >= 0 and cnt2 >= 0:\n        if cnt1 == 0 and cnt3 > 0:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        standing = k - (t - n)\n        print(standing)\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    t = []\n    u = \"\"\n    \n    suffix_min = [\"\"] * (n + 1)\n    suffix_min[n] = chr(ord('z') + 1) \n    \n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n    \n    i = 0\n    while i < n or len(t) > 0:\n        if len(t) > 0 and t[-1] <= suffix_min[i]:\n            u += t[-1]\n            t.pop()\n        else:\n            if i < n:\n                t.append(s[i])\n                i += 1\n            else:\n                u += t[-1]\n                t.pop()\n\n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n\n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n\n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n    \n    ans = 0\n    while True:\n        hh_str = str(hh).zfill(2)\n        mm_str = str(mm).zfill(2)\n        \n        if hh_str == mm_str[::-1]:\n            print(ans)\n            return\n        \n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        ans += 1\n\nsolve()\n```",
    "21": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    pos_min = a.index(1)\n    pos_max = a.index(n)\n\n    ans = max(abs(pos_min - pos_max), abs(pos_max - pos_min))\n    \n    ans = max(ans, abs(0 - pos_min))\n    ans = max(ans, abs(n - 1 - pos_min))\n    ans = max(ans, abs(0 - pos_max))\n    ans = max(ans, abs(n - 1 - pos_max))\n    \n    ans = max(abs(0 - pos_min), abs(n - 1 - pos_min), abs(0 - pos_max), abs(n - 1 - pos_max))\n\n    print(ans)\n\nsolve()\n```",
    "22": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    symmetric_chars = {'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p', 'o': 'o', 'x': 'x', 'X': 'X', 'H': 'H', 'I': 'I', 'M': 'M', 'O': 'O', 'T': 'T', 'U': 'U', 'V': 'V', 'v': 'v', 'W': 'W', 'w': 'w', 'Y': 'Y', 'A': 'A', 'm':'m'}\n    \n    for i in range((n + 1) // 2):\n        if s[i] not in symmetric_chars or s[n - 1 - i] not in symmetric_chars:\n            print(\"NIE\")\n            return\n        \n        if symmetric_chars[s[i]] != s[n - 1 - i]:\n            print(\"NIE\")\n            return\n    \n    print(\"TAK\")\n\nsolve()\n```",
    "23": "```python\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    def find_max_permutation(index, current_num, remaining_digits):\n        if index == len(a):\n            return current_num\n        \n        best_num = \"\"\n        \n        for i in range(len(remaining_digits)):\n            digit = remaining_digits[i]\n            \n            temp_num = current_num + digit\n            \n            if int(temp_num) > int(b[:index+1]):\n                continue\n            \n            new_remaining_digits = remaining_digits[:i] + remaining_digits[i+1:]\n            \n            if int(temp_num) == int(b[:index+1]):\n                next_num = find_max_permutation(index + 1, temp_num, new_remaining_digits)\n                if next_num != \"\" and (best_num == \"\" or int(next_num) > int(best_num)):\n                    best_num = next_num\n            else:\n                temp_num += \"\".join(sorted(new_remaining_digits, reverse=True))\n                if best_num == \"\" or int(temp_num) > int(best_num):\n                    best_num = temp_num\n        \n        return best_num\n    \n    result = find_max_permutation(0, \"\", a_digits)\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(list(input()))\n\n    def check_win(board):\n        for i in range(10):\n            for j in range(10):\n                if board[i][j] == 'X':\n                    # Check horizontal\n                    if j + 4 < 10:\n                        if all(board[i][j+k] == 'X' for k in range(5)):\n                            return True\n                    # Check vertical\n                    if i + 4 < 10:\n                        if all(board[i+k][j] == 'X' for k in range(5)):\n                            return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i + 4 < 10 and j + 4 < 10:\n                        if all(board[i+k][j+k] == 'X' for k in range(5)):\n                            return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i + 4 < 10 and j - 4 >= 0:\n                        if all(board[i+k][j-k] == 'X' for k in range(5)):\n                            return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n                if check_win(board):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k > n * n:\n        print(\"-1\")\n        return\n\n    matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n        \n    if k != 0:\n        print(\"-1\")\n        return\n\n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "26": "```python\nimport math\n\nx, y, z = map(float, input().split())\n\na1 = x ** (y ** z)\na2 = x ** (z ** y)\na3 = (x ** y) ** z\na4 = (x ** z) ** y\na5 = y ** (x ** z)\na6 = y ** (z ** x)\na7 = (y ** x) ** z\na8 = (y ** z) ** x\na9 = z ** (x ** y)\na10 = z ** (y ** x)\na11 = (z ** x) ** y\na12 = (z ** y) ** x\n\nvalues = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\nexpressions = [\"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"]\n\nmax_val = -float('inf')\nmax_index = -1\n\nfor i in range(len(values)):\n    if values[i] > max_val:\n        max_val = values[i]\n        max_index = i\n\nprint(expressions[max_index])\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        if s.startswith(prefix * 2):\n            ans = min(ans, n - i)\n        elif s[:2*i].startswith(prefix):\n            if prefix == s[i:2*i]:\n                ans = min(ans, n - i)\n    \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n\n    e = len(examples)\n    \n    moves = []\n    \n    # Create a temporary mapping to avoid conflicts\n    temp_names = [str(1000000 + i) for i in range(n)]\n\n    # Move examples to temp names\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            moves.append((\"move\", examples[i][0], temp_names[examples[i][1]]))\n\n    # Move regular tests to temp names\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            moves.append((\"move\", regular[i][0], temp_names[regular[i][1]]))\n\n    # Move examples to correct positions\n    for i in range(e):\n        if examples[i][0] != str(i + 1):\n            moves.append((\"move\", temp_names[examples[i][1]], str(i + 1)))\n\n    # Move regular tests to correct positions\n    for i in range(len(regular)):\n        if regular[i][0] != str(e + i + 1):\n            moves.append((\"move\", temp_names[regular[i][1]], str(e + i + 1)))\n\n    print(len(moves))\n    for move in moves:\n        print(move[0], move[1], move[2])\n\nsolve()\n```",
    "29": "```python\ndef solve():\n    s = input()\n    digits = [int(c) for c in s]\n    \n    ans = 6\n    \n    for sum_val in range(0, 28):\n        for i in range(1000):\n            s1 = str(i).zfill(3)\n            sum1 = sum(int(c) for c in s1)\n            \n            if sum1 == sum_val:\n                for j in range(1000):\n                    s2 = str(j).zfill(3)\n                    sum2 = sum(int(c) for c in s2)\n                    \n                    if sum2 == sum_val:\n                        \n                        temp_digits = [int(c) for c in s1 + s2]\n                        \n                        \n                        diff = 0\n                        for k in range(6):\n                            if digits[k] != temp_digits[k]:\n                                diff += 1\n                        \n                        ans = min(ans, diff)\n    \n    print(ans)\n\nsolve()\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n > 63 and k > 1:\n        print(1, 1)\n        return\n\n    if k > (1 << n):\n        print(1, 1)\n        return\n\n    b = pow(pow(2, n, mod), k, mod)\n    a = 1\n    for i in range(k):\n        a = (a * ((pow(2, n, mod) - i + mod) % mod)) % mod\n\n    gcd_val = gcd(a, b)\n    a //= gcd_val\n    b //= gcd_val\n\n    a = (b - a + mod) % mod\n    print(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    distance = 0\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if distance == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if distance == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n            \n        if direction == \"South\":\n            distance += t\n        elif direction == \"North\":\n            distance -= t\n        elif direction == \"West\" or direction == \"East\":\n            pass\n        \n        if distance < 0 or distance > 20000:\n            print(\"NO\")\n            return\n    \n    if distance == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    d, x, y = extended_gcd(a1, a2)\n    x *= (b2 - b1) // d\n    y *= (b2 - b1) // d\n\n    lcm = (a1 * a2) // g\n\n    x0 = (a1 * x + b1)\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "34": "```python\ndef solve():\n  n, a, b = map(int, input().split())\n  \n  ans = 0\n  for i in range(1, n):\n    if i >= n:\n      continue\n    \n    ans = max(ans, min(a // i, b // (n - i)))\n  \n  print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n\n    if n == 0:\n        print(0, 0)\n        return\n\n    l, r = 0, 10**9\n    k = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if 3 * mid * (mid + 1) >= n:\n            k = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    n -= 3 * k * (k - 1)\n    k = k\n\n    x, y = 2 * k, 0\n\n    if n <= k:\n        x -= 2 * n\n    elif n <= 2 * k:\n        x -= 2 * k\n        n -= k\n        x -= n\n        y += 2 * n\n    elif n <= 3 * k:\n        x -= 2 * k\n        n -= 2 * k\n        x += (-k + n)\n        y += 2 * k\n    elif n <= 4 * k:\n        x -= 2 * k\n        n -= 3 * k\n        x += (k - n)\n        y += 2 * k\n        y -= 2 * n\n    elif n <= 5 * k:\n        x -= 2 * k\n        n -= 4 * k\n        x += 2 * (k - n)\n        y -= 2 * k\n    else:\n        x -= 2 * k\n        n -= 5 * k\n        x += 2 * (-k + n)\n        y -= 2 * k\n\n\n    print(x, y)\n\nsolve()\n```",
    "37": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    for i in range(c // a + 1):\n        if (c - i * a) % b == 0 and (c - i * a) >= 0:\n            print(\"Yes\")\n            return\n    \n    print(\"No\")\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, L = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for start_diff in range(L):\n        possible = True\n        for i in range(n):\n            if (sasha[i] + start_diff) % L not in kefa:\n                possible = False\n                break\n        \n        if possible:\n            kefa_pos = []\n            for i in range(n):\n                kefa_pos.append(kefa[i])\n            \n            sasha_pos = []\n            for i in range(n):\n                sasha_pos.append((sasha[i] + start_diff) % L)\n            \n            kefa_pos.sort()\n            sasha_pos.sort()\n            \n            if kefa_pos == sasha_pos:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n\nsolve()\n```",
    "40": "```python\ndef solve():\n    n = int(input())\n    ratings = []\n    for _ in range(n):\n        ratings.append(list(map(int, input().split())))\n\n    changed = False\n    for a, b in ratings:\n        if a != b:\n            changed = True\n            break\n\n    if changed:\n        print(\"rated\")\n        return\n\n    sorted_order = True\n    for i in range(n - 1):\n        if ratings[i][0] < ratings[i+1][0]:\n            sorted_order = False\n            break\n\n    if not sorted_order:\n        print(\"unrated\")\n    else:\n        print(\"maybe\")\n\nsolve()\n```",
    "41": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    distances = [float('inf')] * n\n\n    # Forward pass: find distances to the nearest zero to the left\n    last_zero = float('-inf')\n    for i in range(n):\n        if a[i] == 0:\n            last_zero = i\n        if last_zero != float('-inf'):\n            distances[i] = min(distances[i], i - last_zero)\n\n    # Backward pass: find distances to the nearest zero to the right\n    last_zero = float('inf')\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            last_zero = i\n        if last_zero != float('inf'):\n            distances[i] = min(distances[i], last_zero - i)\n\n    print(*distances)\n\nsolve()\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    seen = set()\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        if binary_string in seen:\n            continue\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n            \n            # Mark all cyclical shifts as seen\n            for j in range(n):\n                shifted_string = binary_string[j:] + binary_string[:j]\n                seen.add(shifted_string)\n                \n    print(count)\n\nsolve()\n```",
    "43": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append((x, y))\n\n    angles = []\n    for i in range(n):\n        x, y = vectors[i]\n        angle = math.atan2(y, x)\n        angles.append((angle, i + 1))\n\n    angles.sort()\n\n    min_angle_diff = float('inf')\n    best_pair = (0, 0)\n\n    for i in range(n):\n        angle1, index1 = angles[i]\n        angle2, index2 = angles[(i + 1) % n]\n        \n        diff = abs(angle1 - angle2)\n        diff = min(diff, 2 * math.pi - diff)\n\n        if diff < min_angle_diff:\n            min_angle_diff = diff\n            best_pair = (index1, index2)\n\n    print(best_pair[0], best_pair[1])\n\nsolve()\n```",
    "44": "```python\nd, k, a, b, t = map(int, input().split())\n\nif d <= k:\n    print(d * a)\nelse:\n    cost = k * a\n    d -= k\n    \n    if a * k + t < b * k:\n        num_breaks = d // k\n        \n        if num_breaks > 0:\n            cost += num_breaks * min(a * k + t, b * k)\n        \n        d %= k\n        \n        if d > 0:\n            cost += min(a * d + t, b * d)\n    else:\n        cost += b * d\n        \n    print(cost)\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 0\n    best_seq = []\n\n    for gcd in range(int(n**0.5), 0, -1):\n        if n % gcd == 0:\n            q = n // gcd\n            \n            if q >= k * (k + 1) // 2:\n                seq = [gcd * i for i in range(1, k)]\n                seq.append(n - sum(seq))\n                \n                if all(seq[i] < seq[i+1] for i in range(len(seq)-1)) and all(x > 0 for x in seq):\n                    print(*seq)\n                    return\n            \n            if gcd >= k * (k + 1) // 2:\n                seq = [q * i for i in range(1, k)]\n                seq.append(n - sum(seq))\n                \n                if all(seq[i] < seq[i+1] for i in range(len(seq)-1)) and all(x > 0 for x in seq):\n                    print(*seq)\n                    return\n\n    if n == 1 and k == 1:\n        print(1)\n        return\n    \n    print(-1)\n\nsolve()\n```",
    "46": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if (i + j) % 5 == 0:\n                count += 1\n    print(count)\n\ndef solve_optimized():\n    n, m = map(int, input().split())\n    \n    count = 0\n    for rem in range(5):\n        count_n = (n - rem + 5) // 5 if rem <= n else 0\n        count_m = (m - (5 - rem) % 5 + 5) // 5 if (5 - rem) % 5 <= m else 0\n        count += count_n * count_m\n    print(count)\n\ndef solve_optimized2():\n    n, m = map(int, input().split())\n    \n    counts_n = [0] * 5\n    counts_m = [0] * 5\n    \n    for i in range(1, n + 1):\n        counts_n[i % 5] += 1\n    for i in range(1, m + 1):\n        counts_m[i % 5] += 1\n        \n    count = 0\n    for i in range(5):\n        count += counts_n[i] * counts_m[(5 - i) % 5]\n    print(count)\n\nsolve_optimized2()\n```",
    "48": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n\n    def count_less_equal(x):\n        count = 0\n        for i in range(1, n + 1):\n            count += min(m, x // i)\n        return count\n\n    low = 1\n    high = n * m\n    ans = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if count_less_equal(mid) >= k:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\nlength = 1\ncount = 9\nwhile k > length * count:\n    k -= length * count\n    length += 1\n    count *= 10\n\nnumber = 10 ** (length - 1) + (k - 1) // length\nindex = (k - 1) % length\n\nprint(str(number)[index])\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def get_dp(row_idx, current_sum):\n        if (row_idx, current_sum) in dp:\n            return dp[(row_idx, current_sum)]\n\n        if row_idx == n:\n            if current_sum % k == 0:\n                return 0\n            else:\n                return float('-inf')\n\n        max_sum_for_row = float('-inf')\n        \n        # Iterate through all possible combinations of elements in the current row\n        for count in range(min(m // 2 + 1, m + 1)):\n            for mask in range(1 << m):\n                if bin(mask).count('1') == count:\n                    row_sum = 0\n                    for j in range(m):\n                        if (mask >> j) & 1:\n                            row_sum += a[row_idx][j]\n\n                    max_sum_for_row = max(max_sum_for_row, row_sum + get_dp(row_idx + 1, (current_sum + row_sum) % k))\n\n        dp[(row_idx, current_sum)] = max_sum_for_row\n        return max_sum_for_row\n\n    result = get_dp(0, 0)\n    print(result)\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def find_longest_increasing_sequence(arr):\n        max_len = 0\n        best_moves = \"\"\n\n        def backtrack(current_sequence, left, right, moves):\n            nonlocal max_len, best_moves\n\n            if len(current_sequence) > max_len:\n                max_len = len(current_sequence)\n                best_moves = moves\n\n            if left > right:\n                return\n\n            if not current_sequence:\n                # Take left\n                backtrack(current_sequence + [arr[left]], left + 1, right, moves + \"L\")\n                # Take right\n                backtrack(current_sequence + [arr[right]], left, right - 1, moves + \"R\")\n            else:\n                last_val = current_sequence[-1]\n                \n                # Take left\n                if arr[left] > last_val:\n                    backtrack(current_sequence + [arr[left]], left + 1, right, moves + \"L\")\n                \n                # Take right\n                if arr[right] > last_val and arr[right] != arr[left]:\n                    backtrack(current_sequence + [arr[right]], left, right - 1, moves + \"R\")\n                elif arr[right] > last_val and arr[right] == arr[left]:\n                    \n                    temp_len_l = 0\n                    temp_moves_l = \"\"\n                    temp_len_r = 0\n                    temp_moves_r = \"\"\n                    \n                    \n                    curr_l = left + 1\n                    last_val_l = last_val\n                    temp_moves_l = \"L\"\n                    temp_len_l = 1\n                    \n                    while curr_l <= right and arr[curr_l] > last_val_l:\n                        last_val_l = arr[curr_l]\n                        temp_moves_l += \"L\"\n                        temp_len_l += 1\n                        curr_l += 1\n                    \n                    curr_r = right - 1\n                    last_val_r = last_val\n                    temp_moves_r = \"R\"\n                    temp_len_r = 1\n                    \n                    while curr_r >= left and arr[curr_r] > last_val_r:\n                        last_val_r = arr[curr_r]\n                        temp_moves_r += \"R\"\n                        temp_len_r += 1\n                        curr_r -= 1\n                    \n                    if temp_len_l >= temp_len_r:\n                        backtrack(current_sequence + [arr[left]], left + temp_len_l, right, moves + \"L\" + temp_moves_l[1:])\n                    else:\n                        backtrack(current_sequence + [arr[right]], left, right - temp_len_r, moves + \"R\" + temp_moves_r[1:])\n\n        backtrack([], 0, len(a) - 1, \"\")\n        return max_len, best_moves\n\n    length, moves = find_longest_increasing_sequence(a)\n    print(length)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(0)\n        return\n\n    unique_vals = sorted(list(set(a)))\n\n    if len(unique_vals) > 3:\n        print(-1)\n        return\n\n    if len(unique_vals) == 1:\n        print(0)\n        return\n\n    if len(unique_vals) == 2:\n        diff = abs(unique_vals[0] - unique_vals[1])\n        if diff % 2 == 0:\n            print(diff // 2)\n        else:\n            print(diff)\n        return\n\n    if len(unique_vals) == 3:\n        x, y, z = unique_vals\n        if y - x == z - y:\n            print(y - x)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n\n    def intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n        x_overlap = max(0, min(x2, x4) - max(x1, x3))\n        y_overlap = max(0, min(y2, y4) - max(y1, y3))\n        return x_overlap * y_overlap\n\n    intersection1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    intersection2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n    intersection12 = intersection_area(x3, y3, x4, y4, x5, y5, x6, y6)\n    intersection_white_black1_black2 = intersection_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n    \n    total_covered = intersection1 + intersection2 - intersection_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\n\n    if white_area > total_covered:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    assigned = [False] * (n + 1)\n    for i in range(n):\n        if f[i] != 0:\n            assigned[f[i]] = True\n\n    unassigned_givers = []\n    for i in range(n):\n        if f[i] == 0:\n            unassigned_givers.append(i)\n\n    unassigned_receivers = []\n    for i in range(1, n + 1):\n        if not assigned[i]:\n            unassigned_receivers.append(i)\n\n    for i in range(len(unassigned_givers)):\n        giver_index = unassigned_givers[i]\n        receiver = unassigned_receivers[i]\n\n        f[giver_index] = receiver\n\n    # Check for self-gifting and swap if necessary\n    for i in range(n):\n        if f[i] == i + 1:\n            # Find another index to swap with\n            for j in range(n):\n                if i != j and f[j] != j + 1 and f[j] != 0 and f[j] != i + 1:\n                    f[i], f[j] = f[j], f[i]\n                    break\n            else:\n                # If no suitable j is found, swap with the next unassigned giver\n                for j in range(len(unassigned_givers)):\n                    giver_index = unassigned_givers[j]\n                    if giver_index != i:\n                        f[i], f[giver_index] = f[giver_index], f[i]\n                        break\n                else:\n                    # If still no suitable swap, find any other index\n                    for j in range(n):\n                        if i != j:\n                            f[i], f[j] = f[j], f[i]\n                            break\n    \n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n\n    colors = [0] * n\n    color_idx = 1\n\n    for i in range(n):\n        colors[i] = color_idx\n        color_idx = (color_idx % k) + 1\n\n    print(\"YES\")\n    print(*colors)\n\nsolve()\n```",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                pass\n            else:\n                count += 1\n        else:\n            if s[i] == '1':\n                pass\n            else:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "61": "```python\ndef solve():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    a_list = list(map(int, list(a)))\n    \n    start = -1\n    end = -1\n    \n    for i in range(n):\n        if f[a_list[i] - 1] > a_list[i]:\n            start = i\n            break\n            \n    if start == -1:\n        print(a)\n        return\n    \n    for i in range(start, n):\n        if f[a_list[i] - 1] >= a_list[i]:\n            end = i\n        else:\n            break\n            \n    \n    for i in range(start, end + 1):\n        a_list[i] = f[a_list[i] - 1]\n        \n    print(\"\".join(map(str, a_list)))\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            for C in range(B, 2 * c + 1, B):\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c, i + 1))\n    \n    schedule = [0] * n\n    exam_days = {}\n    for s, d, c, i in exams:\n        exam_days[d - 1] = i\n        schedule[d - 1] = m + 1\n    \n    preparation_counts = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            best_exam = -1\n            for s, d, c, i in exams:\n                if s <= day + 1 < d and preparation_counts[i - 1] < c:\n                    if best_exam == -1:\n                        best_exam = i\n            if best_exam != -1:\n                schedule[day] = best_exam\n                preparation_counts[best_exam - 1] += 1\n    \n    for i in range(m):\n        if exams[i][2] != preparation_counts[i]:\n            print(-1)\n            return\n    \n    print(*schedule)\n\nsolve()\n```",
    "65": "```python\ndef solve():\n    n, m = map(int, input().split())\n    \n    if n == m:\n        print(0)\n        return\n    \n    if m % n != 0:\n        print(-1)\n        return\n    \n    diff = m // n\n    \n    count = 0\n    while diff % 2 == 0:\n        diff //= 2\n        count += 1\n    \n    while diff % 3 == 0:\n        diff //= 3\n        count += 1\n        \n    if diff != 1:\n        print(-1)\n    else:\n        print(count)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    if k == 1:\n        print(t)\n        return\n    \n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n    \n    result = t\n    for _ in range(k - 1):\n        result += t[overlap:]\n    \n    print(result)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] = min(dp[i][j], k)\n    \n    ans = 0\n    for length in range(n, -1, -1):\n        count = dp[n][length]\n        if count <= 0:\n            continue\n        \n        take = min(count, k)\n        ans += take * (n - length)\n        k -= take\n        \n        if k == 0:\n            print(ans)\n            return\n    \n    print(-1)\n\nsolve()\n```",
    "69": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n\n    def check_degree(tree_edges):\n        degree = 0\n        for u, v in tree_edges:\n            if u == 1 or v == 1:\n                degree += 1\n        return degree\n\n    def is_connected(tree_edges, n):\n        if not tree_edges:\n            return False\n        \n        adj = {i: [] for i in range(1, n + 1)}\n        for u, v in tree_edges:\n            adj[u].append(v)\n            adj[v].append(u)\n\n        visited = set()\n        q = [1]\n        visited.add(1)\n\n        while q:\n            u = q.pop(0)\n            for v in adj[u]:\n                if v not in visited:\n                    visited.add(v)\n                    q.append(v)\n        \n        return len(visited) == n\n\n    def find_spanning_tree(edges, n, d):\n        from itertools import combinations\n\n        for comb in combinations(edges, n - 1):\n            tree_edges = list(comb)\n            if is_connected(tree_edges, n) and check_degree(tree_edges) == d:\n                return tree_edges\n        return None\n\n    spanning_tree = find_spanning_tree(edges, n, d)\n\n    if spanning_tree:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(u, v)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "70": "```python\nh1, m1 = map(int, input().replace(':', ' ').split())\nh2, m2 = map(int, input().replace(':', ' ').split())\n\nstart_minutes = h1 * 60 + m1\nend_minutes = h2 * 60 + m2\n\nmid_minutes = (start_minutes + end_minutes) // 2\n\nh3 = mid_minutes // 60\nm3 = mid_minutes % 60\n\nprint(f\"{h3:02d}:{m3:02d}\")\n```",
    "71": "```python\nimport math\n\na = int(input())\nif a == 1:\n  print(1)\nelse:\n  print(int(math.ceil(math.log2(a))))\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    elif len(stack) == 0:\n        print(\"YES\")\n    elif len(stack) == 1:\n        print(\"YES\")\n    elif len(stack) > 1:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n\n    counts = [0] * (n + 1)\n    for i in range(n + 1):\n        counts[i] = dp[n][i]\n\n    total_cost = 0\n    \n    if counts[0] < k:\n        k -= counts[0]\n    else:\n        total_cost += k * n\n        k = 0\n        \n    for length in range(1, n + 1):\n        if k > counts[length]:\n            total_cost += counts[length] * (n - length)\n            k -= counts[length]\n        else:\n            total_cost += k * (n - length)\n            k = 0\n            break\n\n    if k > 0:\n        print(-1)\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "75": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    week = [0, 1, 2, 0, 2, 1, 0]\n    \n    week_a = week.count(0)\n    week_b = week.count(1)\n    week_c = week.count(2)\n    \n    min_weeks = min(a // week_a, b // week_b, c // week_c)\n    \n    a -= min_weeks * week_a\n    b -= min_weeks * week_b\n    c -= min_weeks * week_c\n    \n    ans = min_weeks * 7\n    \n    max_days = 0\n    \n    for start_day in range(7):\n        temp_a, temp_b, temp_c = a, b, c\n        days = 0\n        \n        for i in range(7):\n            current_day = (start_day + i) % 7\n            \n            if week[current_day] == 0:\n                if temp_a > 0:\n                    temp_a -= 1\n                    days += 1\n                else:\n                    break\n            elif week[current_day] == 1:\n                if temp_b > 0:\n                    temp_b -= 1\n                    days += 1\n                else:\n                    break\n            else:\n                if temp_c > 0:\n                    temp_c -= 1\n                    days += 1\n                else:\n                    break\n        \n        max_days = max(max_days, days)\n    \n    print(ans + max_days)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile = []\n        tile.append(list(map(int, input().split())))\n        tile.append(list(map(int, input().split())))\n        tiles.append(tile)\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\nn = int(input())\ntotal_sum = n * (n + 1) // 2\nif total_sum % 2 == 0:\n    print(0)\nelse:\n    print(1)\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    len_s = len(s)\n    \n    dp = {}\n    \n    def count_regular_sequences(index, balance, contains_s):\n        if index == 2 * n:\n            if balance == 0 and contains_s:\n                return 1\n            else:\n                return 0\n        \n        if (index, balance, contains_s) in dp:\n            return dp[(index, balance, contains_s)]\n        \n        count = 0\n        \n        # Add '('\n        if balance + 1 <= n:\n            new_contains_s = contains_s\n            if not contains_s:\n                if index < len_s and s[index] == '(':\n                    \n                    match = True\n                    for i in range(min(len_s, 2*n - index)):\n                        if index + i >= 2*n or s[i] != '(' if i == 0 else s[index+i] != s[i]:\n                            match = False\n                            break\n                    if index + len_s <= 2*n and match:\n                        new_contains_s = True\n                elif index >= len_s:\n                    new_contains_s = True\n            \n            count = (count + count_regular_sequences(index + 1, balance + 1, new_contains_s)) % mod\n        \n        # Add ')'\n        if balance > 0:\n            new_contains_s = contains_s\n            if not contains_s:\n                if index < len_s and s[index] == ')':\n                    match = True\n                    for i in range(min(len_s, 2*n - index)):\n                        if index + i >= 2*n or s[i] != ')' if i == 0 else s[index+i] != s[i]:\n                            match = False\n                            break\n                    if index + len_s <= 2*n and match:\n                        new_contains_s = True\n                elif index >= len_s:\n                    new_contains_s = True\n            \n            count = (count + count_regular_sequences(index + 1, balance - 1, new_contains_s)) % mod\n        \n        dp[(index, balance, contains_s)] = count\n        return count\n    \n    print(count_regular_sequences(0, 0, False))\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    n_len = len(n)\n\n    def calculate_moves(target):\n        s = list(n)\n        moves = 0\n        \n        # Find the last occurrence of target[1]\n        idx2 = -1\n        for i in range(n_len - 1, -1, -1):\n            if s[i] == target[1]:\n                idx2 = i\n                break\n        \n        if idx2 == -1:\n            return float('inf')\n        \n        # Move target[1] to the end\n        for i in range(idx2, n_len - 1):\n            s[i], s[i+1] = s[i+1], s[i]\n            moves += 1\n        \n        # Find the last occurrence of target[0] before the last digit\n        idx1 = -1\n        for i in range(n_len - 2, -1, -1):\n            if s[i] == target[0]:\n                idx1 = i\n                break\n        \n        if idx1 == -1:\n            return float('inf')\n        \n        # Move target[0] to the second last position\n        for i in range(idx1, n_len - 2):\n            s[i], s[i+1] = s[i+1], s[i]\n            moves += 1\n        \n        # Remove leading zeros\n        first_digit_index = 0\n        while first_digit_index < n_len - 2 and s[first_digit_index] == '0':\n            first_digit_index += 1\n            moves += 1\n        \n        return moves\n\n    min_moves = min(calculate_moves(\"00\"), calculate_moves(\"25\"), calculate_moves(\"50\"), calculate_moves(\"75\"))\n    \n    if min_moves == float('inf'):\n        print(\"-1\")\n    else:\n        print(min_moves)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    colors = [0] * n\n\n    def check(num_colors):\n        for i in range(1 << n):\n            temp_colors = [0] * n\n            \n            for j in range(n):\n                if (i >> j) & 1:\n                    temp_colors[j] = 1\n                else:\n                    temp_colors[j] = 2\n            \n            if num_colors == 1 and any(c != 1 for c in temp_colors):\n                continue\n            \n            if num_colors == 2 and all(c == 1 for c in temp_colors):\n                continue\n            \n            if num_colors == 3:\n                \n                unique_colors = set(temp_colors)\n                if len(unique_colors) > 3:\n                    continue\n                \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    min_perimeter = float('inf')\n    \n    for h in range(1, int(total**0.5) + 1):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: a forms a rectangle\n            for h_a in range(1, int(a**0.5) + 1):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    \n                    if h_a <= h and w_a <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n                    if h_a <= w and w_a <= h:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n            \n            # Case 2: b forms a rectangle\n            for h_b in range(1, int(b**0.5) + 1):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    \n                    if h_b <= h and w_b <= w:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n                    if h_b <= w and w_b <= h:\n                        min_perimeter = min(min_perimeter, 2 * (h + w))\n                        \n    print(min_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n\n    sorted_s = sorted(s)\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += \"1\"\n            else:\n                coloring += \"0\"\n\n        s0 = []\n        s1 = []\n        coloring_list = []\n\n        for j in range(n):\n            if coloring[j] == '0':\n                s0.append(s[j])\n            else:\n                s1.append(s[j])\n            coloring_list.append(int(coloring[j]))\n\n        s0.sort()\n        s1.sort()\n\n        merged = []\n        idx0 = 0\n        idx1 = 0\n\n        possible = True\n        for k in range(n):\n            if coloring[k] == '0':\n                if idx0 < len(s0):\n                    merged.append(s0[idx0])\n                    idx0 += 1\n                else:\n                    possible = False\n                    break\n            else:\n                if idx1 < len(s1):\n                    merged.append(s1[idx1])\n                    idx1 += 1\n                else:\n                    possible = False\n                    break\n        \n        if not possible:\n            continue\n        \n        if merged == sorted(s):\n            print(\"YES\")\n            print(coloring)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "85": "```python\ndef solve():\n    a, b = map(int, input().split())\n\n    ans = -1\n    for price in range(1, 2001):\n        tax8 = price * 8 // 100\n        tax10 = price * 10 // 100\n\n        if tax8 == a and tax10 == b:\n            ans = price\n            break\n\n    print(ans)\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k == 1:\n        if n >= 1:\n            print(\"YES\")\n            print(n)\n        else:\n            print(\"NO\")\n        return\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [0] * k\n    for i in range(k):\n        a[i] = i + 1\n\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k):\n        add = remaining // k\n        a[i] += add\n    \n    remaining %= k\n\n    for i in range(k - 1, -1, -1):\n        if remaining > 0:\n            a[i] += 1\n            remaining -= 1\n\n    for i in range(k - 1):\n        if not (a[i] < a[i+1] <= 2 * a[i]):\n            print(\"NO\")\n            return\n    \n    print(\"YES\")\n    print(*a)\n\nsolve()\n```",
    "87": "```python\ndef solve():\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        projects.append(list(map(int, input().split())))\n\n    pos = []\n    neg = []\n    for i in range(n):\n        if projects[i][1] >= 0:\n            pos.append(projects[i])\n        else:\n            neg.append(projects[i])\n\n    pos.sort(key=lambda x: x[0])\n    neg.sort(key=lambda x: x[0] + x[1], reverse=True)\n\n    count = 0\n    curr_rating = r\n    for a, b in pos:\n        if curr_rating >= a:\n            curr_rating += b\n            count += 1\n        else:\n            break\n\n    dp = [0] * (2 * 300 * n + 1)\n    dp[r] = count\n\n    for a, b in neg:\n        for j in range(len(dp) - 1, -1, -1):\n            if dp[j] > 0 and j >= a and j + b >= 0:\n                dp[j + b] = max(dp[j + b], dp[j] + 1)\n\n    print(max(dp))\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def can_place(row, col, val):\n        return counts.get(val, 0) > 0\n    \n    def place(row, col, val):\n        matrix[row][col] = val\n        counts[val] -= 1\n        \n    def unplace(row, col, val):\n        matrix[row][col] = 0\n        counts[val] += 1\n    \n    def solve_recursive(row, col):\n        if row == n:\n            print(\"YES\")\n            for r in matrix:\n                print(*r)\n            return True\n        \n        if col == n:\n            return solve_recursive(row + 1, 0)\n        \n        if matrix[row][col] != 0:\n            return solve_recursive(row, col + 1)\n        \n        for val in sorted(counts.keys()):\n            if can_place(row, col, val):\n                place(row, col, val)\n                place(n - 1 - row, col, val)\n                place(row, n - 1 - col, val)\n                place(n - 1 - row, n - 1 - col, val)\n                \n                if solve_recursive(row, col + 1):\n                    return True\n                \n                unplace(row, col, val)\n                unplace(n - 1 - row, col, val)\n                unplace(row, n - 1 - col, val)\n                unplace(n - 1 - row, n - 1 - col, val)\n        \n        return False\n    \n    if solve_recursive(0, 0):\n        return\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n\n    if (m + 1) * (d - 1) + total_length < n:\n        print(\"NO\")\n        return\n\n    arr = [0] * n\n    pos = 0\n    \n    for i in range(m):\n        needed_empty = min(d - 1, n - pos - total_length)\n        pos += needed_empty\n        \n        for j in range(c[i]):\n            arr[pos] = i + 1\n            pos += 1\n        total_length -= c[i]\n\n    print(\"YES\")\n    print(*arr)\n\nsolve()\n```",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            k = 0\n            l = 0\n            \n            while k < len(temp_s) and l < m:\n                if temp_s[k] == t[l]:\n                    l += 1\n                k += 1\n            \n            if l == m:\n                ans = max(ans, j - i)\n    \n    print(ans)\n\nsolve()\n```",
    "92": "```python\nx = float(input())\n\na = int(x * 2.2)\nb = int(x * 2.2)\n\na = max(1, min(a, 10))\nb = max(1, min(b, 10))\n\nprint(a, b)\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1 and n > 2 and k == 1:\n        print(\"NO\")\n        return\n\n    if k == 1 and d > 1:\n        print(\"NO\")\n        return\n\n    if n == 1 and d == 0:\n        print(\"YES\")\n        return\n\n    if n == 1 and d > 0:\n        print(\"NO\")\n        return\n\n    if n == 2 and d == 1 and k >= 1:\n        print(\"YES\")\n        print(\"1 2\")\n        return\n\n    if n == 2 and d > 1:\n        print(\"NO\")\n        return\n\n    edges = []\n    \n    # Create the diameter path\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n\n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n\n    next_node = d + 2\n    \n    q = list(range(1, d + 2))\n    \n    while q and next_node <= n:\n        u = q.pop(0)\n        \n        while degrees[u] < k and next_node <= n:\n            edges.append((u, next_node))\n            degrees[u] += 1\n            degrees[next_node] += 1\n            q.append(next_node)\n            next_node += 1\n            \n    if next_node <= n:\n        print(\"NO\")\n        return\n    \n    if len(edges) != n - 1:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n\n    if a > b:\n        start = 0\n    else:\n        start = 1\n\n    s = \"\"\n    \n    while x > 1:\n        if start == 0:\n            s += \"0\"\n            a -= 1\n            start = 1\n        else:\n            s += \"1\"\n            b -= 1\n            start = 0\n        x -= 1\n    \n    if start == 0:\n        s += \"0\"\n        a -= 1\n        s += \"0\" * a\n        s += \"1\" * b\n    else:\n        s += \"1\"\n        b -= 1\n        s += \"1\" * b\n        s += \"0\" * a\n        \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    def check(res, s, t):\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                return False\n        return True\n\n    \n    res1 = \"a\"*n + \"b\"*n + \"c\"*n\n    res2 = \"a\"*n + \"c\"*n + \"b\"*n\n    res3 = \"b\"*n + \"a\"*n + \"c\"*n\n    res4 = \"b\"*n + \"c\"*n + \"a\"*n\n    res5 = \"c\"*n + \"a\"*n + \"b\"*n\n    res6 = \"c\"*n + \"b\"*n + \"a\"*n\n\n    res1_rev = \"c\"*n + \"b\"*n + \"a\"*n\n    res2_rev = \"b\"*n + \"c\"*n + \"a\"*n\n    res3_rev = \"c\"*n + \"a\"*n + \"b\"*n\n    res4_rev = \"a\"*n + \"c\"*n + \"b\"*n\n    res5_rev = \"b\"*n + \"a\"*n + \"c\"*n\n    res6_rev = \"a\"*n + \"b\"*n + \"c\"*n\n    \n    if check(res1, s, t):\n        print(\"YES\")\n        print(res1)\n        return\n    if check(res2, s, t):\n        print(\"YES\")\n        print(res2)\n        return\n    if check(res3, s, t):\n        print(\"YES\")\n        print(res3)\n        return\n    if check(res4, s, t):\n        print(\"YES\")\n        print(res4)\n        return\n    if check(res5, s, t):\n        print(\"YES\")\n        print(res5)\n        return\n    if check(res6, s, t):\n        print(\"YES\")\n        print(res6)\n        return\n    \n    if check(res1_rev, s, t):\n        print(\"YES\")\n        print(res1_rev)\n        return\n    if check(res2_rev, s, t):\n        print(\"YES\")\n        print(res2_rev)\n        return\n    if check(res3_rev, s, t):\n        print(\"YES\")\n        print(res3_rev)\n        return\n    if check(res4_rev, s, t):\n        print(\"YES\")\n        print(res4_rev)\n        return\n    if check(res5_rev, s, t):\n        print(\"YES\")\n        print(res5_rev)\n        return\n    if check(res6_rev, s, t):\n        print(\"YES\")\n        print(res6_rev)\n        return\n\n    if s[0] != s[1] and t[0] != t[1]:\n        res = \"a\" + \"c\" * n + \"b\" * n + \"a\" * (n - 1)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"b\" + \"a\" * n + \"c\" * n + \"b\" * (n - 1)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"c\" + \"b\" * n + \"a\" * n + \"c\" * (n - 1)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"a\" + \"b\" * n + \"c\" * n + \"a\" * (n - 1)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"b\" + \"c\" * n + \"a\" * n + \"b\" * (n - 1)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"c\" + \"a\" * n + \"b\" * n + \"c\" * (n - 1)\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n    \n    if s[0] == s[1] and t[0] == t[1]:\n        res = \"abc\" * n\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"bac\" * n\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"cab\" * n\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"cba\" * n\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"bca\" * n\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n        res = \"acb\" * n\n        if check(res, s, t):\n            print(\"YES\")\n            print(res)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n            if next_element < 1 or next_element > n:\n                valid = False\n                break\n\n        if valid:\n            seen = set()\n            is_permutation = True\n            for x in p:\n                if x in seen:\n                    is_permutation = False\n                    break\n                seen.add(x)\n            \n            if is_permutation and len(seen) == n:\n                print(*p)\n                return\n\n    print(-1)\n\nsolve()\n```",
    "97": "```python\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    odd_count = 0\n    even_count = 0\n    for val in x:\n        if val % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    print(min(odd_count, even_count))\n\nsolve()\n```",
    "98": "```python\ndef solve():\n    n = int(input())\n    \n    ans = float('inf')\n    \n    for i in range(1, int(n**0.5) + 2):\n        if n % i == 0:\n            j = n // i\n            ans = min(ans, (i - 1) + (j - 1))\n            \n    print(ans)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = 0\n    \n    # Calculate minimum wins\n    rem_a1 = a1\n    rem_a2 = a2\n    rem_a3 = a3\n    rem_b1 = b1\n    rem_b2 = b2\n    rem_b3 = b3\n\n    min_wins = max(0, a1 - (b1 + b3 - a3), a2 - (b2 + b1 - a1), a3 - (b3 + b2 - a2))\n    min_wins = max(0, a1 - (n - a1 - b2), a2 - (n - a2 - b3), a3 - (n - a3 - b1))\n\n    \n    # Calculate maximum wins\n    max_wins = min(a1, b2) + min(a2, b3) + min(a3, b1)\n\n    print(min_wins, max_wins)\n\nsolve()\n```"
}