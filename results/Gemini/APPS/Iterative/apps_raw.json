{
    "0": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    first_bracket = -1\n    for i in range(n):\n        if s[i] == '[':\n            first_bracket = i\n            break\n    \n    if first_bracket == -1:\n        print(\"-1\")\n        return\n    \n    last_bracket = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ']':\n            last_bracket = i\n            break\n    \n    if last_bracket == -1 or last_bracket <= first_bracket:\n        print(\"-1\")\n        return\n    \n    first_colon = -1\n    for i in range(first_bracket + 1, last_bracket):\n        if s[i] == ':':\n            first_colon = i\n            break\n    \n    if first_colon == -1:\n        print(\"-1\")\n        return\n    \n    second_colon = -1\n    for i in range(last_bracket - 1, first_colon, -1):\n        if s[i] == ':':\n            second_colon = i\n            break\n            \n    if second_colon == -1:\n        print(\"-1\")\n        return\n    \n    if first_colon >= second_colon:\n        print(\"-1\")\n        return\n    \n    count = 0\n    for i in range(first_colon + 1, second_colon):\n        if s[i] == '|':\n            count += 1\n            \n    print(4 + count)\n\nsolve()\n```",
    "1": "```python\ndef solve():\n    x = int(input())\n    s = str(x)\n    n = len(s)\n    \n    best_num = x\n    best_sum = sum(int(digit) for digit in s)\n    \n    for i in range(n):\n        if s[i] == '0':\n            continue\n        \n        num_str = s[:i] + str(int(s[i]) - 1) + '9' * (n - i - 1)\n        num = int(num_str)\n        \n        if num > 0 and num <= x:\n            current_sum = sum(int(digit) for digit in num_str)\n            if current_sum > best_sum:\n                best_sum = current_sum\n                best_num = num\n            elif current_sum == best_sum and num > best_num:\n                best_num = num\n                \n    print(best_num)\n\nsolve()\n```",
    "2": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    l = len(s)\n    \n    first_digit = int(s[0])\n    \n    next_lucky = (first_digit + 1) * (10**(l-1))\n    \n    print(next_lucky - n)\n\nsolve()\n```",
    "5": "```python\ndef solve():\n    n, pos, l, r = map(int, input().split())\n    \n    if l == 1 and r == n:\n        print(0)\n        return\n    \n    ans = 0\n    \n    if l == 1:\n        ans = abs(pos - r) + 1\n    elif r == n:\n        ans = abs(pos - l) + 1\n    else:\n        ans = min(abs(pos - l) + abs(r - l) + 2, abs(pos - r) + abs(r - l) + 2)\n        \n    print(ans)\n\nsolve()\n```",
    "6": "```python\ndef solve():\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        blows.append(list(map(int, input().split())))\n\n    max_d = 0\n    for d, h in blows:\n        max_d = max(max_d, d)\n\n    if max_d >= x:\n        print(1)\n        return\n\n    max_diff = -1\n    for d, h in blows:\n        max_diff = max(max_diff, d - h)\n\n    if max_diff <= 0:\n        print(-1)\n        return\n\n    remaining = x - max_d\n    \n    ans = (remaining + max_diff - 1) // max_diff + 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "7": "```python\nn, m = map(int, input().split())\n\nleft = 0\nright = 2 * 10**9\n\nwhile left <= right:\n    mid = (left + right) // 2\n    \n    total_sparrows = mid * (mid + 1) // 2\n    \n    if n + mid * m >= total_sparrows:\n        left = mid + 1\n    else:\n        right = mid - 1\n\nprint(left)\n```",
    "9": "```python\ndef solve():\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((min(x1, x2), min(y1, y2), max(x1, x2), max(y1, y2)))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    def count_left(sofa_idx):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_idx]\n        for i in range(d):\n            if i == sofa_idx:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            if y1_other <= y2 and y2_other >= y1:\n                if x1_other < x2:\n                    count += 1\n        return count\n\n    def count_right(sofa_idx):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_idx]\n        for i in range(d):\n            if i == sofa_idx:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            if y1_other <= y2 and y2_other >= y1:\n                if x2_other > x1:\n                    count += 1\n        return count\n\n    def count_top(sofa_idx):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_idx]\n        for i in range(d):\n            if i == sofa_idx:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            if x1_other <= x2 and x2_other >= x1:\n                if y1_other < y2:\n                    count += 1\n        return count\n\n    def count_bottom(sofa_idx):\n        count = 0\n        x1, y1, x2, y2 = sofas[sofa_idx]\n        for i in range(d):\n            if i == sofa_idx:\n                continue\n            x1_other, y1_other, x2_other, y2_other = sofas[i]\n            if x1_other <= x2 and x2_other >= x1:\n                if y2_other > y1:\n                    count += 1\n        return count\n\n    for i in range(d):\n        l = count_left(i)\n        r = count_right(i)\n        t = count_top(i)\n        b = count_bottom(i)\n        if l == cnt_l and r == cnt_r and t == cnt_t and b == cnt_b:\n            print(i + 1)\n            return\n\n    print(-1)\n\nsolve()\n```",
    "10": "```python\nn = int(input())\nweeks = n // 7\nrem = n % 7\nmin_days_off = weeks * 2\nmax_days_off = weeks * 2\nif rem == 1:\n    min_days_off += 0\n    max_days_off += 1\nelif rem == 2:\n    min_days_off += 0\n    max_days_off += 2\nelif rem == 3:\n    min_days_off += 0\n    max_days_off += 2\nelif rem == 4:\n    min_days_off += 0\n    max_days_off += 2\nelif rem == 5:\n    min_days_off += 0\n    max_days_off += 2\nelif rem == 6:\n    min_days_off += 1\n    max_days_off += 2\n\nprint(min_days_off, max_days_off)\n```",
    "11": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\nn, a, b, p, q = map(int, input().split())\n\nred_count = n // a\nblue_count = n // b\nboth_count = n // lcm(a, b)\n\nif p > q:\n    total_chocolates = red_count * p + (blue_count - both_count) * q\nelse:\n    total_chocolates = blue_count * q + (red_count - both_count) * p\n\nprint(total_chocolates)\n```",
    "13": "```python\nfrom collections import deque\n\ndef solve():\n    n, k = map(int, input().split())\n    main_courses = list(map(int, input().split()))\n    dependencies = []\n    for _ in range(n):\n        dependencies.append(list(map(int, input().split()))[1:])\n\n    in_degree = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    \n    for i in range(n):\n        for dep in dependencies[i]:\n            adj[dep].append(i + 1)\n            in_degree[i + 1] += 1\n\n    q = deque()\n    for i in range(1, n + 1):\n        if in_degree[i] == 0:\n            q.append(i)\n\n    order = []\n    count = 0\n    \n    while q:\n        u = q.popleft()\n        order.append(u)\n        count += 1\n        \n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                q.append(v)\n\n    if count != n:\n        print(\"-1\")\n        return\n\n    necessary = set(main_courses)\n    \n    visited = [False] * (n + 1)\n    result = []\n    \n    def dfs(course):\n        if visited[course]:\n            return\n        visited[course] = True\n        \n        for dep in dependencies[course-1]:\n            if not visited[dep]:\n                dfs(dep)\n        \n        result.append(course)\n\n    for course in main_courses:\n        if not visited[course]:\n            dfs(course)\n    \n    result.reverse()\n\n    final_result = []\n    visited = [False] * (n + 1)\n    \n    def topological_sort(course):\n        if visited[course]:\n            return\n        visited[course] = True\n        \n        for dep in dependencies[course-1]:\n            if not visited[dep]:\n                topological_sort(dep)\n        \n        final_result.append(course)\n\n    for course in result:\n        if not visited[course]:\n            topological_sort(course)\n    \n    final_result.reverse()\n    \n    print(len(final_result))\n    print(*final_result)\n\nsolve()\n```",
    "14": "```python\ndef solve():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    used = [False] * (n + 1)\n    for x in p:\n        used[x] = True\n\n    remaining = []\n    for i in range(n, 0, -1):\n        if not used[i]:\n            remaining.append(i)\n\n    p_full = p[:]\n    p_full.extend(remaining)\n\n    def is_stack_sortable(arr):\n        stack = []\n        output = []\n        \n        for num in arr:\n            stack.append(num)\n            while stack and stack[-1] == len(output) + 1:\n                output.append(stack.pop())\n        \n        return len(output) == len(arr)\n\n    if is_stack_sortable(p_full):\n        print(*p_full)\n    else:\n        print(\"-1\")\n\nsolve()\n```",
    "16": "```python\ndef solve():\n    cnt1 = int(input())\n    cnt2 = int(input())\n    cnt3 = int(input())\n    cnt4 = int(input())\n    \n    if cnt1 == cnt4 and cnt1 >= 0:\n        if cnt1 == 0 and cnt2 == 0 and cnt3 == 0 and cnt4 == 0:\n            print(1)\n        elif cnt1 > 0:\n            print(1)\n        else:\n            print(1)\n    else:\n        print(0)\n\nsolve()\n```",
    "17": "```python\ndef solve():\n    n, k, t = map(int, input().split())\n    \n    if t <= k:\n        print(t)\n    elif t <= n:\n        print(k)\n    else:\n        print(max(0, k - (t - n)))\n\nsolve()\n```",
    "18": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    u = \"\"\n    t = []\n    \n    suffix_min = [0] * (n + 1)\n    suffix_min[n] = 'z'\n    for i in range(n - 1, -1, -1):\n        suffix_min[i] = min(s[i], suffix_min[i+1])\n        \n    i = 0\n    while i < n or len(t) > 0:\n        if len(t) > 0 and t[-1] <= suffix_min[i] :\n            u += t[-1]\n            t.pop()\n        else:\n            if i < n:\n                t.append(s[i])\n                i += 1\n            else:\n                u += t[-1]\n                t.pop()\n    print(u)\n\nsolve()\n```",
    "19": "```python\ndef solve():\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().split())))\n    \n    possible = True\n    for i in range(n):\n        if pairs[i][1] > pairs[i][0]:\n            possible = False\n            break\n        if i > 0:\n            if pairs[i][0] < pairs[i-1][0] or pairs[i][1] < pairs[i-1][1]:\n                possible = False\n                break\n            if pairs[i][0] - pairs[i-1][0] < pairs[i][1] - pairs[i-1][1]:\n                possible = False\n                break\n    \n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "20": "```python\ndef solve():\n    s = input()\n    hh = int(s[:2])\n    mm = int(s[3:])\n    \n    ans = 0\n    while True:\n        hh_str = str(hh).zfill(2)\n        mm_str = str(mm).zfill(2)\n        \n        if hh_str == mm_str[::-1]:\n            print(ans)\n            return\n        \n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        \n        ans += 1\n\nsolve()\n```",
    "22": "```python\ndef solve():\n    s = input()\n    n = len(s)\n    \n    symmetric_chars = {\n        'b': 'd',\n        'd': 'b',\n        'p': 'q',\n        'q': 'p',\n        'o': 'o',\n        'x': 'x',\n        'X': 'X',\n        'H': 'H',\n        'I': 'I',\n        'M': 'M',\n        'O': 'O',\n        'T': 'T',\n        'U': 'U',\n        'V': 'V',\n        'v': 'v',\n        'W': 'W',\n        'w': 'w',\n        'Y': 'Y',\n        'A': 'A',\n        'm': 'm',\n        't': 't',\n        'u': 'u',\n        'i':'i'\n    }\n    \n    for i in range(n // 2):\n        if s[i] not in symmetric_chars or s[n - 1 - i] not in symmetric_chars:\n            print(\"NIE\")\n            return\n        \n        if symmetric_chars[s[i]] != s[n - 1 - i]:\n            print(\"NIE\")\n            return\n            \n    if n % 2 == 1:\n        if s[n // 2] not in symmetric_chars:\n            print(\"NIE\")\n            return\n        if symmetric_chars[s[n//2]] != s[n//2]:\n            print(\"NIE\")\n            return\n    \n    print(\"TAK\")\n\nsolve()\n```",
    "23": "```python\nfrom collections import Counter\n\ndef solve():\n    a = input()\n    b = input()\n    \n    a_digits = sorted(list(a), reverse=True)\n    \n    if len(a) < len(b):\n        print(\"\".join(a_digits))\n        return\n    \n    a_counts = Counter(a)\n    \n    def find_max(index, current_num, remaining_counts, is_smaller):\n        if index == len(a):\n            return current_num\n        \n        best_num = \"\"\n        \n        available_digits = sorted(remaining_counts.keys(), reverse=True)\n        \n        for digit in available_digits:\n            if is_smaller or digit <= b[index]:\n                new_num = current_num + digit\n                new_counts = remaining_counts.copy()\n                new_counts[digit] -= 1\n                if new_counts[digit] == 0:\n                    del new_counts[digit]\n                \n                new_is_smaller = is_smaller or digit < b[index]\n                \n                temp_num = find_max(index + 1, new_num, new_counts, new_is_smaller)\n                \n                if len(temp_num) == len(a) and (best_num == \"\" or temp_num > best_num):\n                    best_num = temp_num\n        \n        return best_num\n    \n    result = find_max(0, \"\", a_counts, False)\n    print(result)\n\nsolve()\n```",
    "24": "```python\ndef solve():\n    board = []\n    for _ in range(10):\n        board.append(list(input()))\n\n    def check_win(b):\n        for i in range(10):\n            for j in range(10):\n                if b[i][j] == 'X':\n                    # Check horizontal\n                    if j <= 5 and all(b[i][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check vertical\n                    if i <= 5 and all(b[i+k][j] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 5 and j <= 5 and all(b[i+k][j+k] == 'X' for k in range(5)):\n                        return True\n                    # Check diagonal (top-right to bottom-left)\n                    if i <= 5 and j >= 4 and all(b[i+k][j-k] == 'X' for k in range(5)):\n                        return True\n        return False\n\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n                if check_win(board):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\nsolve()\n```",
    "25": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k > n * n:\n        print(\"-1\")\n        return\n\n    matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if k == 0:\n            break\n        if matrix[i][i] == 0 and k > 0:\n            matrix[i][i] = 1\n            k -= 1\n\n        for j in range(i + 1, n):\n            if k >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                k -= 2\n            else:\n                break\n\n    if k != 0:\n        print(\"-1\")\n        return\n\n    for row in matrix:\n        print(*row)\n\nsolve()\n```",
    "27": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    ans = n\n    \n    for i in range(1, n // 2 + 1):\n        if s[:i] == s[i:2*i]:\n            ans = min(ans, i + 1 + (n - 2*i))\n            \n    print(ans)\n\nsolve()\n```",
    "28": "```python\ndef solve():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        files.append(input().split())\n\n    examples = []\n    regular = []\n    for i in range(n):\n        if files[i][1] == '1':\n            examples.append((files[i][0], i))\n        else:\n            regular.append((files[i][0], i))\n\n    moves = []\n    e = len(examples)\n\n    def find_index(filename):\n        for i in range(n):\n            if files[i][0] == filename:\n                return i\n        return -1\n\n    def generate_temp_name(base):\n        temp_name = base\n        while find_index(temp_name) != -1:\n            temp_name += \"x\"\n        return temp_name\n\n    # Move examples to 1, 2, ..., e\n    for i in range(e):\n        expected_name = str(i + 1)\n        if examples[i][0] != expected_name:\n            current_index = examples[i][1]\n            \n            target_index = find_index(expected_name)\n            \n            if target_index != -1:\n                # Swap with a temporary file\n                temp_name = generate_temp_name(\"temp\")\n                moves.append(f\"move {expected_name} {temp_name}\")\n                moves.append(f\"move {files[current_index][0]} {expected_name}\")\n                moves.append(f\"move {temp_name} {examples[i][0]}\")\n\n                files[current_index][0] = expected_name\n                files[target_index][0] = examples[i][0]\n            else:\n                moves.append(f\"move {files[current_index][0]} {expected_name}\")\n                files[current_index][0] = expected_name\n\n    # Move regular tests to e+1, e+2, ..., n\n    for i in range(len(regular)):\n        expected_name = str(e + i + 1)\n        if regular[i][0] != expected_name:\n            current_index = regular[i][1]\n            \n            target_index = find_index(expected_name)\n            \n            if target_index != -1:\n                # Swap with a temporary file\n                temp_name = generate_temp_name(\"temp\")\n                moves.append(f\"move {expected_name} {temp_name}\")\n                moves.append(f\"move {files[current_index][0]} {expected_name}\")\n                moves.append(f\"move {temp_name} {regular[i][0]}\")\n\n                files[current_index][0] = expected_name\n                files[target_index][0] = regular[i][0]\n            else:\n                moves.append(f\"move {files[current_index][0]} {expected_name}\")\n                files[current_index][0] = expected_name\n\n    print(len(moves))\n    for move in moves:\n        print(move)\n\nsolve()\n```",
    "29": "```python\ns = input()\nans = 6\nfor sum1 in range(28):\n    for sum2 in range(28):\n        if sum1 == sum2:\n            for i in range(1000):\n                s1 = str(i).zfill(3)\n                if sum(int(d) for d in s1) == sum1:\n                    for j in range(1000):\n                        s2 = str(j).zfill(3)\n                        if sum(int(d) for d in s2) == sum2:\n                            cnt = 0\n                            for k in range(3):\n                                if s[k] != s1[k]:\n                                    cnt += 1\n                            for k in range(3):\n                                if s[k + 3] != s2[k]:\n                                    cnt += 1\n                            ans = min(ans, cnt)\nprint(ans)\n```",
    "30": "```python\ndef solve():\n    m, x = map(int, input().split())\n    print(m - 1)\n\nsolve()\n```",
    "31": "```python\ndef solve():\n    n, k = map(int, input().split())\n    mod = 10**6 + 3\n\n    if n < 63 and k > (1 << n):\n        print(1, 1)\n        return\n\n    num = 1\n    den = 1\n    twos_num = 0\n    twos_den = 0\n\n    for i in range(int(k)):\n        if i == 0:\n            continue\n        val = (pow(2, n, mod) - i) % mod\n        num = (num * val) % mod\n        \n        temp = i\n        while temp > 0 and temp % 2 == 0:\n            twos_num += 1\n            temp //= 2\n\n    den = pow(pow(2, n, mod), int(k - 1), mod)\n    twos_den = (int(k - 1) * int(n))\n    \n    twos_diff = twos_den - twos_num\n    \n    if twos_diff > 0:\n        num = (num * pow(2, min(twos_diff, 60), mod)) % mod\n        den = (den * pow(pow(2, min(twos_diff, 60), mod), mod - 2, mod)) % mod\n    \n    a = (den - num) % mod\n    b = den % mod\n    \n    gcd_val = gcd(a, b)\n    \n    a = (a // gcd_val) % mod\n    b = (b // gcd_val) % mod\n    \n    print(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nsolve()\n```",
    "32": "```python\ndef solve():\n    n = int(input())\n    \n    current_pos = 0  # 0 is North Pole, 20000 is South Pole\n    \n    for _ in range(n):\n        t, direction = input().split()\n        t = int(t)\n        \n        if current_pos == 0 and direction != \"South\":\n            print(\"NO\")\n            return\n        \n        if current_pos == 20000 and direction != \"North\":\n            print(\"NO\")\n            return\n            \n        if direction == \"South\":\n            current_pos += t\n        elif direction == \"North\":\n            current_pos -= t\n        \n        if current_pos < 0:\n            current_pos = 0\n        if current_pos > 20000:\n            current_pos = 20000\n            \n    if current_pos == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "33": "```python\nimport math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    d, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return d, x, y\n\ndef solve():\n    a1, b1, a2, b2, L, R = map(int, input().split())\n\n    g = gcd(a1, a2)\n    \n    if (b2 - b1) % g != 0:\n        print(0)\n        return\n\n    d, x, y = extended_gcd(a1, a2)\n    x *= (b2 - b1) // d\n    y *= (b2 - b1) // d\n\n    lcm = (a1 * a2) // g\n\n    x0 = x\n    \n    k = (L - b1 - a1 * x0) // lcm\n    \n    first = a1 * (x0 + k * (a2 // g)) + b1\n    \n    if first < L:\n        first = a1 * (x0 + (k + 1) * (a2 // g)) + b1\n        \n    if first > R:\n        print(0)\n        return\n\n    count = (R - first) // lcm + 1\n    \n    if count < 0:\n        print(0)\n        return\n    \n    k_min = 0\n    if (-x0) > 0:\n        k_min = math.ceil(-x0 / (a2 // g))\n    \n    l_min = 0\n    \n    y0 = y\n    \n    if ((b1 - b2) // g - a2 // g * y0) > 0:\n        l_min = math.ceil(((b1 - b2) // g - a2 // g * y0) / (a1 // g))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "34": "```python\ndef solve():\n    n, a, b = map(int, input().split())\n    \n    ans = 0\n    for i in range(1, n):\n        if i >= 1 and i < n:\n            x = a // i\n            y = b // (n - i)\n            if x > 0 and y > 0:\n                ans = max(ans, min(x, y))\n    print(ans)\n\nsolve()\n```",
    "36": "```python\ndef solve():\n    n = int(input())\n\n    if n == 0:\n        print(0, 0)\n        return\n\n    l, r = 0, int(2e9)\n    k = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if 3 * mid * (mid + 1) >= n:\n            k = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    n -= 3 * k * (k - 1)\n    x, y = 2 * k, 0\n\n    if n <= k:\n        x -= 2 * n\n    elif n <= 2 * k:\n        x -= 2 * k\n        n -= k\n        x += 2 * n\n        y += 2 * n\n    elif n <= 3 * k:\n        n -= 2 * k\n        y += 2 * k\n        x -= 2 * n\n    elif n <= 4 * k:\n        n -= 3 * k\n        y += 2 * k\n        x += 2 * n\n    elif n <= 5 * k:\n        n -= 4 * k\n        x += 2 * k\n        y -= 2 * n\n    else:\n        n -= 5 * k\n        x += 2 * k\n        y -= 2 * k\n        x -= 2 * n\n\n    print(x, y)\n\nsolve()\n```",
    "38": "```python\ndef solve():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n\n    for start_diff in range(l):\n        possible = True\n        kefa_shifted = []\n        for i in range(n):\n            kefa_shifted.append(kefa[i])\n            \n        sasha_shifted = []\n        for i in range(n):\n            sasha_shifted.append((sasha[i] + start_diff) % l)\n            \n        kefa_shifted.sort()\n        sasha_shifted.sort()\n            \n        if kefa_shifted == sasha_shifted:\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "40": "```python\ndef solve():\n    n = int(input())\n    ratings = []\n    for _ in range(n):\n        ratings.append(list(map(int, input().split())))\n    \n    changed = False\n    for a, b in ratings:\n        if a != b:\n            changed = True\n            break\n    \n    if changed:\n        print(\"rated\")\n        return\n    \n    sorted_order = True\n    for i in range(n - 1):\n        if ratings[i][0] < ratings[i+1][0]:\n            sorted_order = False\n            break\n    \n    if not sorted_order:\n        print(\"unrated\")\n    else:\n        print(\"maybe\")\n\nsolve()\n```",
    "41": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    distances = [float('inf')] * n\n\n    # Forward pass\n    last_zero = float('-inf')\n    for i in range(n):\n        if a[i] == 0:\n            last_zero = i\n        if last_zero != float('-inf'):\n            distances[i] = min(distances[i], i - last_zero)\n\n    # Backward pass\n    last_zero = float('inf')\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            last_zero = i\n        if last_zero != float('inf'):\n            distances[i] = min(distances[i], last_zero - i)\n\n    print(*distances)\n\nsolve()\n```",
    "42": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    count = 0\n    \n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        \n        is_substring = False\n        for j in range(n):\n            shifted_string = binary_string[j:] + binary_string[:j]\n            if s in shifted_string:\n                is_substring = True\n                break\n        \n        if is_substring:\n            count += 1\n    \n    print(count)\n\nsolve()\n```",
    "44": "```python\nd, k, a, b, t = map(int, input().split())\n\nif d <= k:\n  print(d * a)\nelse:\n  cost = k * a\n  remaining_distance = d - k\n  \n  if t + k * a < k * b:\n    num_breaks = remaining_distance // k\n    cost += num_breaks * (t + k * a)\n    remaining_distance %= k\n    \n    if remaining_distance > 0:\n      cost += min(t + remaining_distance * a, remaining_distance * b)\n  else:\n    cost += remaining_distance * b\n    \n  print(cost)\n```",
    "45": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(-1)\n        return\n\n    best_gcd = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, i)\n            if i >= k * (k + 1) // 2:\n                best_gcd = max(best_gcd, n // i)\n\n    if best_gcd == 0:\n        print(-1)\n        return\n\n    first = best_gcd\n    result = []\n    for i in range(1, k):\n        result.append(first * i)\n    result.append(n - sum(result))\n\n    if result[-1] <= result[-2] or any(x <= 0 for x in result):\n        print(-1)\n    else:\n        print(*result)\n\nsolve()\n```",
    "46": "```python\nn, m = map(int, input().split())\ncount = 0\nfor i in range(1, 6):\n    count += (n + 5 - i) // 5 * ((m + i - 1) // 5)\nprint(count)\n```",
    "47": "```python\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    dp = [[0] * 3 for _ in range(n + 1)]\n\n    ans = 0\n    for i in range(1, n + 1):\n        dp[i][0] = max(0, dp[i-1][0] + a[i-1])\n        dp[i][1] = max(0, max(dp[i-1][0] + a[i-1] * x, dp[i-1][1] + a[i-1] * x))\n        dp[i][2] = max(0, max(dp[i-1][1] + a[i-1], dp[i-1][2] + a[i-1]))\n        ans = max(ans, dp[i][0], dp[i][1], dp[i][2])\n\n    print(ans)\n\nsolve()\n```",
    "49": "```python\nk = int(input())\n\ndigits = 1\ncount = 9\nwhile k > digits * count:\n    k -= digits * count\n    digits += 1\n    count *= 10\n\nnum = 10**(digits - 1) + (k - 1) // digits\nindex = (k - 1) % digits\n\nprint(str(num)[index])\n```",
    "52": "```python\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n\n    dp = {}\n\n    def get_dp(row_idx, total_sum_mod_k):\n        if row_idx == n:\n            return 0 if total_sum_mod_k == 0 else float('-inf')\n        \n        if (row_idx, total_sum_mod_k) in dp:\n            return dp[(row_idx, total_sum_mod_k)]\n\n        max_sum = float('-inf')\n\n        for count in range(min(m // 2 + 1, m + 1)):\n            for mask in range(1 << m):\n                selected_count = 0\n                current_sum = 0\n                for j in range(m):\n                    if (mask >> j) & 1:\n                        selected_count += 1\n                        current_sum += a[row_idx][j]\n                \n                if selected_count == count:\n                    max_sum = max(max_sum, current_sum + get_dp(row_idx + 1, (total_sum_mod_k + current_sum) % k))\n        \n        dp[(row_idx, total_sum_mod_k)] = max_sum\n        return max_sum\n\n    print(get_dp(0, 0))\n\nsolve()\n```",
    "53": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    l, r = 0, n - 1\n    last = -1\n    moves = \"\"\n    count = 0\n\n    while l <= r:\n        if a[l] > last and a[r] > last:\n            if a[l] < a[r]:\n                last = a[l]\n                moves += \"L\"\n                l += 1\n                count += 1\n            elif a[r] < a[l]:\n                last = a[r]\n                moves += \"R\"\n                r -= 1\n                count += 1\n            else:\n                temp_l, temp_r = l, r\n                count_l, count_r = 0, 0\n                last_l, last_r = last, last\n                moves_l, moves_r = \"\", \"\"\n                \n                while temp_l <= r and a[temp_l] > last_l:\n                    last_l = a[temp_l]\n                    count_l += 1\n                    moves_l += \"L\"\n                    temp_l += 1\n                \n                while temp_r >= l and a[temp_r] > last_r:\n                    last_r = a[temp_r]\n                    count_r += 1\n                    moves_r += \"R\"\n                    temp_r -= 1\n                \n                if count_l > count_r:\n                    moves += moves_l\n                    count += count_l\n                elif count_r > count_l:\n                    moves += moves_r\n                    count += count_r\n                else:\n                    moves += moves_l\n                    count += count_l\n                break\n        elif a[l] > last:\n            last = a[l]\n            moves += \"L\"\n            l += 1\n            count += 1\n        elif a[r] > last:\n            last = a[r]\n            moves += \"R\"\n            r -= 1\n            count += 1\n        else:\n            break\n    \n    print(count)\n    print(moves)\n\nsolve()\n```",
    "54": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    unique_vals = sorted(list(set(a)))\n\n    if len(unique_vals) > 3:\n        print(-1)\n        return\n\n    if len(unique_vals) <= 1:\n        print(0)\n        return\n\n    if len(unique_vals) == 2:\n        val1, val2 = unique_vals\n        d = abs(val1 - val2)\n        if d % 2 == 0:\n            print(d // 2)\n        else:\n            print(d)\n        return\n\n    if len(unique_vals) == 3:\n        val1, val2, val3 = unique_vals\n        if val2 - val1 == val3 - val2:\n            print(val2 - val1)\n        else:\n            print(-1)\n        return\n\nsolve()\n```",
    "55": "```python\ndef solve():\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_area = (x2 - x1) * (y2 - y1)\n\n    def intersection_area(x1, y1, x2, y2, x3, y3, x4, y4):\n        x_overlap = max(0, min(x2, x4) - max(x1, x3))\n        y_overlap = max(0, min(y2, y4) - max(y1, y3))\n        return x_overlap * y_overlap\n\n    intersection_area_1 = intersection_area(x1, y1, x2, y2, x3, y3, x4, y4)\n    intersection_area_2 = intersection_area(x1, y1, x2, y2, x5, y5, x6, y6)\n\n    # Intersection of black sheets\n    x_overlap_black = max(0, min(x4, x6) - max(x3, x5))\n    y_overlap_black = max(0, min(y4, y6) - max(y3, y5))\n    intersection_area_black = x_overlap_black * y_overlap_black\n\n    # Intersection of all three\n    x_overlap_all = max(0, min(x2, x4, x6) - max(x1, x3, x5))\n    y_overlap_all = max(0, min(y2, y4, y6) - max(y1, y3, y5))\n    intersection_area_all = x_overlap_all * y_overlap_all\n\n    covered_area = intersection_area_1 + intersection_area_2 - intersection_area_all\n\n    if white_area > covered_area:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "56": "```python\ndef f(x):\n    x += 1\n    while x % 10 == 0:\n        x //= 10\n    return x\n\ndef solve():\n    n = int(input())\n    reachable = set()\n    curr = n\n    while curr not in reachable:\n        reachable.add(curr)\n        curr = f(curr)\n    print(len(reachable))\n\nsolve()\n```",
    "57": "```python\ndef solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n\n    givers = [i + 1 for i in range(n)]\n    receivers = [i + 1 for i in range(n)]\n\n    given = set()\n    for val in f:\n        if val != 0:\n            given.add(val)\n\n    need_to_give = []\n    for i in range(n):\n        if f[i] == 0:\n            need_to_give.append(i)\n\n    available_receivers = []\n    for i in range(1, n + 1):\n        if i not in given:\n            available_receivers.append(i)\n\n    for i in range(len(need_to_give)):\n        giver_index = need_to_give[i]\n        receiver = available_receivers[i]\n\n        if receiver == giver_index + 1:\n            for j in range(len(available_receivers)):\n                if available_receivers[j] != giver_index + 1:\n                    available_receivers[i], available_receivers[j] = available_receivers[j], available_receivers[i]\n                    receiver = available_receivers[i]\n                    break\n\n        f[giver_index] = receiver\n\n    print(*f)\n\nsolve()\n```",
    "58": "```python\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    for x in counts:\n        if counts[x] > k:\n            print(\"NO\")\n            return\n\n    colors = [0] * n\n    color_assignment = {}\n    \n    color_idx = 1\n    \n    for i in range(n):\n        val = a[i]\n        if val not in color_assignment:\n            color_assignment[val] = []\n        \n        if len(color_assignment[val]) < k:\n            colors[i] = (len(color_assignment[val]) % k) + 1\n            color_assignment[val].append(colors[i])\n        else:\n            print(\"NO\")\n            return\n            \n    used_colors = set(colors)\n    if len(used_colors) < k:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n",
    "59": "```python\ndef solve():\n    n, x, y = map(int, input().split())\n    s = input()\n    \n    count = 0\n    for i in range(n - x, n):\n        if i == n - 1 - y:\n            if s[i] == '0':\n                pass\n            else:\n                count += 1\n        else:\n            if s[i] == '1':\n                pass\n            else:\n                count += 1\n    print(count)\n\nsolve()\n```",
    "62": "```python\ndef solve():\n    a, b, c = map(int, input().split())\n    \n    best_cost = float('inf')\n    best_triple = None\n    \n    for A in range(1, 2 * a + 1):\n        for B in range(A, 2 * b + 1, A):\n            C1 = (c // B) * B\n            C2 = C1 + B\n            \n            candidates = []\n            if C1 > 0:\n                candidates.append(C1)\n            candidates.append(C2)\n            \n            for C in candidates:\n                cost = abs(a - A) + abs(b - B) + abs(c - C)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_triple = (A, B, C)\n    \n    print(best_cost)\n    print(*best_triple)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "64": "```python\ndef solve():\n    n, m = map(int, input().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c, i + 1))\n\n    schedule = [0] * n\n    exam_days = {}\n    for s, d, c, i in exams:\n        exam_days[d - 1] = i\n\n    for day in exam_days:\n        schedule[day] = m + 1\n\n    preparation_counts = [0] * m\n    \n    for day in range(n):\n        if schedule[day] == 0:\n            best_exam = -1\n            for s, d, c, i in exams:\n                exam_index = i - 1\n                if s - 1 <= day < d - 1 and preparation_counts[exam_index] < c:\n                    if best_exam == -1:\n                        best_exam = i\n                    else:\n                        s_best, d_best, c_best, i_best = exams[best_exam - 1]\n                        if d > d_best:\n                            best_exam = i\n            \n            if best_exam != -1:\n                schedule[day] = best_exam\n                preparation_counts[best_exam - 1] += 1\n\n    possible = True\n    for i in range(m):\n        if preparation_counts[i] != exams[i][2]:\n            possible = False\n            break\n\n    if possible:\n        print(*schedule)\n    else:\n        print(-1)\n\nsolve()\n```",
    "66": "```python\ndef solve():\n    n, k = map(int, input().split())\n    t = input()\n    \n    overlap = 0\n    for i in range(1, n):\n        if t[:n-i] == t[i:]:\n            overlap = n - i\n            break\n    \n    result = t + t[overlap:] * (k - 1)\n    print(result)\n\nsolve()\n```",
    "68": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] = min(dp[i][j], k + 1)\n        \n    counts = [0] * (n + 1)\n    for i in range(n + 1):\n        counts[i] = dp[n][i]\n    \n    total_cost = 0\n    \n    for length in range(n, -1, -1):\n        if counts[length] <= k:\n            total_cost += counts[length] * (n - length)\n            k -= counts[length]\n        else:\n            total_cost += k * (n - length)\n            k = 0\n            break\n    \n    if k > 0:\n        print(-1)\n    else:\n        print(total_cost)\n\nsolve()\n```",
    "71": "```python\nimport math\n\na = int(input())\nif a == 1:\n    print(0)\nelse:\n    print(math.ceil(math.log2(a)))\n```",
    "73": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    stack = []\n    for x in a:\n        if not stack:\n            stack.append(x)\n        elif stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n\n    if not stack:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "74": "```python\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] = min(dp[i][j], k)\n            \n    \n    ans = 0\n    for length in range(n, -1, -1):\n        count = dp[n][length]\n        take = min(count, k)\n        ans += take * (n - length)\n        k -= take\n        \n        if k == 0:\n            print(ans)\n            return\n    \n    print(-1)\n\nsolve()\n```",
    "76": "```python\ndef solve():\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(n):\n        tile1 = list(map(int, input().split()))\n        tile2 = list(map(int, input().split()))\n        tiles.append([tile1, tile2])\n\n    if m % 2 != 0:\n        print(\"NO\")\n        return\n\n    found = False\n    for tile in tiles:\n        if tile[0][1] == tile[1][0]:\n            found = True\n            break\n\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
    "77": "```python\nn = int(input())\ntotal_sum = n * (n + 1) // 2\nprint(total_sum % 2)\n```",
    "78": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    mod = 10**9 + 7\n    len_s = len(s)\n    len_seq = 2 * n\n\n    dp = {}\n\n    def count_regular(index, balance, contains_s):\n        if index == len_seq:\n            if balance == 0 and contains_s:\n                return 1\n            else:\n                return 0\n\n        if (index, balance, contains_s) in dp:\n            return dp[(index, balance, contains_s)]\n\n        count = 0\n        \n        # Try adding '('\n        new_contains_s = contains_s\n        if not contains_s:\n            if index < len_s and s[index] != '(':\n                pass\n            elif index >= len_s or s[index] == '(':\n                count = (count + count_regular(index + 1, balance + 1, contains_s)) % mod\n            else:\n                pass\n        else:\n            count = (count + count_regular(index + 1, balance + 1, contains_s)) % mod\n            \n        # Try adding ')'\n        new_contains_s = contains_s\n        if not contains_s:\n            if balance > 0:\n                if index < len_s and s[index] != ')':\n                    pass\n                elif index >= len_s or s[index] == ')':\n                    count = (count + count_regular(index + 1, balance - 1, contains_s)) % mod\n                else:\n                    pass\n        else:\n            if balance > 0:\n                count = (count + count_regular(index + 1, balance - 1, contains_s)) % mod\n\n        dp[(index, balance, contains_s)] = count\n\n        return count\n\n    def check_substring(seq, sub):\n        for i in range(len(seq) - len(sub) + 1):\n            if seq[i:i+len(sub)] == sub:\n                return True\n        return False\n\n    def count_regular_optimized():\n        dp = {}\n\n        def solve_recursive(idx, balance, has_substring):\n            if idx == 2 * n:\n                if balance == 0 and has_substring:\n                    return 1\n                else:\n                    return 0\n\n            if (idx, balance, has_substring) in dp:\n                return dp[(idx, balance, has_substring)]\n\n            count = 0\n\n            # Option 1: Add '('\n            new_has_substring = has_substring\n            if not has_substring and idx < len_s and s[idx] != '(':\n                pass\n            else:\n                if not has_substring and idx < len_s and s[idx] == '(':\n                    new_has_substring = (idx == len_s - 1)\n                elif not has_substring and idx >= len_s:\n                    pass\n                count = (count + solve_recursive(idx + 1, balance + 1, new_has_substring)) % mod\n\n            # Option 2: Add ')'\n            if balance > 0:\n                new_has_substring = has_substring\n                if not has_substring and idx < len_s and s[idx] != ')':\n                    pass\n                else:\n                    if not has_substring and idx < len_s and s[idx] == ')':\n                        new_has_substring = (idx == len_s - 1)\n                    elif not has_substring and idx >= len_s:\n                        pass\n                count = (count + solve_recursive(idx + 1, balance - 1, new_has_substring)) % mod\n\n            dp[(idx, balance, has_substring)] = count\n            return count\n\n        return solve_recursive(0, 0, False)\n\n    print(count_regular_optimized())\n\nsolve()\n```",
    "79": "```python\ndef solve():\n    n = input()\n    s = list(n)\n    ans = float('inf')\n\n    for suffix in [\"00\", \"25\", \"50\", \"75\"]:\n        temp_s = s[:]\n        moves = 0\n\n        # Find the last digit of the suffix\n        idx2 = -1\n        for i in range(len(temp_s) - 1, -1, -1):\n            if temp_s[i] == suffix[1]:\n                idx2 = i\n                break\n        if idx2 == -1:\n            continue\n\n        moves += len(temp_s) - 1 - idx2\n        temp_s.pop(idx2)\n\n        # Find the first digit of the suffix\n        idx1 = -1\n        for i in range(len(temp_s) - 1, -1, -1):\n            if temp_s[i] == suffix[0]:\n                idx1 = i\n                break\n        if idx1 == -1:\n            continue\n\n        moves += len(temp_s) - 1 - idx1\n        temp_s.pop(idx1)\n\n        # Remove leading zeros\n        leading_zeros = 0\n        for i in range(len(temp_s)):\n            if temp_s[i] == '0':\n                leading_zeros += 1\n            else:\n                break\n\n        # Check if all digits are zero after removing suffix\n        if leading_zeros == len(temp_s):\n            continue\n        \n        moves += leading_zeros\n\n        ans = min(ans, moves)\n\n    if ans == float('inf'):\n        print(\"-1\")\n    else:\n        print(ans)\n\nsolve()\n```",
    "80": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    \n    colors = [0] * n\n    \n    tails = []\n    \n    for i in range(n):\n        found = False\n        for j in range(len(tails)):\n            if s[i] >= tails[j]:\n                tails[j] = s[i]\n                colors[i] = j + 1\n                found = True\n                break\n        if not found:\n            tails.append(s[i])\n            colors[i] = len(tails)\n            \n    print(len(tails))\n    print(*colors)\n\nsolve()\n```",
    "81": "```python\ndef solve():\n    n = int(input())\n    strings = [input() for _ in range(n)]\n\n    def is_substring(a, b):\n        return a in b\n\n    strings.sort(key=len)\n\n    for i in range(1, n):\n        if not is_substring(strings[i-1], strings[i]):\n            print(\"NO\")\n            return\n    \n    print(\"YES\")\n    for s in strings:\n        print(s)\n\nsolve()\n```",
    "83": "```python\ndef solve():\n    a, b = map(int, input().split())\n    total = a + b\n    \n    best_perimeter = float('inf')\n    \n    for h in range(1, int(total**0.5) + 1):\n        if total % h == 0:\n            w = total // h\n            \n            # Case 1: a forms a rectangle\n            for h_a in range(1, int(a**0.5) + 1):\n                if a % h_a == 0:\n                    w_a = a // h_a\n                    if h_a <= h and w_a <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n                    if h_a <= w and w_a <= h:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n            \n            # Case 2: b forms a rectangle\n            for h_b in range(1, int(b**0.5) + 1):\n                if b % h_b == 0:\n                    w_b = b // h_b\n                    if h_b <= h and w_b <= w:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n                    if h_b <= w and w_b <= h:\n                        best_perimeter = min(best_perimeter, 2 * (h + w))\n    \n    print(best_perimeter)\n\nsolve()\n```",
    "84": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    sorted_s = sorted(s)\n\n    for i in range(1 << n):\n        coloring = \"\"\n        for j in range(n):\n            if (i >> j) & 1:\n                coloring += \"1\"\n            else:\n                coloring += \"0\"\n\n        s0 = []\n        s1 = []\n        for j in range(n):\n            if coloring[j] == '0':\n                s0.append(s[j])\n            else:\n                s1.append(s[j])\n\n        s0.sort()\n        s1.sort()\n\n        merged = []\n        idx0 = 0\n        idx1 = 0\n        for j in range(n):\n            if coloring[j] == '0':\n                merged.append(s0[idx0])\n                idx0 += 1\n            else:\n                merged.append(s1[idx1])\n                idx1 += 1\n\n        if merged == sorted_s:\n            print(\"YES\")\n            print(coloring)\n            return\n\n    print(\"NO\")\n\nsolve()\n```",
    "86": "```python\ndef solve():\n    n, k = map(int, input().split())\n\n    if k * (k + 1) // 2 > n:\n        print(\"NO\")\n        return\n\n    a = [i + 1 for i in range(k)]\n    remaining = n - k * (k + 1) // 2\n\n    for i in range(k):\n        a[i] += remaining // k\n    \n    remaining %= k\n    \n    for i in range(k - 1, k - 1 - remaining, -1):\n        a[i] += 1\n\n    for i in range(k - 1):\n        if a[i+1] > 2 * a[i]:\n            diff = a[i+1] - 2 * a[i]\n            a[i+1] -= diff\n            a[-1] += diff\n            \n    \n    \n    valid = True\n    for i in range(k - 1):\n        if a[i+1] <= a[i] or a[i+1] > 2 * a[i]:\n            valid = False\n            break\n    \n    if valid:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\n\nsolve()\n```",
    "88": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def can_place(row, col, val):\n        return counts[val] > 0\n    \n    def place(row, col, val):\n        matrix[row][col] = val\n        counts[val] -= 1\n        \n    def unplace(row, col, val):\n        matrix[row][col] = 0\n        counts[val] += 1\n        \n    def solve_recursive(row, col):\n        if row == n:\n            print(\"YES\")\n            for r in range(n):\n                print(*matrix[r])\n            return True\n        \n        if col == n:\n            return solve_recursive(row + 1, 0)\n        \n        if matrix[row][col] != 0:\n            return solve_recursive(row, col + 1)\n        \n        for val in sorted(counts.keys()):\n            if can_place(row, col, val):\n                place(row, col, val)\n                \n                row_sym = n - 1 - row\n                col_sym = n - 1 - col\n                \n                if row == row_sym and col == col_sym:\n                    if solve_recursive(row, col + 1):\n                        return True\n                elif row == row_sym:\n                    if can_place(row, col_sym, val):\n                        place(row, col_sym, val)\n                        if solve_recursive(row, col + 1):\n                            return True\n                        unplace(row, col_sym, val)\n                elif col == col_sym:\n                    if can_place(row_sym, col, val):\n                        place(row_sym, col, val)\n                        if solve_recursive(row, col + 1):\n                            return True\n                        unplace(row_sym, col, val)\n                else:\n                    if can_place(row_sym, col, val) and can_place(row, col_sym, val) and can_place(row_sym, col_sym, val):\n                        place(row_sym, col, val)\n                        place(row, col_sym, val)\n                        place(row_sym, col_sym, val)\n                        if solve_recursive(row, col + 1):\n                            return True\n                        unplace(row_sym, col_sym, val)\n                        unplace(row, col_sym, val)\n                        unplace(row_sym, col, val)\n                \n                unplace(row, col, val)\n                \n        return False\n    \n    total_cells = n * n\n    counts_needed = {k: 0 for k in counts}\n    \n    for row in range(n):\n        for col in range(n):\n            row_sym = n - 1 - row\n            col_sym = n - 1 - col\n            \n            if row == row_sym and col == col_sym:\n                counts_needed[0] = counts_needed.get(0,0) + 1\n            elif row == row_sym or col == col_sym:\n                counts_needed[1] = counts_needed.get(1,0) + 1\n            else:\n                counts_needed[3] = counts_needed.get(3,0) + 1\n    \n    single_count = 0\n    double_count = 0\n    quad_count = 0\n    \n    for row in range(n):\n        for col in range(n):\n            row_sym = n - 1 - row\n            col_sym = n - 1 - col\n            \n            if row == row_sym and col == col_sym:\n                single_count += 1\n            elif row == row_sym and col != col_sym or row != row_sym and col == col_sym:\n                double_count += 1\n            elif row != row_sym and col != col_sym:\n                quad_count += 1\n    \n    single_count = single_count\n    double_count = double_count // 2\n    quad_count = quad_count // 4\n    \n    single_needed = 0\n    double_needed = 0\n    quad_needed = 0\n    \n    if n % 2 == 1:\n        single_needed = 1\n        double_needed = 2 * (n // 2)\n        quad_needed = (n // 2) * (n // 2)\n    else:\n        quad_needed = (n // 2) * (n // 2)\n    \n    single_available = 0\n    double_available = 0\n    quad_available = 0\n    \n    for k, v in counts.items():\n        if v >= 4:\n            quad_available += v // 4\n            counts[k] %= 4\n        if v >= 2:\n            double_available += v // 2\n            counts[k] %= 2\n        if v >= 1:\n            single_available += v\n    \n    \n    if n % 2 == 1:\n        single_needed = 1\n        double_needed = n - 1\n        quad_needed = (n * n - (n - 1) - 1) // 4\n    else:\n        quad_needed = (n * n) // 4\n        \n    \n    single_available = 0\n    double_available = 0\n    quad_available = 0\n    \n    for k, v in counts.items():\n        quad_available += v // 4\n        v %= 4\n        double_available += v // 2\n        v %= 2\n        single_available += v\n    \n    \n    if quad_available < quad_needed:\n        print(\"NO\")\n        return\n    \n    quad_available -= quad_needed\n    \n    if n % 2 == 1:\n        if double_available + quad_available * 2 < double_needed:\n            print(\"NO\")\n            return\n        \n        temp = min(double_available, double_needed)\n        double_available -= temp\n        double_needed -= temp\n        \n        if double_needed > 0:\n            single_available += double_needed\n        \n        if single_available < single_needed:\n            print(\"NO\")\n            return\n    \n    if not solve_recursive(0, 0):\n        print(\"NO\")\n\nsolve()\n```",
    "90": "```python\ndef solve():\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    total_length = sum(c)\n    min_empty = n - total_length\n    \n    arr = [0] * n\n    \n    pos = 0\n    \n    possible = True\n    \n    for i in range(m):\n        \n        needed_empty = 0\n        if i == 0:\n            needed_empty = min(min_empty, d - 1)\n        else:\n            needed_empty = min(min_empty, d - 1)\n            \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
    "91": "```python\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    \n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            temp_s = \"\"\n            if i > 0:\n                temp_s += s[:i]\n            if j < n:\n                temp_s += s[j:]\n            \n            \n            ti = 0\n            tsi = 0\n            \n            \n            while ti < m and tsi < len(temp_s):\n                if t[ti] == temp_s[tsi]:\n                    ti += 1\n                    tsi += 1\n                else:\n                    tsi += 1\n            \n            if ti == m:\n                ans = max(ans, j - i)\n    \n    print(ans)\n\nsolve()\n```",
    "92": "```python\nx = float(input())\na = int((x * 10) % 10) + 1\nb = int((x * 100) % 10)\nprint(a, b)\n```",
    "93": "```python\ndef solve():\n    n, d, k = map(int, input().split())\n\n    if d >= n:\n        print(\"NO\")\n        return\n\n    if d == 1:\n        if n > 2 and k <= 1:\n            print(\"NO\")\n            return\n        if n == 2 and k < 1:\n            print(\"NO\")\n            return\n        if n == 2 and k == 1:\n            print(\"NO\")\n            return\n    \n    if d > 1 and k == 1:\n        print(\"NO\")\n        return\n\n    if d > n - 1:\n        print(\"NO\")\n        return\n\n    edges = []\n    \n    # Create a path of length d\n    for i in range(d):\n        edges.append((i + 1, i + 2))\n    \n    remaining_nodes = n - d - 1\n    \n    if remaining_nodes < 0:\n        print(\"NO\")\n        return\n\n    degrees = [0] * (n + 1)\n    for u, v in edges:\n        degrees[u] += 1\n        degrees[v] += 1\n\n    next_node = d + 2\n    \n    for i in range(1, d + 2):\n        if degrees[i] >= k:\n            continue\n        while remaining_nodes > 0 and degrees[i] < k:\n            edges.append((i, next_node))\n            degrees[i] += 1\n            degrees[next_node] += 1\n            next_node += 1\n            remaining_nodes -= 1\n\n    if remaining_nodes > 0:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for u, v in edges:\n        print(u, v)\n\nsolve()\n```",
    "94": "```python\ndef solve():\n    a, b, x = map(int, input().split())\n    \n    if a > b:\n        start = 0\n    else:\n        start = 1\n    \n    s = \"\"\n    \n    for i in range(x):\n        if start == 0:\n            s += '0'\n            a -= 1\n            start = 1\n        else:\n            s += '1'\n            b -= 1\n            start = 0\n            \n    if start == 0:\n        s += '0' * a\n        s += '1' * b\n    else:\n        s += '1' * b\n        s += '0' * a\n    \n    print(s)\n\nsolve()\n```",
    "95": "```python\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n\n    chars = ['a', 'b', 'c']\n\n    import itertools\n    \n    for perm in itertools.permutations(chars):\n        res = \"\"\n        for _ in range(n):\n            res += perm[0]\n            res += perm[1]\n            res += perm[2]\n        \n        valid = True\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                valid = False\n                break\n        \n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n    \n    for perm in itertools.permutations(chars):\n        res = \"\"\n        for _ in range(n):\n            res = perm[0] + res\n            res = perm[1] + res\n            res = perm[2] + res\n        \n        valid = True\n        for i in range(len(res) - 1):\n            sub = res[i:i+2]\n            if sub == s or sub == t:\n                valid = False\n                break\n        \n        if valid:\n            print(\"YES\")\n            print(res)\n            return\n    \n    \n    print(\"NO\")\n\nsolve()\n```",
    "96": "```python\ndef solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    for first_element in range(1, n + 1):\n        p = [first_element]\n        valid = True\n        for i in range(n - 1):\n            next_element = p[-1] + q[i]\n            p.append(next_element)\n            if next_element < 1 or next_element > n:\n                valid = False\n                break\n        \n        if valid:\n            seen = set()\n            all_present = True\n            for x in p:\n                if x in seen:\n                    all_present = False\n                    break\n                seen.add(x)\n            \n            if all_present and len(seen) == n:\n                print(*p)\n                return\n    \n    print(-1)\n\nsolve()\n```",
    "99": "```python\ndef solve():\n    n = int(input())\n    a1, a2, a3 = map(int, input().split())\n    b1, b2, b3 = map(int, input().split())\n\n    min_wins = 0\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a3 - a1), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b1 + b2 - a1 - a3), a3 - (b2 + b3 - a1 - a2))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b1 + b2 - a1 - a3), a3 - (b2 + b3 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max(0, a1 - (b1 + b3 - a2 - a3), a2 - (b2 + b1 - a1 - a3), a3 - (b3 + b2 - a1 - a2))\n    min_wins = max(0, a1 - (n - b2), a2 - (n - b3), a3 - (n - b1))\n    min_wins = max"
}