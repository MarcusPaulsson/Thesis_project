{
    "0": "Here is an example implementation of the Tic-Tac-Toe game in Python using a command line interface:\r\n\r\n```python\r\nclass TicTacToe():\r\n    def __init__(self):\r\n        self.board = [' '] * 9\r\n        self.turn = 'X'\r\n        \r\n    def display_board(self):\r\n        print(\"\"\"\r\n          {} | {} | {}\r\n         -----------\r\n          {} | {} | {}\r\n         -----------\r\n          {} | {} | {}\r\n        \"\"\".format(*self.board))\r\n        \r\n    def place_move(self, pos):\r\n        if self.board[pos-1] == ' ':\r\n            self.board[pos-1] = self.turn\r\n            if self.check_win():\r\n                print(\"{} wins!\".format(self.turn))\r\n                return True\r\n            else:\r\n                self.toggle_turn()\r\n        else:\r\n            print('Illegal move!')\r\n    \r\n    def check_win(self):\r\n        win_conditions = [[1,2,3],[4,5,6],[7,8,9], # rows\r\n                         [1,4,7],[2,5,8],[3,6,9], # columns\r\n                         [1,5,9],[3,5,7]]        # diagonals\r\n        for condition in win_conditions:\r\n            if self.board[condition[0]-1] == self.turn and self.board[condition[1]-1] == self.turn and self.board[condition[2]-1] == self.turn:\r\n                return True\r\n        \r\n    def toggle_turn(self):\r\n        if self.turn == 'X':\r\n            self.turn = 'O'\r\n        else:\r\n            self.turn = 'X'\r\n            \r\n    def play(self):\r\n        while True:\r\n            self.display_board()\r\n            pos = int(input(\"Player {}, enter a position (1-9): \".format(self.turn)))\r\n            if self.place_move(pos) or len(list(filter(lambda x: x == ' ', self.board)) == 0:\r\n                break\r\n```\r\n\r\nTo use this implementation, you can create a new `TicTacToe` object and call the `play()` method on it:\r\n\r\n```python\r\ngame = TicTacToe()\r\ngame.play()\r\n```\r\n\r\nThis will start a game of Tic-Tac-Toe where players take turns entering positions (1-9) on the board. When someone wins, the program will print \"X wins!\" or \"O wins!\", and then exit the loop. If there are no more legal moves left but no one has won yet, the game ends in a tie. ",
    "1": "Here is an example implementation of Hangman with a command line interface in Python:\r\n\r\n```python\r\nimport random\r\n\r\nclass Hangman:\r\n    def __init__(self):\r\n        self.word = \"\"\r\n        self.guesses = [] # Stores user's guesses\r\n        self.lives = 6\r\n        self.guess_count = 0\r\n        self.max_guesses = 6\r\n    \r\n    def get_random_word(self):\r\n        with open(\"words.txt\", \"r\") as f: # assuming you have a file called words.txt containing a list of words to choose from\r\n            words = f.readlines()\r\n        self.word = random.choice(words).strip() # choose a random word and remove newline character\r\n    \r\n    def get_guess(self):\r\n        guess = input(\"Guess a letter: \")\r\n        return guess\r\n    \r\n    def play(self):\r\n        self.get_random_word()\r\n        while True: # game loop\r\n            if self.lives == 0:\r\n                print(\"You lost! The word was\", self.word)\r\n                break\r\n            if len([letter for letter in self.word if letter not in self.guesses]) == 0:\r\n                print(\"Congratulations, you won!\")\r\n                break\r\n            self.display_board()\r\n            guess = self.get_guess()\r\n            self.guesses.append(guess)\r\n            if guess in self.word: # correct guess\r\n                print(\"Good job!\", guess, \"is in the word.\")\r\n                print(\"\\n\")\r\n            else:\r\n                self.lives -= 1\r\n                print(\"Sorry,\", guess, \"is not in the word.\")\r\n                if self.lives == 0:\r\n                    print(\"You lost! The word was\", self.word)\r\n                    break\r\n            if self.guess_count >= self.max_guesses: # user used all their guesses\r\n                print(\"Sorry, you ran out of guesses.\")\r\n                break\r\n        \r\n    def display_board(self):\r\n        print(\"\\n\")\r\n        for letter in self.word:\r\n            if letter in self.guesses:\r\n                print(letter, end=\" \")\r\n            else:\r\n                print(\"_\", end=\" \")\r\n        print(\"\\n\")\r\n```\r\n\r\nIn this implementation, we create a class called `Hangman` with an `__init__` method to set initial variables. The game uses a randomly chosen word from a file of words and stores the user's guesses in a list. We then have two methods: one to get the user's input (`get_guess`) and another to display the current state of the board (`display_board`). Inside the `play` method, we use an infinite loop to keep playing until the game is over or the user runs out of lives.\r\n\r\nTo play the game, you can create an instance of the class and call its `play` method:\r\n\r\n```python\r\ngame = Hangman()\r\ngame.play()\r\n``` ",
    "2": "Sure! Here's an example in Python.\r\n\r\n```python\r\nimport random\r\n\r\nclass Game:\r\n    def __init__(self):\r\n        self.choices = ['rock', 'paper', 'scissors']\r\n\r\n    def get_player_choice(self):\r\n        player_choice = input(\"Enter your choice (rock, paper, scissors): \")\r\n        if player_choice in self.choices:\r\n            return player_choice\r\n        else:\r\n            print('Invalid input!')\r\n            return None\r\n    \r\n    def get_computer_choice(self):\r\n        computer_choice = random.choice(self.choices)\r\n        return computer_choice\r\n    \r\n    def determine_winner(self, player_choice, computer_choice):\r\n        if (player_choice == 'rock' and computer_choice == 'scissors') or (player_choice == 'paper' and computer_choice == 'rock') or (player_choice == 'scissors' and computer_choice == 'paper'):\r\n            return f\"Player wins! {player_choice} beats {computer_choice}\"\r\n        elif player_choice == computer_choice:\r\n            return \"It's a tie!\"\r\n        else:\r\n            return f\"Computer wins! {computer_choice} beats {player_choice}\"\r\n    \r\n    def play(self):\r\n        player_wins = 0\r\n        computer_wins = 0\r\n        while True:\r\n            player_choice = self.get_player_choice()\r\n            if not player_choice:\r\n                continue\r\n            computer_choice = self.get_computer_choice()\r\n            print(f\"Computer chose {computer_choice}\")\r\n            winner = self.determine_winner(player_choice, computer_choice)\r\n            print(winner)\r\n            if 'Player' in winner:\r\n                player_wins += 1\r\n            elif 'Computer' in winner:\r\n                computer_wins += 1\r\n            else:\r\n                continue # tie game\r\n            break\r\n        \r\n        print(f\"Final Score:\")\r\n        print(f\"Player: {player_wins}\")\r\n        print(f\"Computer: {computer_wins}\")\r\n\r\ngame = Game()\r\ngame.play()\r\n```\r\n\r\nYou can run this code in a Python environment and it will start the game. The `Game` class has three methods, `get_player_choice`, `get_computer_choice`, and `determine_winner`. The `get_player_choice` method prompts the user for input and checks if their choice is valid. The `get_computer_choice` method chooses a random choice from the available options (rock, paper or scissors). The `determine_winner` method compares the player's choice with the computer's choice and declares who won. Finally, the `play` method plays the game by asking the user to make a choice, getting the computer's choice, printing it out, determining the winner, updating the score, and breaking out of the loop if there's a winner or a tie. "
}