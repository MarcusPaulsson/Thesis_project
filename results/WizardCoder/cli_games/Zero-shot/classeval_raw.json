{
    "0": "Here is an example implementation of the Tic-Tac-Toe game in Python with a command line interface using a class to manage the game state and user input/output:\r\n\r\n```python\r\nclass TicTacToe:\r\n    def __init__(self):\r\n        self.board = [[' '] * 9 # initialize an empty board as a list of spaces\r\n        self.turn = 'X'     # set the first turn to X\r\n        \r\n    def print_board(self):\r\n        \"\"\"Prints out the current state of the board\"\"\"\r\n        for i in range(0, len(self.board), 3):\r\n            row1 = self.board[i:i+3]\r\n            row2 = ' | '.join(row1)\r\n            print('   |   |'.join([row2[j:j+3] for j in range(0, len(self.board), 3)]))\r\n    \r\n    def play_move(self, space):\r\n        \"\"\"Sets a given space to the current player's symbol and switches turns\"\"\"\r\n        if self.board[space-1] == ' ': # make sure that it is an empty space\r\n            self.board[space-1] = self.turn\r\n            self.switch_turn()\r\n    \r\n    def switch_turn(self):\r\n        \"\"\"Switches the current player's turn\"\"\"\r\n        if self.turn == 'X':\r\n            self.turn = 'O'\r\n        else:\r\n            self.turn = 'X'\r\n    \r\n    def check_win(self):\r\n        \"\"\"Checks for a winning combination on the board\"\"\"\r\n        # check rows\r\n        for i in range(0, 3):\r\n            row = set([self.board[i], self.board[i+3], self.board[i+6]])\r\n            if len(row) == 1: \r\n                return True\r\n        # check columns\r\n        for i in range(0, 9, 3):\r\n            column = set([self.board[i], self.board[(i+1)%3], self.board[(i+2)%3]])\r\n            if len(column) == 1: \r\n                return True\r\n        # check diagonals\r\n        diagonal1 = [self.board[0], self.board[4], self.board[8]]\r\n        diagonal2 = [self.board[2], self.board[4], self.board[6]]\r\n        if len(set([diagonal1[0], diagonal1[1], diagonal1[2]]) == 1 or \r\n               set([diagonal2[0], diagonal2[1], diagonal2[2]) == 1):\r\n            return True\r\n    \r\n    def check_tie(self):\r\n        \"\"\"Checks if all spaces on the board are filled\"\"\"\r\n        for space in self.board:\r\n            if space == ' ':\r\n                return False\r\n        return True\r\n    \r\n    def play(self):\r\n        \"\"\"Plays a game of Tic-Tac-Toe until there is a winner or tie\"\"\"\r\n        self.print_board() # print the initial board state\r\n        while not self.check_win() and not self.check_tie():\r\n            move = int(input('Player {}: enter space (1-9): '.format(self.turn)) - 1\r\n            self.play_move(move)\r\n            self.print_board()\r\n        if self.check_win():\r\n            print('Congratulations, Player {} wins!'.format(self.turn))\r\n        else:\r\n            print(\"It's a tie!\")\r\n```\r\n\r\nTo use this class, you would create an instance of it and call the `play` method:\r\n\r\n```python\r\ngame = TicTacToe()\r\ngame.play()\r\n```\r\n\r\nThis implementation does not include any error checking or input validation for invalid moves or user input. Add those if necessary to make a complete game. "
}