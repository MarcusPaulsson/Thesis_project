{
    "0": "```python\ndef print_board(board):\n    for row in board:\n        print(\" | \".join(row))\n        print(\"-\" * 9)\n\ndef check_winner(board):\n    # Check rows, columns and diagonals\n    for i in range(3):\n        if board[i][0] == board[i][1] == board[i][2] != \" \":\n            return board[i][0]\n        if board[0][i] == board[1][i] == board[2][i] != \" \":\n            return board[0][i]\n    \n    if board[0][0] == board[1][1] == board[2][2] != \" \":\n        return board[0][0]\n    if board[0][2] == board[1][1] == board[2][0] != \" \":\n        return board[0][2]\n    \n    return None\n\ndef is_board_full(board):\n    return all(cell != \" \" for row in board for cell in row)\n\ndef main():\n    board = [[\" \" for _ in range(3)] for _ in range(3)]\n    current_player = \"X\"\n    \n    while True:\n        print_board(board)\n        print(f\"Player {current_player}, enter your move (row and column): \")\n        \n        try:\n            row, col = map(int, input().split())\n            if board[row][col] != \" \":\n                print(\"Cell already taken! Try again.\")\n                continue\n        except (ValueError, IndexError):\n            print(\"Invalid input! Please enter row and column as two numbers (0-2).\")\n            continue\n        \n        board[row][col] = current_player\n        \n        winner = check_winner(board)\n        if winner:\n            print_board(board)\n            print(f\"Player {winner} wins!\")\n            break\n        \n        if is_board_full(board):\n            print_board(board)\n            print(\"It's a draw!\")\n            break\n        \n        current_player = \"O\" if current_player == \"X\" else \"X\"\n\nif __name__ == \"__main__\":\n    main()\n```",
    "1": "Here's a full implementation of the Hangman game with a command line interface in Python:\n\n```python\nimport random\n\ndef choose_word():\n    words = ['python', 'hangman', 'challenge', 'programming', 'interface', 'computer', 'science', 'development']\n    return random.choice(words)\n\ndef display_hangman(tries):\n    stages = [\n        \"\"\"\n           ------\n           |    |\n           |    O\n           |   /|\\\\\n           |   / \\\\\n           |\n        \"\"\",\n        \"\"\"\n           ------\n           |    |\n           |    O\n           |   /|\\\\\n           |   /\n           |\n        \"\"\",\n        \"\"\"\n           ------\n           |    |\n           |    O\n           |   /|\n           |\n           |\n        \"\"\",\n        \"\"\"\n           ------\n           |    |\n           |    O\n           |    |\n           |\n           |\n        \"\"\",\n        \"\"\"\n           ------\n           |    |\n           |    O\n           |\n           |\n           |\n        \"\"\",\n        \"\"\"\n           ------\n           |    |\n           |\n           |\n           |\n           |\n        \"\"\",\n        \"\"\"\n           ------\n           |    |\n           |\n           |\n           |\n           |\n        \"\"\"\n    ]\n    return stages[tries]\n\ndef play_hangman():\n    word = choose_word()\n    word_letters = set(word)\n    guessed_letters = set()\n    tries = 6\n\n    print(\"Welcome to Hangman!\")\n    \n    while tries > 0 and word_letters != guessed_letters:\n        print(display_hangman(tries))\n        print(\"Guessed letters: \", ' '.join(guessed_letters))\n        word_display = [letter if letter in guessed_letters else '_' for letter in word]\n        print(\"Current word: \", ' '.join(word_display))\n\n        guess = input(\"Guess a letter: \").lower()\n        \n        if len(guess) != 1 or not guess.isalpha():\n            print(\"Please enter a single alphabetic character.\")\n            continue\n        \n        if guess in guessed_letters:\n            print(\"You've already guessed that letter.\")\n            continue\n\n        guessed_letters.add(guess)\n\n        if guess not in word_letters:\n            tries -= 1\n            print(f\"Wrong guess! You have {tries} tries left.\")\n        else:\n            print(\"Good guess!\")\n\n    if word_letters == guessed_letters:\n        print(f\"Congratulations! You've guessed the word: {word}\")\n    else:\n        print(display_hangman(tries))\n        print(f\"Sorry, you lost! The word was: {word}\")\n\nif __name__ == \"__main__\":\n    play_hangman()\n```\n\nTo run the game, just copy the code into a Python environment and execute it. Enjoy playing Hangman!",
    "2": "```python\nimport random\n\ndef get_user_choice():\n    user_input = input(\"Enter your choice (rock, paper, scissors): \").strip().lower()\n    while user_input not in ['rock', 'paper', 'scissors']:\n        print(\"Invalid choice. Please choose rock, paper, or scissors.\")\n        user_input = input(\"Enter your choice (rock, paper, scissors): \").strip().lower()\n    return user_input\n\ndef get_computer_choice():\n    return random.choice(['rock', 'paper', 'scissors'])\n\ndef determine_winner(user_choice, computer_choice):\n    if user_choice == computer_choice:\n        return \"It's a tie!\"\n    elif (user_choice == 'rock' and computer_choice == 'scissors') or \\\n         (user_choice == 'paper' and computer_choice == 'rock') or \\\n         (user_choice == 'scissors' and computer_choice == 'paper'):\n        return \"You win!\"\n    else:\n        return \"Computer wins!\"\n\ndef play_game():\n    print(\"Welcome to Rock-Paper-Scissors!\")\n    while True:\n        user_choice = get_user_choice()\n        computer_choice = get_computer_choice()\n        print(f\"You chose: {user_choice}\")\n        print(f\"Computer chose: {computer_choice}\")\n        print(determine_winner(user_choice, computer_choice))\n        \n        play_again = input(\"Do you want to play again? (yes/no): \").strip().lower()\n        if play_again != 'yes':\n            print(\"Thanks for playing!\")\n            break\n\nif __name__ == \"__main__\":\n    play_game()\n```",
    "3": "Here's a simple implementation of the Snake game in Python using a command line interface. You can run this code in your terminal.\n\n```python\nimport random\nimport curses\n\n# Setup the window\nstdscr = curses.initscr()\ncurses.curs_set(0)\nsh, sw = stdscr.getmaxyx()\nw = curses.newwin(sh, sw, 0, 0)  # Create a new window\nw.keypad(1)\nw.timeout(100)  # Refresh every 100 milliseconds\n\n# Initial snake and food settings\nsnk_x = sw // 4\nsnk_y = sh // 2\nsnake = [\n    [snk_y, snk_x],\n    [snk_y, snk_x - 1],\n    [snk_y, snk_x - 2]\n]\nfood = [sh // 2, sw // 2]\nw.addch(int(food[0]), int(food[1]), curses.ACS_PI)\n\nkey = curses.KEY_RIGHT  # Initial direction\n\n# Game loop\nwhile True:\n    next_key = w.getch()\n    key = key if next_key == -1 else next_key\n\n    # Calculate new head of the snake\n    new_head = [snake[0][0], snake[0][1]]\n\n    if key == curses.KEY_DOWN:\n        new_head[0] += 1\n    if key == curses.KEY_UP:\n        new_head[0] -= 1\n    if key == curses.KEY_LEFT:\n        new_head[1] -= 1\n    if key == curses.KEY_RIGHT:\n        new_head[1] += 1\n\n    # Insert new head\n    snake.insert(0, new_head)\n\n    # Check if snake has eaten the food\n    if snake[0] == food:\n        food = None\n        while food is None:\n            nf = [\n                random.randint(1, sh - 1),\n                random.randint(1, sw - 1)\n            ]\n            food = nf if nf not in snake else None\n        w.addch(int(food[0]), int(food[1]), curses.ACS_PI)\n    else:\n        # Remove tail segment\n        tail = snake.pop()\n        w.addch(int(tail[0]), int(tail[1]), ' ')\n\n    # Check for collisions with walls or self\n    if (snake[0][0] in [0, sh] or\n        snake[0][1] in [0, sw] or\n        snake[0] in snake[1:]):\n        curses.endwin()\n        quit()\n\n    # Draw the snake\n    w.addch(int(snake[0][0]), int(snake[0][1]), curses.ACS_CKBOARD)\n```\n\nTo run the game:\n1. Make sure you have Python installed on your machine.\n2. Save the code in a file named `snake.py`.\n3. Open your terminal and navigate to the directory where the file is saved.\n4. Run the game with the command: `python snake.py`.\n\nUse the arrow keys to control the snake. Enjoy!",
    "4": "Here's a full implementation of the Minesweeper game with a command line interface in Python:\n\n```python\nimport random\n\nclass Minesweeper:\n    def __init__(self, width, height, num_mines):\n        self.width = width\n        self.height = height\n        self.num_mines = num_mines\n        self.board = [[' ' for _ in range(width)] for _ in range(height)]\n        self.visible = [[' ' for _ in range(width)] for _ in range(height)]\n        self.mines = set()\n        self.game_over = False\n        self.populate_mines()\n\n    def populate_mines(self):\n        while len(self.mines) < self.num_mines:\n            x = random.randint(0, self.width - 1)\n            y = random.randint(0, self.height - 1)\n            if (x, y) not in self.mines:\n                self.mines.add((x, y))\n                self.board[y][x] = '*'\n                self.increment_adjacent_cells(x, y)\n\n    def increment_adjacent_cells(self, x, y):\n        for i in range(max(0, y - 1), min(self.height, y + 2)):\n            for j in range(max(0, x - 1), min(self.width, x + 2)):\n                if (j, i) != (x, y) and self.board[i][j] != '*':\n                    if self.board[i][j] == ' ':\n                        self.board[i][j] = '1'\n                    else:\n                        self.board[i][j] = str(int(self.board[i][j]) + 1)\n\n    def print_board(self):\n        print(\"   \" + \" \".join(str(i) for i in range(self.width)))\n        for i in range(self.height):\n            print(f\"{i} | \" + \" \".join(self.visible[i]))\n\n    def reveal(self, x, y):\n        if self.game_over or self.visible[y][x] != ' ':\n            return\n\n        if (x, y) in self.mines:\n            self.visible[y][x] = '*'\n            self.game_over = True\n            return\n\n        self.visible[y][x] = self.board[y][x]\n\n        if self.board[y][x] == ' ':\n            for i in range(max(0, y - 1), min(self.height, y + 2)):\n                for j in range(max(0, x - 1), min(self.width, x + 2)):\n                    if (j, i) != (x, y):\n                        self.reveal(j, i)\n\n    def play(self):\n        while not self.game_over:\n            self.print_board()\n            try:\n                x, y = map(int, input(\"Enter x and y coordinates (e.g., 0 1): \").split())\n                if 0 <= x < self.width and 0 <= y < self.height:\n                    self.reveal(x, y)\n                else:\n                    print(\"Coordinates out of bounds. Try again.\")\n            except ValueError:\n                print(\"Invalid input. Please enter two integers separated by space.\")\n\n        self.print_board()\n        print(\"Game Over! You hit a mine!\")\n\n\nif __name__ == \"__main__\":\n    width = 10\n    height = 10\n    num_mines = 10\n    game = Minesweeper(width, height, num_mines)\n    game.play()\n```\n\nTo play the game, simply run the script. You can input the coordinates to reveal tiles on the Minesweeper board. Enjoy!",
    "5": "Here is a full implementation of the game Mastermind with a command line interface in Python:\n\n```python\nimport random\n\nclass Mastermind:\n    def __init__(self, code_length=4, num_colors=6):\n        self.code_length = code_length\n        self.num_colors = num_colors\n        self.secret_code = self.generate_code()\n        self.guesses = 0\n\n    def generate_code(self):\n        return [random.randint(1, self.num_colors) for _ in range(self.code_length)]\n\n    def get_feedback(self, guess):\n        correct_position = sum(1 for i in range(self.code_length) if guess[i] == self.secret_code[i])\n        correct_color = sum(min(guess.count(x), self.secret_code.count(x)) for x in set(guess)) - correct_position\n        return correct_position, correct_color\n\n    def play(self):\n        print(\"Welcome to Mastermind!\")\n        print(f\"Try to guess the {self.code_length}-color code. Colors are represented by numbers 1 to {self.num_colors}.\")\n        print(\"You have 10 attempts to guess the code.\")\n        \n        while self.guesses < 10:\n            guess = input(f\"Attempt {self.guesses + 1}: Enter your guess (e.g., 1 2 3 4): \")\n            guess = list(map(int, guess.split()))\n            \n            if len(guess) != self.code_length or any(color < 1 or color > self.num_colors for color in guess):\n                print(f\"Invalid guess. Please enter exactly {self.code_length} numbers between 1 and {self.num_colors}.\")\n                continue\n            \n            self.guesses += 1\n            correct_position, correct_color = self.get_feedback(guess)\n            print(f\"Correct position: {correct_position}, Correct color (wrong position): {correct_color}\")\n            \n            if correct_position == self.code_length:\n                print(f\"Congratulations! You've guessed the code {self.secret_code} in {self.guesses} attempts!\")\n                return\n        \n        print(f\"Sorry, you've used all attempts. The secret code was {self.secret_code}.\")\n\nif __name__ == \"__main__\":\n    game = Mastermind()\n    game.play()\n```\n\nYou can run this code in a Python environment, and it will provide you with a command line interface to play the Mastermind game.",
    "6": "Here's a full implementation of the Battleship game with a command line interface in Python:\n\n```python\nimport random\n\nclass Board:\n    def __init__(self):\n        self.size = 5\n        self.board = [['~' for _ in range(self.size)] for _ in range(self.size)]\n        self.ships = []\n\n    def place_ship(self, ship_size):\n        placed = False\n        while not placed:\n            orientation = random.choice(['H', 'V'])\n            if orientation == 'H':\n                row = random.randint(0, self.size - 1)\n                col = random.randint(0, self.size - ship_size)\n                if all(self.board[row][col + i] == '~' for i in range(ship_size)):\n                    for i in range(ship_size):\n                        self.board[row][col + i] = 'S'\n                    self.ships.append((row, col, orientation, ship_size))\n                    placed = True\n            else:\n                row = random.randint(0, self.size - ship_size)\n                col = random.randint(0, self.size - 1)\n                if all(self.board[row + i][col] == '~' for i in range(ship_size)):\n                    for i in range(ship_size):\n                        self.board[row + i][col] = 'S'\n                    self.ships.append((row, col, orientation, ship_size))\n                    placed = True\n\n    def display(self):\n        print(\"  \" + \" \".join(str(i) for i in range(self.size)))\n        for i, row in enumerate(self.board):\n            print(i, \" \".join(row))\n\n    def attack(self, row, col):\n        if self.board[row][col] == 'S':\n            self.board[row][col] = 'X'\n            return True\n        elif self.board[row][col] == '~':\n            self.board[row][col] = 'O'\n            return False\n        return None\n\n    def all_ships_sunk(self):\n        return all(self.board[i][j] != 'S' for i in range(self.size) for j in range(self.size))\n\n\nclass Game:\n    def __init__(self):\n        self.board = Board()\n        self.ships_sizes = [2, 3]\n        for size in self.ships_sizes:\n            self.board.place_ship(size)\n\n    def play(self):\n        while not self.board.all_ships_sunk():\n            self.board.display()\n            try:\n                guess = input(\"Enter your attack coordinates (row col): \")\n                row, col = map(int, guess.split())\n                if row < 0 or row >= self.board.size or col < 0 or col >= self.board.size:\n                    print(\"Coordinates out of bounds! Try again.\")\n                    continue\n                result = self.board.attack(row, col)\n                if result is True:\n                    print(\"Hit!\")\n                elif result is False:\n                    print(\"Miss!\")\n                else:\n                    print(\"Already attacked this position!\")\n            except (ValueError, IndexError):\n                print(\"Invalid input! Please enter valid coordinates.\")\n\n        print(\"Congratulations! You've sunk all the ships!\")\n\n\nif __name__ == \"__main__\":\n    game = Game()\n    game.play()\n```\n\nYou can run this code in a Python environment. The game will create a 5x5 board and randomly place ships of size 2 and 3. Players can input coordinates to attack and will receive feedback on whether they hit or miss. The game ends when all ships are sunk.",
    "7": "Here's a complete implementation of Conway's Game of Life with a command line interface in Python:\n\n```python\nimport os\nimport time\nimport random\n\nclass GameOfLife:\n    def __init__(self, width=20, height=20, live_cells=None):\n        self.width = width\n        self.height = height\n        self.board = [[0 for _ in range(width)] for _ in range(height)]\n        if live_cells:\n            for x, y in live_cells:\n                self.set_cell(x, y, 1)\n\n    def set_cell(self, x, y, state):\n        if 0 <= x < self.width and 0 <= y < self.height:\n            self.board[y][x] = state\n\n    def get_cell(self, x, y):\n        if 0 <= x < self.width and 0 <= y < self.height:\n            return self.board[y][x]\n        return 0\n\n    def count_live_neighbors(self, x, y):\n        directions = [(-1, -1), (-1, 0), (-1, 1),\n                      (0, -1),          (0, 1),\n                      (1, -1), (1, 0), (1, 1)]\n        count = 0\n        for dx, dy in directions:\n            count += self.get_cell(x + dx, y + dy)\n        return count\n\n    def update(self):\n        new_board = [[0 for _ in range(self.width)] for _ in range(self.height)]\n        for y in range(self.height):\n            for x in range(self.width):\n                live_neighbors = self.count_live_neighbors(x, y)\n                if self.get_cell(x, y) == 1:\n                    if live_neighbors in (2, 3):\n                        new_board[y][x] = 1\n                else:\n                    if live_neighbors == 3:\n                        new_board[y][x] = 1\n        self.board = new_board\n\n    def display(self):\n        os.system('cls' if os.name == 'nt' else 'clear')\n        for row in self.board:\n            print(' '.join(['#' if cell else '.' for cell in row]))\n        print(f\"Press Ctrl+C to stop.\")\n\n    def randomize(self, density=0.2):\n        for y in range(self.height):\n            for x in range(self.width):\n                self.set_cell(x, y, 1 if random.random() < density else 0)\n\ndef main():\n    width = 20\n    height = 20\n    game = GameOfLife(width, height)\n    game.randomize(density=0.3)\n\n    try:\n        while True:\n            game.display()\n            game.update()\n            time.sleep(0.5)\n    except KeyboardInterrupt:\n        print(\"Game stopped.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nTo run this code, ensure you have Python installed on your system. You can copy and paste this code into a Python file (e.g., `game_of_life.py`) and run it using the command line with `python game_of_life.py`. Use `Ctrl+C` to stop the game.",
    "8": "Here's a full implementation of the Connect Four game with a command line interface in Python:\n\n```python\nclass ConnectFour:\n    def __init__(self):\n        self.rows = 6\n        self.columns = 7\n        self.board = [[' ' for _ in range(self.columns)] for _ in range(self.rows)]\n        self.current_player = 'X'\n\n    def display_board(self):\n        print(\"\\n\".join([\"|\".join(row) for row in self.board]))\n        print(\"-\" * (self.columns * 2 - 1))\n        print(\" \".join(str(i) for i in range(self.columns)))\n\n    def drop_piece(self, column):\n        for row in reversed(self.board):\n            if row[column] == ' ':\n                row[column] = self.current_player\n                return True\n        return False\n\n    def is_winner(self):\n        # Check horizontal, vertical, and diagonal\n        for r in range(self.rows):\n            for c in range(self.columns - 3):\n                if self.board[r][c] == self.current_player and \\\n                   self.board[r][c + 1] == self.current_player and \\\n                   self.board[r][c + 2] == self.current_player and \\\n                   self.board[r][c + 3] == self.current_player:\n                    return True\n\n        for r in range(self.rows - 3):\n            for c in range(self.columns):\n                if self.board[r][c] == self.current_player and \\\n                   self.board[r + 1][c] == self.current_player and \\\n                   self.board[r + 2][c] == self.current_player and \\\n                   self.board[r + 3][c] == self.current_player:\n                    return True\n\n        for r in range(self.rows - 3):\n            for c in range(self.columns - 3):\n                if self.board[r][c] == self.current_player and \\\n                   self.board[r + 1][c + 1] == self.current_player and \\\n                   self.board[r + 2][c + 2] == self.current_player and \\\n                   self.board[r + 3][c + 3] == self.current_player:\n                    return True\n\n        for r in range(3, self.rows):\n            for c in range(self.columns - 3):\n                if self.board[r][c] == self.current_player and \\\n                   self.board[r - 1][c + 1] == self.current_player and \\\n                   self.board[r - 2][c + 2] == self.current_player and \\\n                   self.board[r - 3][c + 3] == self.current_player:\n                    return True\n\n        return False\n\n    def switch_player(self):\n        self.current_player = 'O' if self.current_player == 'X' else 'X'\n\n    def play(self):\n        while True:\n            self.display_board()\n            column = int(input(f\"Player {self.current_player}, choose a column (0-{self.columns - 1}): \"))\n            if 0 <= column < self.columns and self.drop_piece(column):\n                if self.is_winner():\n                    self.display_board()\n                    print(f\"Player {self.current_player} wins!\")\n                    break\n                self.switch_player()\n            else:\n                print(\"Invalid move. Try again.\")\n\n\nif __name__ == \"__main__\":\n    game = ConnectFour()\n    game.play()\n```\n\nYou can run this code in a Python environment to play Connect Four in the command line. Enjoy the game!",
    "9": "Sure! Below is a full implementation of the Blackjack game with a command line interface in Python.\n\n```python\nimport random\n\n# Constants\nSUITS = ['Hearts', 'Diamonds', 'Clubs', 'Spades']\nRANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']\nVALUES = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,\n          'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\n\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n\n    def __str__(self):\n        return f\"{self.rank} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, rank) for suit in SUITS for rank in RANKS]\n        random.shuffle(self.cards)\n\n    def deal_card(self):\n        return self.cards.pop()\n\nclass Hand:\n    def __init__(self):\n        self.cards = []\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def calculate_value(self):\n        value = sum(VALUES[card.rank] for card in self.cards)\n        aces = sum(1 for card in self.cards if card.rank == 'Ace')\n\n        while value > 21 and aces:\n            value -= 10\n            aces -= 1\n\n        return value\n\n    def __str__(self):\n        return ', '.join(str(card) for card in self.cards)\n\ndef main():\n    print(\"Welcome to Blackjack!\")\n    \n    while True:\n        deck = Deck()\n        player_hand = Hand()\n        dealer_hand = Hand()\n\n        # Initial dealing\n        for _ in range(2):\n            player_hand.add_card(deck.deal_card())\n            dealer_hand.add_card(deck.deal_card())\n\n        # Player's turn\n        while True:\n            print(f\"Your hand: {player_hand} (Value: {player_hand.calculate_value()})\")\n            print(f\"Dealer's hand: {dealer_hand.cards[0]}, [Hidden]\")\n\n            if player_hand.calculate_value() == 21:\n                print(\"Blackjack! You win!\")\n                break\n            elif player_hand.calculate_value() > 21:\n                print(\"Bust! You lose!\")\n                break\n\n            action = input(\"Do you want to (h)it or (s)tand? \").lower()\n            if action == 'h':\n                player_hand.add_card(deck.deal_card())\n            elif action == 's':\n                break\n\n        # Dealer's turn\n        if player_hand.calculate_value() <= 21:\n            while dealer_hand.calculate_value() < 17:\n                dealer_hand.add_card(deck.deal_card())\n\n            print(f\"Dealer's hand: {dealer_hand} (Value: {dealer_hand.calculate_value()})\")\n\n            # Determine winner\n            player_value = player_hand.calculate_value()\n            dealer_value = dealer_hand.calculate_value()\n\n            if dealer_value > 21 or player_value > dealer_value:\n                print(\"You win!\")\n            elif player_value < dealer_value:\n                print(\"You lose!\")\n            else:\n                print(\"It's a tie!\")\n\n        # Play again?\n        play_again = input(\"Do you want to play again? (y/n): \").lower()\n        if play_again != 'y':\n            break\n\nif __name__ == \"__main__\":\n    main()\n```\n\nYou can run this code in your Python environment to play a simple version of Blackjack in the command line. Enjoy!",
    "10": "Here's a simple implementation of the game Hammurabi in Python with a command line interface:\n\n```python\nimport random\n\nclass HammurabiGame:\n    def __init__(self):\n        self.year = 1\n        self.population = 100\n        self.bushels = 2800\n        self.land = 100\n        self.plague = 0\n        self.harvest_yield = 3\n        self.famine_chance = 0.15\n        self.plague_chance = 0.1\n        self.misery = 0\n\n    def play_game(self):\n        while self.year <= 10:\n            print(f\"\\nYear {self.year}\")\n            self.display_status()\n            self.take_turn()\n            self.check_game_over()\n            self.year += 1\n\n    def display_status(self):\n        print(f\"Population: {self.population}\")\n        print(f\"Bushels of grain: {self.bushels}\")\n        print(f\"Acres of land: {self.land}\")\n        print(f\"Grain per person: {self.bushels // self.population if self.population else 0}\")\n        print(f\"Misery Level: {self.misery}\")\n\n    def take_turn(self):\n        self.check_events()\n        self.ask_user()\n\n    def check_events(self):\n        if random.random() < self.plague_chance:\n            self.plague = 1\n            self.population -= self.population // 2\n            print(f\"A plague has struck! Half of your population has died.\")\n            self.misery += 1\n        else:\n            self.plague = 0\n\n        if random.random() < self.famine_chance and self.bushels < self.population:\n            print(\"There is a famine!\")\n            self.population -= (self.population - self.bushels // 20)\n            self.misery += 1\n\n    def ask_user(self):\n        while True:\n            try:\n                acres_to_buy = int(input(\"How many acres do you wish to buy? \"))\n                if acres_to_buy < 0 or acres_to_buy * 20 > self.bushels:\n                    print(\"Invalid number of acres.\")\n                    continue\n                break\n            except ValueError:\n                print(\"Please enter a valid number.\")\n\n        self.land += acres_to_buy\n        self.bushels -= acres_to_buy * 20\n\n        while True:\n            try:\n                bushels_to_feed = int(input(\"How many bushels do you wish to feed your people? \"))\n                if bushels_to_feed < 0 or bushels_to_feed > self.bushels:\n                    print(\"Invalid number of bushels.\")\n                    continue\n                break\n            except ValueError:\n                print(\"Please enter a valid number.\")\n\n        self.bushels -= bushels_to_feed\n        self.harvest_yield = self.land * 3\n        self.bushels += self.harvest_yield\n\n        self.population += bushels_to_feed // 20\n\n    def check_game_over(self):\n        if self.population <= 0:\n            print(\"Your population has died out. Game over!\")\n            exit()\n        if self.year == 10:\n            print(\"Game over! Here are your final stats:\")\n            self.display_status()\n            exit()\n\nif __name__ == \"__main__\":\n    game = HammurabiGame()\n    game.play_game()\n```\n\nTo run this code, you need to have Python installed on your machine. Save the code in a file named `hammurabi.py` and run it from the command line using:\n\n```bash\npython hammurabi.py\n``` \n\nThis will start the game, allowing you to interact with it through the command line. Enjoy playing Hammurabi!",
    "11": "```python\nimport random\n\nclass LightsOut:\n    def __init__(self, size=5):\n        self.size = size\n        self.board = [[random.choice([0, 1]) for _ in range(size)] for _ in range(size)]\n\n    def toggle(self, x, y):\n        if 0 <= x < self.size and 0 <= y < self.size:\n            self.board[x][y] ^= 1  # Toggle the light\n            # Toggle the adjacent lights\n            if x > 0: self.board[x - 1][y] ^= 1\n            if x < self.size - 1: self.board[x + 1][y] ^= 1\n            if y > 0: self.board[x][y - 1] ^= 1\n            if y < self.size - 1: self.board[x][y + 1] ^= 1\n\n    def print_board(self):\n        for row in self.board:\n            print(\" \".join(\"O\" if cell else \"X\" for cell in row))\n        print()\n\n    def is_solved(self):\n        return all(cell == 0 for row in self.board for cell in row)\n\n    def play(self):\n        print(\"Welcome to Lights Out!\")\n        while not self.is_solved():\n            self.print_board()\n            try:\n                x, y = map(int, input(\"Enter row and column to toggle (0-indexed, separated by space): \").split())\n                self.toggle(x, y)\n            except (ValueError, IndexError):\n                print(\"Invalid input, please enter valid coordinates.\")\n        print(\"Congratulations! You've turned off all the lights!\")\n\nif __name__ == \"__main__\":\n    game = LightsOut()\n    game.play()\n```\n\nThis code implements the game \"Lights Out\" with a command-line interface. The user can enter coordinates to toggle the lights, and the game will continue until all lights are turned off.",
    "12": "Here's a simple implementation of the game Pong in Python using a command line interface. This version uses the `curses` library to handle the terminal display. You can run this code in a terminal that supports `curses`.\n\n```python\nimport curses\nimport time\n\n# Constants\nWINDOW_HEIGHT = 20\nWINDOW_WIDTH = 40\nPADDLE_HEIGHT = 3\nPADDLE_WIDTH = 1\nBALL_SIZE = 1\n\n# Ball and paddle positions\nball_x = WINDOW_WIDTH // 2\nball_y = WINDOW_HEIGHT // 2\nball_dx = 1\nball_dy = 1\n\nleft_paddle_y = (WINDOW_HEIGHT // 2) - (PADDLE_HEIGHT // 2)\nright_paddle_y = (WINDOW_HEIGHT // 2) - (PADDLE_HEIGHT // 2)\n\ndef draw(window):\n    window.clear()\n    \n    # Draw paddles\n    for i in range(PADDLE_HEIGHT):\n        window.addch(left_paddle_y + i, 1, '|')\n        window.addch(right_paddle_y + i, WINDOW_WIDTH - 2, '|')\n    \n    # Draw ball\n    window.addch(ball_y, ball_x, 'O')\n    \n    window.refresh()\n\ndef update_ball():\n    global ball_x, ball_y, ball_dx, ball_dy\n\n    # Update ball position\n    ball_x += ball_dx\n    ball_y += ball_dy\n\n    # Bounce off top and bottom walls\n    if ball_y <= 0 or ball_y >= WINDOW_HEIGHT - 1:\n        ball_dy *= -1\n\n    # Bounce off paddles\n    if ball_x == 2 and left_paddle_y <= ball_y < left_paddle_y + PADDLE_HEIGHT:\n        ball_dx *= -1\n    elif ball_x == WINDOW_WIDTH - 3 and right_paddle_y <= ball_y < right_paddle_y + PADDLE_HEIGHT:\n        ball_dx *= -1\n\n    # Reset ball if it goes out of bounds\n    if ball_x <= 0 or ball_x >= WINDOW_WIDTH - 1:\n        ball_x = WINDOW_WIDTH // 2\n        ball_y = WINDOW_HEIGHT // 2\n        ball_dx *= -1\n\ndef main(stdscr):\n    global left_paddle_y, right_paddle_y\n\n    # Set up curses\n    curses.curs_set(0)\n    stdscr.nodelay(1)\n    stdscr.timeout(100)\n\n    while True:\n        draw(stdscr)\n        update_ball()\n\n        key = stdscr.getch()\n\n        # Move left paddle\n        if key == curses.KEY_UP and left_paddle_y > 0:\n            left_paddle_y -= 1\n        elif key == curses.KEY_DOWN and left_paddle_y < WINDOW_HEIGHT - PADDLE_HEIGHT:\n            left_paddle_y += 1\n\n        # Move right paddle\n        if key == ord('w') and right_paddle_y > 0:\n            right_paddle_y -= 1\n        elif key == ord('s') and right_paddle_y < WINDOW_HEIGHT - PADDLE_HEIGHT:\n            right_paddle_y += 1\n\n        time.sleep(0.01)\n\nif __name__ == \"__main__\":\n    curses.wrapper(main)\n```\n\nTo run this code, make sure you have Python installed. Save the code in a file named `pong.py` and execute it in your terminal using:\n\n```bash\npython pong.py\n```\n\nUse the UP and DOWN arrow keys to move the left paddle and the 'W' and 'S' keys to move the right paddle. Enjoy playing Pong!",
    "13": "Here's a simple implementation of Tetris using Python with a command line interface. This implementation uses the `curses` library for handling the terminal display.\n\nMake sure you have Python installed on your machine. You can run this code in your terminal.\n\n```python\nimport curses\nimport random\n\n# Define the shapes of the Tetriminos\nSHAPES = [\n    [['.....',\n      '.....',\n      '..0..',\n      '..0..',\n      '.....'],\n     ['.....',\n      '.....',\n      '..00.',\n      '.....',\n      '.....']],\n    \n    [['.....',\n      '.....',\n      '..00.',\n      '..00.',\n      '.....']],\n    \n    [['.....',\n      '.....',\n      '..0..',\n      '..00.',\n      '.....'],\n     ['.....',\n      '.....',\n      '..00.',\n      '..0..',\n      '.....']],\n    \n    [['.....',\n      '.....',\n      '.....',\n      '..00.',\n      '..0..'],\n     ['.....',\n      '.....',\n      '..0..',\n      '..00.',\n      '.....']],\n    \n    [['.....',\n      '.....',\n      '..0..',\n      '..0..',\n      '..00.'],\n     ['.....',\n      '.....',\n      '..00.',\n      '..0..',\n      '.....']],\n    \n    [['.....',\n      '.....',\n      '..00.',\n      '..0..',\n      '..0..'],\n     ['.....',\n      '.....',\n      '..0..',\n      '..00.',\n      '.....']],\n    \n    [['.....',\n      '.....',\n      '..00.',\n      '...0.',\n      '.....'],\n     ['.....',\n      '..0..',\n      '..00.',\n      '.....',\n      '.....']]\n]\n\n# Colors for the Tetriminos\nCOLORS = [curses.COLOR_WHITE, curses.COLOR_RED, curses.COLOR_GREEN, curses.COLOR_YELLOW, curses.COLOR_BLUE, curses.COLOR_MAGENTA, curses.COLOR_CYAN]\n\nclass Tetris:\n    def __init__(self, win):\n        self.win = win\n        self.board = [[0] * 10 for _ in range(20)]\n        self.current_piece = self.new_piece()\n        self.score = 0\n        self.game_over = False\n\n    def new_piece(self):\n        shape = random.choice(SHAPES)\n        return [[list(row) for row in shape], 0, 4]  # Shape, row, column\n\n    def rotate_piece(self):\n        self.current_piece[0] = self.current_piece[0][1:] + [self.current_piece[0][0]]\n\n    def can_move(self, dr, dc):\n        shape = self.current_piece[0]\n        for r, row in enumerate(shape):\n            for c, val in enumerate(row):\n                if val == '0':\n                    nr, nc = r + self.current_piece[1] + dr, c + self.current_piece[2] + dc\n                    if nr < 0 or nr >= len(self.board) or nc < 0 or nc >= len(self.board[0]) or (nr < len(self.board) and self.board[nr][nc]):\n                        return False\n        return True\n\n    def merge_piece(self):\n        shape = self.current_piece[0]\n        for r, row in enumerate(shape):\n            for c, val in enumerate(row):\n                if val == '0':\n                    self.board[r + self.current_piece[1]][c + self.current_piece[2]] = 1\n\n    def clear_lines(self):\n        new_board = [row for row in self.board if any(val == 0 for val in row)]\n        self.score += (20 - len(new_board)) * 100\n        self.board = [[0] * 10 for _ in range(20 - len(new_board))] + new_board\n\n    def drop_piece(self):\n        if self.can_move(1",
    "14": "Sure! Below is a simple implementation of the game Asteroids using Python with a command-line interface. This implementation uses basic ASCII art for representation and simple keyboard input for controls.\n\n```python\nimport random\nimport os\nimport time\nimport sys\nimport tty\nimport termios\n\n# Constants\nWIDTH = 40\nHEIGHT = 20\nASTEROID_COUNT = 5\nSHIP_SYMBOL = '^'\nASTEROID_SYMBOL = 'O'\nEMPTY_SPACE = ' '\n\nclass Game:\n    def __init__(self):\n        self.ship_position = WIDTH // 2\n        self.asteroids = self.generate_asteroids()\n        self.score = 0\n        self.game_over = False\n\n    def generate_asteroids(self):\n        return [random.randint(0, WIDTH - 1) for _ in range(ASTEROID_COUNT)]\n\n    def draw(self):\n        os.system('cls' if os.name == 'nt' else 'clear')\n        for y in range(HEIGHT):\n            if y == HEIGHT - 1:\n                row = [' '] * WIDTH\n                row[self.ship_position] = SHIP_SYMBOL\n                print(''.join(row))\n            else:\n                row = [' '] * WIDTH\n                for asteroid in self.asteroids:\n                    if asteroid == y:\n                        row[random.randint(0, WIDTH - 1)] = ASTEROID_SYMBOL\n                print(''.join(row))\n        print(f'Score: {self.score}')\n\n    def update(self):\n        for i in range(len(self.asteroids)):\n            if self.asteroids[i] < HEIGHT - 1:\n                self.asteroids[i] += 1\n            else:\n                self.asteroids[i] = 0\n                self.asteroids[i] = random.randint(0, WIDTH - 1)\n                self.score += 1\n            \n            # Check for collision\n            if self.asteroids[i] == HEIGHT - 1 and self.ship_position == self.asteroids[i]:\n                self.game_over = True\n\n    def run(self):\n        try:\n            print(\"Use 'a' to move left, 'd' to move right, 'q' to quit.\")\n            while not self.game_over:\n                self.draw()\n                self.update()\n                time.sleep(0.1)\n                self.handle_input()\n        finally:\n            print(\"Game Over! Your score was:\", self.score)\n\n    def handle_input(self):\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            if sys.stdin.read(1) == 'a':\n                self.ship_position = max(0, self.ship_position - 1)\n            elif sys.stdin.read(1) == 'd':\n                self.ship_position = min(WIDTH - 1, self.ship_position + 1)\n            elif sys.stdin.read(1) == 'q':\n                self.game_over = True\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n\nif __name__ == '__main__':\n    game = Game()\n    game.run()\n```\n\n### How to Run the Code:\n1. Make sure you have Python installed on your machine.\n2. Copy the code into a file named `asteroids.py`.\n3. Open your terminal or command prompt.\n4. Navigate to the directory where the `asteroids.py` file is located.\n5. Run the game using the command: `python asteroids.py`.\n\n### Controls:\n- Press 'a' to move left.\n- Press 'd' to move right.\n- Press 'q' to quit the game.\n\nEnjoy playing!",
    "15": "Here's a simple implementation of the Boggle game with a command line interface in Python. This implementation creates a 4x4 Boggle board, allows the player to input words, and checks if the words are valid based on a predefined dictionary.\n\n```python\nimport random\nimport string\n\nclass Boggle:\n    def __init__(self):\n        self.board = self.generate_board()\n        self.dictionary = self.load_dictionary()\n        self.found_words = set()\n\n    def generate_board(self):\n        letters = [\n            'A', 'A', 'A', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'L', 'L', 'N', 'N', 'O', 'O',\n            'O', 'O', 'R', 'R', 'S', 'S', 'T', 'T', 'U', 'U', 'W', 'Y', 'B', 'C', 'D', 'F',\n            'G', 'H', 'J', 'K', 'M', 'P', 'Q', 'V', 'X', 'Z'\n        ]\n        return [random.sample(letters, 4) for _ in range(4)]\n\n    def load_dictionary(self):\n        # Example dictionary, you can expand this with a real dictionary file or a larger set of words.\n        return {\n            'word', 'test', 'sample', 'boggle', 'game', 'play', 'code', 'python', 'hello',\n            'world', 'example', 'random', 'letter', 'grid'\n        }\n\n    def display_board(self):\n        print(\"Boggle Board:\")\n        for row in self.board:\n            print(\" \".join(row))\n        print()\n\n    def is_valid_word(self, word):\n        return word in self.dictionary\n\n    def find_words(self):\n        print(\"Enter words (type 'exit' to finish):\")\n        while True:\n            word = input(\"> \").strip().upper()\n            if word == 'EXIT':\n                break\n            if self.is_valid_word(word):\n                if word not in self.found_words:\n                    self.found_words.add(word)\n                    print(f\"Found: {word}\")\n                else:\n                    print(\"Already found this word.\")\n            else:\n                print(\"Invalid word or not in dictionary.\")\n\n    def play(self):\n        self.display_board()\n        self.find_words()\n        print(\"\\nYou found the following words:\")\n        print(\", \".join(self.found_words) if self.found_words else \"No words found.\")\n\n\nif __name__ == \"__main__\":\n    game = Boggle()\n    game.play()\n```\n\nTo run this code, make sure you have Python installed on your system. Copy the code into a file named `boggle.py` and run it using the command:\n\n```bash\npython boggle.py\n```\n\nThis will start the Boggle game in the command line interface, displaying a random 4x4 board and allowing you to input words to check against a simple dictionary. You can type \"exit\" to end the game and see the words you found. You can expand the dictionary for a more comprehensive game experience.",
    "16": "Sure! Below is a simplified implementation of a text-based Pac-Man game using Python. This version runs in the console and includes basic gameplay mechanics.\n\n```python\nimport random\nimport sys\nimport os\nimport time\n\n# Constants\nWIDTH = 10\nHEIGHT = 10\nNUM_GHOSTS = 2\nNUM_DOTS = 5\n\n# Directions\nUP = (0, -1)\nDOWN = (0, 1)\nLEFT = (-1, 0)\nRIGHT = (1, 0)\n\nclass Game:\n    def __init__(self):\n        self.pacman_pos = [0, 0]\n        self.dots = []\n        self.ghosts = []\n        self.score = 0\n        self.running = True\n        self.generate_items()\n\n    def generate_items(self):\n        # Place dots\n        while len(self.dots) < NUM_DOTS:\n            pos = [random.randint(0, WIDTH - 1), random.randint(0, HEIGHT - 1)]\n            if pos not in self.dots and pos != self.pacman_pos:\n                self.dots.append(pos)\n\n        # Place ghosts\n        while len(self.ghosts) < NUM_GHOSTS:\n            pos = [random.randint(0, WIDTH - 1), random.randint(0, HEIGHT - 1)]\n            if pos not in self.dots and pos != self.pacman_pos:\n                self.ghosts.append(pos)\n\n    def print_board(self):\n        os.system('cls' if os.name == 'nt' else 'clear')\n        for y in range(HEIGHT):\n            for x in range(WIDTH):\n                if [x, y] == self.pacman_pos:\n                    print('P', end=' ')\n                elif [x, y] in self.dots:\n                    print('.', end=' ')\n                elif [x, y] in self.ghosts:\n                    print('G', end=' ')\n                else:\n                    print(' ', end=' ')\n            print()\n        print(f'Score: {self.score}')\n\n    def move_pacman(self, direction):\n        new_pos = [self.pacman_pos[0] + direction[0], self.pacman_pos[1] + direction[1]]\n        if 0 <= new_pos[0] < WIDTH and 0 <= new_pos[1] < HEIGHT:\n            self.pacman_pos = new_pos\n            self.check_collision()\n\n    def check_collision(self):\n        if self.pacman_pos in self.dots:\n            self.dots.remove(self.pacman_pos)\n            self.score += 1\n        if self.pacman_pos in self.ghosts:\n            self.running = False\n\n    def move_ghosts(self):\n        for ghost in self.ghosts:\n            direction = random.choice([UP, DOWN, LEFT, RIGHT])\n            new_pos = [ghost[0] + direction[0], ghost[1] + direction[1]]\n            if 0 <= new_pos[0] < WIDTH and 0 <= new_pos[1] < HEIGHT and new_pos not in self.dots:\n                ghost[0], ghost[1] = new_pos\n\n    def play(self):\n        while self.running:\n            self.print_board()\n            move = input(\"Move (W/A/S/D): \").strip().upper()\n            if move == 'W':\n                self.move_pacman(UP)\n            elif move == 'S':\n                self.move_pacman(DOWN)\n            elif move == 'A':\n                self.move_pacman(LEFT)\n            elif move == 'D':\n                self.move_pacman(RIGHT)\n\n            self.move_ghosts()\n\n        print(\"Game Over! Final Score:\", self.score)\n\nif __name__ == \"__main__\":\n    game = Game()\n    game.play()\n```\n\n### Instructions:\n1. Copy the code into",
    "17": "Here's a simple implementation of a command-line version of the Dinosaur Runner game in Python. It uses basic text-based interaction to simulate the game.\n\n```python\nimport time\nimport random\n\nclass DinosaurRunner:\n    def __init__(self):\n        self.score = 0\n        self.is_running = True\n\n    def start_game(self):\n        print(\"Welcome to Dinosaur Runner!\")\n        print(\"Press 'J' to jump over obstacles!\")\n        print(\"Press 'Q' to quit the game.\")\n        \n        while self.is_running:\n            time.sleep(1)  # Simulate time between obstacles\n            obstacle_distance = random.randint(1, 5)\n            print(\"\\nAn obstacle is approaching! Distance:\", obstacle_distance)\n            \n            user_input = input(\"Your move (J to jump, Q to quit): \").strip().upper()\n            \n            if user_input == 'J':\n                if obstacle_distance <= 3:\n                    print(\"You jumped and avoided the obstacle!\")\n                    self.score += 1\n                else:\n                    print(\"You jumped too early and hit the obstacle! Game Over.\")\n                    self.is_running = False\n            elif user_input == 'Q':\n                print(\"You quit the game. Final Score:\", self.score)\n                self.is_running = False\n            else:\n                print(\"Invalid input. Please press 'J' to jump or 'Q' to quit.\")\n\n        print(\"Game Over! Your final score is:\", self.score)\n\nif __name__ == \"__main__\":\n    game = DinosaurRunner()\n    game.start_game()\n```\n\nTo run this game, you need to have Python installed on your machine. Save the code in a file named `dinosaur_runner.py`, and run it using the command:\n\n```bash\npython dinosaur_runner.py\n```\n\nYou can play the game by pressing 'J' to jump over obstacles and 'Q' to quit the game. Enjoy!"
}